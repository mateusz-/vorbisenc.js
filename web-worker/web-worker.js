// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTIt = 554304;
var __ZTIs = 554288;
var __ZTIm = 554368;
var __ZTIl = 554352;
var __ZTIi = 554320;
var __ZTIh = 554256;
var __ZTIj = 554336;
var __ZTId = 554400;
var __ZTVN10__cxxabiv117__class_type_infoE = 554072;
var __ZTIf = 554384;
var __ZTIa = 554272;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 554408;
var __ZTIc = 554240;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(555307);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([4,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,56,0,0,0,184,0,0,0,184,1,0,0,184,3,0,0,184,7,0,0,184,15,0,0,184,31,0,0,184,63,0,0,24,0,120,58,76,70,11,60,242,204,192,60,116,252,59,61,86,73,154,61,241,93,228,61,248,163,29,62,180,231,78,62,54,157,130,62,78,220,159,62,193,174,190,62,65,132,222,62,173,194,254,62,186,101,15,63,248,0,31,63,29,233,45,63,249,219,59,63,45,162,72,63,160,17,84,63,38,15,94,63,46,143,102,63,112,149,109,63,174,51,115,63,159,135,119,63,66,184,122,63,196,242,124,63,75,103,126,63,196,69,127,63,241,186,127,63,217,237,127,63,162,253,127,63,248,255,127,63,168,9,120,57,17,119,11,59,135,139,193,59,74,113,61,60,148,82,156,60,94,8,233,60,42,83,34,61,74,118,87,61,138,227,137,61,7,140,171,61,34,154,208,61,108,239,248,61,164,52,18,62,100,112,41,62,65,21,66,62,67,11,92,62,47,56,119,62,197,191,137,62,92,97,152,62,135,112,167,62,4,220,182,62,188,145,198,62,231,126,214,62,48,144,230,62,227,177,246,62,13,104,3,63,121,107,11,63,98,89,19,63,42,40,27,63,137,206,34,63,166,67,42,63,49,127,49,63,126,121,56,63,153,43,63,63,92,143,69,63,127,159,75,63,165,87,81,63,104,180,86,63,89,179,91,63,8,83,96,63,252,146,100,63,177,115,104,63,138,246,107,63,198,29,111,63,109,236,113,63,62,102,116,63,154,143,118,63,104,109,120,63,3,5,122,63,26,92,123,63,153,120,124,63,143,96,125,63,17,26,126,63,39,171,126,63,176,25,127,63,74,107,127,63,68,165,127,63,132,204,127,63,123,229,127,63,17,244,127,63,158,251,127,63,219,254,127,63,218,255,127,63,0,0,128,63,5,12,120,56,50,131,11,58,118,186,193,58,226,203,61,59,38,207,156,59,139,32,234,59,245,102,35,60,63,100,89,60,184,127,139,60,59,23,174,60,239,114,212,60,96,140,254,60,45,46,22,61,114,237,46,61,155,127,73,61,220,223,101,61,123,4,130,61,159,250,145,61,71,207,162,61,38,127,180,61,173,6,199,61,16,98,218,61,63,141,238,61,244,193,1,62,185,160,12,62,128,224,23,62,182,126,35,62,166,120,47,62,116,203,59,62,34,116,72,62,141,111,85,62,107,186,98,62,83,81,112,62,180,48,126,62,110,42,134,62,252,92,141,62,9,174,148,62,138,27,156,62,100,163,163,62,112,67,171,62,119,249,178,62,54,195,186,62,93,158,194,62,147,136,202,62,118,127,210,62,154,128,218,62,142,137,226,62,217,151,234,62,2,169,242,62,139,186,250,62,251,100,1,63,99,106,5,63,65,108,9,63,89,105,13,63,116,96,17,63,94,80,21,63,231,55,25,63,231,21,29,63,58,233,32,63,197,176,36,63,116,107,40,63,62,24,44,63,35,182,47,63,43,68,51,63,109,193,54,63,10,45,58,63,48,134,61,63,26,204,64,63,17,254,67,63,107,27,71,63,142,35,74,63,238,21,77,63,15,242,79,63,132,183,82,63,239,101,85,63,3,253,87,63,129,124,90,63,60,228,92,63,21,52,95,63,254,107,97,63,246,139,99,63,14,148,101,63,98,132,103,63,33,93,105,63,133,30,107,63,213,200,108,63,103,92,110,63,155,217,111,63,224,64,113,63,172,146,114,63,131,207,115,63,241,247,116,63,139,12,118,63,239,13,119,63,193,252,119,63,172,217,120,63,99,165,121,63,155,96,122,63,15,12,123,63,124,168,123,63,163,54,124,63,71,183,124,63,41,43,125,63,13,147,125,63,183,239,125,63,229,65,126,63,89,138,126,63,205,201,126,63,251,0,127,63,150,48,127,63,78,89,127,63,205,123,127,63,182,152,127,63,167,176,127,63,53,196,127,63,239,211,127,63,91,224,127,63,245,233,127,63,51,241,127,63,127,246,127,63,59,250,127,63,190,252,127,63,84,254,127,63,64,255,127,63,186,255,127,63,238,255,127,63,254,255,127,63,0,0,128,63,169,12,120,55,54,134,11,57,38,198,193,57,94,226,61,58,234,237,156,58,85,101,234,58,56,170,35,59,207,219,89,59,169,226,139,59,42,178,174,59,13,91,213,59,204,219,255,59,91,25,23,60,250,46,48,60,194,45,75,60,156,20,104,60,46,113,131,60,225,202,147,60,185,22,165,60,1,84,183,60,245,129,202,60,198,159,222,60,155,172,243,60,199,211,4,61,213,71,16,61,250,49,28,61,174,145,40,61,101,102,53,61,141,175,66,61,140,108,80,61,193,156,94,61,133,63,109,61,41,84,124,61,252,236,133,61,26,232,141,61,13,27,150,61,110,133,158,61,212,38,167,61,210,254,175,61,245,12,185,61,200,80,194,61,209,201,203,61,146,119,213,61,139,89,223,61,51,111,233,61,2,184,243,61,105,51,254,61,106,112,4,62,214,223,9,62,171,103,15,62,153,7,21,62,77,191,26,62,116,142,32,62,181,116,38,62,184,113,44,62,34,133,50,62,149,174,56,62,178,237,62,62,21,66,69,62,92,171,75,62,30,41,82,62,243,186,88,62,112,96,95,62,40,25,102,62,170,228,108,62,132,194,115,62,68,178,122,62,185,217,128,62,203,98,132,62,26,244,135,62,105,141,139,62,120,46,143,62,6,215,146,62,211,134,150,62,156,61,154,62,29,251,157,62,19,191,161,62,57,137,165,62,71,89,169,62,249,46,173,62,5,10,177,62,36,234,180,62,13,207,184,62,117,184,188,62,18,166,192,62,153,151,196,62,190,140,200,62,52,133,204,62,175,128,208,62,225,126,212,62,125,127,216,62,52,130,220,62,184,134,224,62,185,140,228,62,233,147,232,62,248,155,236,62,150,164,240,62,117,173,244,62,67,182,248,62,178,190,252,62,57,99,0,63,153,102,2,63,82,105,4,63,60,107,6,63,48,108,8,63,6,108,10,63,151,106,12,63,188,103,14,63,78,99,16,63,39,93,18,63,33,85,20,63,21,75,22,63,222,62,24,63,87,48,26,63,92,31,28,63,199,11,30,63,117,245,31,63,66,220,33,63,12,192,35,63,176,160,37,63,12,126,39,63,254,87,41,63,104,46,43,63,39,1,45,63,29,208,46,63,43,155,48,63,51,98,50,63,23,37,52,63,188,227,53,63,4,158,55,63,214,83,57,63,23,5,59,63,173,177,60,63,128,89,62,63,120,252,63,63,126,154,65,63,124,51,67,63,93,199,68,63,12,86,70,63,119,223,71,63,138,99,73,63,54,226,74,63,104,91,76,63,17,207,77,63,35,61,79,63,145,165,80,63,76,8,82,63,75,101,83,63,130,188,84,63,231,13,86,63,114,89,87,63,26,159,88,63,218,222,89,63,172,24,91,63,138,76,92,63,113,122,93,63,93,162,94,63,78,196,95,63,67,224,96,63,58,246,97,63,54,6,99,63,56,16,100,63,67,20,101,63,92,18,102,63,133,10,103,63,198,252,103,63,37,233,104,63,168,207,105,63,89,176,106,63,64,139,107,63,102,96,108,63,216,47,109,63,159,249,109,63,201,189,110,63,97,124,111,63,118,53,112,63,23,233,112,63,81,151,113,63,53,64,114,63,212,227,114,63,61,130,115,63,131,27,116,63,184,175,116,63,238,62,117,63,56,201,117,63,171,78,118,63,90,207,118,63,90,75,119,63,192,194,119,63,162,53,120,63,21,164,120,63,48,14,121,63,8,116,121,63,182,213,121,63,79,51,122,63,235,140,122,63,162,226,122,63,139,52,123,63,191,130,123,63,85,205,123,63,102,20,124,63,9,88,124,63,88,152,124,63,106,213,124,63,88,15,125,63,58,70,125,63,41,122,125,63,62,171,125,63,143,217,125,63,54,5,126,63,75,46,126,63,228,84,126,63,27,121,126,63,7,155,126,63,190,186,126,63,88,216,126,63,236,243,126,63,144,13,127,63,91,37,127,63,99,59,127,63,188,79,127,63,125,98,127,63,185,115,127,63,135,131,127,63,249,145,127,63,36,159,127,63,26,171,127,63,238,181,127,63,179,191,127,63,122,200,127,63,85,208,127,63,84,215,127,63,136,221,127,63,0,227,127,63,204,231,127,63,249,235,127,63,150,239,127,63,177,242,127,63,85,245,127,63,144,247,127,63,109,249,127,63,246,250,127,63,54,252,127,63,55,253,127,63,1,254,127,63,156,254,127,63,18,255,127,63,103,255,127,63,163,255,127,63,204,255,127,63,229,255,127,63,244,255,127,63,252,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,60,12,120,54,253,134,11,56,19,201,193,56,248,231,61,57,148,245,156,57,115,118,234,57,238,186,35,58,113,249,89,58,32,251,139,58,96,216,174,58,34,148,213,58,3,23,0,59,209,82,23,59,65,125,48,59,21,150,75,59,8,157,104,59,233,200,131,59,20,58,148,59,218,161,165,59,16,0,184,59,136,84,203,59,16,159,223,59,118,223,244,59,194,138,5,60,128,32,17,60,217,48,29,60,172,187,41,60,219,192,54,60,67,64,68,60,194,57,82,60,52,173,96,60,115,154,111,60,88,1,127,60,222,112,135,60,186,157,143,60,42,7,152,60,25,173,160,60,112,143,169,60,23,174,178,60,246,8,188,60,243,159,197,60,245,114,207,60,225,129,217,60,156,204,227,60,10,83,238,60,14,21,249,60,70,9,2,61,177,165,7,61,187,95,13,61,81,55,19,61,102,44,25,61,230,62,31,61,195,110,37,61,233,187,43,61,71,38,50,61,202,173,56,61,97,82,63,61,247,19,70,61,121,242,76,61,210,237,83,61,240,5,91,61,187,58,98,61,32,140,105,61,8,250,112,61,93,132,120,61,132,21,128,61,249,246,131,61,130,230,135,61,19,228,139,61,159,239,143,61,26,9,148,61,119,48,152,61,169,101,156,61,163,168,160,61,88,249,164,61,186,87,169,61,186,195,173,61,76,61,178,61,95,196,182,61,230,88,187,61,209,250,191,61,18,170,196,61,152,102,201,61,85,48,206,61,56,7,211,61,48,235,215,61,47,220,220,61,34,218,225,61,248,228,230,61,161,252,235,61,11,33,241,61,35,82,246,61,217,143,251,61,13,109,0,62,105,24,3,62,247,201,5,62,174,129,8,62,133,63,11,62,113,3,14,62,104,205,16,62,96,157,19,62,79,115,22,62,42,79,25,62,232,48,28,62,124,24,31,62,221,5,34,62,255,248,36,62,215,241,39,62,90,240,42,62,125,244,45,62,51,254,48,62,114,13,52,62,45,34,55,62,88,60,58,62,232,91,61,62,208,128,64,62,3,171,67,62,118,218,70,62,26,15,74,62,229,72,77,62,199,135,80,62,181,203,83,62,162,20,87,62,127,98,90,62,63,181,93,62,213,12,97,62,50,105,100,62,73,202,103,62,12,48,107,62,108,154,110,62,92,9,114,62,203,124,117,62,173,244,120,62,241,112,124,62,138,241,127,62,52,187,129,62,190,127,131,62,91,70,133,62,4,15,135,62,176,217,136,62,89,166,138,62,245,116,140,62,126,69,142,62,234,23,144,62,50,236,145,62,78,194,147,62,54,154,149,62,224,115,151,62,70,79,153,62,93,44,155,62,31,11,157,62,130,235,158,62,127,205,160,62,11,177,162,62,31,150,164,62,177,124,166,62,186,100,168,62,47,78,170,62,9,57,172,62,62,37,174,62,198,18,176,62,150,1,178,62,167,241,179,62,238,226,181,62,100,213,183,62,254,200,185,62,179,189,187,62,122,179,189,62,74,170,191,62,25,162,193,62,221,154,195,62,142,148,197,62,34,143,199,62,142,138,201,62,203,134,203,62,205,131,205,62,140,129,207,62,253,127,209,62,24,127,211,62,210,126,213,62,33,127,215,62,252,127,217,62,88,129,219,62,45,131,221,62,112,133,223,62,23,136,225,62,25,139,227,62,108,142,229,62,5,146,231,62,219,149,233,62,228,153,235,62,21,158,237,62,102,162,239,62,203,166,241,62,59,171,243,62,173,175,245,62,21,180,247,62,107,184,249,62,164,188,251,62,181,192,253,62,150,196,255,62,30,228,0,63,207,229,1,63,88,231,2,63,182,232,3,63,226,233,4,63,215,234,5,63,146,235,6,63,12,236,7,63,66,236,8,63,45,236,9,63,202,235,10,63,19,235,11,63,4,234,12,63,151,232,13,63,200,230,14,63,145,228,15,63,239,225,16,63,220,222,17,63,84,219,18,63,81,215,19,63,208,210,20,63,202,205,21,63,61,200,22,63,34,194,23,63,117,187,24,63,50,180,25,63,85,172,26,63,215,163,27,63,182,154,28,63,236,144,29,63,117,134,30,63,77,123,31,63,110,111,32,63,214,98,33,63,126,85,34,63,100,71,35,63,130,56,36,63,212,40,37,63,87,24,38,63,5,7,39,63,219,244,39,63,213,225,40,63,239,205,41,63,36,185,42,63,113,163,43,63,209,140,44,63,64,117,45,63,188,92,46,63,63,67,47,63,199,40,48,63,78,13,49,63,211,240,49,63,80,211,50,63,195,180,51,63,39,149,52,63,122,116,53,63,184,82,54,63,220,47,55,63,229,11,56,63,206,230,56,63,149,192,57,63,54,153,58,63,174,112,59,63,249,70,60,63,21,28,61,63,255,239,61,63,179,194,62,63,48,148,63,63,113,100,64,63,116,51,65,63,55,1,66,63,182,205,66,63,239,152,67,63,224,98,68,63,134,43,69,63,222,242,69,63,230,184,70,63,156,125,71,63,253,64,72,63,7,3,73,63,184,195,73,63,14,131,74,63,6,65,75,63,159,253,75,63,215,184,76,63,172,114,77,63,28,43,78,63,38,226,78,63,199,151,79,63,253,75,80,63,201,254,80,63,39,176,81,63,22,96,82,63,150,14,83,63,164,187,83,63,63,103,84,63,103,17,85,63,26,186,85,63,86,97,86,63,28,7,87,63,105,171,87,63,62,78,88,63,152,239,88,63,120,143,89,63,221,45,90,63,198,202,90,63,50,102,91,63,33,0,92,63,147,152,92,63,134,47,93,63,251,196,93,63,242,88,94,63,105,235,94,63,98,124,95,63,219,11,96,63,213,153,96,63,80,38,97,63,76,177,97,63,201,58,98,63,199,194,98,63,70,73,99,63,71,206,99,63,202,81,100,63,208,211,100,63,88,84,101,63,100,211,101,63,244,80,102,63,9,205,102,63,163,71,103,63,195,192,103,63,107,56,104,63,154,174,104,63,82,35,105,63,147,150,105,63,96,8,106,63,184,120,106,63,157,231,106,63,16,85,107,63,19,193,107,63,166,43,108,63,203,148,108,63,132,252,108,63,209,98,109,63,180,199,109,63,48,43,110,63,68,141,110,63,244,237,110,63,64,77,111,63,42,171,111,63,181,7,112,63,225,98,112,63,177,188,112,63,38,21,113,63,67,108,113,63,10,194,113,63,123,22,114,63,155,105,114,63,106,187,114,63,234,11,115,63,31,91,115,63,9,169,115,63,172,245,115,63,9,65,116,63,35,139,116,63,252,211,116,63,151,27,117,63,245,97,117,63,26,167,117,63,8,235,117,63,193,45,118,63,72,111,118,63,159,175,118,63,202,238,118,63,201,44,119,63,161,105,119,63,84,165,119,63,228,223,119,63,85,25,120,63,168,81,120,63,226,136,120,63,3,191,120,63,16,244,120,63,11,40,121,63,247,90,121,63,215,140,121,63,173,189,121,63,125,237,121,63,73,28,122,63,20,74,122,63,226,118,122,63,181,162,122,63,144,205,122,63,118,247,122,63,107,32,123,63,112,72,123,63,138,111,123,63,186,149,123,63,5,187,123,63,109,223,123,63,245,2,124,63,160,37,124,63,113,71,124,63,108,104,124,63,147,136,124,63,233,167,124,63,114,198,124,63,48,228,124,63,38,1,125,63,89,29,125,63,201,56,125,63,124,83,125,63,115,109,125,63,178,134,125,63,60,159,125,63,19,183,125,63,60,206,125,63,184,228,125,63,139,250,125,63,184,15,126,63,66,36,126,63,44,56,126,63,120,75,126,63,43,94,126,63,70,112,126,63,204,129,126,63,194,146,126,63,41,163,126,63,4,179,126,63,86,194,126,63,35,209,126,63,109,223,126,63,55,237,126,63,131,250,126,63,85,7,127,63,175,19,127,63,148,31,127,63,7,43,127,63,10,54,127,63,160,64,127,63,205,74,127,63,146,84,127,63,242,93,127,63,239,102,127,63,141,111,127,63,206,119,127,63,181,127,127,63,67,135,127,63,124,142,127,63,98,149,127,63,247,155,127,63,61,162,127,63,56,168,127,63,233,173,127,63,83,179,127,63,120,184,127,63,90,189,127,63,252,193,127,63,95,198,127,63,134,202,127,63,116,206,127,63,41,210,127,63,168,213,127,63,244,216,127,63,13,220,127,63,247,222,127,63,179,225,127,63,67,228,127,63,168,230,127,63,229,232,127,63,252,234,127,63,237,236,127,63,188,238,127,63,105,240,127,63,246,241,127,63,101,243,127,63,183,244,127,63,238,245,127,63,11,247,127,63,16,248,127,63,254,248,127,63,214,249,127,63,155,250,127,63,76,251,127,63,236,251,127,63,124,252,127,63,252,252,127,63,110,253,127,63,211,253,127,63,44,254,127,63,121,254,127,63,189,254,127,63,247,254,127,63,42,255,127,63,84,255,127,63,120,255,127,63,150,255,127,63,175,255,127,63,195,255,127,63,211,255,127,63,224,255,127,63,234,255,127,63,241,255,127,63,246,255,127,63,250,255,127,63,253,255,127,63,254,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,171,15,120,53,24,135,11,55,225,201,193,55,107,233,61,56,128,247,156,56,187,122,234,56,24,191,35,57,213,0,90,57,56,1,140,57,229,225,174,57,88,162,213,57,60,33,0,58,24,97,23,58,175,144,48,58,243,175,75,58,212,190,104,58,159,222,131,58,143,85,148,58,48,196,165,58,119,42,184,58,90,136,203,58,204,221,223,58,191,42,245,58,148,183,5,59,124,85,17,59,16,111,29,59,73,4,42,59,31,21,55,59,138,161,68,59,129,169,82,59,252,44,97,59,241,43,112,59,88,166,127,59,19,206,135,59,169,6,144,59,233,124,152,59,204,48,161,59,79,34,170,59,106,81,179,59,26,190,188,59,86,104,198,59,26,80,208,59,95,117,218,59,31,216,228,59,83,120,239,59,244,85,250,59,126,184,2,60,177,100,8,60,145,47,14,60,25,25,20,60,70,33,26,60,19,72,32,60,126,141,38,60,129,241,44,60,25,116,51,60,65,21,58,60,246,212,64,60,50,179,71,60,243,175,78,60,50,203,85,60,235,4,93,60,26,93,100,60,186,211,107,60,198,104,115,60,58,28,123,60,7,119,129,60,33,111,133,60,102,118,137,60,212,140,141,60,105,178,145,60,33,231,149,60,251,42,154,60,243,125,158,60,6,224,162,60,50,81,167,60,115,209,171,60,199,96,176,60,43,255,180,60,154,172,185,60,19,105,190,60,146,52,195,60,20,15,200,60,149,248,204,60,19,241,209,60,137,248,214,60,245,14,220,60,83,52,225,60,160,104,230,60,215,171,235,60,246,253,240,60,249,94,246,60,220,206,251,60,205,166,0,61,153,109,3,61,207,59,6,61,109,17,9,61,114,238,11,61,220,210,14,61,167,190,17,61,211,177,20,61,94,172,23,61,68,174,26,61,133,183,29,61,30,200,32,61,12,224,35,61,78,255,38,61,225,37,42,61,196,83,45,61,243,136,48,61,109,197,51,61,47,9,55,61,55,84,58,61,130,166,61,61,15,0,65,61,218,96,68,61,226,200,71,61,35,56,75,61,156,174,78,61,73,44,82,61,40,177,85,61,55,61,89,61,115,208,92,61,217,106,96,61,103,12,100,61,25,181,103,61,238,100,107,61,227,27,111,61,244,217,114,61,30,159,118,61,96,107,122,61,182,62,126,61,143,12,129,61,73,253,130,61,138,241,132,61,79,233,134,61,150,228,136,61,94,227,138,61,167,229,140,61,109,235,142,61,175,244,144,61,109,1,147,61,164,17,149,61,83,37,151,61,120,60,153,61,17,87,155,61,30,117,157,61,155,150,159,61,136,187,161,61,226,227,163,61,169,15,166,61,218,62,168,61,116,113,170,61,116,167,172,61,218,224,174,61,162,29,177,61,205,93,179,61,87,161,181,61,62,232,183,61,130,50,186,61,32,128,188,61,22,209,190,61,98,37,193,61,2,125,195,61,245,215,197,61,57,54,200,61,203,151,202,61,169,252,204,61,211,100,207,61,68,208,209,61,252,62,212,61,249,176,214,61,56,38,217,61,184,158,219,61,117,26,222,61,111,153,224,61,163,27,227,61,14,161,229,61,175,41,232,61,132,181,234,61,138,68,237,61,191,214,239,61,33,108,242,61,174,4,245,61,99,160,247,61,62,63,250,61,61,225,252,61,93,134,255,61,78,23,1,62,252,108,2,62,56,196,3,62,255,28,5,62,81,119,6,62,45,211,7,62,145,48,9,62,125,143,10,62,238,239,11,62,228,81,13,62,94,181,14,62,89,26,16,62,214,128,17,62,210,232,18,62,77,82,20,62,69,189,21,62,184,41,23,62,166,151,24,62,13,7,26,62,236,119,27,62,65,234,28,62,11,94,30,62,73,211,31,62,250,73,33,62,28,194,34,62,173,59,36,62,172,182,37,62,24,51,39,62,240,176,40,62,50,48,42,62,220,176,43,62,238,50,45,62,101,182,46,62,64,59,48,62,126,193,49,62,30,73,51,62,29,210,52,62,123,92,54,62,54,232,55,62,76,117,57,62,187,3,59,62,131,147,60,62,162,36,62,62,22,183,63,62,222,74,65,62,248,223,66,62,98,118,68,62,28,14,70,62,35,167,71,62,117,65,73,62,18,221,74,62,247,121,76,62,35,24,78,62,149,183,79,62,74,88,81,62,66,250,82,62,121,157,84,62,240,65,86,62,163,231,87,62,146,142,89,62,186,54,91,62,26,224,92,62,177,138,94,62,124,54,96,62,122,227,97,62,169,145,99,62,7,65,101,62,147,241,102,62,75,163,104,62,44,86,106,62,54,10,108,62,102,191,109,62,187,117,111,62,51,45,113,62,204,229,114,62,132,159,116,62,90,90,118,62,75,22,120,62,85,211,121,62,120,145,123,62,176,80,125,62,253,16,127,62,46,105,128,62,101,74,129,62,36,44,130,62,105,14,131,62,52,241,131,62,130,212,132,62,84,184,133,62,169,156,134,62,127,129,135,62,213,102,136,62,171,76,137,62,255,50,138,62,209,25,139,62,32,1,140,62,233,232,140,62,46,209,141,62,236,185,142,62,34,163,143,62,208,140,144,62,244,118,145,62,142,97,146,62,156,76,147,62,29,56,148,62,17,36,149,62,118,16,150,62,76,253,150,62,144,234,151,62,67,216,152,62,99,198,153,62,239,180,154,62,230,163,155,62,71,147,156,62,17,131,157,62,67,115,158,62,219,99,159,62,218,84,160,62,60,70,161,62,3,56,162,62,43,42,163,62,181,28,164,62,160,15,165,62,233,2,166,62,145,246,166,62,149,234,167,62,245,222,168,62,176,211,169,62,197,200,170,62,50,190,171,62,246,179,172,62,17,170,173,62,129,160,174,62,69,151,175,62,91,142,176,62,196,133,177,62,125,125,178,62,133,117,179,62,220,109,180,62,128,102,181,62,112,95,182,62,171,88,183,62,47,82,184,62,252,75,185,62,17,70,186,62,108,64,187,62,11,59,188,62,239,53,189,62,22,49,190,62,126,44,191,62,38,40,192,62,13,36,193,62,51,32,194,62,150,28,195,62,52,25,196,62,12,22,197,62,30,19,198,62,104,16,199,62,233,13,200,62,159,11,201,62,138,9,202,62,169,7,203,62,249,5,204,62,123,4,205,62,44,3,206,62,11,2,207,62,24,1,208,62,81,0,209,62,181,255,209,62,66,255,210,62,248,254,211,62,213,254,212,62,216,254,213,62,255,254,214,62,75,255,215,62,184,255,216,62,71,0,218,62,245,0,219,62,195,1,220,62,173,2,221,62,180,3,222,62,214,4,223,62,17,6,224,62,101,7,225,62,208,8,226,62,81,10,227,62,231,11,228,62,144,13,229,62,76,15,230,62,25,17,231,62,245,18,232,62,224,20,233,62,217,22,234,62,221,24,235,62,236,26,236,62,5,29,237,62,39,31,238,62,79,33,239,62,125,35,240,62,176,37,241,62,230,39,242,62,31,42,243,62,88,44,244,62,145,46,245,62,200,48,246,62,253,50,247,62,45,53,248,62,88,55,249,62,124,57,250,62,153,59,251,62,172,61,252,62,181,63,253,62,179,65,254,62,163,67,255,62,195,34,0,63,173,163,0,63,142,36,1,63,102,165,1,63,53,38,2,63,250,166,2,63,180,39,3,63,99,168,3,63,5,41,4,63,155,169,4,63,36,42,5,63,159,170,5,63,12,43,6,63,105,171,6,63,183,43,7,63,244,171,7,63,32,44,8,63,59,172,8,63,68,44,9,63,58,172,9,63,28,44,10,63,235,171,10,63,164,43,11,63,73,171,11,63,216,42,12,63,80,170,12,63,177,41,13,63,251,168,13,63,44,40,14,63,69,167,14,63,68,38,15,63,41,165,15,63,243,35,16,63,162,162,16,63,53,33,17,63,172,159,17,63,5,30,18,63,65,156,18,63,95,26,19,63,94,152,19,63,61,22,20,63,252,147,20,63,155,17,21,63,24,143,21,63,116,12,22,63,173,137,22,63,195,6,23,63,182,131,23,63,133,0,24,63,46,125,24,63,179,249,24,63,18,118,25,63,74,242,25,63,91,110,26,63,69,234,26,63,6,102,27,63,159,225,27,63,14,93,28,63,84,216,28,63,111,83,29,63,95,206,29,63,36,73,30,63,188,195,30,63,40,62,31,63,102,184,31,63,119,50,32,63,90,172,32,63,14,38,33,63,146,159,33,63,230,24,34,63,10,146,34,63,253,10,35,63,190,131,35,63,77,252,35,63,169,116,36,63,211,236,36,63,200,100,37,63,138,220,37,63,22,84,38,63,110,203,38,63,143,66,39,63,122,185,39,63,47,48,40,63,172,166,40,63,241,28,41,63,254,146,41,63,210,8,42,63,108,126,42,63,205,243,42,63,243,104,43,63,223,221,43,63,143,82,44,63,3,199,44,63,59,59,45,63,54,175,45,63,244,34,46,63,116,150,46,63,182,9,47,63,185,124,47,63,125,239,47,63,1,98,48,63,69,212,48,63,72,70,49,63,10,184,49,63,139,41,50,63,202,154,50,63,198,11,51,63,127,124,51,63,246,236,51,63,40,93,52,63,22,205,52,63,191,60,53,63,36,172,53,63,66,27,54,63,27,138,54,63,174,248,54,63,249,102,55,63,254,212,55,63,187,66,56,63,47,176,56,63,91,29,57,63,63,138,57,63,217,246,57,63,41,99,58,63,48,207,58,63,236,58,59,63,93,166,59,63,130,17,60,63,93,124,60,63,235,230,60,63,44,81,61,63,33,187,61,63,201,36,62,63,35,142,62,63,48,247,62,63,238,95,63,63,94,200,63,63,126,48,64,63,80,152,64,63,209,255,64,63,3,103,65,63,228,205,65,63,117,52,66,63,181,154,66,63,163,0,67,63,64,102,67,63,139,203,67,63,131,48,68,63,41,149,68,63,124,249,68,63,123,93,69,63,39,193,69,63,127,36,70,63,132,135,70,63,51,234,70,63,142,76,71,63,148,174,71,63,68,16,72,63,159,113,72,63,164,210,72,63,83,51,73,63,172,147,73,63,174,243,73,63,89,83,74,63,173,178,74,63,169,17,75,63,77,112,75,63,154,206,75,63,143,44,76,63,43,138,76,63,110,231,76,63,89,68,77,63,234,160,77,63,34,253,77,63,0,89,78,63,133,180,78,63,176,15,79,63,128,106,79,63,246,196,79,63,18,31,80,63,210,120,80,63,56,210,80,63,66,43,81,63,242,131,81,63,69,220,81,63,61,52,82,63,217,139,82,63,24,227,82,63,252,57,83,63,131,144,83,63,174,230,83,63,123,60,84,63,236,145,84,63,0,231,84,63,183,59,85,63,16,144,85,63,12,228,85,63,170,55,86,63,235,138,86,63,206,221,86,63,83,48,87,63,121,130,87,63,66,212,87,63,172,37,88,63,184,118,88,63,101,199,88,63,180,23,89,63,164,103,89,63,53,183,89,63,104,6,90,63,59,85,90,63,175,163,90,63,197,241,90,63,123,63,91,63,210,140,91,63,201,217,91,63,97,38,92,63,154,114,92,63,115,190,92,63,237,9,93,63,7,85,93,63,194,159,93,63,29,234,93,63,24,52,94,63,179,125,94,63,239,198,94,63,203,15,95,63,72,88,95,63,100,160,95,63,33,232,95,63,126,47,96,63,123,118,96,63,24,189,96,63,85,3,97,63,51,73,97,63,177,142,97,63,207,211,97,63,141,24,98,63,236,92,98,63,235,160,98,63,138,228,98,63,202,39,99,63,170,106,99,63,42,173,99,63,75,239,99,63,13,49,100,63,111,114,100,63,114,179,100,63,21,244,100,63,90,52,101,63,63,116,101,63,197,179,101,63,236,242,101,63,180,49,102,63,29,112,102,63,39,174,102,63,211,235,102,63,32,41,103,63,15,102,103,63,159,162,103,63,209,222,103,63,164,26,104,63,26,86,104,63,49,145,104,63,235,203,104,63,71,6,105,63,69,64,105,63,230,121,105,63,42,179,105,63,16,236,105,63,153,36,106,63,197,92,106,63,148,148,106,63,7,204,106,63,29,3,107,63,214,57,107,63,52,112,107,63,53,166,107,63,218,219,107,63,36,17,108,63,18,70,108,63,164,122,108,63,220,174,108,63,184,226,108,63,57,22,109,63,96,73,109,63,44,124,109,63,157,174,109,63,181,224,109,63,115,18,110,63,214,67,110,63,225,116,110,63,146,165,110,63,233,213,110,63,232,5,111,63,142,53,111,63,219,100,111,63,209,147,111,63,110,194,111,63,179,240,111,63,160,30,112,63,54,76,112,63,117,121,112,63,93,166,112,63,239,210,112,63,41,255,112,63,14,43,113,63,156,86,113,63,213,129,113,63,184,172,113,63,70,215,113,63,127,1,114,63,99,43,114,63,243,84,114,63,46,126,114,63,21,167,114,63,169,207,114,63,233,247,114,63,214,31,115,63,113,71,115,63,184,110,115,63,173,149,115,63,80,188,115,63,162,226,115,63,161,8,116,63,80,46,116,63,174,83,116,63,187,120,116,63,119,157,116,63,228,193,116,63,1,230,116,63,206,9,117,63,76,45,117,63,123,80,117,63,92,115,117,63,238,149,117,63,51,184,117,63,42,218,117,63,211,251,117,63,48,29,118,63,64,62,118,63,3,95,118,63,122,127,118,63,166,159,118,63,134,191,118,63,27,223,118,63,101,254,118,63,101,29,119,63,27,60,119,63,135,90,119,63,169,120,119,63,131,150,119,63,19,180,119,63,91,209,119,63,91,238,119,63,20,11,120,63,132,39,120,63,174,67,120,63,145,95,120,63,46,123,120,63,132,150,120,63,149,177,120,63,96,204,120,63,231,230,120,63,41,1,121,63,38,27,121,63,223,52,121,63,85,78,121,63,136,103,121,63,120,128,121,63,37,153,121,63,144,177,121,63,185,201,121,63,161,225,121,63,72,249,121,63,174,16,122,63,212,39,122,63,185,62,122,63,96,85,122,63,198,107,122,63,238,129,122,63,216,151,122,63,131,173,122,63,241,194,122,63,33,216,122,63,20,237,122,63,202,1,123,63,68,22,123,63,130,42,123,63,133,62,123,63,77,82,123,63,217,101,123,63,43,121,123,63,68,140,123,63,34,159,123,63,200,177,123,63,52,196,123,63,104,214,123,63,99,232,123,63,39,250,123,63,180,11,124,63,9,29,124,63,40,46,124,63,17,63,124,63,196,79,124,63,65,96,124,63,137,112,124,63,156,128,124,63,124,144,124,63,39,160,124,63,158,175,124,63,226,190,124,63,244,205,124,63,211,220,124,63,128,235,124,63,251,249,124,63,69,8,125,63,94,22,125,63,71,36,125,63,255,49,125,63,136,63,125,63,225,76,125,63,11,90,125,63,7,103,125,63,212,115,125,63,115,128,125,63,229,140,125,63,42,153,125,63,66,165,125,63,46,177,125,63,238,188,125,63,130,200,125,63,235,211,125,63,41,223,125,63,61,234,125,63,38,245,125,63,230,255,125,63,124,10,126,63,234,20,126,63,47,31,126,63,75,41,126,63,64,51,126,63,13,61,126,63,180,70,126,63,51,80,126,63,140,89,126,63,191,98,126,63,205,107,126,63,181,116,126,63,120,125,126,63,23,134,126,63,146,142,126,63,233,150,126,63,28,159,126,63,44,167,126,63,26,175,126,63,229,182,126,63,142,190,126,63,22,198,126,63,124,205,126,63,194,212,126,63,231,219,126,63,235,226,126,63,208,233,126,63,149,240,126,63,59,247,126,63,195,253,126,63,44,4,127,63,118,10,127,63,163,16,127,63,179,22,127,63,165,28,127,63,123,34,127,63,52,40,127,63,210,45,127,63,83,51,127,63,186,56,127,63,5,62,127,63,53,67,127,63,75,72,127,63,72,77,127,63,42,82,127,63,243,86,127,63,163,91,127,63,58,96,127,63,185,100,127,63,32,105,127,63,111,109,127,63,166,113,127,63,199,117,127,63,208,121,127,63,196,125,127,63,161,129,127,63,104,133,127,63,25,137,127,63,182,140,127,63,61,144,127,63,176,147,127,63,14,151,127,63,89,154,127,63,143,157,127,63,179,160,127,63,195,163,127,63,192,166,127,63,171,169,127,63,132,172,127,63,74,175,127,63,255,177,127,63,163,180,127,63,53,183,127,63,183,185,127,63,40,188,127,63,137,190,127,63,217,192,127,63,26,195,127,63,76,197,127,63,111,199,127,63,130,201,127,63,135,203,127,63,126,205,127,63,102,207,127,63,65,209,127,63,14,211,127,63,205,212,127,63,128,214,127,63,38,216,127,63,191,217,127,63,76,219,127,63,204,220,127,63,65,222,127,63,170,223,127,63,8,225,127,63,91,226,127,63,163,227,127,63,224,228,127,63,19,230,127,63,59,231,127,63,90,232,127,63,110,233,127,63,122,234,127,63,124,235,127,63,116,236,127,63,100,237,127,63,75,238,127,63,42,239,127,63,1,240,127,63,207,240,127,63,149,241,127,63,84,242,127,63,12,243,127,63,188,243,127,63,101,244,127,63,7,245,127,63,162,245,127,63,55,246,127,63,198,246,127,63,78,247,127,63,209,247,127,63,77,248,127,63,196,248,127,63,54,249,127,63,162,249,127,63,9,250,127,63,108,250,127,63,201,250,127,63,34,251,127,63,118,251,127,63,198,251,127,63,18,252,127,63,89,252,127,63,157,252,127,63,221,252,127,63,26,253,127,63,83,253,127,63,136,253,127,63,187,253,127,63,234,253,127,63,22,254,127,63,64,254,127,63,103,254,127,63,139,254,127,63,173,254,127,63,204,254,127,63,234,254,127,63,5,255,127,63,30,255,127,63,53,255,127,63,74,255,127,63,94,255,127,63,112,255,127,63,128,255,127,63,143,255,127,63,157,255,127,63,169,255,127,63,180,255,127,63,191,255,127,63,200,255,127,63,208,255,127,63,215,255,127,63,221,255,127,63,227,255,127,63,232,255,127,63,236,255,127,63,239,255,127,63,243,255,127,63,245,255,127,63,248,255,127,63,249,255,127,63,251,255,127,63,252,255,127,63,253,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,204,8,120,52,171,134,11,54,79,202,193,54,190,233,61,55,238,247,156,55,192,123,234,55,43,192,35,56,161,2,90,56,189,2,140,56,76,228,174,56,227,165,213,56,199,35,0,57,168,100,23,57,134,149,48,57,104,182,75,57,64,199,104,57,7,228,131,57,105,92,148,57,191,204,165,57,6,53,184,57,65,149,203,57,105,237,223,57,120,61,245,57,184,194,5,58,166,98,17,58,134,126,29,58,81,22,42,58,9,42,55,58,172,185,68,58,54,197,82,58,165,76,97,58,250,79,112,58,47,207,127,58,34,229,135,58,154,32,144,58,255,153,152,58,80,81,161,58,139,70,170,58,174,121,179,58,186,234,188,58,171,153,198,58,129,134,208,58,58,177,218,58,212,25,229,58,79,192,239,58,167,164,250,58,109,227,2,59,117,147,8,59,105,98,14,59,73,80,20,59,19,93,26,59,199,136,32,59,100,211,38,59,232,60,45,59,83,197,51,59,164,108,58,59,218,50,65,59,243,23,72,59,239,27,79,59,204,62,86,59,138,128,93,59,38,225,100,59,161,96,108,59,249,254,115,59,45,188,123,59,29,204,129,59,145,201,133,59,113,214,137,59,188,242,141,59,113,30,146,59,145,89,150,59,26,164,154,59,12,254,158,59,102,103,163,59,40,224,167,59,80,104,172,59,222,255,176,59,209,166,181,59,40,93,186,59,228,34,191,59,2,248,195,59,131,220,200,59,101,208,205,59,168,211,210,59,74,230,215,59,76,8,221,59,172,57,226,59,105,122,231,59,131,202,236,59,249,41,242,59,202,152,247,59,245,22,253,59,60,82,1,60,170,32,4,60,196,246,6,60,137,212,9,60,249,185,12,60,19,167,15,60,216,155,18,60,69,152,21,60,92,156,24,60,26,168,27,60,129,187,30,60,143,214,33,60,69,249,36,60,160,35,40,60,162,85,43,60,73,143,46,60,149,208,49,60,133,25,53,60,26,106,56,60,81,194,59,60,44,34,63,60,168,137,66,60,199,248,69,60,134,111,73,60,230,237,76,60,231,115,80,60,134,1,84,60,197,150,87,60,162,51,91,60,28,216,94,60,52,132,98,60,232,55,102,60,56,243,105,60,35,182,109,60,170,128,113,60,202,82,117,60,131,44,121,60,214,13,125,60,96,123,128,60,161,115,130,60,174,111,132,60,134,111,134,60,40,115,136,60,149,122,138,60,205,133,140,60,206,148,142,60,152,167,144,60,44,190,146,60,136,216,148,60,173,246,150,60,154,24,153,60,78,62,155,60,202,103,157,60,13,149,159,60,23,198,161,60,231,250,163,60,125,51,166,60,217,111,168,60,249,175,170,60,223,243,172,60,137,59,175,60,247,134,177,60,40,214,179,60,29,41,182,60,213,127,184,60,80,218,186,60,140,56,189,60,138,154,191,60,74,0,194,60,202,105,196,60,11,215,198,60,12,72,201,60,205,188,203,60,77,53,206,60,140,177,208,60,137,49,211,60,69,181,213,60,189,60,216,60,243,199,218,60,230,86,221,60,149,233,223,60,0,128,226,60,39,26,229,60,8,184,231,60,164,89,234,60,250,254,236,60,9,168,239,60,210,84,242,60,83,5,245,60,141,185,247,60,126,113,250,60,39,45,253,60,134,236,255,60,206,87,1,61,52,187,2,61,117,32,4,61,144,135,5,61,133,240,6,61,84,91,8,61,253,199,9,61,128,54,11,61,219,166,12,61,16,25,14,61,29,141,15,61,3,3,17,61,193,122,18,61,87,244,19,61,197,111,21,61,10,237,22,61,39,108,24,61,26,237,25,61,228,111,27,61,132,244,28,61,251,122,30,61,71,3,32,61,105,141,33,61,96,25,35,61,45,167,36,61,206,54,38,61,67,200,39,61,141,91,41,61,171,240,42,61,156,135,44,61,96,32,46,61,248,186,47,61,99,87,49,61,160,245,50,61,175,149,52,61,144,55,54,61,67,219,55,61,199,128,57,61,28,40,59,61,65,209,60,61,56,124,62,61,254,40,64,61,148,215,65,61,250,135,67,61,47,58,69,61,51,238,70,61,5,164,72,61,166,91,74,61,20,21,76,61,80,208,77,61,90,141,79,61,49,76,81,61,212,12,83,61,68,207,84,61,128,147,86,61,135,89,88,61,90,33,90,61,248,234,91,61,97,182,93,61,148,131,95,61,145,82,97,61,88,35,99,61,232,245,100,61,65,202,102,61,100,160,104,61,78,120,106,61,1,82,108,61,123,45,110,61,188,10,112,61,197,233,113,61,148,202,115,61,41,173,117,61,133,145,119,61,166,119,121,61,140,95,123,61,55,73,125,61,166,52,127,61,237,144,128,61,105,136,129,61,198,128,130,61,5,122,131,61,37,116,132,61,39,111,133,61,9,107,134,61,204,103,135,61,112,101,136,61,244,99,137,61,88,99,138,61,157,99,139,61,193,100,140,61,196,102,141,61,167,105,142,61,106,109,143,61,11,114,144,61,139,119,145,61,234,125,146,61,40,133,147,61,67,141,148,61,61,150,149,61,20,160,150,61,201,170,151,61,92,182,152,61,203,194,153,61,24,208,154,61,66,222,155,61,72,237,156,61,42,253,157,61,233,13,159,61,132,31,160,61,250,49,161,61,76,69,162,61,122,89,163,61,130,110,164,61,101,132,165,61,35,155,166,61,188,178,167,61,47,203,168,61,124,228,169,61,162,254,170,61,163,25,172,61,124,53,173,61,47,82,174,61,187,111,175,61,31,142,176,61,92,173,177,61,113,205,178,61,94,238,179,61,35,16,181,61,192,50,182,61,52,86,183,61,127,122,184,61,160,159,185,61,153,197,186,61,104,236,187,61,13,20,189,61,136,60,190,61,217,101,191,61,255,143,192,61,250,186,193,61,202,230,194,61,111,19,196,61,233,64,197,61,55,111,198,61,89,158,199,61,78,206,200,61,23,255,201,61,179,48,203,61,35,99,204,61,101,150,205,61,121,202,206,61,96,255,207,61,25,53,209,61,164,107,210,61,0,163,211,61,45,219,212,61,44,20,214,61,251,77,215,61,154,136,216,61,10,196,217,61,74,0,219,61,89,61,220,61,56,123,221,61,230,185,222,61,99,249,223,61,174,57,225,61,200,122,226,61,176,188,227,61,102,255,228,61,233,66,230,61,58,135,231,61,88,204,232,61,66,18,234,61,249,88,235,61,124,160,236,61,203,232,237,61,230,49,239,61,204,123,240,61,125,198,241,61,249,17,243,61,63,94,244,61,79,171,245,61,42,249,246,61,206,71,248,61,60,151,249,61,114,231,250,61,114,56,252,61,58,138,253,61,202,220,254,61,17,24,0,62,33,194,0,62,149,108,1,62,108,23,2,62,166,194,2,62,68,110,3,62,69,26,4,62,168,198,4,62,111,115,5,62,152,32,6,62,35,206,6,62,17,124,7,62,98,42,8,62,20,217,8,62,40,136,9,62,157,55,10,62,117,231,10,62,173,151,11,62,71,72,12,62,66,249,12,62,158,170,13,62,91,92,14,62,120,14,15,62,246,192,15,62,213,115,16,62,19,39,17,62,177,218,17,62,175,142,18,62,13,67,19,62,202,247,19,62,231,172,20,62,99,98,21,62,62,24,22,62,120,206,22,62,16,133,23,62,7,60,24,62,92,243,24,62,16,171,25,62,33,99,26,62,145,27,27,62,94,212,27,62,137,141,28,62,17,71,29,62,246,0,30,62,56,187,30,62,215,117,31,62,211,48,32,62,43,236,32,62,224,167,33,62,241,99,34,62,93,32,35,62,38,221,35,62,74,154,36,62,202,87,37,62,165,21,38,62,219,211,38,62,108,146,39,62,88,81,40,62,159,16,41,62,64,208,41,62,59,144,42,62,144,80,43,62,63,17,44,62,72,210,44,62,170,147,45,62,102,85,46,62,122,23,47,62,232,217,47,62,175,156,48,62,206,95,49,62,69,35,50,62,21,231,50,62,61,171,51,62,189,111,52,62,148,52,53,62,195,249,53,62,73,191,54,62,38,133,55,62,91,75,56,62,230,17,57,62,199,216,57,62,255,159,58,62,141,103,59,62,113,47,60,62,171,247,60,62,59,192,61,62,31,137,62,62,89,82,63,62,232,27,64,62,204,229,64,62,5,176,65,62,146,122,66,62,115,69,67,62,168,16,68,62,49,220,68,62,14,168,69,62,62,116,70,62,194,64,71,62,152,13,72,62,193,218,72,62,61,168,73,62,12,118,74,62,44,68,75,62,159,18,76,62,100,225,76,62,122,176,77,62,225,127,78,62,154,79,79,62,164,31,80,62,255,239,80,62,170,192,81,62,166,145,82,62,242,98,83,62,141,52,84,62,121,6,85,62,180,216,85,62,63,171,86,62,25,126,87,62,65,81,88,62,185,36,89,62,126,248,89,62,147,204,90,62,245,160,91,62,165,117,92,62,163,74,93,62,238,31,94,62,135,245,94,62,109,203,95,62,159,161,96,62,30,120,97,62,233,78,98,62,1,38,99,62,100,253,99,62,19,213,100,62,14,173,101,62,84,133,102,62,229,93,103,62,193,54,104,62,231,15,105,62,88,233,105,62,19,195,106,62,24,157,107,62,103,119,108,62,255,81,109,62,224,44,110,62,11,8,111,62,126,227,111,62,58,191,112,62,62,155,113,62,139,119,114,62,31,84,115,62,251,48,116,62,31,14,117,62,138,235,117,62,59,201,118,62,52,167,119,62,115,133,120,62,248,99,121,62,196,66,122,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([213,33,123,62,44,1,124,62,200,224,124,62,170,192,125,62,208,160,126,62,59,129,127,62,245,48,128,62,111,161,128,62,11,18,129,62,201,130,129,62,168,243,129,62,169,100,130,62,204,213,130,62,15,71,131,62,117,184,131,62,251,41,132,62,162,155,132,62,107,13,133,62,84,127,133,62,93,241,133,62,136,99,134,62,210,213,134,62,61,72,135,62,200,186,135,62,116,45,136,62,63,160,136,62,42,19,137,62,52,134,137,62,94,249,137,62,168,108,138,62,17,224,138,62,153,83,139,62,64,199,139,62,6,59,140,62,235,174,140,62,239,34,141,62,17,151,141,62,82,11,142,62,177,127,142,62,46,244,142,62,201,104,143,62,130,221,143,62,89,82,144,62,78,199,144,62,96,60,145,62,143,177,145,62,220,38,146,62,70,156,146,62,205,17,147,62,113,135,147,62,50,253,147,62,16,115,148,62,9,233,148,62,32,95,149,62,82,213,149,62,161,75,150,62,12,194,150,62,146,56,151,62,53,175,151,62,243,37,152,62,204,156,152,62,193,19,153,62,209,138,153,62,252,1,154,62,66,121,154,62,163,240,154,62,31,104,155,62,181,223,155,62,101,87,156,62,48,207,156,62,21,71,157,62,20,191,157,62,45,55,158,62,96,175,158,62,172,39,159,62,18,160,159,62,145,24,160,62,41,145,160,62,218,9,161,62,165,130,161,62,136,251,161,62,132,116,162,62,152,237,162,62,197,102,163,62,10,224,163,62,103,89,164,62,220,210,164,62,105,76,165,62,14,198,165,62,202,63,166,62,158,185,166,62,137,51,167,62,139,173,167,62,164,39,168,62,213,161,168,62,27,28,169,62,121,150,169,62,237,16,170,62,119,139,170,62,24,6,171,62,206,128,171,62,155,251,171,62,125,118,172,62,117,241,172,62,130,108,173,62,165,231,173,62,221,98,174,62,42,222,174,62,140,89,175,62,2,213,175,62,142,80,176,62,46,204,176,62,226,71,177,62,170,195,177,62,135,63,178,62,119,187,178,62,124,55,179,62,148,179,179,62,191,47,180,62,254,171,180,62,80,40,181,62,181,164,181,62,45,33,182,62,184,157,182,62,85,26,183,62,5,151,183,62,199,19,184,62,156,144,184,62,130,13,185,62,123,138,185,62,133,7,186,62,161,132,186,62,206,1,187,62,13,127,187,62,93,252,187,62,190,121,188,62,48,247,188,62,178,116,189,62,70,242,189,62,233,111,190,62,157,237,190,62,98,107,191,62,54,233,191,62,26,103,192,62,14,229,192,62,17,99,193,62,36,225,193,62,70,95,194,62,119,221,194,62,184,91,195,62,7,218,195,62,100,88,196,62,209,214,196,62,75,85,197,62,212,211,197,62,107,82,198,62,16,209,198,62,195,79,199,62,132,206,199,62,82,77,200,62,45,204,200,62,21,75,201,62,11,202,201,62,13,73,202,62,29,200,202,62,56,71,203,62,97,198,203,62,149,69,204,62,214,196,204,62,34,68,205,62,123,195,205,62,223,66,206,62,79,194,206,62,202,65,207,62,81,193,207,62,226,64,208,62,127,192,208,62,38,64,209,62,216,191,209,62,148,63,210,62,91,191,210,62,44,63,211,62,7,191,211,62,235,62,212,62,218,190,212,62,210,62,213,62,211,190,213,62,222,62,214,62,242,190,214,62,15,63,215,62,53,191,215,62,99,63,216,62,154,191,216,62,217,63,217,62,32,192,217,62,112,64,218,62,199,192,218,62,38,65,219,62,140,193,219,62,250,65,220,62,112,194,220,62,236,66,221,62,112,195,221,62,250,67,222,62,139,196,222,62,34,69,223,62,192,197,223,62,100,70,224,62,14,199,224,62,189,71,225,62,115,200,225,62,46,73,226,62,239,201,226,62,181,74,227,62,127,203,227,62,79,76,228,62,36,205,228,62,253,77,229,62,219,206,229,62,190,79,230,62,164,208,230,62,142,81,231,62,125,210,231,62,111,83,232,62,100,212,232,62,93,85,233,62,89,214,233,62,89,87,234,62,91,216,234,62,96,89,235,62,104,218,235,62,114,91,236,62,126,220,236,62,141,93,237,62,158,222,237,62,176,95,238,62,196,224,238,62,218,97,239,62,241,226,239,62,10,100,240,62,35,229,240,62,62,102,241,62,89,231,241,62,116,104,242,62,145,233,242,62,173,106,243,62,202,235,243,62,230,108,244,62,3,238,244,62,31,111,245,62,59,240,245,62,86,113,246,62,112,242,246,62,137,115,247,62,161,244,247,62,184,117,248,62,206,246,248,62,226,119,249,62,244,248,249,62,4,122,250,62,18,251,250,62,30,124,251,62,40,253,251,62,47,126,252,62,52,255,252,62,54,128,253,62,52,1,254,62,48,130,254,62,40,3,255,62,29,132,255,62,135,2,0,63,254,66,0,63,115,131,0,63,230,195,0,63,86,4,1,63,197,68,1,63,49,133,1,63,155,197,1,63,3,6,2,63,103,70,2,63,202,134,2,63,42,199,2,63,135,7,3,63,225,71,3,63,56,136,3,63,141,200,3,63,222,8,4,63,44,73,4,63,119,137,4,63,191,201,4,63,3,10,5,63,68,74,5,63,130,138,5,63,188,202,5,63,242,10,6,63,36,75,6,63,83,139,6,63,126,203,6,63,165,11,7,63,199,75,7,63,230,139,7,63,1,204,7,63,23,12,8,63,41,76,8,63,54,140,8,63,63,204,8,63,67,12,9,63,67,76,9,63,62,140,9,63,52,204,9,63,37,12,10,63,18,76,10,63,249,139,10,63,219,203,10,63,184,11,11,63,144,75,11,63,98,139,11,63,47,203,11,63,246,10,12,63,184,74,12,63,116,138,12,63,43,202,12,63,219,9,13,63,134,73,13,63,43,137,13,63,202,200,13,63,98,8,14,63,245,71,14,63,129,135,14,63,7,199,14,63,135,6,15,63,0,70,15,63,114,133,15,63,222,196,15,63,67,4,16,63,161,67,16,63,249,130,16,63,73,194,16,63,147,1,17,63,213,64,17,63,17,128,17,63,69,191,17,63,114,254,17,63,151,61,18,63,181,124,18,63,203,187,18,63,218,250,18,63,225,57,19,63,225,120,19,63,216,183,19,63,200,246,19,63,176,53,20,63,143,116,20,63,103,179,20,63,54,242,20,63,253,48,21,63,188,111,21,63,114,174,21,63,32,237,21,63,197,43,22,63,98,106,22,63,246,168,22,63,129,231,22,63,3,38,23,63,125,100,23,63,237,162,23,63,84,225,23,63,178,31,24,63,7,94,24,63,83,156,24,63,149,218,24,63,206,24,25,63,253,86,25,63,35,149,25,63,63,211,25,63,82,17,26,63,90,79,26,63,89,141,26,63,78,203,26,63,57,9,27,63,25,71,27,63,240,132,27,63,188,194,27,63,126,0,28,63,54,62,28,63,227,123,28,63,134,185,28,63,30,247,28,63,172,52,29,63,47,114,29,63,167,175,29,63,20,237,29,63,118,42,30,63,206,103,30,63,26,165,30,63,91,226,30,63,145,31,31,63,188,92,31,63,219,153,31,63,239,214,31,63,247,19,32,63,244,80,32,63,230,141,32,63,203,202,32,63,165,7,33,63,115,68,33,63,53,129,33,63,235,189,33,63,150,250,33,63,52,55,34,63,198,115,34,63,75,176,34,63,197,236,34,63,50,41,35,63,146,101,35,63,230,161,35,63,46,222,35,63,105,26,36,63,151,86,36,63,185,146,36,63,205,206,36,63,213,10,37,63,208,70,37,63,190,130,37,63,158,190,37,63,114,250,37,63,56,54,38,63,241,113,38,63,157,173,38,63,59,233,38,63,204,36,39,63,79,96,39,63,197,155,39,63,45,215,39,63,135,18,40,63,211,77,40,63,18,137,40,63,66,196,40,63,101,255,40,63,121,58,41,63,128,117,41,63,120,176,41,63,98,235,41,63,62,38,42,63,11,97,42,63,202,155,42,63,122,214,42,63,28,17,43,63,175,75,43,63,52,134,43,63,170,192,43,63,16,251,43,63,105,53,44,63,178,111,44,63,236,169,44,63,23,228,44,63,51,30,45,63,64,88,45,63,61,146,45,63,43,204,45,63,10,6,46,63,218,63,46,63,154,121,46,63,74,179,46,63,235,236,46,63,124,38,47,63,254,95,47,63,112,153,47,63,210,210,47,63,36,12,48,63,102,69,48,63,152,126,48,63,186,183,48,63,204,240,48,63,205,41,49,63,191,98,49,63,160,155,49,63,113,212,49,63,49,13,50,63,225,69,50,63,128,126,50,63,15,183,50,63,141,239,50,63,251,39,51,63,87,96,51,63,163,152,51,63,222,208,51,63,8,9,52,63,34,65,52,63,42,121,52,63,33,177,52,63,7,233,52,63,219,32,53,63,159,88,53,63,81,144,53,63,242,199,53,63,129,255,53,63,255,54,54,63,108,110,54,63,198,165,54,63,16,221,54,63,71,20,55,63,109,75,55,63,129,130,55,63,131,185,55,63,116,240,55,63,82,39,56,63,30,94,56,63,217,148,56,63,129,203,56,63,23,2,57,63,155,56,57,63,13,111,57,63,108,165,57,63,185,219,57,63,244,17,58,63,28,72,58,63,50,126,58,63,53,180,58,63,38,234,58,63,4,32,59,63,207,85,59,63,135,139,59,63,45,193,59,63,192,246,59,63,64,44,60,63,173,97,60,63,7,151,60,63,78,204,60,63,130,1,61,63,163,54,61,63,177,107,61,63,171,160,61,63,146,213,61,63,102,10,62,63,39,63,62,63,212,115,62,63,110,168,62,63,244,220,62,63,103,17,63,63,198,69,63,63,17,122,63,63,73,174,63,63,109,226,63,63,126,22,64,63,122,74,64,63,99,126,64,63,56,178,64,63,248,229,64,63,165,25,65,63,62,77,65,63,195,128,65,63,52,180,65,63,144,231,65,63,216,26,66,63,13,78,66,63,44,129,66,63,56,180,66,63,47,231,66,63,18,26,67,63,224,76,67,63,154,127,67,63,64,178,67,63,208,228,67,63,77,23,68,63,180,73,68,63,7,124,68,63,69,174,68,63,111,224,68,63,131,18,69,63,131,68,69,63,110,118,69,63,68,168,69,63,5,218,69,63,177,11,70,63,72,61,70,63,202,110,70,63,55,160,70,63,143,209,70,63,210,2,71,63,255,51,71,63,23,101,71,63,26,150,71,63,8,199,71,63,224,247,71,63,163,40,72,63,81,89,72,63,233,137,72,63,107,186,72,63,216,234,72,63,48,27,73,63,114,75,73,63,158,123,73,63,181,171,73,63,181,219,73,63,161,11,74,63,118,59,74,63,54,107,74,63,224,154,74,63,116,202,74,63,242,249,74,63,90,41,75,63,173,88,75,63,233,135,75,63,15,183,75,63,32,230,75,63,26,21,76,63,254,67,76,63,204,114,76,63,132,161,76,63,38,208,76,63,177,254,76,63,38,45,77,63,133,91,77,63,206,137,77,63,0,184,77,63,28,230,77,63,34,20,78,63,17,66,78,63,234,111,78,63,172,157,78,63,88,203,78,63,238,248,78,63,108,38,79,63,213,83,79,63,38,129,79,63,97,174,79,63,134,219,79,63,147,8,80,63,138,53,80,63,107,98,80,63,52,143,80,63,231,187,80,63,131,232,80,63,8,21,81,63,119,65,81,63,206,109,81,63,15,154,81,63,57,198,81,63,76,242,81,63,71,30,82,63,44,74,82,63,250,117,82,63,177,161,82,63,81,205,82,63,218,248,82,63,76,36,83,63,166,79,83,63,234,122,83,63,22,166,83,63,44,209,83,63,42,252,83,63,17,39,84,63,224,81,84,63,153,124,84,63,58,167,84,63,196,209,84,63,54,252,84,63,146,38,85,63,214,80,85,63,2,123,85,63,24,165,85,63,22,207,85,63,252,248,85,63,204,34,86,63,131,76,86,63,36,118,86,63,172,159,86,63,30,201,86,63,120,242,86,63,186,27,87,63,229,68,87,63,248,109,87,63,244,150,87,63,216,191,87,63,165,232,87,63,90,17,88,63,248,57,88,63,126,98,88,63,236,138,88,63,67,179,88,63,130,219,88,63,169,3,89,63,185,43,89,63,177,83,89,63,145,123,89,63,90,163,89,63,11,203,89,63,164,242,89,63,37,26,90,63,143,65,90,63,225,104,90,63,27,144,90,63,62,183,90,63,72,222,90,63,59,5,91,63,22,44,91,63,217,82,91,63,133,121,91,63,24,160,91,63,148,198,91,63,248,236,91,63,68,19,92,63,120,57,92,63,149,95,92,63,153,133,92,63,134,171,92,63,91,209,92,63,24,247,92,63,189,28,93,63,74,66,93,63,191,103,93,63,28,141,93,63,98,178,93,63,143,215,93,63,165,252,93,63,162,33,94,63,136,70,94,63,86,107,94,63,11,144,94,63,169,180,94,63,47,217,94,63,157,253,94,63,243,33,95,63,49,70,95,63,88,106,95,63,102,142,95,63,92,178,95,63,59,214,95,63,1,250,95,63,175,29,96,63,70,65,96,63,196,100,96,63,43,136,96,63,122,171,96,63,176,206,96,63,207,241,96,63,214,20,97,63,197,55,97,63,155,90,97,63,90,125,97,63,1,160,97,63,144,194,97,63,8,229,97,63,103,7,98,63,174,41,98,63,221,75,98,63,245,109,98,63,244,143,98,63,220,177,98,63,171,211,98,63,99,245,98,63,3,23,99,63,139,56,99,63,251,89,99,63,83,123,99,63,147,156,99,63,188,189,99,63,204,222,99,63,197,255,99,63,166,32,100,63,110,65,100,63,32,98,100,63,185,130,100,63,58,163,100,63,164,195,100,63,245,227,100,63,47,4,101,63,82,36,101,63,92,68,101,63,78,100,101,63,41,132,101,63,236,163,101,63,151,195,101,63,43,227,101,63,167,2,102,63,11,34,102,63,87,65,102,63,139,96,102,63,168,127,102,63,174,158,102,63,155,189,102,63,113,220,102,63,47,251,102,63,214,25,103,63,101,56,103,63,220,86,103,63,59,117,103,63,132,147,103,63,180,177,103,63,205,207,103,63,206,237,103,63,184,11,104,63,138,41,104,63,69,71,104,63,233,100,104,63,116,130,104,63,233,159,104,63,69,189,104,63,139,218,104,63,185,247,104,63,207,20,105,63,207,49,105,63,182,78,105,63,135,107,105,63,64,136,105,63,225,164,105,63,108,193,105,63,223,221,105,63,59,250,105,63,127,22,106,63,172,50,106,63,195,78,106,63,193,106,106,63,169,134,106,63,121,162,106,63,51,190,106,63,213,217,106,63,96,245,106,63,212,16,107,63,48,44,107,63,118,71,107,63,165,98,107,63,188,125,107,63,189,152,107,63,167,179,107,63,121,206,107,63,53,233,107,63,218,3,108,63,104,30,108,63,223,56,108,63,63,83,108,63,136,109,108,63,187,135,108,63,214,161,108,63,219,187,108,63,201,213,108,63,161,239,108,63,97,9,109,63,11,35,109,63,159,60,109,63,27,86,109,63,129,111,109,63,209,136,109,63,9,162,109,63,44,187,109,63,56,212,109,63,45,237,109,63,12,6,110,63,212,30,110,63,134,55,110,63,33,80,110,63,166,104,110,63,21,129,110,63,110,153,110,63,176,177,110,63,220,201,110,63,241,225,110,63,241,249,110,63,218,17,111,63,173,41,111,63,106,65,111,63,16,89,111,63,161,112,111,63,28,136,111,63,128,159,111,63,207,182,111,63,7,206,111,63,42,229,111,63,54,252,111,63,45,19,112,63,14,42,112,63,217,64,112,63,142,87,112,63,46,110,112,63,184,132,112,63,43,155,112,63,138,177,112,63,210,199,112,63,5,222,112,63,35,244,112,63,42,10,113,63,29,32,113,63,249,53,113,63,193,75,113,63,114,97,113,63,15,119,113,63,150,140,113,63,7,162,113,63,99,183,113,63,170,204,113,63,220,225,113,63,249,246,113,63,0,12,114,63,242,32,114,63,207,53,114,63,151,74,114,63,73,95,114,63,231,115,114,63,112,136,114,63,227,156,114,63,66,177,114,63,140,197,114,63,193,217,114,63,225,237,114,63,236,1,115,63,227,21,115,63,197,41,115,63,146,61,115,63,74,81,115,63,238,100,115,63,125,120,115,63,248,139,115,63,94,159,115,63,175,178,115,63,236,197,115,63,21,217,115,63,41,236,115,63,41,255,115,63,21,18,116,63,236,36,116,63,175,55,116,63,94,74,116,63,248,92,116,63,127,111,116,63,241,129,116,63,80,148,116,63,154,166,116,63,208,184,116,63,242,202,116,63,1,221,116,63,251,238,116,63,226,0,117,63,181,18,117,63,116,36,117,63,31,54,117,63,183,71,117,63,59,89,117,63,171,106,117,63,8,124,117,63,81,141,117,63,135,158,117,63,169,175,117,63,184,192,117,63,179,209,117,63,155,226,117,63,112,243,117,63,50,4,118,63,224,20,118,63,123,37,118,63,3,54,118,63,120,70,118,63,217,86,118,63,40,103,118,63,100,119,118,63,140,135,118,63,162,151,118,63,165,167,118,63,149,183,118,63,114,199,118,63,61,215,118,63,245,230,118,63,154,246,118,63,44,6,119,63,172,21,119,63,26,37,119,63,117,52,119,63,189,67,119,63,243,82,119,63,22,98,119,63,40,113,119,63,39,128,119,63,19,143,119,63,238,157,119,63,182,172,119,63,108,187,119,63,16,202,119,63,162,216,119,63,34,231,119,63,144,245,119,63,236,3,120,63,55,18,120,63,111,32,120,63,150,46,120,63,170,60,120,63,174,74,120,63,159,88,120,63,127,102,120,63,77,116,120,63,10,130,120,63,181,143,120,63,79,157,120,63,215,170,120,63,78,184,120,63,180,197,120,63,8,211,120,63,76,224,120,63,126,237,120,63,158,250,120,63,174,7,121,63,173,20,121,63,155,33,121,63,119,46,121,63,67,59,121,63,254,71,121,63,168,84,121,63,66,97,121,63,202,109,121,63,66,122,121,63,169,134,121,63,0,147,121,63,70,159,121,63,124,171,121,63,161,183,121,63,181,195,121,63,186,207,121,63,173,219,121,63,145,231,121,63,100,243,121,63,40,255,121,63,219,10,122,63,126,22,122,63,16,34,122,63,147,45,122,63,6,57,122,63,105,68,122,63,188,79,122,63,255,90,122,63,51,102,122,63,86,113,122,63,106,124,122,63,111,135,122,63,99,146,122,63,72,157,122,63,30,168,122,63,228,178,122,63,155,189,122,63,66,200,122,63,218,210,122,63,99,221,122,63,221,231,122,63,71,242,122,63,162,252,122,63,238,6,123,63,43,17,123,63,89,27,123,63,120,37,123,63,137,47,123,63,138,57,123,63,124,67,123,63,96,77,123,63,53,87,123,63,252,96,123,63,179,106,123,63,92,116,123,63,247,125,123,63,131,135,123,63,1,145,123,63,112,154,123,63,209,163,123,63,36,173,123,63,104,182,123,63,158,191,123,63,198,200,123,63,224,209,123,63,236,218,123,63,234,227,123,63,218,236,123,63,188,245,123,63,144,254,123,63,86,7,124,63,14,16,124,63,185,24,124,63,86,33,124,63,230,41,124,63,104,50,124,63,220,58,124,63,67,67,124,63,156,75,124,63,232,83,124,63,39,92,124,63,88,100,124,63,124,108,124,63,147,116,124,63,157,124,124,63,153,132,124,63,137,140,124,63,107,148,124,63,65,156,124,63,9,164,124,63,197,171,124,63,116,179,124,63,22,187,124,63,172,194,124,63,52,202,124,63,176,209,124,63,32,217,124,63,131,224,124,63,217,231,124,63,35,239,124,63,97,246,124,63,146,253,124,63,183,4,125,63,208,11,125,63,221,18,125,63,221,25,125,63,209,32,125,63,185,39,125,63,150,46,125,63,102,53,125,63,42,60,125,63,227,66,125,63,143,73,125,63,48,80,125,63,197,86,125,63,78,93,125,63,204,99,125,63,62,106,125,63,165,112,125,63,0,119,125,63,80,125,125,63,148,131,125,63,205,137,125,63,251,143,125,63,29,150,125,63,52,156,125,63,64,162,125,63,65,168,125,63,55,174,125,63,34,180,125,63,2,186,125,63,215,191,125,63,161,197,125,63,96,203,125,63,21,209,125,63,190,214,125,63,93,220,125,63,242,225,125,63,124,231,125,63,251,236,125,63,112,242,125,63,218,247,125,63,58,253,125,63,143,2,126,63,219,7,126,63,28,13,126,63,82,18,126,63,127,23,126,63,161,28,126,63,186,33,126,63,200,38,126,63,204,43,126,63,199,48,126,63,183,53,126,63,158,58,126,63,123,63,126,63,78,68,126,63,23,73,126,63,215,77,126,63,141,82,126,63,58,87,126,63,221,91,126,63,118,96,126,63,6,101,126,63,141,105,126,63,10,110,126,63,126,114,126,63,233,118,126,63,75,123,126,63,164,127,126,63,243,131,126,63,57,136,126,63,119,140,126,63,171,144,126,63,214,148,126,63,249,152,126,63,18,157,126,63,35,161,126,63,44,165,126,63,43,169,126,63,34,173,126,63,16,177,126,63,246,180,126,63,211,184,126,63,167,188,126,63,115,192,126,63,55,196,126,63,243,199,126,63,166,203,126,63,81,207,126,63,243,210,126,63,142,214,126,63,32,218,126,63,171,221,126,63,45,225,126,63,167,228,126,63,26,232,126,63,132,235,126,63,231,238,126,63,66,242,126,63,149,245,126,63,224,248,126,63,36,252,126,63,96,255,126,63,148,2,127,63,193,5,127,63,230,8,127,63,4,12,127,63,27,15,127,63,42,18,127,63,50,21,127,63,50,24,127,63,43,27,127,63,29,30,127,63,8,33,127,63,236,35,127,63,201,38,127,63,158,41,127,63,109,44,127,63,53,47,127,63,246,49,127,63,175,52,127,63,99,55,127,63,15,58,127,63,181,60,127,63,83,63,127,63,236,65,127,63,125,68,127,63,8,71,127,63,141,73,127,63,11,76,127,63,131,78,127,63,244,80,127,63,95,83,127,63,195,85,127,63,33,88,127,63,121,90,127,63,203,92,127,63,23,95,127,63,92,97,127,63,155,99,127,63,213,101,127,63,8,104,127,63,54,106,127,63,93,108,127,63,127,110,127,63,155,112,127,63,177,114,127,63,193,116,127,63,203,118,127,63,208,120,127,63,207,122,127,63,201,124,127,63,189,126,127,63,171,128,127,63,148,130,127,63,120,132,127,63,86,134,127,63,47,136,127,63,2,138,127,63,209,139,127,63,153,141,127,63,93,143,127,63,28,145,127,63,213,146,127,63,137,148,127,63,57,150,127,63,227,151,127,63,136,153,127,63,40,155,127,63,196,156,127,63,90,158,127,63,236,159,127,63,121,161,127,63,1,163,127,63,132,164,127,63,3,166,127,63,125,167,127,63,242,168,127,63,99,170,127,63,207,171,127,63,55,173,127,63,154,174,127,63,249,175,127,63,84,177,127,63,170,178,127,63,251,179,127,63,73,181,127,63,146,182,127,63,215,183,127,63,24,185,127,63,85,186,127,63,141,187,127,63,193,188,127,63,242,189,127,63,30,191,127,63,71,192,127,63,107,193,127,63,140,194,127,63,168,195,127,63,193,196,127,63,214,197,127,63,231,198,127,63,245,199,127,63,255,200,127,63,5,202,127,63,7,203,127,63,6,204,127,63,1,205,127,63,249,205,127,63,237,206,127,63,222,207,127,63,203,208,127,63,181,209,127,63,156,210,127,63,127,211,127,63,95,212,127,63,59,213,127,63,20,214,127,63,234,214,127,63,189,215,127,63,141,216,127,63,90,217,127,63,35,218,127,63,233,218,127,63,173,219,127,63,109,220,127,63,43,221,127,63,229,221,127,63,156,222,127,63,81,223,127,63,3,224,127,63,178,224,127,63,94,225,127,63,7,226,127,63,174,226,127,63,82,227,127,63,243,227,127,63,146,228,127,63,46,229,127,63,199,229,127,63,94,230,127,63,242,230,127,63,132,231,127,63,19,232,127,63,160,232,127,63,42,233,127,63,178,233,127,63,56,234,127,63,187,234,127,63,60,235,127,63,187,235,127,63,55,236,127,63,177,236,127,63,41,237,127,63,159,237,127,63,18,238,127,63,132,238,127,63,243,238,127,63,96,239,127,63,204,239,127,63,53,240,127,63,156,240,127,63,1,241,127,63,101,241,127,63,198,241,127,63,37,242,127,63,131,242,127,63,222,242,127,63,56,243,127,63,144,243,127,63,231,243,127,63,59,244,127,63,142,244,127,63,223,244,127,63,46,245,127,63,124,245,127,63,200,245,127,63,19,246,127,63,91,246,127,63,163,246,127,63,233,246,127,63,45,247,127,63,111,247,127,63,177,247,127,63,240,247,127,63,47,248,127,63,108,248,127,63,167,248,127,63,225,248,127,63,26,249,127,63,82,249,127,63,136,249,127,63,188,249,127,63,240,249,127,63,34,250,127,63,83,250,127,63,131,250,127,63,178,250,127,63,224,250,127,63,12,251,127,63,55,251,127,63,97,251,127,63,138,251,127,63,178,251,127,63,217,251,127,63,255,251,127,63,36,252,127,63,72,252,127,63,107,252,127,63,141,252,127,63,173,252,127,63,205,252,127,63,237,252,127,63,11,253,127,63,40,253,127,63,69,253,127,63,96,253,127,63,123,253,127,63,149,253,127,63,174,253,127,63,199,253,127,63,222,253,127,63,245,253,127,63,12,254,127,63,33,254,127,63,54,254,127,63,74,254,127,63,93,254,127,63,112,254,127,63,130,254,127,63,148,254,127,63,165,254,127,63,181,254,127,63,197,254,127,63,212,254,127,63,227,254,127,63,241,254,127,63,254,254,127,63,11,255,127,63,24,255,127,63,36,255,127,63,47,255,127,63,59,255,127,63,69,255,127,63,79,255,127,63,89,255,127,63,99,255,127,63,108,255,127,63,116,255,127,63,124,255,127,63,132,255,127,63,140,255,127,63,147,255,127,63,154,255,127,63,160,255,127,63,166,255,127,63,172,255,127,63,178,255,127,63,183,255,127,63,188,255,127,63,193,255,127,63,197,255,127,63,202,255,127,63,206,255,127,63,209,255,127,63,213,255,127,63,216,255,127,63,220,255,127,63,223,255,127,63,225,255,127,63,228,255,127,63,230,255,127,63,233,255,127,63,235,255,127,63,237,255,127,63,239,255,127,63,240,255,127,63,242,255,127,63,243,255,127,63,245,255,127,63,246,255,127,63,247,255,127,63,248,255,127,63,249,255,127,63,250,255,127,63,251,255,127,63,251,255,127,63,252,255,127,63,252,255,127,63,253,255,127,63,253,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,198,63,120,51,98,136,11,53,151,200,193,53,80,233,61,54,183,247,156,54,46,124,234,54,153,192,35,55,244,2,90,55,56,3,140,55,227,228,174,55,177,166,213,55,108,36,0,56,146,101,23,56,201,150,48,56,18,184,75,56,81,201,104,56,94,229,131,56,29,94,148,56,229,206,165,56,167,55,184,56,128,152,203,56,85,241,223,56,36,66,245,56,126,197,5,57,238,101,17,57,99,130,29,57,207,26,42,57,63,47,55,57,179,191,68,57,30,204,82,57,141,84,97,57,243,88,112,57,94,217,127,57,227,234,135,57,18,39,144,57,64,161,152,57,105,89,161,57,146,79,170,57,181,131,179,57,215,245,188,57,245,165,198,57,14,148,208,57,34,192,218,57,46,42,229,57,57,210,239,57,60,184,250,57,27,238,2,58,22,159,8,58,13,111,14,58,0,94,20,58,239,107,26,58,218,152,32,58,192,228,38,58,161,79,45,58,124,217,51,58,83,130,58,58,37,74,65,58,240,48,72,58,182,54,79,58,116,91,86,58,45,159,93,58,222,1,101,58,136,131,108,58,42,36,116,58,196,227,123,58,44,225,129,58,241,223,133,58,49,238,137,58,238,11,142,58,37,57,146,58,215,117,150,58,5,194,154,58,174,29,159,58,209,136,163,58,110,3,168,58,134,141,172,58,24,39,177,58,36,208,181,58,169,136,186,58,169,80,191,58,33,40,196,58,19,15,201,58,126,5,206,58,98,11,211,58,191,32,216,58,148,69,221,58,225,121,226,58,166,189,231,58,227,16,237,58,152,115,242,58,196,229,247,58,103,103,253,58,65,124,1,59,137,76,4,59,141,36,7,59,76,4,10,59,198,235,12,59,251,218,15,59,235,209,18,59,149,208,21,59,251,214,24,59,26,229,27,59,244,250,30,59,136,24,34,59,215,61,37,59,223,106,40,59,161,159,43,59,29,220,46,59,83,32,50,59,66,108,53,59,234,191,56,59,76,27,60,59,103,126,63,59,59,233,66,59,199,91,70,59,12,214,73,59,10,88,77,59,193,225,80,59,48,115,84,59,86,12,88,59,53,173,91,59,204,85,95,59,26,6,99,59,32,190,102,59,222,125,106,59,82,69,110,59,127,20,114,59,97,235,117,59,251,201,121,59,76,176,125,59,41,207,128,59,8,202,130,59,194,200,132,59,87,203,134,59,198,209,136,59,17,220,138,59,55,234,140,59,55,252,142,59,18,18,145,59,199,43,147,59,87,73,149,59,194,106,151,59,6,144,153,59,37,185,155,59,30,230,157,59,241,22,160,59,158,75,162,59,37,132,164,59,134,192,166,59,192,0,169,59,212,68,171,59,193,140,173,59,137,216,175,59,41,40,178,59,163,123,180,59,245,210,182,59,33,46,185,59,38,141,187,59,4,240,189,59,186,86,192,59,73,193,194,59,177,47,197,59,242,161,199,59,10,24,202,59,251,145,204,59,196,15,207,59,102,145,209,59,223,22,212,59,49,160,214,59,90,45,217,59,91,190,219,59,51,83,222,59,227,235,224,59,107,136,227,59,201,40,230,59,255,204,232,59,12,117,235,59,240,32,238,59,171,208,240,59,61,132,243,59,165,59,246,59,228,246,248,59,250,181,251,59,229,120,254,59,212,159,0,60,32,5,2,60,87,108,3,60,121,213,4,60,134,64,6,60,126,173,7,60,96,28,9,60,45,141,10,60,229,255,11,60,136,116,13,60,21,235,14,60,141,99,16,60,239,221,17,60,59,90,19,60,114,216,20,60,147,88,22,60,158,218,23,60,147,94,25,60,115,228,26,60,60,108,28,60,240,245,29,60,141,129,31,60,20,15,33,60,133,158,34,60,224,47,36,60,36,195,37,60,82,88,39,60,105,239,40,60,106,136,42,60,84,35,44,60,40,192,45,60,229,94,47,60,139,255,48,60,26,162,50,60,146,70,52,60,243,236,53,60,61,149,55,60,112,63,57,60,140,235,58,60,145,153,60,60,126,73,62,60,84,251,63,60,18,175,65,60,185,100,67,60,72,28,69,60,192,213,70,60,31,145,72,60,103,78,74,60,151,13,76,60,175,206,77,60,176,145,79,60,152,86,81,60,103,29,83,60,31,230,84,60,190,176,86,60,69,125,88,60,179,75,90,60,9,28,92,60,71,238,93,60,107,194,95,60,119,152,97,60,106,112,99,60,68,74,101,60,5,38,103,60,173,3,105,60,60,227,106,60,178,196,108,60,14,168,110,60,81,141,112,60,123,116,114,60,139,93,116,60,130,72,118,60,95,53,120,60,34,36,122,60,203,20,124,60,90,7,126,60,208,251,127,60,22,249,128,60,54,245,129,60,74,242,130,60,80,240,131,60,73,239,132,60,53,239,133,60,19,240,134,60,229,241,135,60,169,244,136,60,95,248,137,60,8,253,138,60,164,2,140,60,50,9,141,60,178,16,142,60,37,25,143,60,139,34,144,60,226,44,145,60,44,56,146,60,104,68,147,60,150,81,148,60,182,95,149,60,201,110,150,60,205,126,151,60,196,143,152,60,172,161,153,60,135,180,154,60,83,200,155,60,17,221,156,60,193,242,157,60,98,9,159,60,245,32,160,60,122,57,161,60,241,82,162,60,89,109,163,60,178,136,164,60,253,164,165,60,57,194,166,60,103,224,167,60,134,255,168,60,151,31,170,60,152,64,171,60,139,98,172,60,111,133,173,60,68,169,174,60,10,206,175,60,193,243,176,60,105,26,178,60,2,66,179,60,139,106,180,60,6,148,181,60,113,190,182,60,205,233,183,60,26,22,185,60,87,67,186,60,133,113,187,60,163,160,188,60,177,208,189,60,177,1,191,60,160,51,192,60,128,102,193,60,80,154,194,60,16,207,195,60,193,4,197,60,97,59,198,60,242,114,199,60,114,171,200,60,227,228,201,60,67,31,203,60,147,90,204,60,211,150,205,60,3,212,206,60,34,18,208,60,49,81,209,60,48,145,210,60,30,210,211,60,252,19,213,60,201,86,214,60,133,154,215,60,49,223,216,60,204,36,218,60,86,107,219,60,208,178,220,60,56,251,221,60,144,68,223,60,214,142,224,60,12,218,225,60,48,38,227,60,67,115,228,60,69,193,229,60,54,16,231,60,21,96,232,60,227,176,233,60,160,2,235,60,75,85,236,60,228,168,237,60,108,253,238,60,226,82,240,60,70,169,241,60,153,0,243,60,218,88,244,60,8,178,245,60,37,12,247,60,48,103,248,60,41,195,249,60,15,32,251,60,228,125,252,60,166,220,253,60,85,60,255,60,121,78,0,61,63,255,0,61,123,176,1,61,46,98,2,61,88,20,3,61,248,198,3,61,15,122,4,61,156,45,5,61,161,225,5,61,27,150,6,61,12,75,7,61,116,0,8,61,82,182,8,61,167,108,9,61,113,35,10,61,179,218,10,61,106,146,11,61,152,74,12,61,60,3,13,61,87,188,13,61,231,117,14,61,238,47,15,61,107,234,15,61,94,165,16,61,199,96,17,61,166,28,18,61,251,216,18,61,198,149,19,61,7,83,20,61,190,16,21,61,234,206,21,61,141,141,22,61,165,76,23,61,52,12,24,61,56,204,24,61,177,140,25,61,161,77,26,61,6,15,27,61,224,208,27,61,48,147,28,61,246,85,29,61,49,25,30,61,226,220,30,61,8,161,31,61,164,101,32,61,181,42,33,61,59,240,33,61,55,182,34,61,168,124,35,61,142,67,36,61,233,10,37,61,186,210,37,61,255,154,38,61,186,99,39,61,234,44,40,61,143,246,40,61,168,192,41,61,55,139,42,61,59,86,43,61,180,33,44,61,161,237,44,61,4,186,45,61,219,134,46,61,38,84,47,61,231,33,48,61,28,240,48,61,198,190,49,61,229,141,50,61,120,93,51,61,127,45,52,61,251,253,52,61,236,206,53,61,81,160,54,61,42,114,55,61,120,68,56,61,58,23,57,61,112,234,57,61,27,190,58,61,58,146,59,61,204,102,60,61,211,59,61,61,79,17,62,61,62,231,62,61,161,189,63,61,120,148,64,61,195,107,65,61,130,67,66,61,181,27,67,61,92,244,67,61,118,205,68,61,4,167,69,61,6,129,70,61,124,91,71,61,101,54,72,61,194,17,73,61,146,237,73,61,214,201,74,61,141,166,75,61,184,131,76,61,86,97,77,61,104,63,78,61,236,29,79,61,229,252,79,61,80,220,80,61,46,188,81,61,128,156,82,61,69,125,83,61,125,94,84,61,40,64,85,61,69,34,86,61,214,4,87,61,218,231,87,61,81,203,88,61,58,175,89,61,150,147,90,61,101,120,91,61,167,93,92,61,91,67,93,61,130,41,94,61,28,16,95,61,40,247,95,61,167,222,96,61,152,198,97,61,251,174,98,61,209,151,99,61,25,129,100,61,212,106,101,61,0,85,102,61,159,63,103,61,176,42,104,61,51,22,105,61,41,2,106,61,144,238,106,61,105,219,107,61,180,200,108,61,113,182,109,61,160,164,110,61,65,147,111,61,84,130,112,61,216,113,113,61,206,97,114,61,54,82,115,61,15,67,116,61,89,52,117,61,22,38,118,61,67,24,119,61,226,10,120,61,243,253,120,61,117,241,121,61,104,229,122,61,204,217,123,61,162,206,124,61,232,195,125,61,160,185,126,61,201,175,127,61,49,83,128,61,183,206,128,61,117,74,129,61,107,198,129,61,154,66,130,61,1,191,130,61,160,59,131,61,120,184,131,61,136,53,132,61,209,178,132,61,81,48,133,61,10,174,133,61,251,43,134,61,37,170,134,61,134,40,135,61,32,167,135,61,242,37,136,61,252,164,136,61,62,36,137,61,184,163,137,61,106,35,138,61,84,163,138,61,118,35,139,61,209,163,139,61,99,36,140,61,45,165,140,61,46,38,141,61,104,167,141,61,218,40,142,61,131,170,142,61,100,44,143,61,125,174,143,61,206,48,144,61,86,179,144,61,23,54,145,61,14,185,145,61,62,60,146,61,165,191,146,61,67,67,147,61,26,199,147,61,39,75,148,61,109,207,148,61,234,83,149,61,158,216,149,61,138,93,150,61,173,226,150,61,7,104,151,61,153,237,151,61,98,115,152,61,99,249,152,61,155,127,153,61,10,6,154,61,176,140,154,61,142,19,155,61,163,154,155,61,239,33,156,61,114,169,156,61,44,49,157,61,29,185,157,61,69,65,158,61,165,201,158,61,59,82,159,61,8,219,159,61,13,100,160,61,72,237,160,61,186,118,161,61,99,0,162,61,67,138,162,61,90,20,163,61,167,158,163,61,43,41,164,61,230,179,164,61,216,62,165,61,0,202,165,61,95,85,166,61,245,224,166,61,193,108,167,61,196,248,167,61,254,132,168,61,110,17,169,61,20,158,169,61,241,42,170,61,4,184,170,61,78,69,171,61,206,210,171,61,133,96,172,61,113,238,172,61,149,124,173,61,238,10,174,61,126,153,174,61,67,40,175,61,63,183,175,61,114,70,176,61,218,213,176,61,120,101,177,61,77,245,177,61,88,133,178,61,152,21,179,61,15,166,179,61,187,54,180,61,158,199,180,61,182,88,181,61,4,234,181,61,137,123,182,61,67,13,183,61,50,159,183,61,88,49,184,61,179,195,184,61,68,86,185,61,11,233,185,61,7,124,186,61,57,15,187,61,160,162,187,61,61,54,188,61,16,202,188,61,24,94,189,61,85,242,189,61,200,134,190,61,112,27,191,61,78,176,191,61,97,69,192,61,170,218,192,61,39,112,193,61,218,5,194,61,194,155,194,61,224,49,195,61,50,200,195,61,186,94,196,61,119,245,196,61,104,140,197,61,143,35,198,61,235,186,198,61,124,82,199,61,66,234,199,61,61,130,200,61,108,26,201,61,209,178,201,61,106,75,202,61,57,228,202,61,59,125,203,61,115,22,204,61,224,175,204,61,129,73,205,61,86,227,205,61,97,125,206,61,159,23,207,61,19,178,207,61,187,76,208,61,151,231,208,61,168,130,209,61,237,29,210,61,103,185,210,61,21,85,211,61,248,240,211,61,14,141,212,61,89,41,213,61,216,197,213,61,140,98,214,61,115,255,214,61,143,156,215,61,223,57,216,61,99,215,216,61,27,117,217,61,7,19,218,61,38,177,218,61,122,79,219,61,2,238,219,61,189,140,220,61,173,43,221,61,208,202,221,61,39,106,222,61,178,9,223,61,112,169,223,61,98,73,224,61,136,233,224,61,226,137,225,61,111,42,226,61,47,203,226,61,35,108,227,61,74,13,228,61,165,174,228,61,52,80,229,61,245,241,229,61,234,147,230,61,19,54,231,61,110,216,231,61,253,122,232,61,191,29,233,61,180,192,233,61,221,99,234,61,56,7,235,61,199,170,235,61,136,78,236,61,125,242,236,61,164,150,237,61,255,58,238,61,140,223,238,61,76,132,239,61,63,41,240,61,101,206,240,61,189,115,241,61,73,25,242,61,7,191,242,61,247,100,243,61,26,11,244,61,112,177,244,61,248,87,245,61,179,254,245,61,160,165,246,61,192,76,247,61,18,244,247,61,151,155,248,61,77,67,249,61,55,235,249,61,82,147,250,61,159,59,251,61,31,228,251,61,209,140,252,61,181,53,253,61,203,222,253,61,19,136,254,61,141,49,255,61,57,219,255,61,140,66,0,62,148,151,0,62,181,236,0,62,238,65,1,62,65,151,1,62,173,236,1,62,49,66,2,62,206,151,2,62,132,237,2,62,83,67,3,62,59,153,3,62,59,239,3,62,84,69,4,62,134,155,4,62,209,241,4,62,52,72,5,62,176,158,5,62,68,245,5,62,242,75,6,62,183,162,6,62,150,249,6,62,141,80,7,62,156,167,7,62,196,254,7,62,5,86,8,62,94,173,8,62,207,4,9,62,89,92,9,62,252,179,9,62,183,11,10,62,138,99,10,62,118,187,10,62,122,19,11,62,150,107,11,62,203,195,11,62,24,28,12,62,125,116,12,62,250,204,12,62,144,37,13,62,62,126,13,62,4,215,13,62,227,47,14,62,217,136,14,62,232,225,14,62,15,59,15,62,78,148,15,62,165,237,15,62,20,71,16,62,155,160,16,62,58,250,16,62,241,83,17,62,193,173,17,62,168,7,18,62,167,97,18,62,190,187,18,62,237,21,19,62,51,112,19,62,146,202,19,62,9,37,20,62,151,127,20,62,61,218,20,62,251,52,21,62,209,143,21,62,190,234,21,62,195,69,22,62,224,160,22,62,21,252,22,62,97,87,23,62,197,178,23,62,64,14,24,62,211,105,24,62,126,197,24,62,64,33,25,62,26,125,25,62,11,217,25,62,20,53,26,62,52,145,26,62,108,237,26,62,187,73,27,62,34,166,27,62,160,2,28,62,53,95,28,62,226,187,28,62,166,24,29,62,129,117,29,62,116,210,29,62,126,47,30,62,159,140,30,62,215,233,30,62,39,71,31,62,141,164,31,62,11,2,32,62,160,95,32,62,76,189,32,62,16,27,33,62,234,120,33,62,219,214,33,62,228,52,34,62,3,147,34,62,58,241,34,62,135,79,35,62,235,173,35,62,103,12,36,62,249,106,36,62,162,201,36,62,98,40,37,62,56,135,37,62,38,230,37,62,42,69,38,62,69,164,38,62,119,3,39,62,192,98,39,62,31,194,39,62,149,33,40,62,33,129,40,62,197,224,40,62,126,64,41,62,79,160,41,62,54,0,42,62,51,96,42,62,72,192,42,62,114,32,43,62,179,128,43,62,11,225,43,62,121,65,44,62,253,161,44,62,152,2,45,62,73,99,45,62,16,196,45,62,238,36,46,62,226,133,46,62,237,230,46,62,13,72,47,62,68,169,47,62,145,10,48,62,245,107,48,62,110,205,48,62,254,46,49,62,163,144,49,62,95,242,49,62,49,84,50,62,25,182,50,62,23,24,51,62,43,122,51,62,85,220,51,62,148,62,52,62,234,160,52,62,86,3,53,62,216,101,53,62,111,200,53,62,28,43,54,62,223,141,54,62,184,240,54,62,167,83,55,62,171,182,55,62,197,25,56,62,245,124,56,62,59,224,56,62,150,67,57,62,7,167,57,62,141,10,58,62,41,110,58,62,219,209,58,62,162,53,59,62,126,153,59,62,112,253,59,62,120,97,60,62,149,197,60,62,199,41,61,62,15,142,61,62,108,242,61,62,222,86,62,62,102,187,62,62,3,32,63,62,181,132,63,62,125,233,63,62,90,78,64,62,75,179,64,62,83,24,65,62,111,125,65,62,160,226,65,62,231,71,66,62,66,173,66,62,179,18,67,62,57,120,67,62,211,221,67,62,131,67,68,62,71,169,68,62,33,15,69,62,15,117,69,62,18,219,69,62,42,65,70,62,87,167,70,62,153,13,71,62,240,115,71,62,91,218,71,62,219,64,72,62,111,167,72,62,25,14,73,62,215,116,73,62,169,219,73,62,144,66,74,62,140,169,74,62,157,16,75,62,193,119,75,62,251,222,75,62,73,70,76,62,171,173,76,62,34,21,77,62,173,124,77,62,76,228,77,62,0,76,78,62,200,179,78,62,164,27,79,62,149,131,79,62,154,235,79,62,179,83,80,62,225,187,80,62,34,36,81,62,120,140,81,62,225,244,81,62,95,93,82,62,241,197,82,62,151,46,83,62,81,151,83,62,31,0,84,62,1,105,84,62,247,209,84,62,0,59,85,62,30,164,85,62,79,13,86,62,149,118,86,62,238,223,86,62,91,73,87,62,219,178,87,62,112,28,88,62,24,134,88,62,211,239,88,62,163,89,89,62,134,195,89,62,124,45,90,62,134,151,90,62,164,1,91,62,213,107,91,62,26,214,91,62,114,64,92,62,221,170,92,62,92,21,93,62,239,127,93,62,148,234,93,62,77,85,94,62,26,192,94,62,249,42,95,62,236,149,95,62,242,0,96,62,11,108,96,62,55,215,96,62,119,66,97,62,202,173,97,62,47,25,98,62,168,132,98,62,52,240,98,62,210,91,99,62,132,199,99,62,73,51,100,62,32,159,100,62,11,11,101,62,8,119,101,62,24,227,101,62,59,79,102,62,113,187,102,62,186,39,103,62,21,148,103,62,131,0,104,62,3,109,104,62,151,217,104,62,60,70,105,62,245,178,105,62,192,31,106,62,157,140,106,62,141,249,106,62,144,102,107,62,165,211,107,62,204,64,108,62,6,174,108,62,82,27,109,62,176,136,109,62,33,246,109,62,164,99,110,62,57,209,110,62,225,62,111,62,154,172,111,62,102,26,112,62,68,136,112,62,52,246,112,62,55,100,113,62,75,210,113,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([113,64,114,62,169,174,114,62,243,28,115,62,80,139,115,62,190,249,115,62,61,104,116,62,207,214,116,62,115,69,117,62,40,180,117,62,239,34,118,62,200,145,118,62,179,0,119,62,175,111,119,62,189,222,119,62,221,77,120,62,14,189,120,62,80,44,121,62,165,155,121,62,10,11,122,62,130,122,122,62,10,234,122,62,164,89,123,62,80,201,123,62,13,57,124,62,219,168,124,62,186,24,125,62,171,136,125,62,173,248,125,62,192,104,126,62,228,216,126,62,26,73,127,62,96,185,127,62,220,20,128,62,16,77,128,62,77,133,128,62,147,189,128,62,225,245,128,62,55,46,129,62,150,102,129,62,253,158,129,62,109,215,129,62,229,15,130,62,102,72,130,62,238,128,130,62,128,185,130,62,25,242,130,62,187,42,131,62,102,99,131,62,24,156,131,62,211,212,131,62,150,13,132,62,98,70,132,62,53,127,132,62,17,184,132,62,245,240,132,62,226,41,133,62,214,98,133,62,211,155,133,62,216,212,133,62,229,13,134,62,250,70,134,62,23,128,134,62,61,185,134,62,106,242,134,62,160,43,135,62,221,100,135,62,35,158,135,62,112,215,135,62,198,16,136,62,35,74,136,62,137,131,136,62,247,188,136,62,108,246,136,62,233,47,137,62,111,105,137,62,252,162,137,62,145,220,137,62,46,22,138,62,211,79,138,62,127,137,138,62,52,195,138,62,240,252,138,62,180,54,139,62,128,112,139,62,84,170,139,62,47,228,139,62,18,30,140,62,253,87,140,62,239,145,140,62,233,203,140,62,235,5,141,62,245,63,141,62,6,122,141,62,31,180,141,62,63,238,141,62,103,40,142,62,150,98,142,62,205,156,142,62,12,215,142,62,82,17,143,62,159,75,143,62,245,133,143,62,81,192,143,62,181,250,143,62,33,53,144,62,147,111,144,62,14,170,144,62,143,228,144,62,25,31,145,62,169,89,145,62,65,148,145,62,224,206,145,62,134,9,146,62,52,68,146,62,233,126,146,62,165,185,146,62,105,244,146,62,52,47,147,62,6,106,147,62,223,164,147,62,191,223,147,62,167,26,148,62,150,85,148,62,139,144,148,62,136,203,148,62,140,6,149,62,152,65,149,62,170,124,149,62,195,183,149,62,227,242,149,62,11,46,150,62,57,105,150,62,111,164,150,62,171,223,150,62,238,26,151,62,56,86,151,62,138,145,151,62,226,204,151,62,65,8,152,62,167,67,152,62,19,127,152,62,135,186,152,62,1,246,152,62,130,49,153,62,10,109,153,62,153,168,153,62,47,228,153,62,203,31,154,62,110,91,154,62,24,151,154,62,200,210,154,62,127,14,155,62,61,74,155,62,2,134,155,62,205,193,155,62,158,253,155,62,119,57,156,62,85,117,156,62,59,177,156,62,39,237,156,62,25,41,157,62,18,101,157,62,18,161,157,62,24,221,157,62,36,25,158,62,55,85,158,62,80,145,158,62,112,205,158,62,150,9,159,62,195,69,159,62,246,129,159,62,47,190,159,62,111,250,159,62,180,54,160,62,1,115,160,62,83,175,160,62,172,235,160,62,11,40,161,62,112,100,161,62,219,160,161,62,77,221,161,62,196,25,162,62,66,86,162,62,198,146,162,62,81,207,162,62,225,11,163,62,119,72,163,62,20,133,163,62,182,193,163,62,95,254,163,62,13,59,164,62,194,119,164,62,125,180,164,62,61,241,164,62,4,46,165,62,208,106,165,62,162,167,165,62,123,228,165,62,89,33,166,62,61,94,166,62,39,155,166,62,23,216,166,62,12,21,167,62,7,82,167,62,8,143,167,62,15,204,167,62,28,9,168,62,46,70,168,62,70,131,168,62,100,192,168,62,136,253,168,62,177,58,169,62,223,119,169,62,20,181,169,62,78,242,169,62,141,47,170,62,211,108,170,62,29,170,170,62,109,231,170,62,195,36,171,62,31,98,171,62,127,159,171,62,230,220,171,62,81,26,172,62,194,87,172,62,57,149,172,62,181,210,172,62,54,16,173,62,189,77,173,62,73,139,173,62,218,200,173,62,113,6,174,62,13,68,174,62,174,129,174,62,85,191,174,62,0,253,174,62,177,58,175,62,103,120,175,62,35,182,175,62,227,243,175,62,169,49,176,62,116,111,176,62,68,173,176,62,25,235,176,62,243,40,177,62,210,102,177,62,182,164,177,62,160,226,177,62,142,32,178,62,129,94,178,62,121,156,178,62,119,218,178,62,121,24,179,62,128,86,179,62,140,148,179,62,157,210,179,62,178,16,180,62,205,78,180,62,236,140,180,62,16,203,180,62,57,9,181,62,103,71,181,62,154,133,181,62,209,195,181,62,13,2,182,62,78,64,182,62,147,126,182,62,221,188,182,62,44,251,182,62,127,57,183,62,215,119,183,62,52,182,183,62,149,244,183,62,251,50,184,62,101,113,184,62,212,175,184,62,71,238,184,62,191,44,185,62,59,107,185,62,188,169,185,62,65,232,185,62,202,38,186,62,88,101,186,62,235,163,186,62,129,226,186,62,28,33,187,62,188,95,187,62,95,158,187,62,7,221,187,62,180,27,188,62,100,90,188,62,25,153,188,62,210,215,188,62,143,22,189,62,80,85,189,62,22,148,189,62,223,210,189,62,173,17,190,62,127,80,190,62,85,143,190,62,47,206,190,62,13,13,191,62,239,75,191,62,213,138,191,62,191,201,191,62,173,8,192,62,159,71,192,62,149,134,192,62,143,197,192,62,141,4,193,62,143,67,193,62,148,130,193,62,158,193,193,62,171,0,194,62,188,63,194,62,209,126,194,62,234,189,194,62,6,253,194,62,38,60,195,62,74,123,195,62,113,186,195,62,157,249,195,62,204,56,196,62,254,119,196,62,52,183,196,62,110,246,196,62,171,53,197,62,236,116,197,62,49,180,197,62,121,243,197,62,196,50,198,62,19,114,198,62,102,177,198,62,188,240,198,62,21,48,199,62,114,111,199,62,210,174,199,62,54,238,199,62,157,45,200,62,7,109,200,62,117,172,200,62,230,235,200,62,90,43,201,62,209,106,201,62,76,170,201,62,202,233,201,62,75,41,202,62,208,104,202,62,88,168,202,62,226,231,202,62,112,39,203,62,1,103,203,62,149,166,203,62,45,230,203,62,199,37,204,62,100,101,204,62,4,165,204,62,168,228,204,62,78,36,205,62,248,99,205,62,164,163,205,62,83,227,205,62,5,35,206,62,186,98,206,62,114,162,206,62,45,226,206,62,234,33,207,62,171,97,207,62,110,161,207,62,52,225,207,62,253,32,208,62,200,96,208,62,150,160,208,62,103,224,208,62,59,32,209,62,17,96,209,62,234,159,209,62,198,223,209,62,164,31,210,62,133,95,210,62,104,159,210,62,78,223,210,62,55,31,211,62,33,95,211,62,15,159,211,62,255,222,211,62,241,30,212,62,230,94,212,62,221,158,212,62,215,222,212,62,211,30,213,62,209,94,213,62,210,158,213,62,213,222,213,62,219,30,214,62,226,94,214,62,236,158,214,62,248,222,214,62,7,31,215,62,24,95,215,62,42,159,215,62,63,223,215,62,87,31,216,62,112,95,216,62,139,159,216,62,169,223,216,62,200,31,217,62,234,95,217,62,14,160,217,62,51,224,217,62,91,32,218,62,133,96,218,62,176,160,218,62,222,224,218,62,13,33,219,62,63,97,219,62,114,161,219,62,167,225,219,62,222,33,220,62,23,98,220,62,82,162,220,62,142,226,220,62,204,34,221,62,12,99,221,62,78,163,221,62,146,227,221,62,215,35,222,62,29,100,222,62,102,164,222,62,176,228,222,62,252,36,223,62,73,101,223,62,152,165,223,62,232,229,223,62,58,38,224,62,142,102,224,62,227,166,224,62,57,231,224,62,145,39,225,62,234,103,225,62,69,168,225,62,161,232,225,62,255,40,226,62,94,105,226,62,190,169,226,62,32,234,226,62,131,42,227,62,231,106,227,62,76,171,227,62,179,235,227,62,27,44,228,62,132,108,228,62,238,172,228,62,90,237,228,62,199,45,229,62,52,110,229,62,163,174,229,62,19,239,229,62,133,47,230,62,247,111,230,62,106,176,230,62,222,240,230,62,83,49,231,62,202,113,231,62,65,178,231,62,185,242,231,62,50,51,232,62,172,115,232,62,38,180,232,62,162,244,232,62,31,53,233,62,156,117,233,62,26,182,233,62,153,246,233,62,25,55,234,62,153,119,234,62,26,184,234,62,156,248,234,62,31,57,235,62,162,121,235,62,38,186,235,62,170,250,235,62,47,59,236,62,181,123,236,62,59,188,236,62,194,252,236,62,73,61,237,62,209,125,237,62,89,190,237,62,226,254,237,62,107,63,238,62,245,127,238,62,127,192,238,62,10,1,239,62,149,65,239,62,32,130,239,62,171,194,239,62,55,3,240,62,196,67,240,62,80,132,240,62,221,196,240,62,106,5,241,62,247,69,241,62,132,134,241,62,18,199,241,62,160,7,242,62,45,72,242,62,187,136,242,62,74,201,242,62,216,9,243,62,102,74,243,62,244,138,243,62,131,203,243,62,17,12,244,62,159,76,244,62,46,141,244,62,188,205,244,62,74,14,245,62,216,78,245,62,102,143,245,62,244,207,245,62,129,16,246,62,15,81,246,62,156,145,246,62,41,210,246,62,182,18,247,62,67,83,247,62,207,147,247,62,91,212,247,62,231,20,248,62,115,85,248,62,254,149,248,62,136,214,248,62,19,23,249,62,157,87,249,62,38,152,249,62,175,216,249,62,56,25,250,62,192,89,250,62,72,154,250,62,207,218,250,62,86,27,251,62,220,91,251,62,97,156,251,62,230,220,251,62,106,29,252,62,238,93,252,62,113,158,252,62,243,222,252,62,117,31,253,62,245,95,253,62,118,160,253,62,245,224,253,62,116,33,254,62,241,97,254,62,110,162,254,62,235,226,254,62,102,35,255,62,224,99,255,62,90,164,255,62,211,228,255,62,165,18,0,63,225,50,0,63,27,83,0,63,86,115,0,63,144,147,0,63,201,179,0,63,2,212,0,63,58,244,0,63,114,20,1,63,169,52,1,63,224,84,1,63,22,117,1,63,76,149,1,63,129,181,1,63,181,213,1,63,233,245,1,63,28,22,2,63,78,54,2,63,128,86,2,63,178,118,2,63,226,150,2,63,18,183,2,63,65,215,2,63,112,247,2,63,157,23,3,63,203,55,3,63,247,87,3,63,35,120,3,63,78,152,3,63,120,184,3,63,161,216,3,63,202,248,3,63,242,24,4,63,25,57,4,63,63,89,4,63,101,121,4,63,137,153,4,63,173,185,4,63,208,217,4,63,243,249,4,63,20,26,5,63,52,58,5,63,84,90,5,63,115,122,5,63,145,154,5,63,173,186,5,63,202,218,5,63,229,250,5,63,255,26,6,63,24,59,6,63,48,91,6,63,72,123,6,63,94,155,6,63,116,187,6,63,136,219,6,63,155,251,6,63,174,27,7,63,191,59,7,63,208,91,7,63,223,123,7,63,237,155,7,63,250,187,7,63,7,220,7,63,18,252,7,63,28,28,8,63,37,60,8,63,44,92,8,63,51,124,8,63,57,156,8,63,61,188,8,63,64,220,8,63,67,252,8,63,68,28,9,63,68,60,9,63,66,92,9,63,64,124,9,63,60,156,9,63,55,188,9,63,49,220,9,63,41,252,9,63,33,28,10,63,23,60,10,63,12,92,10,63,255,123,10,63,242,155,10,63,227,187,10,63,211,219,10,63,193,251,10,63,174,27,11,63,154,59,11,63,133,91,11,63,110,123,11,63,86,155,11,63,60,187,11,63,33,219,11,63,5,251,11,63,231,26,12,63,200,58,12,63,168,90,12,63,134,122,12,63,98,154,12,63,62,186,12,63,23,218,12,63,240,249,12,63,199,25,13,63,156,57,13,63,112,89,13,63,66,121,13,63,19,153,13,63,227,184,13,63,176,216,13,63,125,248,13,63,72,24,14,63,17,56,14,63,216,87,14,63,159,119,14,63,99,151,14,63,38,183,14,63,232,214,14,63,167,246,14,63,101,22,15,63,34,54,15,63,221,85,15,63,150,117,15,63,78,149,15,63,4,181,15,63,184,212,15,63,106,244,15,63,27,20,16,63,202,51,16,63,120,83,16,63,36,115,16,63,206,146,16,63,118,178,16,63,28,210,16,63,193,241,16,63,100,17,17,63,6,49,17,63,165,80,17,63,67,112,17,63,223,143,17,63,121,175,17,63,17,207,17,63,167,238,17,63,60,14,18,63,206,45,18,63,95,77,18,63,238,108,18,63,123,140,18,63,7,172,18,63,144,203,18,63,23,235,18,63,157,10,19,63,32,42,19,63,162,73,19,63,34,105,19,63,159,136,19,63,27,168,19,63,149,199,19,63,13,231,19,63,131,6,20,63,247,37,20,63,104,69,20,63,216,100,20,63,70,132,20,63,178,163,20,63,27,195,20,63,131,226,20,63,233,1,21,63,76,33,21,63,174,64,21,63,13,96,21,63,106,127,21,63,197,158,21,63,31,190,21,63,117,221,21,63,202,252,21,63,29,28,22,63,109,59,22,63,188,90,22,63,8,122,22,63,82,153,22,63,153,184,22,63,223,215,22,63,34,247,22,63,100,22,23,63,162,53,23,63,223,84,23,63,26,116,23,63,82,147,23,63,136,178,23,63,187,209,23,63,237,240,23,63,28,16,24,63,73,47,24,63,115,78,24,63,155,109,24,63,193,140,24,63,228,171,24,63,6,203,24,63,36,234,24,63,65,9,25,63,91,40,25,63,115,71,25,63,136,102,25,63,155,133,25,63,171,164,25,63,185,195,25,63,197,226,25,63,206,1,26,63,213,32,26,63,217,63,26,63,219,94,26,63,218,125,26,63,215,156,26,63,210,187,26,63,202,218,26,63,191,249,26,63,178,24,27,63,162,55,27,63,144,86,27,63,123,117,27,63,100,148,27,63,74,179,27,63,46,210,27,63,15,241,27,63,237,15,28,63,201,46,28,63,162,77,28,63,121,108,28,63,77,139,28,63,31,170,28,63,237,200,28,63,185,231,28,63,131,6,29,63,74,37,29,63,14,68,29,63,207,98,29,63,142,129,29,63,74,160,29,63,3,191,29,63,186,221,29,63,110,252,29,63,31,27,30,63,205,57,30,63,121,88,30,63,34,119,30,63,200,149,30,63,107,180,30,63,12,211,30,63,170,241,30,63,69,16,31,63,221,46,31,63,114,77,31,63,5,108,31,63,148,138,31,63,33,169,31,63,171,199,31,63,50,230,31,63,182,4,32,63,56,35,32,63,182,65,32,63,50,96,32,63,170,126,32,63,32,157,32,63,147,187,32,63,3,218,32,63,112,248,32,63,218,22,33,63,65,53,33,63,165,83,33,63,6,114,33,63,100,144,33,63,191,174,33,63,23,205,33,63,108,235,33,63,190,9,34,63,13,40,34,63,89,70,34,63,162,100,34,63,232,130,34,63,43,161,34,63,107,191,34,63,167,221,34,63,225,251,34,63,24,26,35,63,75,56,35,63,123,86,35,63,168,116,35,63,211,146,35,63,249,176,35,63,29,207,35,63,62,237,35,63,91,11,36,63,118,41,36,63,141,71,36,63,161,101,36,63,177,131,36,63,191,161,36,63,201,191,36,63,208,221,36,63,212,251,36,63,213,25,37,63,210,55,37,63,204,85,37,63,195,115,37,63,183,145,37,63,167,175,37,63,148,205,37,63,126,235,37,63,101,9,38,63,72,39,38,63,40,69,38,63,4,99,38,63,221,128,38,63,179,158,38,63,134,188,38,63,85,218,38,63,33,248,38,63,233,21,39,63,174,51,39,63,112,81,39,63,46,111,39,63,233,140,39,63,160,170,39,63,84,200,39,63,4,230,39,63,178,3,40,63,91,33,40,63,1,63,40,63,164,92,40,63,67,122,40,63,223,151,40,63,120,181,40,63,12,211,40,63,158,240,40,63,43,14,41,63,182,43,41,63,60,73,41,63,192,102,41,63,63,132,41,63,187,161,41,63,52,191,41,63,169,220,41,63,26,250,41,63,136,23,42,63,242,52,42,63,89,82,42,63,188,111,42,63,28,141,42,63,119,170,42,63,208,199,42,63,36,229,42,63,117,2,43,63,194,31,43,63,12,61,43,63,82,90,43,63,148,119,43,63,211,148,43,63,14,178,43,63,69,207,43,63,120,236,43,63,168,9,44,63,212,38,44,63,252,67,44,63,33,97,44,63,66,126,44,63,95,155,44,63,120,184,44,63,142,213,44,63,159,242,44,63,173,15,45,63,184,44,45,63,190,73,45,63,193,102,45,63,191,131,45,63,186,160,45,63,177,189,45,63,165,218,45,63,148,247,45,63,128,20,46,63,103,49,46,63,75,78,46,63,43,107,46,63,7,136,46,63,224,164,46,63,180,193,46,63,132,222,46,63,81,251,46,63,26,24,47,63,222,52,47,63,159,81,47,63,92,110,47,63,21,139,47,63,202,167,47,63,123,196,47,63,40,225,47,63,209,253,47,63,118,26,48,63,23,55,48,63,180,83,48,63,77,112,48,63,226,140,48,63,115,169,48,63,0,198,48,63,137,226,48,63,14,255,48,63,142,27,49,63,11,56,49,63,132,84,49,63,248,112,49,63,105,141,49,63,214,169,49,63,62,198,49,63,162,226,49,63,2,255,49,63,95,27,50,63,182,55,50,63,10,84,50,63,90,112,50,63,166,140,50,63,237,168,50,63,48,197,50,63,111,225,50,63,170,253,50,63,225,25,51,63,19,54,51,63,66,82,51,63,108,110,51,63,146,138,51,63,180,166,51,63,209,194,51,63,234,222,51,63,0,251,51,63,16,23,52,63,29,51,52,63,37,79,52,63,41,107,52,63,41,135,52,63,37,163,52,63,28,191,52,63,15,219,52,63,253,246,52,63,232,18,53,63,206,46,53,63,176,74,53,63,141,102,53,63,102,130,53,63,59,158,53,63,11,186,53,63,215,213,53,63,159,241,53,63,98,13,54,63,33,41,54,63,220,68,54,63,146,96,54,63,68,124,54,63,241,151,54,63,154,179,54,63,63,207,54,63,223,234,54,63,123,6,55,63,18,34,55,63,165,61,55,63,52,89,55,63,190,116,55,63,67,144,55,63,196,171,55,63,65,199,55,63,185,226,55,63,45,254,55,63,156,25,56,63,7,53,56,63,109,80,56,63,207,107,56,63,44,135,56,63,133,162,56,63,217,189,56,63,40,217,56,63,115,244,56,63,186,15,57,63,252,42,57,63,57,70,57,63,114,97,57,63,166,124,57,63,214,151,57,63,1,179,57,63,40,206,57,63,74,233,57,63,103,4,58,63,128,31,58,63,148,58,58,63,163,85,58,63,174,112,58,63,180,139,58,63,182,166,58,63,179,193,58,63,171,220,58,63,159,247,58,63,142,18,59,63,120,45,59,63,94,72,59,63,63,99,59,63,27,126,59,63,243,152,59,63,197,179,59,63,148,206,59,63,93,233,59,63,34,4,60,63,226,30,60,63,157,57,60,63,84,84,60,63,5,111,60,63,178,137,60,63,91,164,60,63,254,190,60,63,157,217,60,63,55,244,60,63,204,14,61,63,93,41,61,63,232,67,61,63,111,94,61,63,241,120,61,63,110,147,61,63,231,173,61,63,91,200,61,63,201,226,61,63,51,253,61,63,152,23,62,63,249,49,62,63,84,76,62,63,171,102,62,63,252,128,62,63,73,155,62,63,145,181,62,63,212,207,62,63,19,234,62,63,76,4,63,63,128,30,63,63,176,56,63,63,219,82,63,63,0,109,63,63,33,135,63,63,61,161,63,63,84,187,63,63,102,213,63,63,115,239,63,63,123,9,64,63,127,35,64,63,125,61,64,63,118,87,64,63,106,113,64,63,90,139,64,63,68,165,64,63,42,191,64,63,10,217,64,63,229,242,64,63,188,12,65,63,141,38,65,63,90,64,65,63,33,90,65,63,228,115,65,63,161,141,65,63,89,167,65,63,13,193,65,63,187,218,65,63,100,244,65,63,8,14,66,63,167,39,66,63,65,65,66,63,214,90,66,63,102,116,66,63,241,141,66,63,119,167,66,63,248,192,66,63,115,218,66,63,234,243,66,63,91,13,67,63,199,38,67,63,47,64,67,63,145,89,67,63,238,114,67,63,69,140,67,63,152,165,67,63,230,190,67,63,46,216,67,63,113,241,67,63,175,10,68,63,232,35,68,63,28,61,68,63,75,86,68,63,116,111,68,63,153,136,68,63,184,161,68,63,210,186,68,63,230,211,68,63,246,236,68,63,0,6,69,63,5,31,69,63,5,56,69,63,0,81,69,63,245,105,69,63,230,130,69,63,209,155,69,63,182,180,69,63,151,205,69,63,114,230,69,63,72,255,69,63,25,24,70,63,229,48,70,63,171,73,70,63,108,98,70,63,40,123,70,63,222,147,70,63,143,172,70,63,59,197,70,63,226,221,70,63,131,246,70,63,31,15,71,63,182,39,71,63,71,64,71,63,211,88,71,63,90,113,71,63,220,137,71,63,88,162,71,63,207,186,71,63,64,211,71,63,172,235,71,63,19,4,72,63,116,28,72,63,209,52,72,63,39,77,72,63,121,101,72,63,197,125,72,63,11,150,72,63,77,174,72,63,137,198,72,63,191,222,72,63,240,246,72,63,28,15,73,63,66,39,73,63,99,63,73,63,127,87,73,63,149,111,73,63,166,135,73,63,177,159,73,63,183,183,73,63,183,207,73,63,178,231,73,63,168,255,73,63,152,23,74,63,131,47,74,63,104,71,74,63,72,95,74,63,34,119,74,63,247,142,74,63,199,166,74,63,145,190,74,63,85,214,74,63,20,238,74,63,206,5,75,63,130,29,75,63,49,53,75,63,218,76,75,63,126,100,75,63,28,124,75,63,181,147,75,63,72,171,75,63,213,194,75,63,93,218,75,63,224,241,75,63,93,9,76,63,213,32,76,63,71,56,76,63,179,79,76,63,26,103,76,63,124,126,76,63,216,149,76,63,46,173,76,63,127,196,76,63,202,219,76,63,16,243,76,63,80,10,77,63,139,33,77,63,192,56,77,63,240,79,77,63,26,103,77,63,62,126,77,63,93,149,77,63,118,172,77,63,137,195,77,63,151,218,77,63,160,241,77,63,163,8,78,63,160,31,78,63,151,54,78,63,137,77,78,63,118,100,78,63,93,123,78,63,62,146,78,63,25,169,78,63,239,191,78,63,192,214,78,63,138,237,78,63,79,4,79,63,15,27,79,63,201,49,79,63,125,72,79,63,43,95,79,63,212,117,79,63,119,140,79,63,21,163,79,63,172,185,79,63,63,208,79,63,203,230,79,63,82,253,79,63,211,19,80,63,79,42,80,63,197,64,80,63,53,87,80,63,159,109,80,63,4,132,80,63,99,154,80,63,189,176,80,63,16,199,80,63,94,221,80,63,167,243,80,63,233,9,81,63,38,32,81,63,93,54,81,63,143,76,81,63,187,98,81,63,225,120,81,63,1,143,81,63,28,165,81,63,48,187,81,63,64,209,81,63,73,231,81,63,77,253,81,63,75,19,82,63,67,41,82,63,53,63,82,63,34,85,82,63,9,107,82,63,234,128,82,63,198,150,82,63,155,172,82,63,107,194,82,63,53,216,82,63,250,237,82,63,185,3,83,63,113,25,83,63,37,47,83,63,210,68,83,63,121,90,83,63,27,112,83,63,183,133,83,63,77,155,83,63,222,176,83,63,104,198,83,63,237,219,83,63,108,241,83,63,230,6,84,63,89,28,84,63,199,49,84,63,46,71,84,63,145,92,84,63,237,113,84,63,67,135,84,63,148,156,84,63,223,177,84,63,35,199,84,63,99,220,84,63,156,241,84,63,207,6,85,63,253,27,85,63,37,49,85,63,71,70,85,63,99,91,85,63,121,112,85,63,138,133,85,63,149,154,85,63,153,175,85,63,152,196,85,63,146,217,85,63,133,238,85,63,114,3,86,63,90,24,86,63,60,45,86,63,24,66,86,63,238,86,86,63,190,107,86,63,136,128,86,63,76,149,86,63,11,170,86,63,196,190,86,63,118,211,86,63,35,232,86,63,203,252,86,63,108,17,87,63,7,38,87,63,156,58,87,63,44,79,87,63,182,99,87,63,58,120,87,63,183,140,87,63,47,161,87,63,162,181,87,63,14,202,87,63,116,222,87,63,213,242,87,63,47,7,88,63,132,27,88,63,211,47,88,63,28,68,88,63,95,88,88,63,156,108,88,63,211,128,88,63,4,149,88,63,47,169,88,63,85,189,88,63,116,209,88,63,142,229,88,63,162,249,88,63,175,13,89,63,183,33,89,63,185,53,89,63,181,73,89,63,171,93,89,63,155,113,89,63,134,133,89,63,106,153,89,63,72,173,89,63,33,193,89,63,243,212,89,63,192,232,89,63,135,252,89,63,71,16,90,63,2,36,90,63,183,55,90,63,102,75,90,63,15,95,90,63,178,114,90,63,79,134,90,63,230,153,90,63,119,173,90,63,3,193,90,63,136,212,90,63,7,232,90,63,129,251,90,63,244,14,91,63,98,34,91,63,201,53,91,63,43,73,91,63,135,92,91,63,220,111,91,63,44,131,91,63,118,150,91,63,186,169,91,63,248,188,91,63,47,208,91,63,97,227,91,63,141,246,91,63,179,9,92,63,212,28,92,63,238,47,92,63,2,67,92,63,16,86,92,63,24,105,92,63,26,124,92,63,23,143,92,63,13,162,92,63,253,180,92,63,232,199,92,63,204,218,92,63,171,237,92,63,131,0,93,63,86,19,93,63,34,38,93,63,233,56,93,63,169,75,93,63,100,94,93,63,24,113,93,63,199,131,93,63,112,150,93,63,18,169,93,63,175,187,93,63,70,206,93,63,215,224,93,63,97,243,93,63,230,5,94,63,101,24,94,63,222,42,94,63,81,61,94,63,190,79,94,63,36,98,94,63,133,116,94,63,224,134,94,63,53,153,94,63,132,171,94,63,205,189,94,63,16,208,94,63,77,226,94,63,132,244,94,63,181,6,95,63,224,24,95,63,5,43,95,63,36,61,95,63,61,79,95,63,80,97,95,63,93,115,95,63,101,133,95,63,102,151,95,63,97,169,95,63,86,187,95,63,69,205,95,63,46,223,95,63,18,241,95,63,239,2,96,63,198,20,96,63,151,38,96,63,98,56,96,63,40,74,96,63,231,91,96,63,160,109,96,63,84,127,96,63,1,145,96,63,168,162,96,63,73,180,96,63,229,197,96,63,122,215,96,63,10,233,96,63,147,250,96,63,22,12,97,63,148,29,97,63,11,47,97,63,125,64,97,63,232,81,97,63,77,99,97,63,173,116,97,63,6,134,97,63,90,151,97,63,167,168,97,63,239,185,97,63,48,203,97,63,108,220,97,63,162,237,97,63,209,254,97,63,251,15,98,63,30,33,98,63,60,50,98,63,84,67,98,63,101,84,98,63,113,101,98,63,119,118,98,63,119,135,98,63,112,152,98,63,100,169,98,63,82,186,98,63,58,203,98,63,28,220,98,63,247,236,98,63,205,253,98,63,157,14,99,63,103,31,99,63,43,48,99,63,233,64,99,63,161,81,99,63,83,98,99,63,255,114,99,63,165,131,99,63,69,148,99,63,224,164,99,63,116,181,99,63,2,198,99,63,138,214,99,63,13,231,99,63,137,247,99,63,255,7,100,63,112,24,100,63,218,40,100,63,62,57,100,63,157,73,100,63,246,89,100,63,72,106,100,63,149,122,100,63,219,138,100,63,28,155,100,63,87,171,100,63,140,187,100,63,186,203,100,63,227,219,100,63,6,236,100,63,35,252,100,63,58,12,101,63,75,28,101,63,86,44,101,63,91,60,101,63,91,76,101,63,84,92,101,63,71,108,101,63,53,124,101,63,28,140,101,63,254,155,101,63,217,171,101,63,175,187,101,63,126,203,101,63,72,219,101,63,12,235,101,63,202,250,101,63,130,10,102,63,52,26,102,63,224,41,102,63,134,57,102,63,38,73,102,63,193,88,102,63,85,104,102,63,227,119,102,63,108,135,102,63,238,150,102,63,107,166,102,63,226,181,102,63,83,197,102,63,190,212,102,63,35,228,102,63,130,243,102,63,219,2,103,63,46,18,103,63,124,33,103,63,195,48,103,63,5,64,103,63,64,79,103,63,118,94,103,63,166,109,103,63,208,124,103,63,244,139,103,63,18,155,103,63,42,170,103,63,61,185,103,63,73,200,103,63,80,215,103,63,80,230,103,63,75,245,103,63,64,4,104,63,47,19,104,63,24,34,104,63,251,48,104,63,217,63,104,63,176,78,104,63,130,93,104,63,78,108,104,63,20,123,104,63,212,137,104,63,142,152,104,63,66,167,104,63,240,181,104,63,153,196,104,63,60,211,104,63,217,225,104,63,112,240,104,63,1,255,104,63,140,13,105,63,17,28,105,63,145,42,105,63,11,57,105,63,127,71,105,63,237,85,105,63,85,100,105,63,183,114,105,63,20,129,105,63,106,143,105,63,187,157,105,63,6,172,105,63,75,186,105,63,139,200,105,63,196,214,105,63,248,228,105,63,38,243,105,63,78,1,106,63,112,15,106,63,141,29,106,63,163,43,106,63,180,57,106,63,191,71,106,63,196,85,106,63,196,99,106,63,189,113,106,63,177,127,106,63,159,141,106,63,135,155,106,63,106,169,106,63,70,183,106,63,29,197,106,63,238,210,106,63,186,224,106,63,127,238,106,63,63,252,106,63,249,9,107,63,173,23,107,63,91,37,107,63,4,51,107,63,167,64,107,63,68,78,107,63,219,91,107,63,109,105,107,63,249,118,107,63,127,132,107,63,255,145,107,63,122,159,107,63,238,172,107,63,94,186,107,63,199,199,107,63,42,213,107,63,136,226,107,63,224,239,107,63,51,253,107,63,128,10,108,63,198,23,108,63,8,37,108,63,67,50,108,63,121,63,108,63,169,76,108,63,211,89,108,63,248,102,108,63,23,116,108,63,48,129,108,63,68,142,108,63,82,155,108,63,90,168,108,63,92,181,108,63,89,194,108,63,80,207,108,63,65,220,108,63,45,233,108,63,19,246,108,63,243,2,109,63,206,15,109,63,163,28,109,63,114,41,109,63,60,54,109,63,0,67,109,63,190,79,109,63,119,92,109,63,42,105,109,63,215,117,109,63,127,130,109,63,33,143,109,63,189,155,109,63,84,168,109,63,229,180,109,63,113,193,109,63,247,205,109,63,119,218,109,63,242,230,109,63,103,243,109,63,214,255,109,63,64,12,110,63,164,24,110,63,3,37,110,63,91,49,110,63,175,61,110,63,253,73,110,63,69,86,110,63,135,98,110,63,196,110,110,63,252,122,110,63,45,135,110,63,90,147,110,63,128,159,110,63,161,171,110,63,189,183,110,63,211,195,110,63,227,207,110,63,238,219,110,63,243,231,110,63,243,243,110,63,237,255,110,63,226,11,111,63,209,23,111,63,186,35,111,63,158,47,111,63,125,59,111,63,85,71,111,63,41,83,111,63,247,94,111,63,191,106,111,63,130,118,111,63,63,130,111,63,247,141,111,63,169,153,111,63,86,165,111,63,253,176,111,63,159,188,111,63,59,200,111,63,210,211,111,63,99,223,111,63,239,234,111,63,117,246,111,63,246,1,112,63,114,13,112,63,231,24,112,63,88,36,112,63,195,47,112,63,40,59,112,63,137,70,112,63,227,81,112,63,56,93,112,63,136,104,112,63,210,115,112,63,23,127,112,63,87,138,112,63,145,149,112,63,197,160,112,63,244,171,112,63,30,183,112,63,66,194,112,63,97,205,112,63,123,216,112,63,143,227,112,63,157,238,112,63,167,249,112,63,171,4,113,63,169,15,113,63,162,26,113,63,150,37,113,63,132,48,113,63,109,59,113,63,81,70,113,63,47,81,113,63,8,92,113,63,219,102,113,63,170,113,113,63,114,124,113,63,54,135,113,63,244,145,113,63,173,156,113,63,96,167,113,63,14,178,113,63,183,188,113,63,91,199,113,63,249,209,113,63,146,220,113,63,37,231,113,63,179,241,113,63,60,252,113,63,192,6,114,63,62,17,114,63,183,27,114,63,43,38,114,63,154,48,114,63,3,59,114,63,103,69,114,63,197,79,114,63,31,90,114,63,115,100,114,63,194,110,114,63,11,121,114,63,79,131,114,63,143,141,114,63,200,151,114,63,253,161,114,63,44,172,114,63,87,182,114,63,123,192,114,63,155,202,114,63,182,212,114,63,203,222,114,63,219,232,114,63,230,242,114,63,235,252,114,63,236,6,115,63,231,16,115,63,221,26,115,63,206,36,115,63,186,46,115,63,160,56,115,63,130,66,115,63,94,76,115,63,53,86,115,63,7,96,115,63,212,105,115,63,155,115,115,63,94,125,115,63,27,135,115,63,211,144,115,63,134,154,115,63,52,164,115,63,221,173,115,63,128,183,115,63,31,193,115,63,184,202,115,63,77,212,115,63,220,221,115,63,102,231,115,63,235,240,115,63,107,250,115,63,230,3,116,63,92,13,116,63,204,22,116,63,56,32,116,63,159,41,116,63,0,51,116,63,93,60,116,63,180,69,116,63,6,79,116,63,84,88,116,63,156,97,116,63,223,106,116,63,29,116,116,63,87,125,116,63,139,134,116,63,186,143,116,63,228,152,116,63,9,162,116,63,41,171,116,63,68,180,116,63,91,189,116,63,108,198,116,63,120,207,116,63,127,216,116,63,129,225,116,63,127,234,116,63,119,243,116,63,106,252,116,63,89,5,117,63,66,14,117,63,38,23,117,63,6,32,117,63,225,40,117,63,182,49,117,63,135,58,117,63,83,67,117,63,26,76,117,63,220,84,117,63,153,93,117,63,81,102,117,63,4,111,117,63,179,119,117,63,92,128,117,63,1,137,117,63,160,145,117,63,59,154,117,63,209,162,117,63,98,171,117,63,239,179,117,63,118,188,117,63,249,196,117,63,118,205,117,63,239,213,117,63,99,222,117,63,210,230,117,63,61,239,117,63,162,247,117,63,3,0,118,63,95,8,118,63,182,16,118,63,8,25,118,63,86,33,118,63,159,41,118,63,227,49,118,63,34,58,118,63,92,66,118,63,146,74,118,63,195,82,118,63,239,90,118,63,22,99,118,63,57,107,118,63,86,115,118,63,112,123,118,63,132,131,118,63,148,139,118,63,158,147,118,63,165,155,118,63,166,163,118,63,163,171,118,63,155,179,118,63,142,187,118,63,125,195,118,63,103,203,118,63,76,211,118,63,45,219,118,63,9,227,118,63,224,234,118,63,178,242,118,63,128,250,118,63,74,2,119,63,14,10,119,63,206,17,119,63,137,25,119,63,64,33,119,63,242,40,119,63,160,48,119,63,72,56,119,63,237,63,119,63,140,71,119,63,39,79,119,63,190,86,119,63,79,94,119,63,220,101,119,63,101,109,119,63,233,116,119,63,105,124,119,63,228,131,119,63,90,139,119,63,204,146,119,63,57,154,119,63,162,161,119,63,6,169,119,63,101,176,119,63,192,183,119,63,23,191,119,63,105,198,119,63,182,205,119,63,255,212,119,63,68,220,119,63,132,227,119,63,191,234,119,63,246,241,119,63,41,249,119,63,87,0,120,63,129,7,120,63,166,14,120,63,198,21,120,63,227,28,120,63,250,35,120,63,14,43,120,63,28,50,120,63,39,57,120,63,45,64,120,63,46,71,120,63,44,78,120,63,36,85,120,63,25,92,120,63,9,99,120,63,244,105,120,63,219,112,120,63,190,119,120,63,156,126,120,63,118,133,120,63,76,140,120,63,29,147,120,63,234,153,120,63,179,160,120,63,119,167,120,63,55,174,120,63,242,180,120,63,169,187,120,63,92,194,120,63,11,201,120,63,181,207,120,63,91,214,120,63,252,220,120,63,154,227,120,63,51,234,120,63,199,240,120,63,88,247,120,63,228,253,120,63,108,4,121,63,240,10,121,63,111,17,121,63,234,23,121,63,97,30,121,63,211,36,121,63,66,43,121,63,172,49,121,63,18,56,121,63,116,62,121,63,209,68,121,63,42,75,121,63,127,81,121,63,208,87,121,63,29,94,121,63,101,100,121,63,170,106,121,63,234,112,121,63,38,119,121,63,93,125,121,63,145,131,121,63,193,137,121,63,236,143,121,63,19,150,121,63,54,156,121,63,85,162,121,63,112,168,121,63,134,174,121,63,153,180,121,63,167,186,121,63,178,192,121,63,184,198,121,63,186,204,121,63,184,210,121,63,178,216,121,63,168,222,121,63,154,228,121,63,135,234,121,63,113,240,121,63,87,246,121,63,56,252,121,63,22,2,122,63,239,7,122,63,197,13,122,63,150,19,122,63,100,25,122,63,45,31,122,63,243,36,122,63,180,42,122,63,113,48,122,63,43,54,122,63,224,59,122,63,146,65,122,63,63,71,122,63,233,76,122,63,142,82,122,63,48,88,122,63,206,93,122,63,103,99,122,63,253,104,122,63,143,110,122,63,29,116,122,63,167,121,122,63,45,127,122,63,175,132,122,63,45,138,122,63,168,143,122,63,30,149,122,63,145,154,122,63,255,159,122,63,106,165,122,63,209,170,122,63,52,176,122,63,147,181,122,63,239,186,122,63,70,192,122,63,154,197,122,63,234,202,122,63,54,208,122,63,126,213,122,63,194,218,122,63,3,224,122,63,64,229,122,63,121,234,122,63,174,239,122,63,223,244,122,63,13,250,122,63,55,255,122,63,93,4,123,63,127,9,123,63,157,14,123,63,184,19,123,63,207,24,123,63,227,29,123,63,242,34,123,63,254,39,123,63,6,45,123,63,10,50,123,63,11,55,123,63,8,60,123,63,1,65,123,63,247,69,123,63,233,74,123,63,215,79,123,63,193,84,123,63,168,89,123,63,139,94,123,63,107,99,123,63,71,104,123,63,31,109,123,63,243,113,123,63,196,118,123,63,146,123,123,63,91,128,123,63,33,133,123,63,228,137,123,63,163,142,123,63,94,147,123,63,22,152,123,63,202,156,123,63,122,161,123,63,39,166,123,63,208,170,123,63,118,175,123,63,24,180,123,63,183,184,123,63,82,189,123,63,233,193,123,63,125,198,123,63,14,203,123,63,155,207,123,63,36,212,123,63,170,216,123,63,45,221,123,63,172,225,123,63,39,230,123,63,159,234,123,63,19,239,123,63,132,243,123,63,242,247,123,63,92,252,123,63,195,0,124,63,38,5,124,63,133,9,124,63,226,13,124,63,58,18,124,63,144,22,124,63,226,26,124,63,48,31,124,63,123,35,124,63,195,39,124,63,7,44,124,63,72,48,124,63,134,52,124,63,192,56,124,63,247,60,124,63,42,65,124,63,90,69,124,63,135,73,124,63,176,77,124,63,214,81,124,63,249,85,124,63,24,90,124,63,52,94,124,63,77,98,124,63,98,102,124,63,116,106,124,63,131,110,124,63,142,114,124,63,150,118,124,63,155,122,124,63,157,126,124,63,155,130,124,63,150,134,124,63,142,138,124,63,130,142,124,63,116,146,124,63,98,150,124,63,77,154,124,63,52,158,124,63,24,162,124,63,249,165,124,63,215,169,124,63,178,173,124,63,137,177,124,63,94,181,124,63,47,185,124,63,253,188,124,63,199,192,124,63,143,196,124,63,83,200,124,63,20,204,124,63,211,207,124,63,141,211,124,63,69,215,124,63,250,218,124,63,171,222,124,63,90,226,124,63,5,230,124,63,173,233,124,63,82,237,124,63,244,240,124,63,147,244,124,63,46,248,124,63,199,251,124,63,93,255,124,63,239,2,125,63,127,6,125,63,11,10,125,63,148,13,125,63,27,17,125,63,158,20,125,63,30,24,125,63,155,27,125,63,21,31,125,63,140,34,125,63,0,38,125,63,114,41,125,63,224,44,125,63,75,48,125,63,179,51,125,63,24,55,125,63,122,58,125,63,217,61,125,63,54,65,125,63,143,68,125,63,229,71,125,63,56,75,125,63,137,78,125,63,214,81,125,63,33,85,125,63,104,88,125,63,173,91,125,63,239,94,125,63,46,98,125,63,106,101,125,63,163,104,125,63,217,107,125,63,12,111,125,63,61,114,125,63,106,117,125,63,149,120,125,63,189,123,125,63,226,126,125,63,4,130,125,63,36,133,125,63,64,136,125,63,90,139,125,63,112,142,125,63,133,145,125,63,150,148,125,63,164,151,125,63,176,154,125,63,185,157,125,63,191,160,125,63,194,163,125,63,194,166,125,63,192,169,125,63,187,172,125,63,179,175,125,63,168,178,125,63,155,181,125,63,139,184,125,63,120,187,125,63,99,190,125,63,74,193,125,63,48,196,125,63,18,199,125,63,241,201,125,63,206,204,125,63,169,207,125,63,128,210,125,63,85,213,125,63,39,216,125,63,247,218,125,63,196,221,125,63,142,224,125,63,85,227,125,63,26,230,125,63,220,232,125,63,156,235,125,63,89,238,125,63,19,241,125,63,203,243,125,63,128,246,125,63,51,249,125,63,227,251,125,63,144,254,125,63,59,1,126,63,227,3,126,63,137,6,126,63,44,9,126,63,204,11,126,63,106,14,126,63,6,17,126,63,158,19,126,63,53,22,126,63,200,24,126,63,90,27,126,63,232,29,126,63,116,32,126,63,254,34,126,63,133,37,126,63,10,40,126,63,140,42,126,63,12,45,126,63,137,47,126,63,4,50,126,63,124,52,126,63,242,54,126,63,101,57,126,63,214,59,126,63,68,62,126,63,176,64,126,63,26,67,126,63,129,69,126,63,230,71,126,63,72,74,126,63,168,76,126,63,5,79,126,63,96,81,126,63,185,83,126,63,15,86,126,63,99,88,126,63,181,90,126,63,4,93,126,63,81,95,126,63,155,97,126,63,227,99,126,63,41,102,126,63,108,104,126,63,173,106,126,63,236,108,126,63,40,111,126,63,98,113,126,63,154,115,126,63,208,117,126,63,3,120,126,63,51,122,126,63,98,124,126,63,142,126,126,63,184,128,126,63,224,130,126,63,5,133,126,63,40,135,126,63,73,137,126,63,104,139,126,63,132,141,126,63,159,143,126,63,183,145,126,63,204,147,126,63,224,149,126,63,241,151,126,63,0,154,126,63,13,156,126,63,24,158,126,63,32,160,126,63,38,162,126,63,42,164,126,63,44,166,126,63,44,168,126,63,41,170,126,63,37,172,126,63,30,174,126,63,21,176,126,63,10,178,126,63,253,179,126,63,238,181,126,63,220,183,126,63,201,185,126,63,179,187,126,63,155,189,126,63,129,191,126,63,101,193,126,63,71,195,126,63,39,197,126,63,5,199,126,63,224,200,126,63,186,202,126,63,145,204,126,63,103,206,126,63,58,208,126,63,12,210,126,63,219,211,126,63,168,213,126,63,115,215,126,63,61,217,126,63,4,219,126,63,201,220,126,63,140,222,126,63,77,224,126,63,12,226,126,63,202,227,126,63,133,229,126,63,62,231,126,63,245,232,126,63,170,234,126,63,94,236,126,63,15,238,126,63,190,239,126,63,108,241,126,63,23,243,126,63,193,244,126,63,104,246,126,63,14,248,126,63,178,249,126,63,84,251,126,63,243,252,126,63,145,254,126,63,46,0,127,63,200,1,127,63,96,3,127,63,247,4,127,63,139,6,127,63,30,8,127,63,175,9,127,63,62,11,127,63,203,12,127,63,86,14,127,63,223,15,127,63,103,17,127,63,237,18,127,63,112,20,127,63,242,21,127,63,115,23,127,63,241,24,127,63,110,26,127,63,233,27,127,63,98,29,127,63,217,30,127,63,78,32,127,63,194,33,127,63,52,35,127,63,164,36,127,63,18,38,127,63,127,39,127,63,234,40,127,63,83,42,127,63,186,43,127,63,32,45,127,63,131,46,127,63,230,47,127,63,70,49,127,63,165,50,127,63,2,52,127,63,93,53,127,63,182,54,127,63,14,56,127,63,100,57,127,63,185,58,127,63,12,60,127,63,93,61,127,63,172,62,127,63,250,63,127,63,70,65,127,63,145,66,127,63,217,67,127,63,33,69,127,63,102,70,127,63,170,71,127,63,236,72,127,63,45,74,127,63,108,75,127,63,169,76,127,63,229,77,127,63,31,79,127,63,88,80,127,63,143,81,127,63,196,82,127,63,248,83,127,63,42,85,127,63,91,86,127,63,138,87,127,63,184,88,127,63,228,89,127,63,14,91,127,63,55,92,127,63,94,93,127,63,132,94,127,63,169,95,127,63,203,96,127,63,237,97,127,63,12,99,127,63,42,100,127,63,71,101,127,63,98,102,127,63,124,103,127,63,148,104,127,63,171,105,127,63,192,106,127,63,212,107,127,63,230,108,127,63,247,109,127,63,6,111,127,63,20,112,127,63,33,113,127,63,44,114,127,63,53,115,127,63,61,116,127,63,68,117,127,63,73,118,127,63,77,119,127,63,79,120,127,63,80,121,127,63,80,122,127,63,78,123,127,63,75,124,127,63,70,125,127,63,64,126,127,63,57,127,127,63,48,128,127,63,38,129,127,63,27,130,127,63,14,131,127,63,0,132,127,63,240,132,127,63,223,133,127,63,205,134,127,63,185,135,127,63,164,136,127,63,142,137,127,63,118,138,127,63,93,139,127,63,67,140,127,63,40,141,127,63,11,142,127,63,237,142,127,63,205,143,127,63,173,144,127,63,139,145,127,63,103,146,127,63,67,147,127,63,29,148,127,63,246,148,127,63,205,149,127,63,164,150,127,63,121,151,127,63,77,152,127,63,31,153,127,63,241,153,127,63,193,154,127,63,144,155,127,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([93,156,127,63,42,157,127,63,245,157,127,63,191,158,127,63,136,159,127,63,79,160,127,63,22,161,127,63,219,161,127,63,159,162,127,63,98,163,127,63,36,164,127,63,228,164,127,63,163,165,127,63,98,166,127,63,31,167,127,63,219,167,127,63,149,168,127,63,79,169,127,63,7,170,127,63,190,170,127,63,117,171,127,63,42,172,127,63,221,172,127,63,144,173,127,63,66,174,127,63,242,174,127,63,162,175,127,63,80,176,127,63,253,176,127,63,169,177,127,63,85,178,127,63,254,178,127,63,167,179,127,63,79,180,127,63,246,180,127,63,156,181,127,63,64,182,127,63,228,182,127,63,134,183,127,63,40,184,127,63,200,184,127,63,103,185,127,63,6,186,127,63,163,186,127,63,63,187,127,63,219,187,127,63,117,188,127,63,14,189,127,63,166,189,127,63,61,190,127,63,212,190,127,63,105,191,127,63,253,191,127,63,144,192,127,63,34,193,127,63,180,193,127,63,68,194,127,63,211,194,127,63,98,195,127,63,239,195,127,63,123,196,127,63,7,197,127,63,145,197,127,63,27,198,127,63,163,198,127,63,43,199,127,63,178,199,127,63,56,200,127,63,189,200,127,63,65,201,127,63,196,201,127,63,70,202,127,63,199,202,127,63,71,203,127,63,199,203,127,63,69,204,127,63,195,204,127,63,64,205,127,63,187,205,127,63,54,206,127,63,177,206,127,63,42,207,127,63,162,207,127,63,26,208,127,63,144,208,127,63,6,209,127,63,123,209,127,63,239,209,127,63,98,210,127,63,213,210,127,63,70,211,127,63,183,211,127,63,39,212,127,63,150,212,127,63,4,213,127,63,114,213,127,63,222,213,127,63,74,214,127,63,181,214,127,63,32,215,127,63,137,215,127,63,242,215,127,63,89,216,127,63,192,216,127,63,39,217,127,63,140,217,127,63,241,217,127,63,85,218,127,63,184,218,127,63,27,219,127,63,124,219,127,63,221,219,127,63,61,220,127,63,157,220,127,63,251,220,127,63,89,221,127,63,183,221,127,63,19,222,127,63,111,222,127,63,202,222,127,63,36,223,127,63,126,223,127,63,215,223,127,63,47,224,127,63,134,224,127,63,221,224,127,63,51,225,127,63,137,225,127,63,221,225,127,63,49,226,127,63,133,226,127,63,215,226,127,63,41,227,127,63,122,227,127,63,203,227,127,63,27,228,127,63,106,228,127,63,185,228,127,63,7,229,127,63,84,229,127,63,161,229,127,63,237,229,127,63,56,230,127,63,131,230,127,63,205,230,127,63,23,231,127,63,96,231,127,63,168,231,127,63,239,231,127,63,54,232,127,63,125,232,127,63,195,232,127,63,8,233,127,63,76,233,127,63,144,233,127,63,212,233,127,63,23,234,127,63,89,234,127,63,154,234,127,63,219,234,127,63,28,235,127,63,92,235,127,63,155,235,127,63,218,235,127,63,24,236,127,63,86,236,127,63,147,236,127,63,207,236,127,63,11,237,127,63,71,237,127,63,130,237,127,63,188,237,127,63,246,237,127,63,47,238,127,63,104,238,127,63,160,238,127,63,216,238,127,63,15,239,127,63,69,239,127,63,123,239,127,63,177,239,127,63,230,239,127,63,27,240,127,63,79,240,127,63,130,240,127,63,182,240,127,63,232,240,127,63,26,241,127,63,76,241,127,63,125,241,127,63,174,241,127,63,222,241,127,63,14,242,127,63,61,242,127,63,108,242,127,63,154,242,127,63,200,242,127,63,245,242,127,63,34,243,127,63,79,243,127,63,123,243,127,63,166,243,127,63,209,243,127,63,252,243,127,63,38,244,127,63,80,244,127,63,121,244,127,63,162,244,127,63,203,244,127,63,243,244,127,63,27,245,127,63,66,245,127,63,105,245,127,63,143,245,127,63,181,245,127,63,219,245,127,63,0,246,127,63,37,246,127,63,73,246,127,63,109,246,127,63,145,246,127,63,180,246,127,63,215,246,127,63,250,246,127,63,28,247,127,63,62,247,127,63,95,247,127,63,128,247,127,63,160,247,127,63,193,247,127,63,225,247,127,63,0,248,127,63,31,248,127,63,62,248,127,63,93,248,127,63,123,248,127,63,152,248,127,63,182,248,127,63,211,248,127,63,240,248,127,63,12,249,127,63,40,249,127,63,68,249,127,63,95,249,127,63,122,249,127,63,149,249,127,63,175,249,127,63,202,249,127,63,227,249,127,63,253,249,127,63,22,250,127,63,47,250,127,63,71,250,127,63,96,250,127,63,120,250,127,63,143,250,127,63,166,250,127,63,190,250,127,63,212,250,127,63,235,250,127,63,1,251,127,63,23,251,127,63,44,251,127,63,66,251,127,63,87,251,127,63,108,251,127,63,128,251,127,63,148,251,127,63,168,251,127,63,188,251,127,63,208,251,127,63,227,251,127,63,246,251,127,63,8,252,127,63,27,252,127,63,45,252,127,63,63,252,127,63,81,252,127,63,98,252,127,63,115,252,127,63,132,252,127,63,149,252,127,63,165,252,127,63,182,252,127,63,198,252,127,63,213,252,127,63,229,252,127,63,244,252,127,63,3,253,127,63,18,253,127,63,33,253,127,63,47,253,127,63,62,253,127,63,76,253,127,63,89,253,127,63,103,253,127,63,116,253,127,63,130,253,127,63,143,253,127,63,155,253,127,63,168,253,127,63,181,253,127,63,193,253,127,63,205,253,127,63,217,253,127,63,228,253,127,63,240,253,127,63,251,253,127,63,6,254,127,63,17,254,127,63,28,254,127,63,38,254,127,63,49,254,127,63,59,254,127,63,69,254,127,63,79,254,127,63,89,254,127,63,98,254,127,63,108,254,127,63,117,254,127,63,126,254,127,63,135,254,127,63,144,254,127,63,152,254,127,63,161,254,127,63,169,254,127,63,177,254,127,63,185,254,127,63,193,254,127,63,201,254,127,63,208,254,127,63,216,254,127,63,223,254,127,63,230,254,127,63,237,254,127,63,244,254,127,63,251,254,127,63,2,255,127,63,8,255,127,63,14,255,127,63,21,255,127,63,27,255,127,63,33,255,127,63,39,255,127,63,45,255,127,63,50,255,127,63,56,255,127,63,61,255,127,63,67,255,127,63,72,255,127,63,77,255,127,63,82,255,127,63,87,255,127,63,92,255,127,63,96,255,127,63,101,255,127,63,105,255,127,63,110,255,127,63,114,255,127,63,118,255,127,63,122,255,127,63,126,255,127,63,130,255,127,63,134,255,127,63,138,255,127,63,142,255,127,63,145,255,127,63,149,255,127,63,152,255,127,63,155,255,127,63,159,255,127,63,162,255,127,63,165,255,127,63,168,255,127,63,171,255,127,63,174,255,127,63,176,255,127,63,179,255,127,63,182,255,127,63,184,255,127,63,187,255,127,63,189,255,127,63,192,255,127,63,194,255,127,63,196,255,127,63,198,255,127,63,201,255,127,63,203,255,127,63,205,255,127,63,207,255,127,63,209,255,127,63,210,255,127,63,212,255,127,63,214,255,127,63,216,255,127,63,217,255,127,63,219,255,127,63,220,255,127,63,222,255,127,63,223,255,127,63,225,255,127,63,226,255,127,63,227,255,127,63,229,255,127,63,230,255,127,63,231,255,127,63,232,255,127,63,233,255,127,63,234,255,127,63,235,255,127,63,236,255,127,63,237,255,127,63,238,255,127,63,239,255,127,63,240,255,127,63,241,255,127,63,241,255,127,63,242,255,127,63,243,255,127,63,244,255,127,63,244,255,127,63,245,255,127,63,246,255,127,63,246,255,127,63,247,255,127,63,247,255,127,63,248,255,127,63,248,255,127,63,249,255,127,63,249,255,127,63,250,255,127,63,250,255,127,63,250,255,127,63,251,255,127,63,251,255,127,63,251,255,127,63,252,255,127,63,252,255,127,63,252,255,127,63,253,255,127,63,253,255,127,63,253,255,127,63,253,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,76,194,0,0,80,194,0,0,84,194,0,0,88,194,0,0,92,194,0,0,96,194,0,0,100,194,0,0,104,194,0,0,108,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,130,194,0,0,132,194,0,0,134,194,0,0,136,194,0,0,138,194,0,0,140,194,0,0,142,194,0,0,144,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,170,194,0,0,172,194,0,0,174,194,0,0,176,194,0,0,176,194,0,0,178,194,0,0,178,194,0,0,180,194,0,0,182,194,0,0,182,194,0,0,184,194,0,0,186,194,0,0,188,194,0,0,190,194,0,0,192,194,0,0,192,194,0,0,194,194,0,0,196,194,0,0,196,194,0,0,198,194,0,0,198,194,0,0,200,194,0,0,200,194,0,0,202,194,0,0,204,194,0,0,206,194,0,0,208,194,0,0,212,194,0,0,214,194,0,0,214,194,0,0,214,194,0,0,214,194,0,0,210,194,0,0,206,194,0,0,204,194,0,0,202,194,0,0,198,194,0,0,196,194,0,0,192,194,0,0,190,194,0,0,190,194,0,0,192,194,0,0,194,194,0,0,192,194,0,0,190,194,0,0,186,194,0,0,180,194,0,0,160,194,0,0,140,194,0,0,72,194,0,0,32,194,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,4,64,0,0,0,0,0,0,18,64,0,0,0,0,0,0,33,64,0,0,0,0,0,128,48,64,0,0,0,4,107,244,52,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,4,64,0,0,0,0,0,0,18,64,0,0,0,0,0,0,33,64,0,0,0,4,107,244,52,66,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,120,194,0,0,120,194,0,0,130,194,0,0,146,194,0,0,138,194,0,0,136,194,0,0,136,194,0,0,134,194,0,0,140,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,150,194,0,0,158,194,0,0,158,194,0,0,160,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,84,194,0,0,116,194,0,0,132,194,0,0,132,194,0,0,136,194,0,0,134,194,0,0,140,194,0,0,152,194,0,0,152,194,0,0,144,194,0,0,146,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,158,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,24,194,0,0,32,194,0,0,40,194,0,0,56,194,0,0,64,194,0,0,84,194,0,0,92,194,0,0,120,194,0,0,130,194,0,0,104,194,0,0,96,194,0,0,96,194,0,0,116,194,0,0,112,194,0,0,130,194,0,0,134,194,0,0,138,194,0,0,142,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,164,194,0,0,168,194,0,0,176,194,0,0,186,194,0,0,196,194,0,0,212,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,208,193,0,0,216,193,0,0,232,193,0,0,0,194,0,0,24,194,0,0,64,194,0,0,80,194,0,0,80,194,0,0,72,194,0,0,64,194,0,0,64,194,0,0,76,194,0,0,80,194,0,0,88,194,0,0,112,194,0,0,134,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,138,194,0,0,146,194,0,0,146,194,0,0,152,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,170,194,0,0,170,194,0,0,172,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,136,193,0,0,152,193,0,0,160,193,0,0,176,193,0,0,208,193,0,0,224,193,0,0,248,193,0,0,32,194,0,0,60,194,0,0,28,194,0,0,28,194,0,0,32,194,0,0,40,194,0,0,44,194,0,0,60,194,0,0,76,194,0,0,100,194,0,0,80,194,0,0,92,194,0,0,92,194,0,0,112,194,0,0,104,194,0,0,120,194,0,0,124,194,0,0,140,194,0,0,134,194,0,0,138,194,0,0,144,194,0,0,146,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,166,194,0,0,174,194,0,0,180,194,0,0,188,194,0,0,196,194,0,0,208,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,32,193,0,0,48,193,0,0,112,193,0,0,152,193,0,0,200,193,0,0,240,193,0,0,8,194,0,0,248,193,0,0,240,193,0,0,248,193,0,0,232,193,0,0,0,194,0,0,12,194,0,0,40,194,0,0,64,194,0,0,40,194,0,0,48,194,0,0,56,194,0,0,72,194,0,0,72,194,0,0,76,194,0,0,80,194,0,0,108,194,0,0,88,194,0,0,92,194,0,0,92,194,0,0,104,194,0,0,120,194,0,0,124,194,0,0,132,194,0,0,144,194,0,0,146,194,0,0,152,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,160,194,0,0,162,194,0,0,168,194,0,0,176,194,0,0,180,194,0,0,188,194,0,0,196,194,0,0,202,194,0,0,212,194,0,0,220,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,134,194,0,0,134,194,0,0,152,194,0,0,144,194,0,0,142,194,0,0,148,194,0,0,152,194,0,0,152,194,0,0,150,194,0,0,156,194,0,0,158,194,0,0,158,194,0,0,162,194,0,0,166,194,0,0,172,194,0,0,178,194,0,0,186,194,0,0,194,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,76,194,0,0,92,194,0,0,108,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,138,194,0,0,140,194,0,0,148,194,0,0,158,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,168,194,0,0,172,194,0,0,176,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,216,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,20,194,0,0,20,194,0,0,36,194,0,0,48,194,0,0,64,194,0,0,76,194,0,0,104,194,0,0,120,194,0,0,112,194,0,0,100,194,0,0,108,194,0,0,108,194,0,0,112,194,0,0,124,194,0,0,130,194,0,0,144,194,0,0,142,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,154,194,0,0,152,194,0,0,156,194,0,0,162,194,0,0,162,194,0,0,160,194,0,0,166,194,0,0,172,194,0,0,182,194,0,0,192,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,240,193,0,0,0,194,0,0,0,194,0,0,4,194,0,0,12,194,0,0,36,194,0,0,68,194,0,0,72,194,0,0,68,194,0,0,60,194,0,0,64,194,0,0,64,194,0,0,80,194,0,0,76,194,0,0,100,194,0,0,130,194,0,0,116,194,0,0,108,194,0,0,116,194,0,0,128,194,0,0,138,194,0,0,140,194,0,0,148,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,162,194,0,0,168,194,0,0,170,194,0,0,174,194,0,0,180,194,0,0,184,194,0,0,192,194,0,0,200,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,160,193,0,0,168,193,0,0,184,193,0,0,216,193,0,0,240,193,0,0,12,194,0,0,16,194,0,0,36,194,0,0,56,194,0,0,48,194,0,0,40,194,0,0,32,194,0,0,36,194,0,0,36,194,0,0,44,194,0,0,64,194,0,0,92,194,0,0,84,194,0,0,80,194,0,0,84,194,0,0,96,194,0,0,108,194,0,0,104,194,0,0,112,194,0,0,134,194,0,0,132,194,0,0,138,194,0,0,142,194,0,0,144,194,0,0,150,194,0,0,158,194,0,0,162,194,0,0,168,194,0,0,174,194,0,0,180,194,0,0,186,194,0,0,194,194,0,0,202,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,48,193,0,0,64,193,0,0,64,193,0,0,112,193,0,0,128,193,0,0,160,193,0,0,184,193,0,0,240,193,0,0,20,194,0,0,8,194,0,0,4,194,0,0,8,194,0,0,248,193,0,0,0,194,0,0,0,194,0,0,24,194,0,0,60,194,0,0,48,194,0,0,36,194,0,0,32,194,0,0,60,194,0,0,68,194,0,0,56,194,0,0,56,194,0,0,104,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,104,194,0,0,120,194,0,0,128,194,0,0,134,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,152,194,0,0,158,194,0,0,166,194,0,0,174,194,0,0,182,194,0,0,192,194,0,0,200,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,150,194,0,0,144,194,0,0,152,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,168,194,0,0,170,194,0,0,180,194,0,0,188,194,0,0,202,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,112,194,0,0,112,194,0,0,116,194,0,0,124,194,0,0,132,194,0,0,142,194,0,0,136,194,0,0,140,194,0,0,140,194,0,0,142,194,0,0,144,194,0,0,144,194,0,0,150,194,0,0,162,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,166,194,0,0,172,194,0,0,180,194,0,0,194,194,0,0,206,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,88,194,0,0,92,194,0,0,100,194,0,0,96,194,0,0,100,194,0,0,92,194,0,0,116,194,0,0,130,194,0,0,112,194,0,0,112,194,0,0,120,194,0,0,124,194,0,0,124,194,0,0,132,194,0,0,136,194,0,0,148,194,0,0,146,194,0,0,150,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,160,194,0,0,164,194,0,0,170,194,0,0,180,194,0,0,192,194,0,0,202,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,76,194,0,0,100,194,0,0,76,194,0,0,68,194,0,0,72,194,0,0,76,194,0,0,84,194,0,0,88,194,0,0,108,194,0,0,132,194,0,0,112,194,0,0,120,194,0,0,134,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,162,194,0,0,170,194,0,0,176,194,0,0,188,194,0,0,194,194,0,0,208,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,28,194,0,0,36,194,0,0,40,194,0,0,40,194,0,0,28,194,0,0,24,194,0,0,36,194,0,0,44,194,0,0,80,194,0,0,48,194,0,0,32,194,0,0,28,194,0,0,20,194,0,0,20,194,0,0,32,194,0,0,60,194,0,0,88,194,0,0,72,194,0,0,64,194,0,0,72,194,0,0,92,194,0,0,116,194,0,0,108,194,0,0,120,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,138,194,0,0,138,194,0,0,146,194,0,0,148,194,0,0,148,194,0,0,150,194,0,0,154,194,0,0,158,194,0,0,164,194,0,0,174,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,216,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,193,0,0,208,193,0,0,192,193,0,0,176,193,0,0,160,193,0,0,160,193,0,0,184,193,0,0,232,193,0,0,240,193,0,0,248,193,0,0,224,193,0,0,216,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,12,194,0,0,32,194,0,0,4,194,0,0,0,194,0,0,232,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,20,194,0,0,52,194,0,0,36,194,0,0,20,194,0,0,24,194,0,0,52,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,84,194,0,0,68,194,0,0,64,194,0,0,72,194,0,0,68,194,0,0,68,194,0,0,76,194,0,0,80,194,0,0,104,194,0,0,96,194,0,0,100,194,0,0,96,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,156,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,212,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,200,194,0,0,190,194,0,0,182,194,0,0,174,194,0,0,166,194,0,0,160,194,0,0,156,194,0,0,152,194,0,0,156,194,0,0,156,194,0,0,162,194,0,0,166,194,0,0,170,194,0,0,172,194,0,0,170,194,0,0,172,194,0,0,174,194,0,0,180,194,0,0,194,194,0,0,214,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,162,194,0,0,154,194,0,0,146,194,0,0,140,194,0,0,134,194,0,0,134,194,0,0,136,194,0,0,150,194,0,0,146,194,0,0,140,194,0,0,138,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,158,194,0,0,168,194,0,0,166,194,0,0,168,194,0,0,172,194,0,0,176,194,0,0,178,194,0,0,178,194,0,0,186,194,0,0,196,194,0,0,210,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,152,194,0,0,142,194,0,0,136,194,0,0,136,194,0,0,130,194,0,0,124,194,0,0,124,194,0,0,120,194,0,0,120,194,0,0,128,194,0,0,130,194,0,0,128,194,0,0,116,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,136,194,0,0,146,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,162,194,0,0,166,194,0,0,170,194,0,0,176,194,0,0,178,194,0,0,184,194,0,0,190,194,0,0,200,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,160,194,0,0,150,194,0,0,142,194,0,0,136,194,0,0,130,194,0,0,124,194,0,0,120,194,0,0,116,194,0,0,116,194,0,0,116,194,0,0,116,194,0,0,108,194,0,0,96,194,0,0,100,194,0,0,84,194,0,0,72,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,80,194,0,0,84,194,0,0,88,194,0,0,104,194,0,0,134,194,0,0,124,194,0,0,134,194,0,0,136,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,170,194,0,0,178,194,0,0,180,194,0,0,186,194,0,0,194,194,0,0,202,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,130,194,0,0,116,194,0,0,108,194,0,0,100,194,0,0,96,194,0,0,92,194,0,0,92,194,0,0,96,194,0,0,96,194,0,0,100,194,0,0,92,194,0,0,84,194,0,0,80,194,0,0,60,194,0,0,48,194,0,0,48,194,0,0,72,194,0,0,48,194,0,0,36,194,0,0,28,194,0,0,28,194,0,0,40,194,0,0,32,194,0,0,56,194,0,0,76,194,0,0,68,194,0,0,72,194,0,0,84,194,0,0,88,194,0,0,124,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,140,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,150,194,0,0,158,194,0,0,170,194,0,0,178,194,0,0,182,194,0,0,192,194,0,0,204,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,80,194,0,0,72,194,0,0,68,194,0,0,68,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,68,194,0,0,72,194,0,0,72,194,0,0,68,194,0,0,56,194,0,0,44,194,0,0,28,194,0,0,12,194,0,0,4,194,0,0,24,194,0,0,16,194,0,0,0,194,0,0,232,193,0,0,0,194,0,0,0,194,0,0,0,194,0,0,12,194,0,0,48,194,0,0,28,194,0,0,24,194,0,0,24,194,0,0,56,194,0,0,72,194,0,0,52,194,0,0,56,194,0,0,84,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,88,194,0,0,84,194,0,0,84,194,0,0,96,194,0,0,100,194,0,0,108,194,0,0,132,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,158,194,0,0,166,194,0,0,170,194,0,0,180,194,0,0,194,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,172,194,0,0,160,194,0,0,150,194,0,0,150,194,0,0,158,194,0,0,160,194,0,0,158,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,176,194,0,0,190,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,176,194,0,0,166,194,0,0,158,194,0,0,156,194,0,0,150,194,0,0,142,194,0,0,134,194,0,0,136,194,0,0,146,194,0,0,146,194,0,0,144,194,0,0,146,194,0,0,150,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,202,194,0,0,192,194,0,0,180,194,0,0,172,194,0,0,162,194,0,0,154,194,0,0,146,194,0,0,138,194,0,0,132,194,0,0,116,194,0,0,120,194,0,0,132,194,0,0,128,194,0,0,120,194,0,0,130,194,0,0,132,194,0,0,140,194,0,0,144,194,0,0,152,194,0,0,162,194,0,0,160,194,0,0,168,194,0,0,180,194,0,0,190,194,0,0,204,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,206,194,0,0,194,194,0,0,184,194,0,0,176,194,0,0,166,194,0,0,158,194,0,0,148,194,0,0,140,194,0,0,132,194,0,0,108,194,0,0,84,194,0,0,104,194,0,0,120,194,0,0,92,194,0,0,88,194,0,0,88,194,0,0,88,194,0,0,104,194,0,0,116,194,0,0,120,194,0,0,144,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,160,194,0,0,166,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,132,194,0,0,120,194,0,0,96,194,0,0,64,194,0,0,48,194,0,0,64,194,0,0,56,194,0,0,56,194,0,0,44,194,0,0,56,194,0,0,64,194,0,0,64,194,0,0,76,194,0,0,104,194,0,0,104,194,0,0,108,194,0,0,112,194,0,0,120,194,0,0,120,194,0,0,116,194,0,0,116,194,0,0,130,194,0,0,128,194,0,0,130,194,0,0,136,194,0,0,140,194,0,0,148,194,0,0,150,194,0,0,156,194,0,0,162,194,0,0,172,194,0,0,190,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,130,194,0,0,116,194,0,0,92,194,0,0,68,194,0,0,28,194,0,0,4,194,0,0,32,194,0,0,12,194,0,0,0,194,0,0,24,194,0,0,32,194,0,0,4,194,0,0,12,194,0,0,20,194,0,0,56,194,0,0,36,194,0,0,52,194,0,0,48,194,0,0,56,194,0,0,40,194,0,0,52,194,0,0,56,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,88,194,0,0,92,194,0,0,100,194,0,0,120,194,0,0,128,194,0,0,132,194,0,0,136,194,0,0,140,194,0,0,152,194,0,0,162,194,0,0,180,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,170,194,0,0,164,194,0,0,166,194,0,0,160,194,0,0,156,194,0,0,168,194,0,0,158,194,0,0,160,194,0,0,166,194,0,0,174,194,0,0,178,194,0,0,182,194,0,0,186,194,0,0,198,194,0,0,212,194,0,0,234,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,136,194,0,0,148,194,0,0,144,194,0,0,148,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,170,194,0,0,174,194,0,0,184,194,0,0,178,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,212,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,166,194,0,0,150,194,0,0,142,194,0,0,124,194,0,0,128,194,0,0,134,194,0,0,120,194,0,0,128,194,0,0,134,194,0,0,140,194,0,0,146,194,0,0,154,194,0,0,162,194,0,0,168,194,0,0,166,194,0,0,170,194,0,0,178,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,218,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,192,194,0,0,176,194,0,0,162,194,0,0,150,194,0,0,136,194,0,0,104,194,0,0,88,194,0,0,96,194,0,0,88,194,0,0,96,194,0,0,96,194,0,0,104,194,0,0,112,194,0,0,124,194,0,0,132,194,0,0,148,194,0,0,138,194,0,0,144,194,0,0,144,194,0,0,150,194,0,0,148,194,0,0,154,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,168,194,0,0,174,194,0,0,186,194,0,0,192,194,0,0,198,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,204,194,0,0,192,194,0,0,182,194,0,0,170,194,0,0,160,194,0,0,148,194,0,0,136,194,0,0,112,194,0,0,76,194,0,0,56,194,0,0,64,194,0,0,56,194,0,0,44,194,0,0,52,194,0,0,60,194,0,0,60,194,0,0,68,194,0,0,64,194,0,0,96,194,0,0,84,194,0,0,92,194,0,0,104,194,0,0,100,194,0,0,124,194,0,0,104,194,0,0,112,194,0,0,132,194,0,0,128,194,0,0,134,194,0,0,140,194,0,0,140,194,0,0,148,194,0,0,154,194,0,0,168,194], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([0,0,172,194,0,0,178,194,0,0,182,194,0,0,186,194,0,0,188,194,0,0,202,194,0,0,218,194,0,0,236,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,176,194,0,0,166,194,0,0,156,194,0,0,146,194,0,0,136,194,0,0,112,194,0,0,84,194,0,0,48,194,0,0,12,194,0,0,24,194,0,0,24,194,0,0,8,194,0,0,8,194,0,0,16,194,0,0,32,194,0,0,36,194,0,0,48,194,0,0,76,194,0,0,52,194,0,0,56,194,0,0,60,194,0,0,56,194,0,0,88,194,0,0,72,194,0,0,68,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,76,194,0,0,88,194,0,0,100,194,0,0,104,194,0,0,112,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,128,194,0,0,130,194,0,0,136,194,0,0,154,194,0,0,164,194,0,0,174,194,0,0,190,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,204,194,0,0,194,194,0,0,184,194,0,0,174,194,0,0,166,194,0,0,156,194,0,0,150,194,0,0,164,194,0,0,158,194,0,0,166,194,0,0,170,194,0,0,178,194,0,0,184,194,0,0,190,194,0,0,196,194,0,0,202,194,0,0,210,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,172,194,0,0,162,194,0,0,156,194,0,0,148,194,0,0,138,194,0,0,148,194,0,0,148,194,0,0,152,194,0,0,158,194,0,0,166,194,0,0,168,194,0,0,172,194,0,0,178,194,0,0,184,194,0,0,194,194,0,0,186,194,0,0,200,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,174,194,0,0,166,194,0,0,160,194,0,0,150,194,0,0,138,194,0,0,112,194,0,0,132,194,0,0,132,194,0,0,136,194,0,0,140,194,0,0,148,194,0,0,156,194,0,0,158,194,0,0,162,194,0,0,162,194,0,0,166,194,0,0,168,194,0,0,174,194,0,0,186,194,0,0,192,194,0,0,198,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,178,194,0,0,170,194,0,0,164,194,0,0,156,194,0,0,142,194,0,0,120,194,0,0,92,194,0,0,104,194,0,0,104,194,0,0,88,194,0,0,88,194,0,0,92,194,0,0,108,194,0,0,116,194,0,0,120,194,0,0,140,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,168,194,0,0,168,194,0,0,168,194,0,0,176,194,0,0,182,194,0,0,180,194,0,0,190,194,0,0,196,194,0,0,204,194,0,0,206,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,188,194,0,0,180,194,0,0,174,194,0,0,164,194,0,0,158,194,0,0,146,194,0,0,134,194,0,0,104,194,0,0,60,194,0,0,72,194,0,0,52,194,0,0,36,194,0,0,52,194,0,0,64,194,0,0,48,194,0,0,48,194,0,0,68,194,0,0,88,194,0,0,76,194,0,0,64,194,0,0,60,194,0,0,68,194,0,0,72,194,0,0,76,194,0,0,100,194,0,0,104,194,0,0,112,194,0,0,124,194,0,0,138,194,0,0,140,194,0,0,138,194,0,0,142,194,0,0,148,194,0,0,156,194,0,0,164,194,0,0,180,194,0,0,190,194,0,0,202,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,202,194,0,0,194,194,0,0,186,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,154,194,0,0,144,194,0,0,130,194,0,0,96,194,0,0,64,194,0,0,20,194,0,0,32,194,0,0,16,194,0,0,8,194,0,0,32,194,0,0,72,194,0,0,60,194,0,0,24,194,0,0,36,194,0,0,60,194,0,0,24,194,0,0,12,194,0,0,28,194,0,0,24,194,0,0,44,194,0,0,32,194,0,0,52,194,0,0,72,194,0,0,52,194,0,0,48,194,0,0,60,194,0,0,72,194,0,0,92,194,0,0,64,194,0,0,64,194,0,0,80,194,0,0,132,194,0,0,140,194,0,0,152,194,0,0,164,194,0,0,180,194,0,0,194,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,172,194,0,0,158,194,0,0,152,194,0,0,166,194,0,0,162,194,0,0,170,194,0,0,174,194,0,0,178,194,0,0,186,194,0,0,196,194,0,0,204,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,172,194,0,0,158,194,0,0,142,194,0,0,154,194,0,0,148,194,0,0,154,194,0,0,158,194,0,0,162,194,0,0,168,194,0,0,170,194,0,0,180,194,0,0,184,194,0,0,186,194,0,0,184,194,0,0,196,194,0,0,202,194,0,0,216,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,174,194,0,0,156,194,0,0,136,194,0,0,130,194,0,0,132,194,0,0,120,194,0,0,130,194,0,0,134,194,0,0,140,194,0,0,146,194,0,0,150,194,0,0,156,194,0,0,164,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,182,194,0,0,186,194,0,0,196,194,0,0,204,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,164,194,0,0,148,194,0,0,120,194,0,0,100,194,0,0,104,194,0,0,96,194,0,0,76,194,0,0,80,194,0,0,80,194,0,0,88,194,0,0,88,194,0,0,104,194,0,0,132,194,0,0,108,194,0,0,112,194,0,0,124,194,0,0,132,194,0,0,138,194,0,0,146,194,0,0,158,194,0,0,166,194,0,0,168,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,176,194,0,0,184,194,0,0,196,194,0,0,210,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,204,194,0,0,194,194,0,0,184,194,0,0,168,194,0,0,158,194,0,0,138,194,0,0,100,194,0,0,60,194,0,0,80,194,0,0,60,194,0,0,48,194,0,0,52,194,0,0,72,194,0,0,80,194,0,0,40,194,0,0,40,194,0,0,84,194,0,0,44,194,0,0,44,194,0,0,64,194,0,0,76,194,0,0,96,194,0,0,92,194,0,0,80,194,0,0,100,194,0,0,108,194,0,0,116,194,0,0,120,194,0,0,134,194,0,0,142,194,0,0,156,194,0,0,166,194,0,0,172,194,0,0,188,194,0,0,196,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,168,194,0,0,156,194,0,0,140,194,0,0,116,194,0,0,76,194,0,0,36,194,0,0,32,194,0,0,24,194,0,0,32,194,0,0,56,194,0,0,80,194,0,0,76,194,0,0,36,194,0,0,32,194,0,0,56,194,0,0,32,194,0,0,24,194,0,0,24,194,0,0,36,194,0,0,56,194,0,0,36,194,0,0,56,194,0,0,60,194,0,0,44,194,0,0,44,194,0,0,52,194,0,0,36,194,0,0,52,194,0,0,96,194,0,0,134,194,0,0,136,194,0,0,166,194,0,0,174,194,0,0,180,194,0,0,190,194,0,0,204,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,218,194,0,0,210,194,0,0,202,194,0,0,192,194,0,0,182,194,0,0,168,194,0,0,154,194,0,0,164,194,0,0,164,194,0,0,170,194,0,0,178,194,0,0,188,194,0,0,200,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,206,194,0,0,196,194,0,0,184,194,0,0,170,194,0,0,160,194,0,0,142,194,0,0,150,194,0,0,144,194,0,0,152,194,0,0,160,194,0,0,168,194,0,0,172,194,0,0,178,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,208,194,0,0,202,194,0,0,194,194,0,0,184,194,0,0,176,194,0,0,168,194,0,0,160,194,0,0,128,194,0,0,132,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,138,194,0,0,146,194,0,0,154,194,0,0,166,194,0,0,166,194,0,0,172,194,0,0,182,194,0,0,196,194,0,0,208,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,208,194,0,0,202,194,0,0,194,194,0,0,184,194,0,0,180,194,0,0,168,194,0,0,148,194,0,0,100,194,0,0,104,194,0,0,80,194,0,0,92,194,0,0,88,194,0,0,72,194,0,0,80,194,0,0,72,194,0,0,80,194,0,0,124,194,0,0,120,194,0,0,138,194,0,0,152,194,0,0,154,194,0,0,156,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,176,194,0,0,188,194,0,0,200,194,0,0,212,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,204,194,0,0,196,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,166,194,0,0,156,194,0,0,140,194,0,0,72,194,0,0,72,194,0,0,36,194,0,0,48,194,0,0,68,194,0,0,60,194,0,0,72,194,0,0,72,194,0,0,48,194,0,0,92,194,0,0,56,194,0,0,60,194,0,0,64,194,0,0,64,194,0,0,88,194,0,0,68,194,0,0,68,194,0,0,104,194,0,0,120,194,0,0,142,194,0,0,162,194,0,0,174,194,0,0,184,194,0,0,194,194,0,0,204,194,0,0,216,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,204,194,0,0,196,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,166,194,0,0,156,194,0,0,140,194,0,0,52,194,0,0,44,194,0,0,36,194,0,0,60,194,0,0,72,194,0,0,76,194,0,0,72,194,0,0,68,194,0,0,52,194,0,0,60,194,0,0,36,194,0,0,48,194,0,0,36,194,0,0,28,194,0,0,44,194,0,0,24,194,0,0,20,194,0,0,32,194,0,0,36,194,0,0,48,194,0,0,72,194,0,0,104,194,0,0,130,194,0,0,146,194,0,0,158,194,0,0,170,194,0,0,184,194,0,0,194,194,0,0,202,194,0,0,210,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,200,194,0,0,190,194,0,0,174,194,0,0,162,194,0,0,170,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,202,194,0,0,190,194,0,0,176,194,0,0,166,194,0,0,152,194,0,0,146,194,0,0,144,194,0,0,158,194,0,0,168,194,0,0,180,194,0,0,190,194,0,0,200,194,0,0,210,194,0,0,220,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,208,194,0,0,196,194,0,0,184,194,0,0,174,194,0,0,162,194,0,0,140,194,0,0,130,194,0,0,120,194,0,0,134,194,0,0,142,194,0,0,148,194,0,0,160,194,0,0,170,194,0,0,182,194,0,0,190,194,0,0,198,194,0,0,206,194,0,0,216,194,0,0,222,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,194,194,0,0,180,194,0,0,170,194,0,0,152,194,0,0,112,194,0,0,96,194,0,0,88,194,0,0,112,194,0,0,120,194,0,0,116,194,0,0,96,194,0,0,124,194,0,0,130,194,0,0,146,194,0,0,148,194,0,0,154,194,0,0,150,194,0,0,156,194,0,0,162,194,0,0,172,194,0,0,174,194,0,0,176,194,0,0,182,194,0,0,188,194,0,0,196,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,194,194,0,0,184,194,0,0,172,194,0,0,162,194,0,0,158,194,0,0,140,194,0,0,100,194,0,0,76,194,0,0,60,194,0,0,76,194,0,0,104,194,0,0,112,194,0,0,96,194,0,0,84,194,0,0,72,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,84,194,0,0,92,194,0,0,128,194,0,0,138,194,0,0,142,194,0,0,170,194,0,0,164,194,0,0,156,194,0,0,162,194,0,0,170,194,0,0,190,194,0,0,204,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,194,194,0,0,184,194,0,0,170,194,0,0,166,194,0,0,158,194,0,0,144,194,0,0,68,194,0,0,32,194,0,0,44,194,0,0,44,194,0,0,88,194,0,0,96,194,0,0,76,194,0,0,72,194,0,0,32,194,0,0,44,194,0,0,24,194,0,0,16,194,0,0,12,194,0,0,20,194,0,0,24,194,0,0,20,194,0,0,48,194,0,0,88,194,0,0,112,194,0,0,100,194,0,0,112,194,0,0,140,194,0,0,150,194,0,0,168,194,0,0,184,194,0,0,206,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,180,194,0,0,184,194,0,0,198,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,202,194,0,0,190,194,0,0,178,194,0,0,166,194,0,0,144,194,0,0,148,194,0,0,156,194,0,0,170,194,0,0,176,194,0,0,176,194,0,0,180,194,0,0,184,194,0,0,196,194,0,0,210,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,218,194,0,0,206,194,0,0,194,194,0,0,186,194,0,0,174,194,0,0,162,194,0,0,140,194,0,0,140,194,0,0,134,194,0,0,150,194,0,0,146,194,0,0,152,194,0,0,158,194,0,0,162,194,0,0,166,194,0,0,176,194,0,0,178,194,0,0,194,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,200,194,0,0,188,194,0,0,176,194,0,0,166,194,0,0,150,194,0,0,124,194,0,0,108,194,0,0,108,194,0,0,124,194,0,0,132,194,0,0,112,194,0,0,120,194,0,0,134,194,0,0,134,194,0,0,154,194,0,0,152,194,0,0,162,194,0,0,176,194,0,0,172,194,0,0,184,194,0,0,192,194,0,0,204,194,0,0,218,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,184,194,0,0,172,194,0,0,162,194,0,0,146,194,0,0,96,194,0,0,80,194,0,0,60,194,0,0,92,194,0,0,112,194,0,0,104,194,0,0,80,194,0,0,76,194,0,0,52,194,0,0,68,194,0,0,72,194,0,0,84,194,0,0,88,194,0,0,116,194,0,0,142,194,0,0,140,194,0,0,138,194,0,0,156,194,0,0,158,194,0,0,174,194,0,0,180,194,0,0,192,194,0,0,208,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,192,194,0,0,180,194,0,0,172,194,0,0,156,194,0,0,140,194,0,0,76,194,0,0,40,194,0,0,60,194,0,0,64,194,0,0,92,194,0,0,88,194,0,0,88,194,0,0,84,194,0,0,40,194,0,0,12,194,0,0,224,193,0,0,4,194,0,0,24,194,0,0,20,194,0,0,48,194,0,0,60,194,0,0,68,194,0,0,88,194,0,0,124,194,0,0,136,194,0,0,156,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,198,194,0,0,208,194,0,0,218,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,180,194,0,0,158,194,0,0,170,194,0,0,162,194,0,0,164,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,198,194,0,0,206,194,0,0,218,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,194,194,0,0,170,194,0,0,144,194,0,0,148,194,0,0,140,194,0,0,140,194,0,0,140,194,0,0,152,194,0,0,170,194,0,0,182,194,0,0,186,194,0,0,194,194,0,0,206,194,0,0,218,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,194,0,0,186,194,0,0,162,194,0,0,136,194,0,0,120,194,0,0,112,194,0,0,112,194,0,0,100,194,0,0,124,194,0,0,140,194,0,0,154,194,0,0,164,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,226,194,0,0,200,194,0,0,186,194,0,0,168,194,0,0,124,194,0,0,104,194,0,0,64,194,0,0,84,194,0,0,88,194,0,0,80,194,0,0,80,194,0,0,100,194,0,0,128,194,0,0,132,194,0,0,152,194,0,0,166,194,0,0,162,194,0,0,170,194,0,0,170,194,0,0,180,194,0,0,190,194,0,0,196,194,0,0,202,194,0,0,206,194,0,0,212,194,0,0,216,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,190,194,0,0,172,194,0,0,148,194,0,0,84,194,0,0,72,194,0,0,24,194,0,0,44,194,0,0,68,194,0,0,44,194,0,0,40,194,0,0,28,194,0,0,28,194,0,0,56,194,0,0,80,194,0,0,100,194,0,0,96,194,0,0,144,194,0,0,138,194,0,0,148,194,0,0,162,194,0,0,174,194,0,0,184,194,0,0,188,194,0,0,194,194,0,0,198,194,0,0,204,194,0,0,210,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,198,194,0,0,180,194,0,0,152,194,0,0,132,194,0,0,52,194,0,0,44,194,0,0,36,194,0,0,48,194,0,0,60,194,0,0,44,194,0,0,60,194,0,0,32,194,0,0,240,193,0,0,248,193,0,0,248,193,0,0,28,194,0,0,4,194,0,0,32,194,0,0,36,194,0,0,44,194,0,0,84,194,0,0,108,194,0,0,140,194,0,0,146,194,0,0,154,194,0,0,158,194,0,0,164,194,0,0,168,194,0,0,174,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,182,194,0,0,152,194,0,0,150,194,0,0,170,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,182,194,0,0,140,194,0,0,140,194,0,0,150,194,0,0,172,194,0,0,178,194,0,0,188,194,0,0,196,194,0,0,202,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,112,194,0,0,130,194,0,0,128,194,0,0,148,194,0,0,166,194,0,0,176,194,0,0,182,194,0,0,190,194,0,0,198,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,104,194,0,0,92,194,0,0,68,194,0,0,132,194,0,0,136,194,0,0,142,194,0,0,156,194,0,0,156,194,0,0,160,194,0,0,176,194,0,0,170,194,0,0,178,194,0,0,194,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,84,194,0,0,80,194,0,0,36,194,0,0,108,194,0,0,108,194,0,0,68,194,0,0,104,194,0,0,96,194,0,0,124,194,0,0,172,194,0,0,158,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,206,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,194,194,0,0,182,194,0,0,146,194,0,0,52,194,0,0,32,194,0,0,4,194,0,0,84,194,0,0,116,194,0,0,68,194,0,0,88,194,0,0,72,194,0,0,72,194,0,0,112,194,0,0,80,194,0,0,134,194,0,0,148,194,0,0,162,194,0,0,184,194,0,0,192,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,226,194,0,0,212,194,0,0,198,194,0,0,184,194,0,0,154,194,0,0,160,194,0,0,176,194,0,0,194,194,0,0,212,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,232,194,0,0,218,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,148,194,0,0,144,194,0,0,176,194,0,0,174,194,0,0,190,194,0,0,204,194,0,0,218,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,232,194,0,0,218,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,150,194,0,0,132,194,0,0,148,194,0,0,154,194,0,0,156,194,0,0,172,194,0,0,174,194,0,0,180,194,0,0,192,194], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([0,0,210,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,230,194,0,0,216,194,0,0,202,194,0,0,188,194,0,0,176,194,0,0,132,194,0,0,96,194,0,0,116,194,0,0,140,194,0,0,130,194,0,0,156,194,0,0,144,194,0,0,166,194,0,0,168,194,0,0,186,194,0,0,196,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,190,194,0,0,178,194,0,0,164,194,0,0,100,194,0,0,80,194,0,0,80,194,0,0,108,194,0,0,96,194,0,0,108,194,0,0,104,194,0,0,138,194,0,0,134,194,0,0,176,194,0,0,164,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,200,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,202,194,0,0,192,194,0,0,180,194,0,0,166,194,0,0,154,194,0,0,88,194,0,0,44,194,0,0,24,194,0,0,72,194,0,0,64,194,0,0,80,194,0,0,64,194,0,0,40,194,0,0,40,194,0,0,76,194,0,0,80,194,0,0,84,194,0,0,108,194,0,0,130,194,0,0,142,194,0,0,156,194,0,0,170,194,0,0,190,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,172,194,0,0,136,194,0,0,156,194,0,0,158,194,0,0,180,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,172,194,0,0,132,194,0,0,146,194,0,0,154,194,0,0,176,194,0,0,192,194,0,0,210,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,184,194,0,0,160,194,0,0,116,194,0,0,128,194,0,0,136,194,0,0,160,194,0,0,174,194,0,0,184,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,208,194,0,0,182,194,0,0,158,194,0,0,80,194,0,0,112,194,0,0,88,194,0,0,128,194,0,0,138,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,168,194,0,0,170,194,0,0,174,194,0,0,176,194,0,0,180,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,200,194,0,0,174,194,0,0,154,194,0,0,68,194,0,0,72,194,0,0,48,194,0,0,104,194,0,0,116,194,0,0,116,194,0,0,134,194,0,0,130,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,130,194,0,0,136,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,230,194,0,0,196,194,0,0,168,194,0,0,120,194,0,0,68,194,0,0,48,194,0,0,24,194,0,0,56,194,0,0,68,194,0,0,68,194,0,0,56,194,0,0,28,194,0,0,20,194,0,0,28,194,0,0,32,194,0,0,40,194,0,0,44,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,148,194,0,0,154,194,0,0,164,194,0,0,164,194,0,0,170,194,0,0,180,194,0,0,188,194,0,0,198,194,0,0,208,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,132,194,0,0,140,194,0,0,162,194,0,0,160,194,0,0,162,194,0,0,168,194,0,0,176,194,0,0,182,194,0,0,186,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,116,194,0,0,124,194,0,0,140,194,0,0,142,194,0,0,148,194,0,0,154,194,0,0,160,194,0,0,166,194,0,0,170,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,172,194,0,0,120,194,0,0,124,194,0,0,120,194,0,0,120,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,80,194,0,0,88,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,216,194,0,0,168,194,0,0,84,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,92,194,0,0,60,194,0,0,52,194,0,0,32,194,0,0,32,194,0,0,32,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,200,194,0,0,146,194,0,0,44,194,0,0,20,194,0,0,40,194,0,0,44,194,0,0,84,194,0,0,24,194,0,0,20,194,0,0,12,194,0,0,12,194,0,0,24,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,182,194,0,0,168,194,0,0,148,194,0,0,160,194,0,0,160,194,0,0,160,194,0,0,160,194,0,0,160,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,182,194,0,0,168,194,0,0,148,194,0,0,136,194,0,0,136,194,0,0,136,194,0,0,136,194,0,0,136,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,172,194,0,0,156,194,0,0,140,194,0,0,112,194,0,0,52,194,0,0,240,193,0,0,168,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,174,194,0,0,156,194,0,0,134,194,0,0,64,194,0,0,24,194,0,0,232,193,0,0,168,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,172,194,0,0,138,194,0,0,96,194,0,0,52,194,0,0,12,194,0,0,4,194,0,0,232,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,166,194,0,0,142,194,0,0,64,194,0,0,216,193,0,0,24,194,0,0,20,194,0,0,8,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,88,105,112,104,46,79,114,103,32,108,105,98,86,111,114,98,105,115,32,73,32,50,48,49,52,48,49,50,50,32,40,84,117,114,112,97,107,195,164,114,195,164,106,105,105,110,41,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,0,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,40,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,40,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,0,0,0,0,56,223,0,0,24,219,0,0,88,223,0,0,120,223,0,0,152,223,0,0,0,0,0,0,184,223,0,0,0,0,0,0,56,224,0,0,216,224,0,0,120,225,0,0,24,226,0,0,184,226,0,0,88,227,0,0,248,227,0,0,152,228,0,0,56,229,0,0,216,229,0,0,120,230,0,0,24,231,0,0,184,231,0,0,88,232,0,0,248,232,0,0,152,233,0,0,56,234,0,0,0,0,0,0,11,0,0,0,64,105,8,0,80,29,2,0,2,0,0,0,64,156,0,0,80,195,0,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,200,81,2,0,40,241,0,0,40,82,2,0,152,14,3,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,216,25,3,0,0,0,0,0,11,0,0,0,176,208,5,0,80,29,2,0,6,0,0,0,64,156,0,0,112,17,1,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,200,81,2,0,40,241,0,0,40,82,2,0,152,14,3,0,176,253,0,0,224,253,0,0,3,0,0,0,136,82,2,0,16,209,5,0,0,0,0,0,11,0,0,0,80,208,5,0,80,29,2,0,255,255,255,255,64,156,0,0,80,195,0,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,200,81,2,0,40,241,0,0,40,82,2,0,152,14,3,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,152,82,2,0,0,0,0,0,11,0,0,0,240,207,5,0,80,29,2,0,2,0,0,0,144,101,0,0,64,156,0,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,144,207,5,0,40,241,0,0,40,82,2,0,152,14,3,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,216,25,3,0,0,0,0,0,11,0,0,0,48,207,5,0,80,29,2,0,255,255,255,255,144,101,0,0,64,156,0,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,144,207,5,0,40,241,0,0,40,82,2,0,0,0,0,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,152,82,2,0,0,0,0,0,3,0,0,0,16,207,5,0,32,37,5,0,2,0,0,0,56,74,0,0,144,101,0,0,64,37,5,0,80,37,5,0,96,37,5,0,152,235,0,0,200,235,0,0,176,37,5,0,176,37,5,0,176,37,5,0,192,38,5,0,240,38,5,0,32,42,5,0,32,42,5,0,80,45,5,0,72,239,0,0,120,239,0,0,128,48,5,0,128,48,5,0,160,48,5,0,160,48,5,0,176,48,5,0,176,48,5,0,192,48,5,0,224,48,5,0,240,48,5,0,240,206,5,0,40,241,0,0,32,49,5,0,64,49,5,0,176,253,0,0,224,253,0,0,2,0,0,0,0,53,5,0,24,105,5,0,0,0,0,0,3,0,0,0,208,206,5,0,32,37,5,0,255,255,255,255,56,74,0,0,144,101,0,0,64,37,5,0,80,37,5,0,96,37,5,0,152,235,0,0,200,235,0,0,176,37,5,0,176,37,5,0,176,37,5,0,192,38,5,0,240,38,5,0,32,42,5,0,32,42,5,0,80,45,5,0,72,239,0,0,120,239,0,0,128,48,5,0,128,48,5,0,160,48,5,0,160,48,5,0,176,48,5,0,176,48,5,0,192,48,5,0,224,48,5,0,240,48,5,0,240,206,5,0,40,241,0,0,32,49,5,0,64,49,5,0,176,253,0,0,224,253,0,0,2,0,0,0,0,53,5,0,8,53,5,0,0,0,0,0,3,0,0,0,248,104,5,0,32,37,5,0,2,0,0,0,152,58,0,0,56,74,0,0,64,37,5,0,80,37,5,0,96,37,5,0,152,235,0,0,200,235,0,0,176,37,5,0,176,37,5,0,176,37,5,0,192,38,5,0,240,38,5,0,32,42,5,0,32,42,5,0,80,45,5,0,72,239,0,0,120,239,0,0,128,48,5,0,128,48,5,0,160,48,5,0,160,48,5,0,176,48,5,0,176,48,5,0,192,48,5,0,224,48,5,0,240,48,5,0,0,49,5,0,40,241,0,0,32,49,5,0,64,49,5,0,176,253,0,0,224,253,0,0,2,0,0,0,0,53,5,0,24,105,5,0,0,0,0,0,3,0,0,0,0,37,5,0,32,37,5,0,255,255,255,255,152,58,0,0,56,74,0,0,64,37,5,0,80,37,5,0,96,37,5,0,152,235,0,0,200,235,0,0,176,37,5,0,176,37,5,0,176,37,5,0,192,38,5,0,240,38,5,0,32,42,5,0,32,42,5,0,80,45,5,0,72,239,0,0,120,239,0,0,128,48,5,0,128,48,5,0,160,48,5,0,160,48,5,0,176,48,5,0,176,48,5,0,192,48,5,0,224,48,5,0,240,48,5,0,0,49,5,0,40,241,0,0,32,49,5,0,64,49,5,0,176,253,0,0,224,253,0,0,2,0,0,0,0,53,5,0,8,53,5,0,0,0,0,0,2,0,0,0,232,36,5,0,16,33,5,0,2,0,0,0,40,35,0,0,152,58,0,0,40,33,5,0,40,33,5,0,48,33,5,0,152,235,0,0,200,235,0,0,112,33,5,0,0,0,0,0,112,33,5,0,200,236,0,0,64,34,5,0,64,34,5,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,168,36,5,0,240,240,0,0,0,241,0,0,192,36,5,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,216,36,5,0,200,168,1,0,0,0,0,0,2,0,0,0,248,32,5,0,16,33,5,0,255,255,255,255,40,35,0,0,152,58,0,0,40,33,5,0,40,33,5,0,48,33,5,0,152,235,0,0,200,235,0,0,112,33,5,0,0,0,0,0,112,33,5,0,200,236,0,0,64,34,5,0,64,34,5,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,168,36,5,0,240,240,0,0,0,241,0,0,192,36,5,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,216,36,5,0,8,46,1,0,0,0,0,0,2,0,0,0,224,32,5,0,56,235,0,0,2,0,0,0,64,31,0,0,40,35,0,0,80,235,0,0,80,235,0,0,88,235,0,0,152,235,0,0,200,235,0,0,248,235,0,0,0,0,0,0,248,235,0,0,200,236,0,0,224,236,0,0,224,236,0,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,224,240,0,0,240,240,0,0,0,241,0,0,16,241,0,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,0,46,1,0,200,168,1,0,0,0,0,0,2,0,0,0,200,32,5,0,56,235,0,0,255,255,255,255,64,31,0,0,40,35,0,0,80,235,0,0,80,235,0,0,88,235,0,0,152,235,0,0,200,235,0,0,248,235,0,0,0,0,0,0,248,235,0,0,200,236,0,0,224,236,0,0,224,236,0,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,224,240,0,0,240,240,0,0,0,241,0,0,16,241,0,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,0,46,1,0,8,46,1,0,0,0,0,0,11,0,0,0,216,234,0,0,80,29,2,0,2,0,0,0,80,195,0,0,64,13,3,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,200,81,2,0,40,241,0,0,40,82,2,0,152,14,3,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,216,25,3,0,0,0,0,0,11,0,0,0,216,234,0,0,80,29,2,0,255,255,255,255,80,195,0,0,64,13,3,0,176,29,2,0,224,29,2,0,16,30,2,0,152,235,0,0,200,235,0,0,0,31,2,0,48,34,2,0,0,31,2,0,96,37,2,0,144,37,2,0,32,47,2,0,176,56,2,0,64,66,2,0,72,239,0,0,208,75,2,0,144,79,2,0,240,79,2,0,80,80,2,0,128,80,2,0,176,80,2,0,224,80,2,0,16,81,2,0,104,81,2,0,152,81,2,0,200,81,2,0,40,241,0,0,40,82,2,0,0,0,0,0,176,253,0,0,224,253,0,0,2,0,0,0,136,82,2,0,152,82,2,0,0,0,0,0,2,0,0,0,216,234,0,0,56,235,0,0,2,0,0,0,0,0,0,0,64,31,0,0,80,235,0,0,80,235,0,0,88,235,0,0,152,235,0,0,200,235,0,0,248,235,0,0,0,0,0,0,248,235,0,0,200,236,0,0,224,236,0,0,224,236,0,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,224,240,0,0,240,240,0,0,0,241,0,0,16,241,0,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,0,46,1,0,200,168,1,0,0,0,0,0,2,0,0,0,216,234,0,0,56,235,0,0,255,255,255,255,0,0,0,0,64,31,0,0,80,235,0,0,80,235,0,0,88,235,0,0,152,235,0,0,200,235,0,0,248,235,0,0,0,0,0,0,248,235,0,0,200,236,0,0,224,236,0,0,224,236,0,0,0,0,0,0,0,0,0,0,72,239,0,0,120,239,0,0,184,240,0,0,0,0,0,0,208,240,0,0,208,240,0,0,216,240,0,0,216,240,0,0,224,240,0,0,240,240,0,0,0,241,0,0,16,241,0,0,40,241,0,0,200,250,0,0,224,250,0,0,176,253,0,0,224,253,0,0,1,0,0,0,0,46,1,0,8,46,1,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,2,0,0,0,2,0,0,32,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,90,0,0,0,95,0,0,0,95,0,0,0,95,0,0,0,95,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,232,255,255,255,226,255,255,255,216,255,255,255,216,255,255,255,211,255,255,255,211,255,255,255,211,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,255,255,255,255,10,0,0,0,10,0,0,0,255,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,226,255,255,255,216,255,255,255,216,255,255,255,211,255,255,255,211,255,255,255,211,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,64,0,0,0,64,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,156,255,255,255,156,255,255,255,151,255,255,255,0,0,0,0,126,255,255,255,126,255,255,255,116,255,255,255,0,0,0,0,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,8,0,0,0,0,0,160,65,0,0,96,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,112,194,0,0,240,193,0,0,32,194,0,0,32,194,0,0,32,194,0,0,32,194,0,0,32,194,0,0,0,64,0,0,150,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,96,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,194,0,0,240,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,0,64,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,64,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,160,193,0,0,160,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,0,0,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,32,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,160,193,0,0,112,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,0,0,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,32,65,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,112,193,0,0,112,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,0,0,0,0,170,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,16,124,1,0,40,124,1,0,64,124,1,0,96,124,1,0,128,124,1,0,176,124,1,0,224,124,1,0,248,124,1,0,56,125,1,0,120,125,1,0,168,125,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,128,0,0,0,33,0,0,0,8,0,0,0,16,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,66,0,0,0,16,0,0,0,32,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,128,0,0,0,14,0,0,0,4,0,0,0,58,0,0,0,2,0,0,0,8,0,0,0,28,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,28,0,0,0,8,0,0,0,116,0,0,0,4,0,0,0,16,0,0,0,56,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,8,0,0,0,33,0,0,0,4,0,0,0,16,0,0,0,70,0,0,0,2,0,0,0,6,0,0,0,12,0,0,0,23,0,0,0,46,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,12,0,0,0,46,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,23,0,0,0,33,0,0,0,70,0,0,0,2,0,0,0,6,0,0,0,10,0,0,0,14,0,0,0,19,0,0,0,28,0,0,0,39,0,0,0,58,0,0,0,90], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,66,0,0,0,16,0,0,0,32,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,4,0,0,93,0,0,0,23,0,0,0,116,1,0,0,6,0,0,0,46,0,0,0,186,0,0,0,238,2,0,0,14,0,0,0,33,0,0,0,65,0,0,0,130,0,0,0,4,1,0,0,44,2,0,0,3,0,0,0,10,0,0,0,18,0,0,0,28,0,0,0,39,0,0,0,55,0,0,0,79,0,0,0,111,0,0,0,158,0,0,0,220,0,0,0,56,1,0,0,208,1,0,0,138,2,0,0,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,64,64,0,0,144,65,0,4,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,8,0,0,186,0,0,0,46,0,0,0,232,2,0,0,12,0,0,0,92,0,0,0,116,1,0,0,220,5,0,0,28,0,0,0,66,0,0,0,130,0,0,0,4,1,0,0,8,2,0,0,88,4,0,0,6,0,0,0,20,0,0,0,36,0,0,0,56,0,0,0,78,0,0,0,110,0,0,0,158,0,0,0,222,0,0,0,60,1,0,0,184,1,0,0,112,2,0,0,160,3,0,0,20,5,0,0,164,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,64,64,0,0,144,65,0,8,0,0,6,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,46,0,0,0,186,0,0,0,16,0,0,0,33,0,0,0,65,0,0,0,93,0,0,0,130,0,0,0,22,1,0,0,7,0,0,0,23,0,0,0,39,0,0,0,55,0,0,0,79,0,0,0,110,0,0,0,156,0,0,0,232,0,0,0,104,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,10,0,0,0,8,124,1,0,0,0,0,0,24,46,1,0,40,71,1,0,24,46,1,0,72,71,1,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71682);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+80536);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81564);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,24,110,1,0,24,110,1,0,64,110,1,0,64,110,1,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,128,82,1,0,128,82,1,0,168,82,1,0,168,82,1,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+83744);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,16,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,30,0,0,0,255,255,255,255,50,0,0,0,255,255,255,255,80,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,152,98,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,184,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,224,83,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,84,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,84,1,0,0,0,0,0,88,84,1,0,128,84,1,0,0,0,0,0,0,0,0,0,168,84,1,0,208,84,1,0,0,0,0,0,0,0,0,0,248,84,1,0,32,85,1,0,72,85,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,48,98,1,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,136,98,1,0,0,0,0,0,4,0,0,0,81,0,0,0,200,97,1,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,32,98,1,0,0,0,0,0,4,0,0,0,113,2,0,0,56,95,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,97,1,0,0,0,0,0,4,0,0,0,113,2,0,0,168,92,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,95,1,0,0,0,0,0,2,0,0,0,81,0,0,0,40,92,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,128,92,1,0,0,0,0,0,2,0,0,0,81,0,0,0,168,91,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,0,92,1,0,0,0,0,0,4,0,0,0,81,0,0,0,64,91,1,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,152,91,1,0,0,0,0,0,2,0,0,0,121,0,0,0,144,90,1,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,16,91,1,0,0,0,0,0,2,0,0,0,121,0,0,0,224,89,1,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,96,90,1,0,0,0,0,0,2,0,0,0,121,0,0,0,48,89,1,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,176,89,1,0,0,0,0,0,2,0,0,0,225,0,0,0,8,88,1,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,240,88,1,0,0,0,0,0,2,0,0,0,225,0,0,0,224,86,1,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,200,87,1,0,0,0,0,0,2,0,0,0,33,1,0,0,112,85,1,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,152,86,1,0,0,0,0,0,2,5,4,6,6,8,8,8,8,8,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,8,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,9,9,9,9,9,9,9,9,10,10,9,7,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,10,8,8,8,9,9,9,9,10,10,10,9,10,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,7,7,9,9,7,7,8,8,10,10,11,11,4,7,7,9,9,10,10,8,8,10,10,10,11,10,11,4,7,7,9,9,10,10,8,8,10,9,11,11,11,11,7,9,9,12,12,11,12,10,10,11,10,12,11,11,11,7,9,9,11,11,13,12,9,9,11,10,11,11,12,11,9,10,10,12,12,14,14,10,10,11,12,12,11,11,11,9,10,11,11,13,14,13,10,11,11,11,12,11,12,12,7,8,8,10,9,11,10,11,12,12,11,12,14,12,13,7,8,8,9,10,10,11,12,12,12,11,12,12,12,13,9,9,9,11,11,13,12,12,12,12,11,12,12,13,12,8,10,10,11,10,11,12,12,12,12,12,12,14,12,12,9,11,11,11,12,12,12,12,13,13,12,12,13,13,12,10,11,11,12,11,12,12,12,11,12,13,12,12,12,13,11,11,12,12,12,13,12,12,11,12,13,13,12,12,13,12,11,12,12,13,13,12,13,12,13,13,13,13,14,13,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,4,4,11,11,11,11,11,11,11,11,11,11,11,11,3,11,8,11,11,11,11,11,11,11,11,11,11,11,11,3,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,2,5,5,6,6,7,7,7,7,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,8,8,8,9,8,9,9,8,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,8,8,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,10,11,11,4,6,6,7,7,9,9,11,11,13,12,4,6,6,7,7,9,9,11,11,12,12,6,7,7,9,9,11,11,12,12,13,13,6,7,7,9,9,11,11,12,12,13,13,8,9,9,11,11,12,12,13,13,14,14,8,9,9,11,11,12,12,13,13,14,14,9,11,11,12,12,13,13,14,14,15,15,9,11,11,12,12,13,13,14,14,15,14,11,12,12,13,13,14,14,15,15,16,16,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,4,5,5,7,7,8,8,9,9,9,9,4,5,5,7,7,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,9,9,8,10,10,8,10,10,5,9,9,7,10,10,8,10,10,4,10,10,9,12,12,9,11,11,7,12,11,10,11,13,10,13,13,7,12,12,10,13,12,10,13,13,4,10,10,9,12,12,9,12,12,7,12,12,10,13,13,10,12,13,7,11,12,10,13,13,10,13,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,4,4,4,6,6,7,7,9,9,6,6,6,7,7,8,8,9,9,6,6,6,7,7,8,8,9,9,7,7,7,8,8,8,9,10,10,7,7,7,8,8,9,8,10,10,9,9,9,9,9,10,10,10,10,9,9,9,9,9,10,10,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,5,8,7,8,8,10,10,4,6,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,8,8,8,9,9,10,10,12,11,8,8,8,9,9,10,10,11,11,9,10,10,11,11,11,11,13,12,9,10,10,11,11,12,12,12,13,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,9,9,6,7,7,9,9,6,7,7,9,9,9,9,9,11,11,9,9,9,11,11,6,7,7,9,9,7,7,8,9,10,7,7,8,9,10,9,9,10,10,11,9,9,10,10,12,6,7,7,9,9,7,8,7,10,9,7,8,7,10,9,9,10,9,12,11,10,10,9,12,10,9,10,10,12,11,9,10,10,12,11,9,10,10,12,12,11,11,12,12,13,11,11,12,12,13,9,9,10,12,11,9,10,10,12,12,10,10,10,12,12,11,12,11,13,12,11,12,11,13,12,6,7,7,9,9,7,8,8,10,10,7,8,7,10,9,10,10,10,12,12,10,10,10,12,11,7,8,7,10,10,7,7,9,10,11,8,9,9,11,10,10,10,11,10,12,10,10,11,12,12,7,8,8,10,10,7,9,8,11,10,8,8,9,11,11,10,11,10,12,11,10,11,11,12,12,9,10,10,12,12,9,10,10,12,12,10,11,11,13,12,11,10,12,10,14,12,12,12,13,14,9,10,10,12,12,9,11,10,12,12,10,11,11,12,12,11,12,11,14,12,12,12,12,14,14,5,7,7,9,9,7,7,7,9,10,7,8,8,10,10,10,10,10,11,11,10,10,10,12,12,7,8,8,10,10,8,9,8,11,10,7,8,9,10,11,10,10,10,11,12,10,10,11,11,13,6,7,8,10,10,8,9,9,10,10,7,9,7,11,10,10,11,10,12,12,10,11,10,12,10,9,10,10,12,12,10,11,11,13,12,9,10,10,12,12,12,12,12,14,13,11,11,12,11,14,9,10,10,11,12,10,11,11,12,13,9,10,10,12,12,12,12,12,14,13,11,12,10,14,11,9,9,10,11,12,9,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,12,9,10,9,12,12,9,10,11,12,13,10,11,10,13,11,12,12,13,13,14,12,12,12,13,13,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,12,13,14,11,12,11,14,13,10,10,11,13,13,12,12,12,14,13,12,10,14,10,15,13,14,14,14,14,11,11,12,13,14,10,12,11,13,13,12,12,12,13,15,12,13,11,15,12,13,13,14,14,14,9,10,9,12,12,9,10,10,12,12,10,10,10,12,12,11,11,12,12,13,12,12,12,14,14,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,12,12,14,13,12,12,13,13,14,9,10,10,12,13,10,10,11,11,12,9,11,10,13,12,12,12,12,13,14,12,13,12,14,13,11,12,11,13,13,12,13,12,14,13,10,11,12,13,13,13,13,13,14,15,12,11,14,12,14,11,11,12,12,13,12,12,12,13,14,10,12,10,14,13,13,13,13,14,15,12,14,11,15,10,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,7,7,6,7,7,9,9,6,7,7,9,9,8,10,9,11,11,9,9,9,11,11,6,8,8,10,10,8,10,10,11,11,8,9,10,11,11,10,11,11,12,12,10,11,11,12,13,6,8,8,10,10,8,10,9,11,11,8,10,9,11,11,10,11,11,12,12,10,11,11,12,12,9,11,11,14,13,10,12,11,14,14,10,12,11,14,13,12,13,13,15,14,12,13,13,15,14,8,11,11,13,14,10,11,12,13,15,10,11,12,14,14,12,13,13,14,15,12,13,13,14,15,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,13,11,12,12,13,14,8,10,10,12,12,9,11,12,13,14,10,12,12,13,13,12,12,13,14,14,11,13,13,15,15,7,10,10,12,12,9,12,11,14,12,10,11,12,13,14,12,13,12,14,14,12,13,13,15,16,10,12,12,15,14,11,12,13,15,15,11,13,13,15,16,14,14,15,15,16,13,14,15,17,15,9,12,12,14,15,11,13,12,15,15,11,13,13,15,15,13,14,13,15,14,13,14,14,17,0,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,7,10,10,12,12,10,12,12,13,13,9,11,12,12,13,11,12,13,15,15,11,12,13,14,15,8,10,10,12,12,10,12,11,13,13,10,12,11,13,13,11,13,13,15,14,12,13,12,15,13,9,12,12,14,14,11,13,13,16,15,11,12,13,16,15,13,14,15,16,16,13,13,15,15,16,10,12,12,15,14,11,13,13,14,16,11,13,13,15,16,13,15,15,16,17,13,15,14,16,15,8,11,11,14,15,10,12,12,15,15,10,12,12,15,16,14,15,15,16,17,13,14,14,16,16,9,12,12,15,15,11,13,14,15,17,11,13,13,15,16,14,15,16,19,17,13,15,15,0,17,9,12,12,15,15,11,14,13,16,15,11,13,13,15,16,15,15,15,18,17,13,15,15,17,17,11,15,14,18,16,12,14,15,17,17,12,15,15,18,18,15,15,16,15,19,14,16,16,0,0,11,14,14,16,17,12,15,14,18,17,12,15,15,18,18,15,17,15,18,16,14,16,16,18,18,7,11,11,14,14,10,12,12,15,15,10,12,13,15,15,13,14,15,16,16,14,15,15,18,18,9,12,12,15,15,11,13,13,16,15,11,12,13,16,16,14,15,15,17,16,15,16,16,17,17,9,12,12,15,15,11,13,13,15,17,11,14,13,16,15,13,15,15,17,17,15,15,15,18,17,11,14,14,17,15,12,14,15,17,18,13,13,15,17,17,14,16,16,19,18,16,15,17,17,0,11,14,14,17,17,12,15,15,18,0,12,15,14,18,16,14,17,17,19,0,16,18,15,0,16,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,5,5,6,6,5,6,6,5,7,6,6,7,8,6,7,8,5,6,6,6,8,7,6,8,7,5,6,6,7,8,8,6,7,7,6,8,7,7,7,9,8,9,9,6,7,8,7,9,7,8,9,9,5,6,6,6,7,7,7,8,8,6,8,7,8,9,9,7,7,9,6,7,8,8,9,9,7,9,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,8,7,9,10,7,9,9,5,8,8,7,10,9,7,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,10,12,12,7,10,10,9,12,11,10,12,12,5,8,8,8,10,10,8,10,10,7,10,10,10,12,12,9,11,12,7,10,10,10,12,12,9,12,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,13,9,15,9,16,8,10,13,7,5,8,6,9,7,10,7,10,11,11,6,7,8,8,9,9,9,12,16,8,5,8,6,8,6,9,7,10,12,11,7,7,7,6,7,7,7,11,15,7,5,8,6,7,5,7,6,9,13,13,9,9,8,6,6,5,5,9,14,8,6,8,6,6,4,5,3,5,13,9,9,11,8,10,7,8,4,5,12,11,16,17,15,17,12,13,8,8,15,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+86140);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,25,0,0,0,255,255,255,255,45,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,200,123,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,111,1,0,0,0,0,0,0,0,0,0,0,0,0,0,80,111,1,0,0,0,0,0,0,0,0,0,0,0,0,0,120,111,1,0,0,0,0,0,0,0,0,0,0,0,0,0,160,111,1,0,0,0,0,0,200,111,1,0,240,111,1,0,0,0,0,0,0,0,0,0,24,112,1,0,64,112,1,0,104,112,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,96,123,1,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,123,1,0,0,0,0,0,4,0,0,0,81,0,0,0,248,122,1,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,80,123,1,0,0,0,0,0,4,0,0,0,113,2,0,0,104,120,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,122,1,0,0,0,0,0,4,0,0,0,113,2,0,0,216,117,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,120,1,0,0,0,0,0,2,0,0,0,81,0,0,0,88,117,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,176,117,1,0,0,0,0,0,2,0,0,0,169,0,0,0,112,116,1,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,32,117,1,0,0,0,0,0,2,0,0,0,25,0,0,0,56,116,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,116,1,0,0,0,0,0,4,0,0,0,81,0,0,0,208,115,1,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,40,116,1,0,0,0,0,0,2,0,0,0,225,0,0,0,168,114,1,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,144,115,1,0,0,0,0,0,2,0,0,0,185,1,0,0,144,112,1,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,80,114,1,0,0,0,0,0,1,6,5,7,7,9,9,9,9,10,12,12,10,11,11,10,11,11,11,10,11,6,8,8,9,9,10,10,9,10,11,11,10,11,11,11,11,10,11,11,11,11,6,7,8,9,9,9,10,11,10,11,12,11,10,11,11,11,11,11,11,12,10,8,9,9,10,9,10,10,9,10,10,10,10,10,9,10,10,10,10,9,10,10,9,9,9,9,10,10,9,9,10,10,11,10,9,12,10,11,10,9,10,10,10,8,9,9,10,9,10,9,9,10,10,9,10,9,11,10,10,10,10,10,9,10,8,8,9,9,10,9,11,9,8,9,9,10,11,10,10,10,11,12,9,9,11,8,9,8,11,10,11,10,10,9,11,10,10,10,10,10,10,10,11,11,11,11,8,9,9,9,10,10,10,11,11,12,11,12,11,10,10,10,12,11,11,11,10,8,10,9,11,10,10,11,12,10,11,12,11,11,12,11,12,12,10,11,11,10,9,9,10,11,12,10,10,10,11,10,11,11,10,12,12,10,11,10,11,12,10,9,10,10,11,10,11,11,11,11,11,12,11,11,11,9,11,10,11,10,11,10,9,9,10,11,11,11,10,10,11,12,12,11,12,11,11,11,12,12,12,12,11,9,11,11,12,10,11,11,11,11,11,11,12,11,11,12,11,11,11,10,11,11,9,11,10,11,11,11,10,10,10,11,11,11,12,10,11,10,11,11,11,11,12,9,11,10,11,11,10,10,11,11,9,11,11,12,10,10,10,10,10,11,11,10,9,10,11,11,12,11,10,10,12,11,11,12,11,12,11,11,10,10,11,11,10,12,11,10,11,10,11,10,10,10,11,11,10,10,11,11,11,11,10,10,10,12,11,11,11,11,10,9,10,11,11,11,12,11,11,11,12,10,11,11,11,9,10,11,11,11,11,11,11,10,10,11,11,12,11,10,11,12,11,10,10,11,9,10,11,11,11,11,11,10,11,11,10,12,11,11,11,12,11,11,11,10,10,11,11,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,5,5,5,5,10,10,11,11,11,11,11,11,11,11,5,7,6,8,8,9,10,11,11,11,11,11,11,11,11,6,6,7,9,7,11,10,11,11,11,11,11,11,11,11,5,6,6,11,8,11,11,11,11,11,11,11,11,11,11,5,6,6,9,10,11,10,11,11,11,11,11,11,11,11,7,10,10,11,11,11,11,11,11,11,11,11,11,11,11,7,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,6,6,4,6,5,7,7,4,5,6,7,7,6,7,7,7,7,6,7,7,7,7,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,7,9,9,11,11,12,12,16,16,3,6,6,9,9,11,11,12,12,13,14,18,16,3,6,7,9,9,11,11,13,12,14,14,17,16,7,9,9,11,11,12,12,14,14,14,14,17,16,7,9,9,11,11,13,12,13,13,14,14,17,0,9,11,11,12,13,14,14,14,13,15,14,17,17,9,11,11,12,12,14,14,13,14,14,15,0,0,11,12,12,15,14,15,14,15,14,15,16,17,0,11,12,13,13,13,14,14,15,14,15,15,0,0,12,14,14,15,15,14,16,15,15,17,16,0,18,13,14,14,15,14,15,14,15,16,17,16,0,0,17,17,18,0,16,18,16,0,0,0,17,0,0,16,0,0,16,16,0,15,0,17,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,6,8,7,8,8,10,10,4,6,6,8,8,8,8,10,10,6,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,7,8,8,9,9,10,10,12,11,7,8,8,9,9,10,10,11,11,9,10,10,11,11,11,12,12,12,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,5,6,7,9,9,6,7,6,9,9,9,9,9,10,11,9,9,9,11,10,6,7,7,10,10,7,7,8,10,10,7,8,8,10,10,10,10,10,10,11,9,10,10,11,12,6,7,7,10,10,7,8,8,10,10,7,8,7,10,10,9,10,10,12,11,10,10,10,11,10,9,10,10,12,11,10,10,10,13,11,9,10,10,12,12,11,11,12,12,13,11,11,11,12,13,9,10,10,12,12,10,10,11,12,12,10,10,11,12,12,11,11,11,13,13,11,12,12,13,13,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,11,11,12,12,10,11,10,12,12,7,8,8,11,11,7,8,9,10,11,8,9,9,11,11,11,10,11,10,12,10,11,11,12,13,7,8,8,10,11,8,9,8,12,10,8,9,9,11,12,10,11,10,13,11,10,11,11,13,12,9,11,10,13,12,10,10,11,12,12,10,11,11,13,13,12,10,13,11,14,11,12,12,15,13,9,11,11,13,13,10,11,11,13,12,10,11,11,12,14,12,13,11,14,12,12,12,12,14,14,5,7,7,10,10,7,8,8,10,10,7,8,8,11,10,10,11,11,12,12,10,11,10,12,12,7,8,8,10,11,8,9,9,12,11,8,8,9,10,11,10,11,11,12,13,11,10,11,11,13,6,8,8,10,11,8,9,9,11,11,7,9,7,11,10,10,11,11,12,12,10,11,10,13,10,9,11,10,13,12,10,12,11,13,13,10,10,11,12,13,11,12,13,15,14,11,11,13,12,13,9,10,11,12,13,10,11,11,12,13,10,11,10,13,12,12,13,13,13,14,12,12,11,14,11,8,10,10,12,13,10,11,11,13,13,10,11,10,13,13,12,13,14,15,14,12,12,12,14,13,9,10,10,13,12,10,10,12,13,13,10,11,11,15,12,12,12,13,15,14,12,13,13,15,13,9,10,11,12,13,10,12,10,13,12,10,11,11,12,13,12,14,12,15,13,12,12,12,15,14,11,12,11,14,13,11,11,12,14,14,12,13,13,14,13,13,11,15,11,15,14,14,14,16,15,11,12,12,13,14,11,13,11,14,14,12,12,13,14,15,12,14,12,15,12,13,15,14,16,15,8,10,10,12,12,10,10,10,12,13,10,11,11,13,13,12,12,12,13,14,13,13,13,15,15,9,10,10,12,12,10,11,11,13,12,10,10,11,13,13,12,12,12,14,14,12,12,13,15,14,9,10,10,13,12,10,10,12,12,13,10,11,10,13,13,12,13,13,14,14,12,13,12,14,13,11,12,12,14,13,12,13,12,14,14,10,12,12,14,14,14,14,14,16,14,13,12,14,12,15,10,12,12,14,15,12,13,13,14,16,11,12,11,15,14,13,14,14,14,15,13,14,11,14,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,7,7,6,7,7,9,9,6,7,7,9,9,8,10,9,11,11,8,9,9,11,11,6,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,12,12,10,11,11,12,13,6,8,8,10,10,8,10,10,11,11,8,10,10,11,11,9,10,11,12,12,10,11,11,12,12,8,11,11,14,13,10,12,11,15,13,10,12,11,14,14,12,13,12,16,14,12,14,12,16,15,8,11,11,13,14,10,11,12,13,15,10,11,12,13,15,11,12,13,14,15,12,12,14,14,16,5,8,8,11,11,9,11,11,12,12,8,10,11,12,12,11,12,12,15,14,11,12,12,14,14,7,11,10,13,12,10,11,12,13,14,10,12,12,14,13,12,13,13,14,15,12,13,13,15,15,7,10,11,12,13,10,12,11,14,13,10,12,13,13,15,12,13,12,14,14,11,13,13,15,16,9,12,12,15,14,11,13,13,15,16,11,13,13,16,16,13,14,15,15,15,12,14,15,17,16,9,12,12,14,15,11,13,13,15,16,11,13,13,16,18,13,14,14,17,16,13,15,15,17,18,5,8,9,11,11,8,11,11,12,12,8,10,11,12,12,11,12,12,14,14,11,12,12,14,15,7,11,10,12,13,10,12,12,14,13,10,11,12,13,14,11,13,13,15,14,12,13,13,14,15,7,10,11,13,13,10,12,12,13,14,10,12,12,13,13,11,13,13,16,16,12,13,13,15,14,9,12,12,16,15,10,13,13,15,15,11,13,13,17,15,12,15,15,18,17,13,14,14,15,16,9,12,12,15,15,11,13,13,15,16,11,13,13,15,15,12,15,15,16,16,13,15,14,17,15,7,11,11,15,15,10,13,13,16,15,10,13,13,15,16,14,15,15,17,19,13,15,14,15,18,9,12,12,16,16,11,13,14,17,16,11,13,13,17,16,15,15,16,17,19,13,15,16,0,18,9,12,12,16,15,11,14,13,17,17,11,13,14,16,16,15,16,16,19,18,13,15,15,17,19,11,14,14,19,16,12,14,15,0,18,12,16,15,18,17,15,15,18,16,19,14,15,17,19,19,11,14,14,18,19,13,15,14,19,19,12,16,15,18,17,15,17,15,0,16,14,17,16,19,0,7,11,11,14,14,10,12,12,15,15,10,13,13,16,15,13,15,15,17,0,14,15,15,16,19,9,12,12,16,16,11,14,14,16,16,11,13,13,16,16,14,17,16,19,0,14,18,17,17,19,9,12,12,15,16,11,13,13,15,17,12,14,13,19,16,13,15,15,17,19,15,17,16,17,19,11,14,14,19,16,12,15,15,19,17,13,14,15,17,19,14,16,17,19,19,16,15,16,17,19,11,15,14,16,16,12,15,15,19,0,12,14,15,19,19,14,16,16,0,18,15,19,14,18,16,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,6,6,5,6,6,5,7,7,6,7,8,6,7,8,5,7,7,6,8,8,7,9,7,5,7,7,7,9,9,7,8,8,6,9,8,7,7,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,9,6,8,8,8,10,10,8,8,10,6,8,9,8,10,10,7,10,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,8,8,10,10,7,10,10,5,8,8,7,10,10,8,10,10,4,9,8,8,11,11,8,11,11,7,11,11,10,11,13,10,13,13,7,11,11,10,13,12,10,13,13,5,9,8,8,11,11,8,11,11,7,11,11,9,13,13,10,12,13,7,11,11,10,13,13,10,13,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,11,9,12,8,7,10,6,4,5,5,7,5,6,16,9,5,5,6,7,7,9,16,7,4,6,5,7,5,7,17,10,7,7,8,7,7,8,18,7,5,6,4,5,4,5,15,7,6,7,5,6,4,5,15,12,13,18,12,17,11,9,17,6,0,0,0,6,0,0,0,136,166,1,0,176,166,1,0,216,166,1,0,0,167,1,0,40,167,1,0,0,0,0,0,72,164,1,0,112,164,1,0,152,164,1,0,192,164,1,0,232,164,1,0,0,0,0,0,232,160,1,0,16,161,1,0,56,161,1,0,96,161,1,0,136,161,1,0,176,161,1,0,216,161,1,0,0,162,1,0,136,157,1,0,176,157,1,0,216,157,1,0,0,158,1,0,40,158,1,0,80,158,1,0,120,158,1,0,160,158,1,0,96,152,1,0,136,152,1,0,176,152,1,0,216,152,1,0,0,153,1,0,40,153,1,0,80,153,1,0,120,153,1,0,160,153,1,0,200,153,1,0,240,153,1,0,24,154,1,0,56,147,1,0,96,147,1,0,136,147,1,0,176,147,1,0,216,147,1,0,0,148,1,0,40,148,1,0,80,148,1,0,120,148,1,0,160,148,1,0,200,148,1,0,240,148,1,0,248,144,1,0,32,145,1,0,72,145,1,0,112,145,1,0,152,145,1,0,0,0,0,0,232,137,1,0,16,138,1,0,56,138,1,0,96,138,1,0,136,138,1,0,176,138,1,0,216,138,1,0,0,139,1,0,40,139,1,0,80,139,1,0,120,139,1,0,160,139,1,0,200,139,1,0,240,139,1,0,24,140,1,0,0,0,0,0,216,130,1,0,0,131,1,0,40,131,1,0,80,131,1,0,120,131,1,0,160,131,1,0,200,131,1,0,240,131,1,0,24,132,1,0,64,132,1,0,104,132,1,0,144,132,1,0,184,132,1,0,224,132,1,0,8,133,1,0,0,0,0,0,176,125,1,0,216,125,1,0,0,126,1,0,40,126,1,0,80,126,1,0,120,126,1,0,160,126,1,0,200,126,1,0,240,126,1,0,24,127,1,0,64,127,1,0,104,127,1,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,208,130,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,144,130,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,80,130,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,208,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,176,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,48,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,24,129,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,224,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,96,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,72,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,16,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,144,127,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,4,8,4,8,4,8,5,8,5,8,6,8,4,8,4,8,5,8,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,4,3,5,4,6,4,6,5,7,6,7,6,8,6,8,7,9,8,10,8,12,9,13,10,15,10,15,11,14,0,0,0,0,0,0,0,4,4,4,4,4,4,3,4,4,4,4,4,5,4,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,4,3,4,4,5,5,6,6,7,7,7,8,8,11,8,9,9,9,10,11,11,11,9,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,4,5,4,5,4,6,4,6,5,6,5,7,5,7,6,8,6,8,6,8,7,8,7,9,7,9,8,0,0,0,0,0,0,0,4,5,4,4,4,5,4,4,4,5,4,5,4,5,3,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,5,3,5,4,5,4,5,4,5,5,5,5,6,5,6,5,7,5,8,6,8,6,8,6,8,6,8,7,9,7,9,7,11,9,11,11,12,11,14,12,14,16,14,16,13,16,14,16,12,15,13,16,14,16,13,14,12,15,13,15,13,13,13,15,12,14,14,15,13,15,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,4,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,6,7,6,7,6,8,7,8,7,8,7,8,7,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,6,6,6,5,6,6,7,6,7,6,7,6,7,6,8,7,8,7,8,7,8,7,8,7,9,7,9,7,9,7,9,8,9,8,10,8,10,8,10,7,10,6,10,8,10,8,11,7,10,7,11,8,11,11,12,12,11,11,12,11,13,11,13,11,13,12,15,12,13,13,14,14,14,14,14,15,15,15,16,14,17,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,2,4,6,17,4,5,7,17,8,7,10,17,17,17,17,17,3,4,6,15,3,3,6,15,7,6,9,17,17,17,17,17,6,8,10,17,6,6,8,16,9,8,10,17,17,15,16,17,17,17,17,17,12,15,15,16,12,15,15,16,16,16,16,16,3,3,3,14,5,4,4,11,8,6,6,10,17,12,11,17,6,5,5,15,5,3,4,11,8,5,5,8,16,9,10,14,10,8,9,17,8,6,6,13,10,7,7,10,16,11,13,14,17,17,17,17,17,16,16,16,16,15,16,16,16,16,16,16,1,2,3,6,5,4,7,7,1,0,0,0,16,0,0,0,216,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,208,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,208,136,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,144,136,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,16,136,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,240,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,112,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,80,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,208,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,184,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,128,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,0,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,232,133,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,176,133,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,48,133,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,5,7,5,7,7,7,7,7,5,7,5,7,5,7,5,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,4,4,4,5,5,6,5,6,5,7,6,6,6,7,7,7,8,9,9,9,12,10,11,10,10,12,10,10,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,5,4,5,4,5,4,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,7,3,7,5,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,4,4,5,5,5,5,6,6,7,6,7,6,8,6,9,7,9,7,9,9,11,9,12,10,12,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,3,4,4,5,4,5,5,5,6,6,6,7,6,8,6,8,6,9,7,10,7,10,7,10,7,12,7,12,7,12,9,12,11,12,10,12,10,12,11,12,12,12,10,12,10,12,10,12,9,12,11,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,10,10,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,4,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,6,6,6,7,7,7,7,7,7,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,7,5,7,4,7,4,8,4,8,4,8,4,8,3,8,4,9,4,9,4,9,4,9,4,9,5,9,5,9,6,9,7,9,8,9,9,9,10,9,11,9,14,9,15,10,15,10,15,10,15,10,15,11,15,10,14,12,14,11,14,13,14,13,15,15,15,12,15,15,15,13,15,13,15,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,6,7,6,7,6,7,6,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,8,5,8,5,8,5,9,5,9,6,10,6,10,6,11,6,11,6,11,6,11,6,11,6,11,6,11,6,12,7,11,7,11,7,11,7,11,7,10,7,11,7,11,7,12,7,11,8,11,8,11,8,11,8,13,8,12,9,11,9,11,9,11,10,12,10,12,9,12,10,12,11,14,12,16,12,12,11,14,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,2,4,7,13,4,5,7,15,8,7,10,16,16,14,16,16,2,4,7,16,3,4,7,14,8,8,10,16,16,16,15,16,6,8,11,16,7,7,9,16,11,9,13,16,16,16,15,16,16,16,16,16,14,16,16,16,16,16,16,16,16,16,16,16,3,3,6,16,5,5,7,16,9,8,11,16,16,16,16,16,5,5,8,16,5,5,7,16,8,7,9,16,16,16,16,16,9,9,12,16,6,8,11,16,9,10,11,16,16,16,16,16,16,16,16,16,13,16,16,16,15,16,16,16,16,16,16,16,5,4,7,16,6,5,8,16,9,8,10,16,16,16,16,16,5,5,7,15,5,4,6,15,7,6,8,16,16,16,16,16,9,9,11,15,7,7,9,16,8,8,9,16,16,16,16,16,16,16,16,16,15,15,15,16,15,15,14,16,16,16,16,16,8,8,11,16,8,9,10,16,11,10,14,16,16,16,16,16,6,8,10,16,6,7,10,16,8,8,11,16,14,16,16,16,10,11,14,16,9,9,11,16,10,10,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,12,16,15,16,12,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,1,2,3,6,4,7,5,7,2,6,8,9,7,11,13,13,1,3,5,5,6,6,12,10,1,0,0,0,16,0,0,0,232,144,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,224,144,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,224,143,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,160,143,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,32,143,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,143,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,128,142,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,96,142,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,224,141,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,200,141,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,144,141,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,16,141,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,248,140,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,192,140,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,64,140,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,6,3,6,4,7,4,7,5,9,5,11,6,11,6,11,7,11,6,11,6,11,9,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,4,2,5,3,5,4,6,6,6,7,7,8,7,8,7,8,7,9,8,9,8,9,8,10,8,11,9,12,9,12,0,0,0,0,0,0,0,4,5,4,5,4,5,4,5,3,5,3,5,3,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,3,8,3,10,3,8,3,9,3,8,4,9,4,9,5,9,6,10,6,9,7,11,7,12,9,13,10,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,3,4,4,4,4,5,5,5,5,5,6,5,7,5,8,6,8,6,9,7,10,7,10,8,10,8,11,9,11,0,0,0,0,0,0,0,4,5,4,5,3,5,3,5,3,5,4,4,4,4,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,4,5,4,5,4,5,5,6,5,6,5,7,5,7,6,7,6,8,7,8,7,8,7,9,8,9,9,9,9,10,10,10,11,9,12,9,12,9,15,10,14,9,13,10,13,10,12,10,12,10,13,10,12,11,13,11,14,12,13,13,14,14,13,14,15,14,16,13,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,1,5,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,6,7,7,7,7,8,7,8,8,9,8,10,9,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,8,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,8,4,8,4,9,5,9,5,9,5,9,5,9,6,10,6,10,7,10,8,11,9,11,11,12,13,12,14,13,15,13,15,14,16,14,17,15,17,15,15,16,16,15,16,16,16,15,18,16,15,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,2,5,5,4,5,4,5,4,5,4,6,5,6,5,6,5,6,5,7,5,7,6,8,6,8,6,8,6,9,6,9,6,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,7,5,8,6,8,6,8,6,9,6,9,6,10,6,10,6,11,6,11,7,11,7,12,7,12,7,12,7,12,7,12,7,12,7,12,7,12,8,13,8,12,8,12,8,13,8,13,9,13,9,13,9,13,9,12,10,12,10,13,10,14,11,14,12,14,13,14,13,14,14,15,16,15,15,15,14,15,17,21,22,22,21,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,2,3,7,13,4,4,7,15,8,6,9,17,21,16,15,21,2,5,7,11,5,5,7,14,9,7,10,16,17,15,16,21,4,7,10,17,7,7,9,15,11,9,11,16,21,18,15,21,18,21,21,21,15,17,17,19,21,19,18,20,21,21,21,20,1,5,7,21,5,8,9,21,10,9,12,20,20,16,20,20,4,8,9,20,6,8,9,20,11,11,13,20,20,15,17,20,9,11,14,20,8,10,15,20,11,13,15,20,20,20,20,20,20,20,20,20,13,20,20,20,18,18,20,20,20,20,20,20,3,6,8,20,6,7,9,20,10,9,12,20,20,20,20,20,5,7,9,20,6,6,9,20,10,9,12,20,20,20,20,20,8,10,13,20,8,9,12,20,11,10,12,20,20,20,20,20,18,20,20,20,15,17,18,20,18,17,18,20,20,20,20,20,7,10,12,20,8,9,11,20,14,13,14,20,20,20,20,20,6,9,12,20,7,8,11,20,12,11,13,20,20,20,20,20,9,11,15,20,8,10,14,20,12,11,14,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,11,16,18,20,15,15,17,20,20,17,20,20,20,20,20,20,9,14,16,20,12,12,15,20,17,15,18,20,20,20,20,20,16,19,18,20,15,16,20,20,17,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,1,4,2,6,3,7,5,7,2,10,8,14,7,12,11,14,1,5,3,7,4,9,7,13,1,0,0,0,0,1,0,0,56,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,48,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,32,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,0,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,192,145,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,2,4,3,5,4,5,5,5,5,6,6,6,6,6,6,6,7,7,8,6,9,7,12,11,16,13,16,12,15,13,15,12,14,12,15,15,15,0,0,0,0,0,0,0,0,0,0,3,3,3,4,3,4,4,4,4,4,5,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,3,3,0,0,0,0,0,0,1,3,2,3,0,0,0,0,4,5,6,11,5,5,6,10,7,7,6,6,14,13,9,9,6,6,6,10,6,6,6,9,8,7,7,9,14,12,8,11,8,7,7,11,8,8,7,11,9,9,7,9,13,11,9,13,19,19,18,19,15,16,16,19,11,11,10,13,10,10,9,15,5,5,6,13,6,6,6,11,8,7,6,7,14,11,10,11,6,6,6,12,7,6,6,11,8,7,7,11,13,11,9,11,9,7,6,12,8,7,6,12,9,8,8,11,13,10,7,13,19,19,17,19,17,14,14,19,12,10,8,12,13,10,9,16,7,8,7,12,7,7,7,11,8,7,7,8,12,12,11,11,8,8,7,12,8,7,6,11,8,7,7,10,10,11,10,11,9,8,8,13,9,8,7,12,10,9,7,11,9,8,7,11,18,18,15,18,18,16,17,18,15,11,10,18,11,9,9,18,16,16,13,16,12,11,10,16,12,11,9,6,15,12,11,13,16,16,14,14,13,11,12,16,12,9,9,13,13,10,10,12,17,18,17,17,14,15,14,16,14,12,14,15,12,10,11,12,18,18,18,18,18,18,18,18,18,12,13,18,16,11,9,18,1,0,0,0,8,0,0,0,88,152,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,24,152,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,216,151,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,88,151,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,56,151,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,184,150,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+93204);
/* memory initializer */ allocate([1,0,0,0,18,0,0,0,160,150,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,104,150,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,232,149,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,208,149,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,152,149,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,24,149,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,4,4,4,5,4,7,5,8,5,11,6,10,6,12,7,12,7,12,8,12,8,12,10,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,6,3,6,4,7,4,7,4,7,4,8,4,8,4,8,4,8,4,9,4,9,5,10,5,10,7,10,8,10,8,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,3,5,3,5,4,6,4,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,3,5,3,5,4,7,5,10,7,10,7,12,10,14,10,14,9,14,11,14,14,14,13,13,13,13,13,13,13,0,0,0,0,0,0,0,4,5,4,6,4,8,3,9,3,9,2,9,3,8,4,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,5,3,5,3,6,3,6,4,6,4,7,4,7,5,8,5,8,6,9,7,9,7,9,8,10,9,10,9,11,10,11,11,11,11,11,11,12,12,12,13,12,13,12,14,12,15,12,14,12,16,13,17,13,17,14,17,14,16,13,17,14,17,14,17,15,17,15,15,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,2,5,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,5,7,6,7,6,7,6,8,6,9,7,9,7,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,7,5,7,5,7,5,8,5,8,5,8,5,8,5,8,6,8,6,8,6,9,6,9,6,9,6,9,6,9,7,9,7,9,7,9,7,10,7,10,8,10,8,10,8,10,8,10,8,11,8,11,8,11,8,11,8,11,9,12,9,12,9,12,9,12,9,12,10,12,10,13,11,13,11,14,12,14,13,15,14,16,14,17,15,18,16,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,3,6,10,17,4,8,11,20,8,10,11,20,20,20,20,20,2,4,8,18,4,6,8,17,7,8,10,20,20,17,20,20,3,5,8,17,3,4,6,17,8,8,10,17,17,12,16,20,13,13,15,20,10,10,12,20,15,14,15,20,20,20,19,19,1,4,10,19,3,8,13,19,7,12,19,19,19,19,19,19,2,6,11,19,8,13,19,19,9,11,19,19,19,19,19,19,6,7,13,19,9,13,19,19,10,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,1,3,4,7,2,5,6,7,1,0,0,0,8,0,0,0,128,157,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,64,157,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,0,157,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,128,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,96,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,224,155,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,200,155,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,144,155,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,16,155,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,248,154,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,192,154,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,64,154,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,6,3,7,3,8,4,8,5,8,8,8,9,7,8,8,7,7,7,8,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,4,6,4,6,4,7,4,7,4,8,4,8,4,9,4,9,4,10,4,10,5,10,5,11,5,12,6,12,6,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,3,8,4,8,4,8,6,8,5,8,4,8,4,8,6,8,7,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,5,4,5,4,6,5,7,5,7,6,8,6,8,6,9,7,9,7,10,7,9,8,11,8,11,0,0,0,0,0,0,0,4,5,4,5,4,5,3,5,3,5,3,5,4,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,3,6,4,6,4,7,4,7,4,7,4,8,4,8,4,9,5,9,5,9,5,9,6,10,6,10,6,11,7,10,7,10,8,11,9,11,9,11,10,11,11,12,11,11,12,15,15,12,14,11,14,12,14,11,14,13,14,12,14,11,14,11,14,12,14,11,14,11,14,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,2,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,6,5,6,5,6,5,7,6,7,6,7,6,8,6,8,6,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,6,6,6,7,6,7,6,7,6,7,6,7,6,7,6,8,6,8,6,8,7,8,7,8,7,8,7,9,7,9,8,9,8,9,8,10,8,10,9,10,9,10,9,11,9,11,9,10,10,11,10,11,10,11,11,11,11,11,11,12,13,14,14,14,15,15,16,16,16,17,15,16,15,16,16,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,7,6,9,17,7,6,8,17,12,9,11,16,16,16,16,16,5,4,7,16,5,3,6,14,9,6,8,15,16,16,16,16,5,4,6,13,3,2,4,11,7,4,6,13,16,11,10,14,12,12,12,16,9,7,10,15,12,9,11,16,16,15,15,16,1,6,12,16,4,12,15,16,9,15,16,16,16,16,16,16,2,5,11,16,5,11,13,16,9,13,16,16,16,16,16,16,4,8,12,16,5,9,12,16,9,13,15,16,16,16,16,16,15,16,16,16,11,14,13,16,12,15,16,16,16,16,16,15,1,6,3,7,2,4,5,7,1,0,0,0,64,0,0,0,168,160,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,168,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,152,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,120,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,56,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,40,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,8,159,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,200,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,6,3,7,3,8,5,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,0,0,0,0,0,0,0,0,0,2,3,3,4,3,4,4,5,4,6,5,6,7,6,8,8,0,0,0,0,0,0,0,0,3,3,3,3,2,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,2,5,3,5,3,6,3,6,4,7,6,7,8,7,9,8,9,9,9,10,9,11,13,11,13,10,10,13,13,13,13,13,13,12,12,12,12,0,0,0,0,0,0,0,0,0,3,4,3,4,3,5,3,6,3,6,4,6,4,7,5,7,0,0,0,0,0,0,0,0,2,3,3,3,3,4,3,4,0,0,0,0,0,0,0,5,6,8,15,6,9,10,15,10,11,12,15,15,15,15,15,4,6,7,15,6,7,8,15,9,8,9,15,15,15,15,15,6,8,9,15,7,7,8,15,10,9,10,15,15,15,15,15,15,13,15,15,15,10,11,15,15,13,13,15,15,15,15,15,4,6,7,15,6,8,9,15,10,10,12,15,15,15,15,15,2,5,6,15,5,6,7,15,8,6,7,15,15,15,15,15,5,6,8,15,5,6,7,15,9,6,7,15,15,15,15,15,14,12,13,15,12,10,11,15,15,15,15,15,15,15,15,15,7,8,9,15,9,10,10,15,15,14,14,15,15,15,15,15,5,6,7,15,7,8,9,15,12,9,10,15,15,15,15,15,7,7,9,15,7,7,8,15,12,8,9,15,15,15,15,15,13,13,14,15,12,11,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,13,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,12,13,15,15,12,13,15,15,14,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,15,15,15,15,15,15,7,5,5,9,9,6,6,9,12,8,7,8,11,8,9,15,6,3,3,7,7,4,3,6,9,6,5,6,8,6,8,15,8,5,5,9,8,5,4,6,10,7,5,5,11,8,7,15,14,15,13,13,13,13,8,11,15,10,7,6,11,9,10,15,1,0,0,0,64,0,0,0,8,164,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,8,163,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,248,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,216,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,152,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,136,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,104,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,40,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,2,7,3,8,4,9,5,9,8,10,11,11,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,0,0,0,0,0,0,0,0,0,3,4,3,6,3,6,3,6,3,7,3,8,4,9,4,9,0,0,0,0,0,0,0,0,3,3,2,3,3,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3,5,3,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,6,5,7,8,9,11,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,5,4,5,4,5,4,6,4,6,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,8,13,17,17,8,11,17,17,11,13,17,17,17,17,17,17,6,10,16,17,6,10,15,17,8,10,16,17,17,17,17,17,9,13,15,17,8,11,17,17,10,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,11,15,17,7,10,15,17,8,10,17,17,17,15,17,17,4,8,13,17,4,7,13,17,6,8,15,17,16,15,17,17,6,11,15,17,6,9,13,17,8,10,17,17,15,17,17,17,16,17,17,17,12,14,15,17,13,14,15,17,17,17,17,17,5,10,14,17,5,9,14,17,7,9,15,17,15,15,17,17,3,7,12,17,3,6,11,17,5,7,13,17,12,12,17,17,5,9,14,17,3,7,11,17,5,8,13,17,13,11,16,17,12,17,17,17,9,14,15,17,10,11,14,17,16,14,17,17,8,12,17,17,8,12,17,17,10,12,17,17,17,17,17,17,5,10,17,17,5,9,15,17,7,9,17,17,13,13,17,17,7,11,17,17,6,10,15,17,7,9,15,17,12,11,17,17,12,15,17,17,11,14,17,17,11,10,15,17,17,16,17,17,10,7,8,13,9,6,7,11,10,8,8,12,17,17,17,17,7,5,5,9,6,4,4,8,8,5,5,8,16,14,13,16,7,5,5,7,6,3,3,5,8,5,4,7,14,12,12,15,10,7,8,9,7,5,5,6,9,6,5,5,15,12,9,10,1,0,0,0,0,1,0,0,136,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,128,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,112,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,80,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,16,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,5,3,5,3,6,4,7,4,7,5,7,6,7,6,7,8,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,3,5,3,5,4,5,4,6,4,6,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,0,0,0,0,0,0,2,2,2,2,0,0,0,0,6,7,7,12,6,6,7,12,7,6,6,10,15,12,11,13,7,7,8,13,7,7,8,12,7,7,7,11,12,12,11,13,10,9,9,11,9,9,9,10,10,8,8,12,14,12,12,14,11,11,12,14,11,12,11,15,15,12,13,15,15,15,15,15,6,6,7,10,6,6,6,11,7,6,6,9,14,12,11,13,7,7,7,10,6,6,7,9,7,7,6,10,13,12,10,12,9,9,9,11,9,9,8,9,9,8,8,10,13,12,10,12,12,12,11,13,12,12,11,12,15,13,12,15,15,15,14,14,6,6,6,8,6,6,5,6,7,7,6,5,11,10,9,8,7,6,6,7,6,6,5,6,7,7,6,6,11,10,9,8,8,8,8,9,8,8,7,8,8,8,6,7,11,10,9,9,14,11,10,14,14,11,10,15,13,11,9,11,15,12,12,11,11,9,8,8,10,9,8,9,11,10,9,8,12,11,12,11,13,10,8,9,11,10,8,9,10,9,8,9,10,8,12,12,15,11,10,10,13,11,10,10,8,8,7,12,10,9,11,12,15,12,11,15,13,11,11,15,12,14,11,13,15,15,13,13,1,0,0,0,0,1,0,0,200,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,192,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,176,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,144,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,80,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,5,3,5,3,5,4,6,5,6,5,7,6,6,7,7,9,9,11,11,16,11,14,10,11,11,13,16,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,3,3,4,3,4,3,4,4,5,4,5,4,6,5,6,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,3,0,0,0,0,0,0,2,2,2,2,0,0,0,0,7,7,7,11,6,6,7,11,7,6,6,10,12,10,10,13,7,7,8,11,7,7,7,11,7,6,7,10,11,10,10,13,10,10,9,12,9,9,9,11,8,8,8,11,13,11,10,14,15,15,14,15,15,14,13,14,15,12,12,17,17,17,17,17,7,7,6,9,6,6,6,9,7,6,6,8,11,11,10,12,7,7,7,9,7,6,6,9,7,6,6,9,13,10,10,11,10,9,8,10,9,8,8,10,8,8,7,9,13,12,10,11,17,14,14,13,15,14,12,13,17,13,12,15,17,17,14,17,7,6,6,7,6,6,5,7,6,6,6,6,11,9,9,9,7,7,6,7,7,6,6,7,6,6,6,6,10,9,8,9,10,9,8,8,9,8,7,8,8,7,6,8,11,10,9,10,17,17,12,15,15,15,12,14,14,14,10,12,15,13,12,13,11,10,8,10,11,10,8,8,10,9,7,7,10,9,9,11,11,11,9,10,11,10,8,9,10,8,6,8,10,9,9,11,14,13,10,12,12,11,10,10,8,7,8,10,10,11,11,12,17,17,15,17,17,17,17,17,17,13,12,17,17,17,14,17,216,168,1,0,232,193,1,0,216,168,1,0,8,194,1,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+103456);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+109908);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+110936);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112988);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,136,245,1,0,136,245,1,0,176,245,1,0,176,245,1,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,64,205,1,0,64,205,1,0,104,205,1,0,104,205,1,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+114144);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,3,0,0,0,0,0,0,231,3,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,32,245,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,120,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,160,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,200,206,1,0,0,0,0,0,240,206,1,0,24,207,1,0,0,0,0,0,0,0,0,0,64,207,1,0,104,207,1,0,0,0,0,0,0,0,0,0,144,207,1,0,184,207,1,0,224,207,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,104,219,1,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,16,245,1,0,0,0,0,0,4,0,0,0,113,2,0,0,216,216,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,219,1,0,0,0,0,0,2,0,0,0,81,0,0,0,88,216,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,176,216,1,0,0,0,0,0,2,0,0,0,81,0,0,0,216,215,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,48,216,1,0,0,0,0,0,2,0,0,0,33,1,0,0,104,214,1,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,144,215,1,0,0,0,0,0,4,0,0,0,81,0,0,0,0,214,1,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,88,214,1,0,0,0,0,0,2,0,0,0,121,0,0,0,80,213,1,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,208,213,1,0,0,0,0,0,2,0,0,0,169,0,0,0,104,212,1,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,24,213,1,0,0,0,0,0,2,0,0,0,25,0,0,0,48,212,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,212,1,0,0,0,0,0,2,0,0,0,169,0,0,0,72,211,1,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,248,211,1,0,0,0,0,0,2,0,0,0,225,0,0,0,32,210,1,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,8,211,1,0,0,0,0,0,2,0,0,0,185,1,0,0,8,208,1,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,200,209,1,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,9,8,9,9,9,9,9,9,9,9,11,11,12,7,7,7,7,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,7,7,7,7,8,8,9,8,9,9,9,9,9,9,10,10,10,10,11,11,12,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,7,7,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,12,11,9,9,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,12,11,12,11,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,12,11,12,11,11,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,12,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,11,11,12,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,12,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,12,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,11,12,11,11,12,10,10,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,12,12,11,12,11,11,12,12,12,11,11,10,10,10,10,10,10,10,10,10,11,12,12,11,12,12,11,12,11,11,11,11,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,5,5,7,7,9,9,11,11,12,12,13,13,6,5,5,6,6,9,9,10,10,12,12,12,13,15,14,6,5,5,7,7,9,9,10,10,12,12,12,13,14,13,17,7,7,8,8,10,10,11,11,12,13,13,13,13,13,17,7,7,8,8,10,10,11,11,13,13,13,13,14,14,17,11,11,9,9,11,11,12,12,12,13,13,14,15,13,17,12,12,9,9,11,11,12,12,13,13,13,13,14,16,17,17,17,11,12,12,12,13,13,13,14,15,14,15,15,17,17,17,12,12,11,11,13,13,14,14,15,14,15,15,17,17,17,15,15,13,13,14,14,15,14,15,15,16,15,17,17,17,15,15,13,13,13,14,14,15,15,15,15,16,17,17,17,17,16,14,15,14,14,15,14,14,15,15,15,17,17,17,17,17,14,14,16,14,15,15,15,15,15,15,17,17,17,17,17,17,16,16,15,17,15,15,14,17,15,17,16,17,17,17,17,16,15,14,15,15,15,15,15,15,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,3,10,10,10,10,10,10,10,10,10,10,5,6,6,10,10,10,10,10,10,10,10,10,10,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,9,10,9,10,11,11,11,0,13,12,9,8,9,9,10,10,11,11,12,11,0,0,0,9,9,9,9,10,10,11,11,12,12,0,0,0,10,10,9,9,10,10,11,11,12,12,0,0,0,13,13,10,10,11,11,12,11,13,12,0,0,0,14,14,10,10,11,10,11,11,12,12,0,0,0,0,0,12,12,11,11,12,12,13,13,0,0,0,0,0,12,12,11,10,12,11,13,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,5,7,7,7,7,7,7,10,10,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,6,7,6,6,4,7,7,10,9,9,10,9,9,5,7,7,10,9,9,10,9,9,6,10,10,10,10,10,11,10,10,6,9,9,10,9,10,11,10,10,6,9,9,10,9,9,11,9,10,7,10,10,11,11,11,11,10,10,6,9,9,10,10,10,11,9,9,6,9,9,10,10,10,10,9,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,5,5,8,8,8,8,9,9,10,10,11,11,11,11,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,8,8,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,8,8,10,10,10,10,11,11,12,12,12,12,0,0,0,10,10,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,10,10,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,11,11,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,11,12,12,13,13,0,0,0,0,0,10,10,11,11,11,11,12,12,13,12,13,13,0,0,0,0,0,0,0,11,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,13,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,4,5,6,6,8,8,0,0,0,8,8,7,7,9,9,0,0,0,8,8,7,7,9,9,0,0,0,9,10,8,8,9,9,0,0,0,10,10,8,8,9,9,0,0,0,11,10,8,8,10,10,0,0,0,11,11,8,8,10,10,0,0,0,12,12,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,8,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,10,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+117564);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,6,18,8,11,8,8,9,9,10,4,4,18,5,9,5,6,7,8,10,18,18,18,18,17,17,17,17,17,17,7,5,17,6,11,6,7,8,9,12,12,9,17,12,8,8,9,10,10,13,7,5,17,6,8,4,5,6,8,10,6,5,17,6,8,5,4,5,7,9,7,7,17,8,9,6,5,5,6,8,8,8,17,9,11,8,6,6,6,7,9,10,17,12,12,10,9,7,7,8,0,0,0,0,2,0,0,0,100,0,0,0,232,28,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,246,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,246,1,0,0,0,0,0,0,0,0,0,0,0,0,0,192,246,1,0,0,0,0,0,0,0,0,0,0,0,0,0,232,246,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,247,1,0,0,0,0,0,56,247,1,0,96,247,1,0,0,0,0,0,0,0,0,0,136,247,1,0,176,247,1,0,0,0,0,0,0,0,0,0,216,247,1,0,0,248,1,0,40,248,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,48,3,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,216,28,2,0,0,0,0,0,4,0,0,0,113,2,0,0,160,0,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,24,3,2,0,0,0,0,0,2,0,0,0,81,0,0,0,32,0,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,120,0,2,0,0,0,0,0,2,0,0,0,81,0,0,0,160,255,1,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,248,255,1,0,0,0,0,0,2,0,0,0,33,1,0,0,48,254,1,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,88,255,1,0,0,0,0,0,4,0,0,0,81,0,0,0,200,253,1,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,32,254,1,0,0,0,0,0,2,0,0,0,121,0,0,0,24,253,1,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,152,253,1,0,0,0,0,0,2,0,0,0,169,0,0,0,48,252,1,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,224,252,1,0,0,0,0,0,2,0,0,0,25,0,0,0,248,251,1,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,24,252,1,0,0,0,0,0,4,0,0,0,81,0,0,0,144,251,1,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,232,251,1,0,0,0,0,0,2,0,0,0,225,0,0,0,104,250,1,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,80,251,1,0,0,0,0,0,2,0,0,0,185,1,0,0,80,248,1,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,16,250,1,0,0,0,0,0,1,5,5,7,7,8,7,8,8,10,10,9,9,10,10,10,11,11,10,12,11,12,12,12,9,8,8,8,8,8,9,10,10,10,10,11,11,11,10,11,11,12,12,11,12,8,8,7,7,8,9,10,10,10,9,10,10,9,10,10,11,11,11,11,11,11,9,9,9,9,8,9,10,10,11,10,10,11,11,12,10,10,12,12,11,11,10,9,9,10,8,9,10,10,10,9,10,10,11,11,10,11,10,10,10,12,12,12,9,10,9,10,9,9,10,10,11,11,11,11,10,10,10,11,12,11,12,11,12,10,11,10,11,9,10,9,10,9,10,10,9,10,10,11,10,11,11,11,11,12,11,9,10,10,10,10,11,11,11,11,11,10,11,11,11,11,10,12,10,12,12,11,12,10,10,11,10,9,11,10,11,9,10,11,10,10,10,11,11,11,11,12,12,10,9,9,11,10,9,12,11,10,12,12,11,11,11,11,10,11,11,12,11,10,12,9,11,10,11,10,10,11,10,11,9,10,10,10,11,12,11,11,12,11,10,10,11,11,9,10,10,12,10,11,10,10,10,9,10,10,10,10,9,10,10,11,11,11,11,12,11,10,10,10,10,11,11,10,11,11,9,11,10,12,10,12,11,10,11,10,10,10,11,10,10,11,11,10,11,10,10,10,10,11,11,12,10,10,10,11,10,11,12,11,10,11,10,10,11,11,10,12,10,9,10,10,11,11,11,10,12,10,10,11,11,11,10,10,11,10,10,10,11,10,11,10,12,11,11,10,10,10,12,10,10,11,9,10,11,11,11,10,10,11,10,10,9,11,11,12,12,11,12,11,11,11,11,11,11,9,10,11,10,12,10,10,10,10,11,10,10,11,10,10,12,10,10,10,10,10,9,12,10,10,10,10,12,9,11,10,10,11,10,12,12,10,12,12,12,10,10,10,10,9,10,11,10,10,12,10,10,12,11,10,11,10,10,12,11,10,12,10,10,11,9,11,10,9,10,9,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,5,5,10,8,11,11,11,11,11,11,11,11,6,6,6,7,6,11,10,11,11,11,11,11,11,11,11,7,5,6,6,6,8,7,11,11,11,11,11,11,11,11,11,7,8,8,8,9,9,11,11,11,11,11,11,11,11,11,9,8,7,8,9,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,4,5,5,7,6,6,6,5,7,7,7,6,6,7,7,7,6,6,7,7,7,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,6,7,7,7,7,8,8,9,9,7,6,6,7,7,8,8,7,7,8,9,10,10,7,6,6,7,7,8,7,7,7,9,9,10,12,0,8,8,8,8,8,9,8,8,9,9,10,10,0,8,8,8,8,8,9,8,9,9,9,11,10,0,0,13,9,8,9,9,9,9,10,10,11,11,0,13,0,9,9,9,9,9,9,11,10,11,11,0,0,0,8,9,10,9,10,10,13,11,12,12,0,0,0,8,9,9,9,10,10,13,12,12,13,0,0,0,12,0,10,10,12,11,10,11,12,12,0,0,0,13,13,10,10,10,11,12,0,13,0,0,0,0,0,0,13,11,0,12,12,12,13,12,0,0,0,0,0,0,13,13,11,13,13,11,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,6,6,8,8,9,9,9,9,10,10,10,7,7,8,8,9,9,9,9,10,10,9,7,7,8,8,9,9,9,9,10,10,10,8,8,9,9,9,9,9,9,10,10,10,8,8,9,9,9,9,8,9,10,10,10,8,8,9,9,9,10,10,10,10,10,10,9,9,9,9,9,9,10,10,11,10,11,9,9,9,9,10,10,10,10,11,11,11,10,10,9,9,10,10,10,9,11,10,10,10,10,10,10,9,9,10,10,11,11,10,10,10,9,9,9,10,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,11,9,10,12,9,10,4,7,7,10,10,10,11,9,9,6,11,10,11,11,12,11,11,11,6,10,10,11,11,12,11,10,10,6,9,10,11,11,11,11,10,10,7,10,11,12,11,11,12,11,12,6,9,9,10,9,9,11,10,10,6,9,9,10,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,6,6,8,8,9,9,8,8,10,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,0,0,8,8,9,9,10,10,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,9,9,11,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,10,10,10,10,11,11,10,10,11,11,12,12,13,13,0,0,0,0,0,10,9,10,11,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,9,10,11,12,12,13,13,14,13,0,0,0,0,0,9,9,9,10,10,10,11,11,13,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,14,14,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,14,13,0,0,0,0,0,0,0,11,11,12,12,13,13,14,14,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,5,5,7,6,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,7,7,8,9,0,0,0,8,8,8,8,9,9,0,0,0,8,8,8,8,9,9,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,8,9,11,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,8,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+128264);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,5,18,7,10,6,7,8,9,10,5,2,18,5,7,5,6,7,8,11,17,17,17,17,17,17,17,17,17,17,7,4,17,6,9,6,8,10,12,15,11,7,17,9,6,6,7,9,11,15,6,4,17,6,6,4,5,8,11,16,6,6,17,8,6,5,6,9,13,16,8,9,17,11,9,8,8,11,13,17,9,12,17,15,14,13,12,13,14,17,12,15,17,17,17,17,17,16,17,17,0,0,0,0,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,63,51,51,51,51,51,51,227,63,102,102,102,102,102,102,230,63,154,153,153,153,153,153,233,63,205,204,204,204,204,204,236,63,0,0,0,0,0,0,240,63,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,35,0,0,0,21,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,20,0,0,0,8,0,0,0,0,0,0,192,0,0,160,63,25,0,0,0,12,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,3,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,240,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,254,255,255,255,240,255,255,255,0,0,0,0,0,0,0,0,12,0,0,0,254,255,255,255,236,255,255,255,0,0,0,0,0,0,0,0,253,255,255,255,248,255,255,255,243,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,252,255,255,255,246,255,255,255,242,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,245,255,255,255,245,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,244,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,244,255,255,255,243,255,255,255,242,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,251,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,248,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,253,255,255,255,248,255,255,255,243,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,246,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,245,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,250,255,255,255,244,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,244,255,255,255,243,255,255,255,242,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,250,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,248,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,10,0,0,0,10,0,0,0,100,0,0,0,10,0,0,0,10,0,0,0,100,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,2,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,16,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,14,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,247,255,255,255,251,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,228,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,240,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,234,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,234,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,3,0,0,0,5,0,0,0,10,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,16,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,14,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,4,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,253,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,4,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,245,255,255,255,248,255,255,255,250,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,253,255,255,255,1,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,234,255,255,255,238,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,251,255,255,255,254,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,228,255,255,255,234,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,242,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,232,255,255,255,240,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,241,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,252,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,8,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,0,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,251,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,234,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,238,255,255,255,239,255,255,255,240,255,255,255,244,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,234,255,255,255,236,255,255,255,241,255,255,255,246,255,255,255,248,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,249,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,226,255,255,255,228,255,255,255,230,255,255,255,232,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,218,255,255,255,218,255,255,255,218,255,255,255,218,255,255,255,220,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,218,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,236,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,15,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+138448);
/* memory initializer */ allocate([4,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,8,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,251,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,0,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,248,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,238,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,238,255,255,255,239,255,255,255,240,255,255,255,244,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,234,255,255,255,238,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,249,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,236,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,205,204,204,204,204,204,244,63,154,153,153,153,153,153,249,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,12,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,51,51,51,51,51,51,17,64,102,102,102,102,102,102,18,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,32,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,32,0,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,0,0,0,0,0,1,0,0,128,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,63,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,151,255,255,255,151,255,255,255,151,255,255,255,151,255,255,255,146,255,255,255,136,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,106,255,255,255,205,204,204,204,204,204,43,64,51,51,51,51,51,51,46,64,154,153,153,153,153,153,47,64,0,0,0,0,0,128,48,64,51,51,51,51,51,51,49,64,102,102,102,102,102,230,50,64,154,153,153,153,153,25,52,64,0,0,0,0,0,0,72,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,4,64,154,153,153,153,153,153,5,64,0,0,0,0,0,0,8,64,154,153,153,153,153,153,13,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,8,14,3,0,56,14,3,0,104,14,3,0,0,0,0,0,24,46,1,0,240,82,2,0,24,46,1,0,48,83,2,0,24,46,1,0,112,83,2,0,24,46,1,0,176,83,2,0,24,46,1,0,240,83,2,0,24,46,1,0,48,84,2,0,24,46,1,0,112,84,2,0,24,46,1,0,176,84,2,0,24,46,1,0,240,84,2,0,24,46,1,0,48,85,2,0,24,46,1,0,112,85,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,248,254,2,0,248,254,2,0,32,255,2,0,32,255,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,224,255,2,0,224,255,2,0,32,255,2,0,32,255,2,0,1,0,0,0,0,0,0,0,16,0,0,0,0,99,1,0,232,239,2,0,232,239,2,0,16,240,2,0,16,240,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,208,240,2,0,208,240,2,0,16,240,2,0,16,240,2,0,1,0,0,0,0,0,0,0,16,0,0,0,0,99,1,0,16,227,2,0,16,227,2,0,56,227,2,0,56,227,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,248,227,2,0,248,227,2,0,56,227,2,0,56,227,2,0,1,0,0,0,0,0,0,0,16,0,0,0,0,99,1,0,16,214,2,0,16,214,2,0,56,214,2,0,56,214,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,248,214,2,0,248,214,2,0,56,214,2,0,56,214,2,0,1,0,0,0,0,0,0,0,16,0,0,0,0,99,1,0,72,200,2,0,72,200,2,0,112,200,2,0,112,200,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,48,201,2,0,48,201,2,0,112,200,2,0,112,200,2,0,1,0,0,0,0,0,0,0,16,0,0,0,0,99,1,0,24,186,2,0,24,186,2,0,64,186,2,0,64,186,2,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,0,187,2,0,0,187,2,0,64,186,2,0,64,186,2,0,1,0,0,0,0,0,0,0,16,0,0,0,104,71,1,0,72,169,2,0,72,169,2,0,112,169,2,0,112,169,2,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,48,170,2,0,48,170,2,0,112,169,2,0,112,169,2,0,1,0,0,0,0,0,0,0,16,0,0,0,104,71,1,0,56,152,2,0,56,152,2,0,96,152,2,0,96,152,2,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,32,153,2,0,32,153,2,0,96,152,2,0,96,152,2,0,1,0,0,0,0,0,0,0,16,0,0,0,104,71,1,0,80,136,2,0,80,136,2,0,120,136,2,0,120,136,2,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,56,137,2,0,56,137,2,0,120,136,2,0,120,136,2,0,1,0,0,0,0,0,0,0,16,0,0,0,176,85,2,0,224,116,2,0,224,116,2,0,8,117,2,0,8,117,2,0,1,0,0,0,0,0,0,0,32,0,0,0,176,85,2,0,200,117,2,0,200,117,2,0,8,117,2,0,8,117,2,0,1,0,0,0,0,0,0,0,16,0,0,0,176,85,2,0,200,96,2,0,200,96,2,0,240,96,2,0,240,96,2,0,1,0,0,0,0,0,0,0,32,0,0,0,176,85,2,0,176,97,2,0,176,97,2,0,240,96,2,0,240,96,2,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+148688);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,120,116,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,104,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,144,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,184,98,2,0,0,0,0,0,224,98,2,0,8,99,2,0,0,0,0,0,0,0,0,0,48,99,2,0,88,99,2,0,0,0,0,0,0,0,0,0,128,99,2,0,168,99,2,0,0,0,0,0,0,0,0,0,208,99,2,0,248,99,2,0,0,0,0,0,0,0,0,0,32,100,2,0,72,100,2,0,112,100,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,216,97,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,13,13,14,15,14,14,15,15,5,5,9,10,12,12,13,14,16,15,10,6,6,6,8,11,12,13,16,15,11,7,5,3,5,8,10,12,15,15,10,10,7,4,3,5,8,10,12,12,12,12,9,7,5,4,6,8,10,13,13,12,11,9,7,5,5,6,9,12,14,12,12,10,8,6,6,6,7,11,13,12,14,13,10,8,7,7,7,10,11,11,12,13,12,11,10,8,8,9,0,0,0,0,4,0,0,0,81,0,0,0,16,116,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,104,116,2,0,0,0,0,0,4,0,0,0,113,2,0,0,128,113,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,115,2,0,0,0,0,0,2,0,0,0,81,0,0,0,0,113,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,88,113,2,0,0,0,0,0,2,0,0,0,33,1,0,0,144,111,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,184,112,2,0,0,0,0,0,4,0,0,0,81,0,0,0,40,111,2,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,128,111,2,0,0,0,0,0,2,0,0,0,121,0,0,0,120,110,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,110,2,0,0,0,0,0,2,0,0,0,169,0,0,0,144,109,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,64,110,2,0,0,0,0,0,2,0,0,0,25,0,0,0,88,109,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,109,2,0,0,0,0,0,2,0,0,0,169,0,0,0,112,108,2,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,32,109,2,0,0,0,0,0,2,0,0,0,121,0,0,0,192,107,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,64,108,2,0,0,0,0,0,2,0,0,0,225,0,0,0,152,106,2,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,128,107,2,0,0,0,0,0,2,0,0,0,185,1,0,0,128,104,2,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,64,106,2,0,0,0,0,0,2,0,0,0,225,0,0,0,88,103,2,0,1,0,0,0,0,117,153,225,0,24,61,97,4,0,0,0,0,0,0,0,64,104,2,0,0,0,0,0,2,0,0,0,105,1,0,0,152,101,2,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,8,103,2,0,0,0,0,0,1,0,0,0,49,0,0,0,152,100,2,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,208,100,2,0,0,0,0,0,2,4,4,5,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,8,7,8,7,9,8,10,9,10,10,11,11,12,12,4,7,6,9,9,10,9,9,8,10,10,11,10,12,10,13,12,13,12,4,6,6,9,9,9,9,9,9,10,10,11,11,11,12,12,12,12,12,7,9,8,11,10,10,10,11,10,11,11,12,12,13,12,13,13,13,13,7,8,9,10,10,11,11,10,10,11,11,11,12,13,13,13,13,14,14,8,9,9,11,11,12,11,12,12,13,12,12,13,13,14,15,14,14,14,8,9,9,10,11,11,11,12,12,13,12,13,13,14,14,14,15,14,16,8,9,9,11,10,12,12,12,12,15,13,13,13,17,14,15,15,15,14,8,9,9,10,11,11,12,13,12,13,13,13,14,15,14,14,14,16,15,9,11,10,12,12,13,13,13,13,14,14,16,15,14,14,14,15,15,17,9,10,10,11,11,13,13,13,14,14,13,15,14,15,14,15,16,15,16,10,11,11,12,12,13,14,15,14,15,14,14,15,17,16,15,15,17,17,10,12,11,13,12,14,14,13,14,15,15,15,15,16,17,17,15,17,16,11,12,12,14,13,15,14,15,16,17,15,17,15,17,15,15,16,17,15,11,11,12,14,14,14,14,14,15,15,16,15,17,17,17,16,17,16,15,12,12,13,14,14,14,15,14,15,15,16,16,17,16,17,15,17,17,16,12,14,12,14,14,15,15,15,14,14,16,16,16,15,16,16,15,17,15,12,13,13,14,15,14,15,17,15,17,16,17,17,17,16,17,16,17,17,12,13,13,14,16,15,15,15,16,15,17,17,15,17,15,17,16,16,17,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,3,3,11,11,11,11,11,11,11,11,11,11,11,11,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,4,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,9,10,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,8,9,9,10,9,11,10,4,6,6,8,8,9,9,9,9,10,10,11,10,12,10,4,6,6,8,8,9,10,9,9,10,10,11,11,12,12,7,8,8,10,10,11,11,10,10,11,11,12,12,13,12,7,8,8,10,10,11,11,10,10,11,11,12,12,12,13,8,10,9,11,11,12,12,11,11,12,12,13,13,14,13,8,9,9,11,11,12,12,11,12,12,12,13,13,14,13,8,9,9,10,10,12,11,13,12,13,13,14,13,15,14,8,9,9,10,10,11,12,12,12,13,13,13,14,14,14,9,10,10,12,11,13,12,13,13,14,13,14,14,14,15,9,10,10,11,12,12,12,13,13,14,14,14,15,15,15,10,11,11,12,12,13,13,14,14,14,14,15,14,16,15,10,11,11,12,12,13,13,13,14,14,14,14,14,15,16,11,12,12,13,13,14,13,14,14,15,14,15,16,16,16,11,12,12,13,13,14,13,14,14,15,15,15,16,15,15,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,5,6,6,7,7,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,7,7,8,7,8,8,7,7,7,7,7,7,7,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,5,6,6,7,7,8,9,10,10,11,11,5,6,6,7,7,8,8,9,9,10,10,11,11,5,6,6,7,7,8,8,9,9,10,10,11,11,6,7,7,8,8,9,9,10,10,11,11,12,12,6,7,7,8,8,9,9,10,10,11,11,12,12,8,8,8,9,9,10,10,11,11,12,12,13,13,8,8,8,9,9,10,10,11,11,12,12,13,13,9,9,9,10,10,11,11,12,12,13,13,13,13,9,9,9,10,10,11,11,12,12,13,13,14,14,10,10,10,11,11,12,12,13,13,14,13,15,14,10,10,10,11,11,12,12,13,13,14,14,14,14,11,11,12,12,12,13,13,14,14,14,14,15,15,11,11,12,12,12,13,13,14,14,14,15,15,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,4,4,4,5,5,4,5,4,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,9,9,10,10,4,6,5,7,7,8,8,8,8,9,9,10,10,4,5,6,7,7,8,8,8,8,9,9,10,10,6,7,7,8,8,8,8,9,9,10,10,10,10,6,7,7,8,8,8,8,9,9,10,10,10,10,7,8,8,8,8,9,9,9,9,10,10,11,11,7,8,8,8,8,9,9,9,9,10,10,11,11,8,8,8,9,9,9,9,9,10,10,10,11,11,8,8,8,9,9,9,9,10,9,10,10,11,11,9,9,9,10,10,10,10,10,11,11,11,11,12,9,9,9,10,10,10,10,10,10,11,10,12,11,10,10,10,10,10,11,11,11,11,11,12,12,12,10,10,10,10,10,11,11,11,11,12,11,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,5,5,5,6,6,7,7,7,7,7,7,5,6,6,6,6,7,7,7,7,8,7,5,6,6,6,6,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,8,8,6,6,6,7,7,7,7,7,7,8,8,7,7,7,7,7,8,7,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,8,7,8,8,8,8,8,8,7,7,7,7,8,8,8,8,8,8,8,7,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,8,8,9,9,7,9,9,5,8,8,7,9,9,8,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,9,11,11,7,10,10,9,11,10,9,11,12,5,8,8,8,10,10,8,10,10,7,10,10,9,12,11,9,10,11,7,10,10,9,11,11,10,12,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,5,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,5,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,6,6,6,7,6,7,7,8,8,9,9,10,10,11,11,12,11,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,11,12,7,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,8,8,8,8,8,9,8,10,9,10,10,11,10,12,11,13,12,8,8,8,8,8,9,9,9,10,10,10,10,11,11,12,12,12,8,8,8,9,9,9,9,10,10,11,10,12,11,12,12,13,12,8,8,8,9,9,9,9,10,10,10,11,11,11,12,12,12,13,9,9,9,10,10,10,10,11,10,11,11,12,11,13,12,13,13,9,9,10,10,10,10,10,10,11,11,11,11,12,12,13,13,13,10,11,10,11,11,11,11,12,11,12,12,13,12,13,13,14,13,10,10,10,11,11,11,11,11,12,12,12,12,13,13,13,13,14,11,11,11,12,11,12,12,12,12,13,13,13,13,14,13,14,14,11,11,11,11,12,12,12,12,12,12,13,13,13,13,14,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,3,4,4,5,5,7,7,8,8,4,5,5,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,9,9,5,6,6,7,7,8,8,9,9,7,7,7,8,8,9,9,10,10,7,7,7,8,8,9,9,10,10,8,9,9,10,9,10,10,11,11,8,9,9,9,10,10,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,5,7,7,9,9,6,7,7,9,9,8,9,9,11,10,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,7,8,8,9,10,9,10,10,11,11,9,9,10,11,11,6,7,7,9,9,7,8,8,10,9,7,8,8,10,10,9,10,9,11,11,9,10,10,11,11,8,9,9,11,11,9,10,10,12,11,9,10,10,11,12,11,11,11,13,13,11,11,11,12,13,8,9,9,11,11,9,10,10,11,11,9,10,10,12,11,11,12,11,13,12,11,11,12,13,13,6,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,11,12,7,8,8,10,10,8,9,9,11,11,8,9,9,10,10,10,11,11,12,12,10,10,11,12,12,7,8,8,10,10,8,9,8,10,10,8,9,9,10,10,10,11,10,12,11,10,10,11,12,12,9,10,10,11,12,10,11,11,12,12,10,11,10,12,12,12,12,12,13,13,11,12,12,13,13,9,10,10,11,11,9,10,10,12,12,10,11,11,12,13,11,12,11,13,12,12,12,12,13,14,6,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,11,11,9,10,10,11,12,7,8,8,10,10,8,9,9,11,10,8,8,9,10,10,10,11,10,12,12,10,10,11,11,12,7,8,8,10,10,8,9,9,10,10,8,9,9,10,10,10,11,10,12,12,10,11,10,12,12,9,10,10,12,11,10,11,11,12,12,9,10,10,12,12,12,12,12,13,13,11,11,12,12,14,9,10,10,11,12,10,11,11,12,12,10,11,11,12,12,11,12,12,14,14,12,12,12,13,13,8,9,9,11,11,9,10,10,12,11,9,10,10,12,12,11,12,11,13,13,11,11,12,13,13,9,10,10,12,12,10,11,11,12,12,10,11,11,12,12,12,12,12,14,14,12,12,12,13,13,9,10,10,12,11,10,11,10,12,12,10,11,11,12,12,11,12,12,14,13,12,12,12,13,14,11,12,11,13,13,11,12,12,13,13,12,12,12,14,14,13,13,13,13,15,13,13,14,15,15,11,11,11,13,13,11,12,11,13,13,11,12,12,13,13,12,13,12,15,13,13,13,14,14,15,8,9,9,11,11,9,10,10,11,12,9,10,10,11,12,11,12,11,13,13,11,12,12,13,13,9,10,10,11,12,10,11,10,12,12,10,10,11,12,13,12,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,11,12,12,10,11,11,12,12,12,12,12,14,13,12,12,12,14,13,11,11,11,13,13,11,12,12,14,13,11,11,12,13,13,13,13,13,15,14,12,12,13,13,15,11,12,12,13,13,12,12,12,13,14,11,12,12,13,13,13,13,14,14,15,13,13,13,14,14,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,5,7,7,5,7,7,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,7,9,9,8,9,9,9,10,11,9,11,11,7,9,9,9,11,10,9,11,11,5,7,7,7,9,9,8,9,10,7,9,9,9,11,11,9,10,11,7,9,10,9,11,11,9,11,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,9,16,18,18,17,17,17,17,17,17,5,8,11,12,11,12,17,17,16,16,6,6,8,8,9,10,14,15,16,16,6,7,7,4,6,9,13,16,16,16,6,6,7,4,5,8,11,15,17,16,7,6,7,6,6,8,9,10,14,16,11,8,8,7,6,6,3,4,10,15,14,12,12,10,5,6,3,3,8,13,15,17,15,11,6,8,6,6,9,14,17,15,15,12,8,10,9,9,12,15,0,0,0,0,2,0,0,0,100,0,0,0,232,135,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,118,2,0,0,0,0,0,0,0,0,0,0,0,0,0,128,118,2,0,0,0,0,0,0,0,0,0,0,0,0,0,168,118,2,0,0,0,0,0,0,0,0,0,0,0,0,0,208,118,2,0,0,0,0,0,248,118,2,0,32,119,2,0,0,0,0,0,0,0,0,0,72,119,2,0,112,119,2,0,0,0,0,0,0,0,0,0,152,119,2,0,192,119,2,0,0,0,0,0,0,0,0,0,232,119,2,0,16,120,2,0,0,0,0,0,0,0,0,0,56,120,2,0,96,120,2,0,136,120,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,240,117,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,13,14,14,15,14,14,15,15,5,4,6,8,10,12,12,14,15,15,9,5,4,5,8,10,11,13,16,16,10,7,4,3,5,7,9,11,13,13,10,9,7,4,4,6,8,10,12,14,13,11,9,6,5,5,6,8,12,14,13,11,10,8,7,6,6,7,10,14,13,11,12,10,8,7,6,6,9,13,12,11,14,12,11,9,8,7,9,11,11,12,14,13,14,11,10,8,8,9,0,0,0,0,4,0,0,0,81,0,0,0,128,135,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,216,135,2,0,0,0,0,0,4,0,0,0,113,2,0,0,240,132,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,135,2,0,0,0,0,0,2,0,0,0,81,0,0,0,112,132,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,200,132,2,0,0,0,0,0,2,0,0,0,33,1,0,0,0,131,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,40,132,2,0,0,0,0,0,4,0,0,0,81,0,0,0,152,130,2,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,240,130,2,0,0,0,0,0,2,0,0,0,121,0,0,0,232,129,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,104,130,2,0,0,0,0,0,2,0,0,0,169,0,0,0,0,129,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,176,129,2,0,0,0,0,0,2,0,0,0,25,0,0,0,200,128,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,128,2,0,0,0,0,0,2,0,0,0,169,0,0,0,224,127,2,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,144,128,2,0,0,0,0,0,2,0,0,0,121,0,0,0,48,127,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,176,127,2,0,0,0,0,0,2,0,0,0,225,0,0,0,8,126,2,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,240,126,2,0,0,0,0,0,2,0,0,0,185,1,0,0,240,123,2,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,176,125,2,0,0,0,0,0,2,0,0,0,81,0,0,0,112,123,2,0,1,0,0,0,0,24,125,225,0,24,61,97,4,0,0,0,0,0,0,0,200,123,2,0,0,0,0,0,2,0,0,0,105,1,0,0,176,121,2,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,32,123,2,0,0,0,0,0,1,0,0,0,49,0,0,0,176,120,2,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,232,120,2,0,0,0,0,0,2,3,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,8,7,8,6,9,7,10,8,11,10,11,11,11,11,4,7,6,9,9,10,9,9,9,10,10,11,10,11,10,11,11,13,11,4,7,7,9,9,9,9,9,9,10,10,11,10,11,11,11,12,11,12,7,9,8,11,11,11,11,10,10,11,11,12,12,12,12,12,12,14,13,7,8,9,10,11,11,11,10,10,11,11,11,11,12,12,14,12,13,14,8,9,9,11,11,11,11,11,11,12,12,14,12,15,14,14,14,15,14,8,9,9,11,11,11,11,12,11,12,12,13,13,13,13,13,13,14,14,8,9,9,11,10,12,11,12,12,13,13,13,13,15,14,14,14,16,16,8,9,9,10,11,11,12,12,12,13,13,13,14,14,14,15,16,15,15,9,10,10,11,12,12,13,13,13,14,14,16,14,14,16,16,16,16,15,9,10,10,11,11,12,13,13,14,15,14,16,14,15,16,16,16,16,15,10,11,11,12,13,13,14,15,15,15,15,15,16,15,16,15,16,15,15,10,11,11,13,13,14,13,13,15,14,15,15,16,15,15,15,16,15,16,10,12,12,14,14,14,14,14,16,16,15,15,15,16,16,16,16,16,16,11,12,12,14,14,14,14,15,15,16,15,16,15,16,15,16,16,16,16,12,12,13,14,14,15,16,16,16,16,16,16,15,16,16,16,16,16,16,12,13,13,14,14,14,14,15,16,15,16,16,16,16,16,16,16,16,16,12,13,14,14,14,16,15,16,15,16,16,16,16,16,16,16,16,16,16,12,14,13,14,15,15,15,16,15,16,16,15,16,16,16,16,16,16,16,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,3,3,9,9,9,9,9,9,4,9,9,9,9,9,9,9,9,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,10,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,10,9,10,8,9,8,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,8,9,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,9,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,7,9,8,10,9,11,10,4,6,6,8,8,10,9,9,9,10,10,11,10,12,10,4,6,6,8,8,10,10,9,9,10,10,11,11,11,12,7,8,8,10,10,11,11,11,10,12,11,12,12,13,11,7,8,8,10,10,11,11,10,10,11,11,12,12,13,13,8,10,10,11,11,12,11,12,11,13,12,13,12,14,13,8,10,9,11,11,12,12,12,12,12,12,13,13,14,13,8,9,9,11,10,12,11,13,12,13,13,14,13,14,13,8,9,9,10,11,12,12,12,12,13,13,14,15,14,14,9,10,10,12,11,13,12,13,13,14,13,14,14,14,14,9,10,10,12,12,12,12,13,13,14,14,14,15,14,14,10,11,11,13,12,13,12,14,14,14,14,14,14,15,15,10,11,11,12,12,13,13,14,14,14,15,15,14,16,15,11,12,12,13,12,14,14,14,13,15,14,15,15,15,17,11,12,12,13,13,14,14,14,15,15,14,15,15,14,17,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,4,5,5,6,6,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,8,8,6,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,8,8,8,8,7,7,7,7,7,7,7,8,8,8,8,7,7,7,8,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,5,6,6,7,7,8,8,10,10,11,11,5,6,6,7,7,8,8,9,9,11,10,12,11,5,6,6,7,7,8,8,9,9,10,11,11,12,6,7,7,8,8,9,9,10,10,11,11,12,12,6,7,7,8,8,9,9,10,10,11,12,13,12,7,8,8,9,9,10,10,11,11,12,12,13,13,8,8,8,9,9,10,10,11,11,12,12,13,13,9,9,9,10,10,11,11,12,12,13,13,14,14,9,9,9,10,10,11,11,12,12,13,13,14,14,10,11,11,12,11,13,12,13,13,14,14,15,15,10,11,11,11,12,12,13,13,14,14,14,15,15,11,12,12,13,13,14,13,15,14,15,15,16,15,11,11,12,13,13,13,14,14,14,15,15,15,16,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,9,9,10,10,4,6,5,7,7,8,8,8,8,9,9,10,10,4,6,6,7,7,8,8,8,8,9,9,10,10,6,7,7,7,8,8,8,8,9,9,10,10,10,6,7,7,8,8,8,8,9,8,10,9,11,10,7,8,8,8,8,8,9,9,9,10,10,11,11,7,8,8,8,8,9,8,9,9,10,10,11,11,8,8,8,9,9,9,9,9,10,10,10,11,11,8,8,8,9,9,9,9,10,9,10,10,11,11,9,9,9,9,10,10,10,10,10,10,11,11,12,9,9,9,10,9,10,10,10,10,11,10,12,11,10,10,10,10,10,11,11,11,11,11,12,12,12,10,10,10,10,11,11,11,11,11,12,11,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,4,5,5,6,6,7,7,7,7,8,8,5,5,5,6,6,7,7,8,8,8,8,5,5,5,6,6,7,7,7,8,8,8,6,6,6,7,7,7,7,8,8,8,8,6,6,6,7,7,7,7,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,8,8,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,8,8,9,9,7,9,9,5,8,8,7,9,9,8,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,9,12,11,7,10,10,9,11,10,9,11,12,5,8,8,8,10,10,8,10,10,7,10,10,9,11,11,9,10,11,7,10,10,9,11,11,10,12,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,4,4,6,6,7,7,8,8,8,8,10,10,11,11,11,11,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,6,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,6,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,8,8,9,8,10,9,10,9,11,10,12,11,13,12,7,7,7,8,8,8,9,9,10,9,10,10,11,11,12,12,13,8,8,8,9,9,9,9,10,10,11,10,11,11,12,12,13,13,8,8,8,9,9,9,10,10,10,10,11,11,11,12,12,12,13,8,9,9,9,9,10,9,11,10,11,11,12,11,13,12,13,13,8,9,9,9,9,9,10,10,11,11,11,11,12,12,13,13,13,10,10,10,10,10,11,10,11,11,12,11,13,12,13,13,14,13,10,10,10,10,10,10,11,11,11,11,12,12,13,13,13,13,14,11,11,11,11,11,12,11,12,12,13,12,13,13,14,13,14,14,11,11,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,11,12,12,12,12,13,12,13,12,13,13,14,13,14,14,14,14,11,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,7,7,8,8,9,9,11,10,7,7,7,8,8,9,9,10,11,9,9,9,10,10,11,10,12,11,9,9,9,9,10,11,11,11,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,11,11,8,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,9,12,11,9,10,10,12,12,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,11,12,13,14,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,11,13,13,11,12,12,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,11,12,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,12,13,6,8,8,10,10,8,9,8,11,10,8,9,9,11,11,10,11,10,13,12,10,11,11,13,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,13,14,12,13,13,14,14,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,11,13,12,14,13,12,13,13,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,7,8,8,10,10,8,9,9,11,11,8,8,9,10,11,10,11,11,13,13,10,10,11,12,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,13,10,11,11,13,12,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,15,14,12,13,13,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,12,12,12,14,13,11,12,12,14,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,15,12,13,13,14,15,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,12,13,12,15,14,12,13,13,14,15,11,12,12,14,14,12,13,13,14,14,12,13,13,15,14,14,14,14,14,16,14,14,15,16,16,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+155332);
/* memory initializer */ allocate([12,12,14,14,11,12,12,14,14,12,13,13,14,15,13,14,13,16,14,14,14,14,16,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,14,14,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,15,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,12,13,13,15,14,11,12,12,14,13,12,13,13,15,14,11,12,12,13,14,14,15,14,16,15,13,13,14,13,16,11,12,12,14,14,12,13,13,14,15,12,13,12,15,14,14,14,14,16,15,14,15,13,16,14,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,5,7,7,5,7,7,5,7,7,8,9,9,7,9,9,5,7,7,7,9,9,8,9,9,5,7,7,7,9,9,7,9,9,7,9,9,9,10,11,9,11,10,7,9,9,9,11,10,9,10,11,5,7,7,7,9,9,7,9,9,7,9,9,9,11,10,9,10,10,8,9,9,9,11,11,9,11,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,6,14,18,18,17,17,17,17,17,17,4,7,9,9,10,13,15,17,17,17,6,7,5,6,8,11,16,17,16,17,5,7,5,4,6,10,14,17,17,17,6,6,6,5,7,10,13,16,17,17,7,6,7,7,7,8,7,10,15,16,12,9,9,6,6,5,3,5,11,15,14,14,13,5,5,7,3,4,8,15,17,17,13,7,7,10,6,6,10,15,17,17,16,10,11,14,10,10,15,17,0,0,0,0,2,0,0,0,100,0,0,0,208,151,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,137,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,137,2,0,0,0,0,0,0,0,0,0,0,0,0,0,24,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,104,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,144,138,2,0,0,0,0,0,184,138,2,0,224,138,2,0,0,0,0,0,0,0,0,0,8,139,2,0,48,139,2,0,0,0,0,0,0,0,0,0,88,139,2,0,128,139,2,0,168,139,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,96,137,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,14,13,15,14,16,13,13,14,5,5,7,7,8,9,11,10,12,15,10,6,5,6,6,9,10,10,13,16,10,6,6,6,6,8,9,9,12,15,14,7,6,6,5,6,6,8,12,15,10,8,7,7,6,7,7,7,11,13,14,10,9,8,5,6,4,5,9,12,10,9,9,8,6,6,5,3,6,11,12,11,12,12,10,9,8,5,5,8,10,11,15,13,13,13,12,8,6,7,0,0,0,0,4,0,0,0,81,0,0,0,104,151,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,192,151,2,0,0,0,0,0,4,0,0,0,81,0,0,0,0,151,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,88,151,2,0,0,0,0,0,4,0,0,0,113,2,0,0,112,148,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,150,2,0,0,0,0,0,4,0,0,0,113,2,0,0,224,145,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,148,2,0,0,0,0,0,2,0,0,0,81,0,0,0,96,145,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,184,145,2,0,0,0,0,0,2,0,0,0,81,0,0,0,224,144,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,56,145,2,0,0,0,0,0,4,0,0,0,81,0,0,0,120,144,2,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,208,144,2,0,0,0,0,0,2,0,0,0,121,0,0,0,200,143,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,72,144,2,0,0,0,0,0,2,0,0,0,121,0,0,0,24,143,2,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,152,143,2,0,0,0,0,0,2,0,0,0,121,0,0,0,104,142,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,232,142,2,0,0,0,0,0,2,0,0,0,121,0,0,0,184,141,2,0,1,0,0,0,0,226,120,225,0,232,51,97,4,0,0,0,0,0,0,0,56,142,2,0,0,0,0,0,2,0,0,0,169,0,0,0,208,140,2,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,128,141,2,0,0,0,0,0,1,0,0,0,49,0,0,0,208,139,2,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,8,140,2,0,0,0,0,0,2,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,6,5,8,6,9,8,10,9,11,10,4,6,6,8,8,9,9,11,10,11,11,11,11,4,6,6,8,8,10,9,11,11,11,11,11,12,6,8,8,10,10,11,11,12,12,13,12,13,13,6,8,8,10,10,11,11,12,12,12,13,14,13,8,10,10,11,11,12,13,14,14,14,14,15,15,8,10,10,11,12,12,13,13,14,14,14,14,15,9,11,11,13,13,14,14,15,14,16,15,17,15,9,11,11,12,13,14,14,15,14,15,15,15,16,10,12,12,13,14,15,15,15,15,16,17,16,17,10,13,12,13,14,14,16,16,16,16,15,16,17,11,13,13,14,15,14,17,15,16,17,17,17,17,11,13,13,14,15,15,15,15,17,17,16,17,16,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,4,5,5,6,6,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,5,6,6,6,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,8,8,6,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,8,7,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,10,11,11,4,6,6,7,7,9,9,11,10,12,12,5,6,5,7,7,9,9,10,11,12,12,6,7,7,8,8,10,10,11,11,13,13,6,7,7,8,8,10,10,11,12,13,13,8,9,9,10,10,11,11,12,12,14,14,8,9,9,10,10,11,11,12,12,14,14,10,10,10,11,11,13,12,14,14,15,15,10,10,10,12,12,13,13,14,14,15,15,11,12,12,13,13,14,14,15,14,16,15,11,12,12,13,13,14,14,15,15,15,16,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,3,4,4,6,6,7,7,8,8,8,8,4,5,5,6,6,8,7,8,8,8,8,4,5,5,6,6,7,8,8,8,8,8,6,7,6,7,7,8,8,9,9,9,9,6,6,7,7,7,8,8,9,9,9,9,7,8,7,8,8,9,9,9,9,9,9,7,7,8,8,8,9,9,9,9,9,9,8,8,8,9,9,9,9,10,9,9,9,8,8,8,9,9,9,9,9,9,9,10,8,8,8,9,9,9,9,10,9,10,10,8,8,8,9,9,9,9,9,10,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,9,8,8,9,9,7,10,10,5,8,9,7,9,10,8,9,9,4,9,9,9,11,10,8,10,10,7,11,10,10,10,12,10,12,12,7,10,10,10,12,11,10,12,12,5,9,9,8,10,10,9,11,11,7,11,10,10,12,12,10,11,12,7,10,11,10,12,12,10,12,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,7,7,9,9,4,5,4,6,6,8,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,5,6,6,7,7,8,8,10,10,7,8,7,8,8,10,9,11,11,7,7,8,8,8,9,10,11,11,9,9,9,10,10,11,10,12,11,9,9,9,10,10,11,11,11,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,7,8,10,10,4,5,5,8,7,8,8,11,11,3,5,5,7,7,8,9,11,11,6,8,7,9,9,10,10,12,12,6,7,8,9,10,10,10,12,12,8,8,8,10,10,12,11,13,13,8,8,9,10,10,11,11,13,13,10,11,11,12,12,13,13,14,14,10,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,10,11,6,7,7,9,9,7,8,8,10,10,6,7,8,9,10,9,10,10,12,12,9,9,10,11,12,6,7,7,9,9,6,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,13,14,11,11,12,13,13,8,9,9,11,11,9,10,10,12,11,9,10,10,12,12,11,12,11,13,13,11,12,12,13,13,6,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,12,12,7,8,8,10,10,8,8,9,11,11,8,9,9,11,11,10,11,11,12,12,10,10,11,12,13,6,7,7,10,10,7,9,8,11,10,8,8,9,10,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,13,13,10,11,11,13,12,12,12,13,13,14,12,12,13,14,14,9,10,10,12,12,9,10,10,12,12,10,11,11,13,13,11,12,11,14,12,12,13,13,14,14,6,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,11,12,6,7,7,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,13,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,10,13,12,10,11,11,12,12,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,12,14,14,11,11,12,12,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,12,13,12,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,12,12,13,13,14,14,12,12,13,14,14,9,10,10,12,12,9,11,10,13,12,10,10,11,12,13,11,13,12,14,13,12,12,13,14,14,11,12,12,13,13,11,12,13,14,14,12,13,13,14,14,13,13,14,14,16,13,14,14,16,16,11,11,11,13,13,11,12,11,14,13,12,12,13,14,15,13,14,12,16,13,14,14,14,15,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,10,13,12,9,10,11,12,13,12,13,12,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,12,13,10,11,11,13,13,12,13,12,14,14,12,13,13,14,14,11,12,12,13,13,12,13,12,14,14,11,11,12,13,14,13,15,14,16,15,13,12,14,13,16,11,12,12,13,13,12,13,13,14,14,12,12,12,14,14,13,14,14,15,15,13,14,13,16,14,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,4,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,13,12,8,9,10,12,13,5,7,7,10,9,7,9,9,11,11,6,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,9,7,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,14,13,10,11,12,15,14,9,11,11,15,14,13,14,14,16,16,12,13,14,17,16,8,10,10,13,13,9,11,11,14,15,10,11,12,14,15,12,14,13,16,16,13,14,15,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,15,14,10,11,12,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,11,13,13,14,17,11,13,13,15,16,6,9,9,11,11,8,11,10,13,12,9,11,11,13,13,11,13,12,16,14,11,13,13,16,16,10,12,12,15,15,11,13,13,16,16,11,13,13,16,15,14,16,17,17,19,14,16,16,18,0,9,11,11,14,15,10,13,12,16,15,11,13,13,16,16,14,15,14,0,16,14,16,16,18,0,5,7,7,10,10,7,9,9,12,11,7,9,9,11,12,10,11,11,15,14,10,11,12,14,14,6,9,9,11,11,9,11,11,13,13,8,10,11,12,13,11,13,13,17,15,11,12,13,14,15,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,12,16,16,11,13,13,15,14,9,11,11,14,15,11,13,13,16,15,10,12,13,16,16,15,16,16,0,0,14,13,15,16,18,10,11,11,15,15,11,13,14,16,18,11,13,13,16,15,15,16,16,19,0,14,15,15,16,16,8,10,10,13,13,10,12,11,16,15,10,11,11,16,15,13,15,16,18,0,13,14,15,17,17,9,11,11,15,15,11,13,13,16,18,11,13,13,16,17,15,16,16,0,0,15,18,16,0,17,9,11,11,15,15,11,13,12,17,15,11,13,14,16,17,15,18,15,0,17,15,16,16,18,19,13,15,14,0,18,14,16,16,19,18,14,16,15,19,19,16,18,19,0,0,16,17,0,0,0,12,14,14,17,17,13,16,14,0,18,14,16,15,18,0,16,18,16,19,17,18,19,17,0,0,8,10,10,14,14,9,12,11,15,15,10,11,12,15,17,13,15,15,18,16,14,16,15,18,17,9,11,11,16,15,11,13,13,0,16,11,12,13,16,15,15,16,16,0,17,15,15,16,18,17,9,12,11,15,17,11,13,13,16,16,11,14,13,16,16,15,15,16,18,19,16,18,16,0,0,12,14,14,0,16,14,16,16,0,18,13,14,15,16,0,17,16,18,0,0,16,16,17,19,0,13,14,14,17,0,14,17,16,0,19,14,15,15,18,19,17,16,18,0,0,15,19,16,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,8,9,9,6,8,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,4,7,7,5,7,7,5,8,8,8,10,10,7,10,10,5,8,8,7,10,10,8,10,10,5,8,8,8,11,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,12,10,13,13,5,8,8,8,11,10,8,10,11,7,10,10,10,13,13,10,12,13,8,11,11,10,13,13,10,13,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,12,17,16,16,17,17,17,17,17,4,7,11,11,12,9,17,10,17,17,7,7,8,9,7,9,11,10,15,17,7,9,10,11,10,12,14,12,16,17,7,8,5,7,4,7,7,8,16,16,6,10,9,10,7,10,11,11,16,17,6,8,8,9,5,7,5,8,16,17,5,5,8,7,6,7,7,6,6,14,12,10,12,11,7,11,4,4,2,7,17,15,15,15,8,15,6,8,5,9,0,0,0,0,2,0,0,0,100,0,0,0,224,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,153,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,153,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,2,0,0,0,0,0,0,0,0,0,0,0,0,0,40,154,2,0,0,0,0,0,0,0,0,0,0,0,0,0,80,154,2,0,0,0,0,0,0,0,0,0,0,0,0,0,120,154,2,0,0,0,0,0,160,154,2,0,200,154,2,0,0,0,0,0,0,0,0,0,240,154,2,0,24,155,2,0,0,0,0,0,0,0,0,0,64,155,2,0,104,155,2,0,144,155,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,72,153,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,14,13,14,13,16,12,13,14,5,4,6,6,8,9,11,10,12,15,10,5,5,6,6,8,10,10,13,16,10,6,6,6,6,8,9,9,12,14,13,7,6,6,4,6,6,7,11,14,10,7,7,7,6,6,6,7,10,13,15,10,9,8,5,6,5,6,10,14,10,9,8,8,6,6,5,4,6,11,11,11,12,11,10,9,9,5,5,9,10,12,15,13,13,13,13,8,7,7,0,0,0,0,4,0,0,0,81,0,0,0,120,168,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,208,168,2,0,0,0,0,0,4,0,0,0,81,0,0,0,16,168,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,104,168,2,0,0,0,0,0,4,0,0,0,113,2,0,0,128,165,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,167,2,0,0,0,0,0,4,0,0,0,113,2,0,0,240,162,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,165,2,0,0,0,0,0,2,0,0,0,81,0,0,0,112,162,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,200,162,2,0,0,0,0,0,2,0,0,0,81,0,0,0,240,161,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,72,162,2,0,0,0,0,0,4,0,0,0,81,0,0,0,136,161,2,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,224,161,2,0,0,0,0,0,2,0,0,0,121,0,0,0,216,160,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,88,161,2,0,0,0,0,0,2,0,0,0,121,0,0,0,40,160,2,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,168,160,2,0,0,0,0,0,2,0,0,0,121,0,0,0,120,159,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,159,2,0,0,0,0,0,2,0,0,0,225,0,0,0,80,158,2,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,56,159,2,0,0,0,0,0,2,0,0,0,225,0,0,0,40,157,2,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,16,158,2,0,0,0,0,0,2,0,0,0,33,1,0,0,184,155,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,224,156,2,0,0,0,0,0,3,5,5,7,7,8,8,8,8,8,8,9,8,8,9,9,9,5,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,9,9,10,9,9,9,9,9,9,9,9,9,10,10,10,9,10,9,10,10,9,9,9,9,9,9,9,9,9,10,10,9,10,10,9,9,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,7,7,8,9,8,8,9,8,9,8,9,9,4,7,6,8,8,9,9,9,9,9,9,9,9,9,9,4,7,6,9,9,10,10,9,9,10,10,10,10,11,11,7,9,8,10,10,11,11,10,10,11,11,11,11,11,11,7,8,9,10,10,11,11,10,10,11,11,11,11,11,12,8,10,10,11,11,12,12,11,11,12,12,12,12,13,12,8,10,10,11,11,12,11,11,11,11,12,12,12,12,13,8,9,9,11,10,11,11,12,12,12,12,13,12,13,12,8,9,9,11,11,11,11,12,12,12,12,12,13,13,13,9,10,10,11,12,12,12,12,12,13,13,13,13,13,13,9,10,10,11,11,12,12,12,12,13,13,13,13,14,13,10,10,10,12,11,12,12,13,13,13,13,13,13,13,13,10,10,11,11,11,12,12,13,13,13,13,13,13,13,13,10,11,11,12,12,13,12,12,13,13,13,13,13,13,14,10,11,11,12,12,13,12,13,13,13,14,13,13,14,13,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,2,9,8,15,15,15,15,15,15,15,15,15,15,4,8,9,13,14,14,14,14,14,14,14,14,14,14,14,5,8,9,14,14,14,14,14,14,14,14,14,14,14,14,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,3,5,5,6,6,7,7,7,7,7,7,5,6,5,7,7,7,7,8,7,8,8,5,5,6,6,7,7,7,7,7,8,8,6,7,7,7,7,8,7,8,8,8,8,6,6,7,7,7,7,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,7,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,10,10,4,6,6,7,7,9,9,10,10,11,11,4,6,6,7,7,9,9,10,10,11,11,6,8,8,9,9,10,10,11,11,12,12,6,8,8,9,9,10,10,11,11,12,12,8,9,9,10,10,11,11,12,12,13,13,8,9,9,10,10,11,11,12,12,13,13,10,10,10,11,11,13,13,13,13,15,14,9,10,10,12,11,12,13,13,13,14,15,11,12,12,13,13,13,13,15,14,15,15,11,11,12,13,13,14,14,14,15,15,15,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,3,4,4,6,6,7,7,8,8,8,8,4,5,5,7,6,8,8,8,8,8,8,4,5,5,6,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,8,8,8,8,8,8,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,9,8,7,10,10,8,10,10,5,8,9,7,10,10,7,10,9,4,8,8,9,11,11,8,11,11,7,11,11,10,10,13,10,13,13,7,11,11,10,13,12,10,13,13,5,9,8,8,11,11,9,11,11,7,11,11,10,13,13,10,12,13,7,11,11,10,13,13,9,13,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,8,9,9,5,6,6,7,7,8,8,10,10,5,6,6,7,7,8,8,10,10,7,8,7,8,8,10,9,11,11,7,7,8,8,8,9,10,10,11,9,9,9,10,10,11,11,12,11,9,9,9,10,10,11,11,11,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,8,8,10,10,4,5,5,8,7,8,8,11,11,3,5,5,7,8,8,8,11,11,6,8,7,9,9,10,9,12,11,6,7,8,9,9,9,10,11,12,8,8,8,10,9,12,11,13,13,8,8,9,9,10,11,12,13,13,10,11,11,12,12,13,13,14,14,10,10,11,11,12,13,13,14,14,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,7,7,8,9,10,9,10,10,11,11,9,9,10,11,12,6,7,7,9,9,7,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,11,12,13,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,11,13,12,11,12,12,13,13,5,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,11,12,7,8,8,10,10,8,8,9,11,11,8,9,9,11,11,10,10,11,12,13,10,10,11,12,12,6,7,7,10,10,7,9,8,11,10,8,8,9,10,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,13,13,10,11,11,12,13,12,12,12,13,14,12,12,13,14,14,9,10,10,12,12,9,10,10,13,12,10,11,11,13,13,11,12,11,14,12,12,13,13,14,14,6,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,11,12,6,7,7,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,8,11,11,10,11,10,13,12,10,11,11,13,12,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,12,14,14,11,11,12,12,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,12,12,14,14,12,13,12,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,14,15,12,12,13,14,14,9,10,10,12,12,9,11,10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,13,14,15,11,12,12,14,13,11,12,12,14,14,12,13,13,14,14,13,13,14,14,16,13,14,14,15,15,11,12,11,13,13,11,12,11,14,13,12,12,13,14,15,12,14,12,15,12,13,14,15,15,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,13,9,10,10,12,12,10,11,10,13,12,9,10,11,12,13,12,13,12,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,12,13,13,14,14,11,11,11,13,13,12,13,12,14,14,11,11,12,13,14,14,14,14,16,15,12,12,14,12,15,11,12,12,13,14,12,13,13,14,15,11,12,12,14,14,13,14,14,16,16,13,14,13,16,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,4,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,13,12,8,9,10,12,13,5,7,7,10,9,7,9,9,11,11,7,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,10,6,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,13,8,10,10,13,13,10,11,11,15,15,9,11,11,14,14,13,14,14,17,16,12,13,14,16,16,8,10,10,13,14,9,11,11,14,15,10,11,12,14,15,12,14,13,16,15,13,14,14,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,10,11,11,14,14,7,9,9,12,11,9,11,11,13,13,9,11,11,13,13,11,13,13,14,15,11,12,13,15,16,6,9,9,11,12,8,11,10,13,12,9,11,11,13,14,11,13,12,16,14,11,13,13,15,16,10,12,11,14,15,11,13,13,15,17,11,13,13,17,16,15,15,16,17,16,14,15,16,18,0,9,11,11,14,15,10,12,12,16,15,11,13,13,16,16,13,15,14,18,15,14,16,16,0,0,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,14,6,9,9,11,11,9,11,11,13,13,8,10,11,12,13,11,13,13,16,15,11,12,13,14,16,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,13,16,15,11,13,12,15,15,9,11,11,15,14,11,13,13,17,16,10,12,13,15,16,14,16,16,0,18,14,14,15,15,17,10,11,12,15,15,11,13,13,16,16,11,13,13,16,16,14,16,16,19,17,14,15,15,17,17,8,10,10,14,14,10,12,11,15,15,10,11,12,16,15,14,15,15,18,20,13,14,16,17,18,9,11,11,15,16,11,13,13,17,17,11,13,13,17,16,15,16,16,0,0,15,16,16,0,0,9,11,11,15,15,10,13,12,17,15,11,13,13,17,16,15,17,15,20,19,15,16,16,19,0,13,15,14,0,17,14,15,16,0,20,15,16,16,0,19,17,18,0,0,0,16,17,18,0,0,12,14,14,19,18,13,15,14,0,17,14,15,16,19,19,16,18,16,0,19,19,20,17,20,0,8,10,10,13,14,10,11,11,15,15,10,12,12,15,16,14,15,14,19,16,14,15,15,0,18,9,11,11,16,15,11,13,13,0,16,11,12,13,16,17,14,16,17,0,19,15,16,16,18,0,9,11,11,15,16,11,13,13,16,16,11,14,13,18,17,15,16,16,18,20,15,17,19,0,0,12,14,14,17,17,14,16,15,0,0,13,14,15,19,0,16,18,20,0,0,16,16,18,18,0,12,14,14,17,20,14,16,16,19,0,14,16,14,0,20,16,20,17,0,0,17,0,15,0,19,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,8,6,8,8,6,8,8,8,9,9,8,9,9,6,7,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,4,8,7,5,7,7,5,8,8,8,10,10,7,9,10,5,8,8,7,10,9,8,10,10,5,8,8,8,10,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,11,10,13,13,5,8,8,8,11,10,8,10,10,7,10,10,10,13,13,10,11,13,8,10,11,10,13,13,10,13,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,11,16,13,17,13,17,16,17,17,4,7,9,9,13,10,16,12,16,17,7,6,5,7,8,9,12,12,16,17,6,9,7,9,10,10,15,15,17,17,6,7,5,7,5,7,7,10,16,17,7,9,8,9,8,10,11,11,15,17,7,7,7,8,5,8,8,9,15,17,8,7,9,9,7,8,7,2,7,15,14,13,13,15,5,10,4,3,6,17,17,15,13,17,7,11,7,6,9,16,0,0,0,0,2,0,0,0,100,0,0,0,176,185,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,232,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,171,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,171,2,0,0,0,0,0,0,0,0,0,0,0,0,0,96,171,2,0,0,0,0,0,0,0,0,0,0,0,0,0,136,171,2,0,0,0,0,0,176,171,2,0,216,171,2,0,0,0,0,0,0,0,0,0,0,172,2,0,40,172,2,0,0,0,0,0,0,0,0,0,80,172,2,0,120,172,2,0,160,172,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,88,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,13,12,14,12,16,11,13,14,5,4,5,6,7,8,10,9,12,15,10,5,5,5,6,8,9,9,13,15,10,5,5,6,6,7,8,8,11,13,12,7,5,6,4,6,7,7,11,14,11,7,7,6,6,6,7,6,10,14,14,9,8,8,6,7,7,7,11,16,11,8,8,7,6,6,7,4,7,12,10,10,12,10,10,9,10,5,6,9,10,12,15,13,14,14,14,8,7,8,0,0,0,0,4,0,0,0,81,0,0,0,72,185,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,160,185,2,0,0,0,0,0,4,0,0,0,81,0,0,0,224,184,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,56,185,2,0,0,0,0,0,4,0,0,0,113,2,0,0,80,182,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,200,184,2,0,0,0,0,0,4,0,0,0,113,2,0,0,192,179,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,182,2,0,0,0,0,0,2,0,0,0,81,0,0,0,64,179,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,152,179,2,0,0,0,0,0,2,0,0,0,81,0,0,0,192,178,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,24,179,2,0,0,0,0,0,4,0,0,0,81,0,0,0,88,178,2,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,176,178,2,0,0,0,0,0,2,0,0,0,121,0,0,0,168,177,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,40,178,2,0,0,0,0,0,2,0,0,0,121,0,0,0,248,176,2,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,120,177,2,0,0,0,0,0,2,0,0,0,121,0,0,0,72,176,2,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,200,176,2,0,0,0,0,0,2,0,0,0,169,0,0,0,96,175,2,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,16,176,2,0,0,0,0,0,2,0,0,0,225,0,0,0,56,174,2,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,32,175,2,0,0,0,0,0,2,0,0,0,33,1,0,0,200,172,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,173,2,0,0,0,0,0,2,5,5,7,7,8,8,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,8,8,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,8,8,8,9,8,9,9,9,9,9,9,9,10,9,10,9,10,8,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,8,9,9,9,9,9,9,10,9,10,9,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,9,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,7,8,7,9,8,9,9,4,7,6,9,8,10,10,9,8,9,9,9,9,9,8,5,6,6,8,9,10,10,9,9,9,10,10,10,10,11,7,8,8,10,10,11,11,10,10,11,11,11,12,11,11,7,8,8,10,10,11,11,10,10,11,11,12,11,11,11,8,9,9,11,11,12,12,11,11,12,11,12,12,12,12,8,9,10,11,11,12,12,11,11,12,12,12,12,12,12,8,9,9,10,10,12,11,12,12,12,12,12,12,12,13,8,9,9,11,11,11,11,12,12,12,12,13,12,13,13,9,10,10,11,11,12,12,12,13,12,13,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+165572);
/* memory initializer */ allocate([14,13,9,10,10,11,11,12,12,12,13,13,12,13,13,14,13,9,11,10,12,11,13,12,12,13,13,13,13,13,13,14,9,10,10,12,12,12,12,12,13,13,13,13,13,14,14,10,11,11,12,12,12,13,13,13,14,14,13,14,14,14,10,11,11,12,12,12,12,13,12,13,14,13,14,14,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,2,12,10,13,13,13,13,13,13,13,13,4,9,9,13,13,13,13,13,13,13,13,13,13,5,10,9,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,5,6,6,7,7,7,7,7,7,5,6,5,7,6,7,7,8,8,8,8,5,5,5,6,6,7,7,8,8,8,8,6,7,6,7,7,8,8,8,8,8,8,6,6,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,10,10,4,6,6,7,7,9,9,10,10,11,11,4,6,6,7,7,9,9,10,10,11,11,6,8,7,9,9,10,10,11,11,13,12,6,8,8,9,9,10,10,11,11,12,13,8,9,9,10,10,12,12,13,12,14,13,8,9,9,10,10,12,12,13,13,14,14,9,11,11,12,12,13,13,14,14,15,14,9,11,11,12,12,13,13,14,14,15,14,11,12,12,13,13,14,14,15,14,15,14,11,11,12,13,13,14,14,14,14,15,15,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,4,5,5,7,7,8,8,9,8,8,9,4,5,5,7,7,8,8,9,9,8,9,6,7,7,8,8,9,8,9,9,9,9,6,7,7,8,8,9,9,9,9,9,9,7,8,8,9,9,9,9,9,9,9,9,7,8,8,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,9,9,8,11,10,7,11,10,5,9,9,7,10,10,8,10,11,4,9,9,9,12,12,9,12,12,8,12,12,11,12,12,10,12,13,7,12,12,11,12,12,10,12,13,4,9,9,9,12,12,9,12,12,7,12,11,10,13,13,11,12,12,7,12,12,10,13,13,11,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,7,7,8,8,9,9,11,10,7,7,7,8,8,9,9,10,11,9,9,9,10,10,11,10,11,11,9,9,9,10,10,11,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,8,8,10,10,4,5,5,8,7,8,8,11,10,3,5,5,7,8,8,8,10,11,6,8,7,10,9,10,10,11,11,6,7,8,9,9,9,10,11,12,8,8,8,10,10,11,11,13,12,8,8,9,9,10,11,11,12,13,10,11,10,12,11,13,12,14,14,10,10,11,11,12,12,13,14,14,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,6,7,8,9,10,9,10,10,11,12,9,9,10,11,12,6,7,7,9,9,6,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,13,14,11,11,12,13,14,8,9,9,11,12,9,10,10,12,12,9,10,10,12,12,11,12,11,14,13,11,12,12,13,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,7,8,8,10,10,8,8,9,10,11,8,9,9,11,11,10,10,11,11,13,10,11,11,12,13,6,7,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,11,13,12,15,12,13,13,14,15,9,10,10,12,12,9,11,10,13,12,10,11,11,13,13,11,13,11,14,12,12,13,13,14,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,6,8,7,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,8,11,10,10,11,11,13,12,10,11,10,13,11,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,13,14,15,11,11,13,12,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,14,14,12,13,11,14,12,8,9,9,12,12,9,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,14,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,12,12,12,13,14,15,12,13,13,15,14,9,10,10,12,12,10,11,10,13,12,10,11,11,12,13,12,13,12,15,13,12,13,13,14,15,11,12,12,14,13,11,12,12,14,15,12,13,13,15,14,13,12,14,12,16,13,14,14,15,15,11,11,12,14,14,11,12,11,14,13,12,13,13,14,15,13,14,12,16,12,14,14,15,16,16,8,9,9,11,12,9,10,10,12,12,9,10,10,12,13,11,12,12,13,13,12,12,13,14,14,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,13,13,15,14,12,12,13,13,15,9,10,10,12,13,10,11,11,12,13,10,11,11,13,13,12,13,13,14,15,12,13,12,15,14,11,12,11,14,13,12,13,13,15,14,11,11,12,13,14,14,15,14,16,15,13,12,14,13,16,11,12,12,13,14,12,13,13,14,15,11,12,11,14,14,14,14,14,15,16,13,15,12,16,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,5,8,8,5,7,6,9,9,5,6,7,9,9,8,10,9,13,12,8,9,10,12,12,5,7,7,10,10,7,9,9,11,11,6,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,10,7,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,13,13,10,11,11,15,14,9,11,11,14,14,13,14,14,17,16,12,13,13,15,16,8,10,10,13,13,9,11,11,14,15,10,11,11,14,15,12,14,13,16,16,13,15,14,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,14,7,9,9,12,11,9,11,11,13,13,9,11,11,13,13,12,13,13,15,16,11,12,13,15,16,6,9,9,11,11,8,11,10,13,12,9,11,11,13,14,11,13,12,16,14,11,13,13,16,17,10,12,11,15,15,11,13,13,16,16,11,13,13,17,16,14,15,15,17,17,14,16,16,17,18,9,11,11,14,15,10,12,12,15,15,11,13,13,16,17,13,15,13,17,15,14,15,16,18,0,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,15,6,9,9,12,11,9,11,11,13,13,8,10,11,12,13,11,13,13,16,15,11,12,13,14,15,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,13,15,16,11,13,13,15,14,9,11,11,15,14,11,13,13,17,15,10,12,12,15,15,14,16,16,17,17,13,13,15,15,17,10,11,12,15,15,11,13,13,16,16,11,13,13,15,15,14,15,15,18,18,14,15,15,17,17,8,10,10,13,13,10,12,11,15,15,10,11,12,15,15,14,15,15,18,18,13,14,14,18,18,9,11,11,15,16,11,13,13,17,17,11,13,13,16,16,15,15,16,17,0,14,15,17,0,0,9,11,11,15,15,10,13,12,18,16,11,13,13,15,16,14,16,15,20,20,14,15,16,17,0,13,14,14,20,16,14,15,16,19,18,14,15,15,19,0,18,16,0,20,20,16,18,18,0,0,12,14,14,18,18,13,15,14,18,16,14,15,16,18,20,16,19,16,0,17,17,18,18,19,0,8,10,10,14,14,10,11,11,14,15,10,11,12,15,15,13,15,14,19,17,13,15,15,17,0,9,11,11,16,15,11,13,13,16,16,10,12,13,15,17,14,16,16,18,18,14,15,15,18,0,9,11,11,15,15,11,13,13,16,17,11,13,13,18,17,14,18,16,18,18,15,17,17,18,0,12,14,14,18,18,14,15,15,20,0,13,14,15,17,0,16,18,17,0,0,16,16,0,17,20,12,14,14,18,18,14,16,15,0,18,14,16,15,18,0,16,19,17,0,0,17,18,16,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,8,6,8,8,6,8,8,8,9,9,8,9,9,6,8,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,7,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,7,5,8,8,8,10,10,7,9,10,5,8,8,7,10,9,8,10,10,5,8,8,8,10,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,11,10,13,13,4,8,8,8,11,10,8,10,10,7,10,10,10,13,13,10,11,13,8,10,11,10,13,13,10,13,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,10,17,13,17,13,17,17,17,17,3,6,8,9,11,9,15,12,16,17,6,5,5,7,7,8,10,11,17,17,7,8,7,9,9,10,13,13,17,17,8,6,5,7,4,7,5,8,14,17,9,9,8,9,7,9,8,10,16,17,12,10,7,8,4,7,4,7,16,17,12,11,9,10,6,9,5,7,14,17,14,13,10,15,4,8,3,5,14,17,17,14,11,15,6,10,6,8,15,17,0,0,0,0,2,0,0,0,64,0,0,0,8,200,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,144,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,184,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,224,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,188,2,0,0,0,0,0,48,188,2,0,88,188,2,0,0,0,0,0,0,0,0,0,128,188,2,0,168,188,2,0,208,188,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,40,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,12,12,13,12,11,13,5,4,6,7,8,8,9,13,9,5,4,5,5,7,9,13,9,6,5,6,6,7,8,12,12,7,5,6,4,5,8,13,11,7,6,6,5,5,6,12,10,8,8,7,7,5,3,8,10,12,13,12,12,9,6,7,4,0,0,0,81,0,0,0,160,199,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,248,199,2,0,0,0,0,0,4,0,0,0,81,0,0,0,56,199,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,144,199,2,0,0,0,0,0,4,0,0,0,113,2,0,0,168,196,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,199,2,0,0,0,0,0,4,0,0,0,113,2,0,0,24,194,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,196,2,0,0,0,0,0,2,0,0,0,81,0,0,0,152,193,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,240,193,2,0,0,0,0,0,2,0,0,0,169,0,0,0,176,192,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,96,193,2,0,0,0,0,0,2,0,0,0,25,0,0,0,120,192,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,192,2,0,0,0,0,0,2,0,0,0,169,0,0,0,144,191,2,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,64,192,2,0,0,0,0,0,2,0,0,0,225,0,0,0,104,190,2,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,80,191,2,0,0,0,0,0,2,0,0,0,33,1,0,0,248,188,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,32,190,2,0,0,0,0,0,2,5,5,7,7,7,7,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,7,7,7,8,8,8,8,9,9,9,9,10,9,10,9,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,8,9,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,11,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,7,9,8,10,8,10,9,11,11,4,7,6,8,7,9,9,10,10,11,10,11,10,12,10,4,6,7,8,8,9,9,10,10,11,11,11,11,12,12,6,8,8,10,9,11,10,12,11,12,12,12,12,13,13,6,8,8,10,10,10,11,11,11,12,12,13,12,13,13,8,9,9,11,11,12,11,12,12,13,13,13,13,13,13,8,9,9,11,11,11,12,12,12,13,13,13,13,13,13,9,10,10,12,11,13,13,13,13,14,13,13,14,14,14,9,10,11,11,12,12,13,13,13,13,13,14,15,14,14,10,11,11,12,12,13,13,14,14,14,14,14,15,16,16,10,11,11,12,13,13,13,13,15,14,14,15,16,15,16,10,12,12,13,13,14,14,14,15,15,15,15,15,15,16,11,12,12,13,13,14,14,14,15,15,15,16,15,17,16,11,12,12,13,13,13,15,15,14,16,16,16,16,16,17,11,12,12,13,13,14,14,15,14,15,15,17,17,16,16,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,3,12,12,12,12,12,12,12,12,12,12,3,12,11,12,12,12,12,12,12,12,12,12,12,4,11,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,11,10,13,13,4,6,5,8,8,9,9,10,10,11,11,14,14,4,6,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,15,15,6,8,8,9,9,10,11,11,11,12,12,15,15,8,9,9,11,10,11,11,12,12,13,13,16,16,8,9,9,10,10,11,11,12,12,13,13,16,16,10,10,10,12,11,12,12,13,13,14,14,16,16,10,10,10,11,12,12,12,13,13,13,14,16,17,11,12,11,12,12,13,13,14,14,15,14,18,17,11,11,12,12,12,13,13,14,14,14,15,19,18,14,15,14,15,15,17,16,17,17,17,17,21,0,14,15,15,16,16,16,16,17,17,18,17,20,21,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,6,6,7,7,9,9,4,5,5,7,7,8,8,10,9,4,5,5,7,7,8,8,10,10,6,7,7,8,8,9,9,11,10,6,7,7,8,8,9,9,10,11,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,11,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,8,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,9,10,10,11,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,12,11,9,10,9,12,12,9,10,10,13,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,14,9,9,10,12,12,9,10,10,13,13,9,10,10,12,13,11,12,12,14,13,11,12,12,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,11,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,11,10,13,12,10,11,11,13,14,10,11,11,14,13,12,12,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,12,10,11,11,13,14,12,13,11,15,13,13,13,13,15,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,10,10,11,12,13,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,11,8,9,9,11,11,8,9,8,11,11,10,11,11,13,13,11,12,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,12,13,12,13,13,15,15,12,11,13,13,14,9,10,11,12,13,10,11,11,13,14,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,15,12,12,12,14,14,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,13,13,14,14,16,13,13,13,15,15,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,16,14,12,13,13,14,15,11,12,12,15,14,11,12,13,14,15,12,13,13,16,15,14,12,15,12,16,14,15,15,16,16,11,12,12,14,14,11,13,12,15,14,12,13,13,15,16,13,15,13,17,13,14,15,15,16,17,8,9,9,12,12,9,10,10,12,13,9,10,10,13,13,12,12,12,14,14,12,13,13,15,15,9,10,10,13,12,10,11,11,14,13,10,10,11,13,14,13,13,13,15,15,12,13,14,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,14,13,13,13,15,15,13,14,13,16,14,11,12,12,15,14,12,13,13,16,15,11,12,13,14,15,14,15,15,17,16,13,13,15,13,16,11,12,13,14,15,13,13,13,15,16,11,13,12,15,14,14,15,15,16,16,14,15,12,17,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,8,8,5,7,7,9,9,5,7,7,9,9,8,10,9,12,12,8,9,10,12,12,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,9,10,11,13,14,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,14,13,10,12,12,15,14,9,11,11,15,14,13,14,14,17,17,12,14,14,16,16,8,10,10,14,14,9,11,11,14,15,10,12,12,14,15,12,14,13,16,16,13,14,15,15,18,4,7,7,10,10,7,9,9,12,11,7,9,9,11,12,10,12,11,15,14,10,11,12,14,15,7,9,9,12,12,9,11,12,13,13,9,11,12,13,13,12,13,13,15,16,11,13,13,15,16,7,9,9,12,12,9,11,10,13,12,9,11,12,13,14,11,13,12,16,14,12,13,13,15,16,10,12,12,16,15,11,13,13,17,16,11,13,13,17,16,14,15,15,17,17,14,16,16,18,20,9,11,11,15,16,11,13,12,16,16,11,13,13,16,17,14,15,14,18,16,14,16,16,17,20,5,7,7,10,10,7,9,9,12,11,7,9,10,11,12,10,12,11,15,15,10,12,12,14,14,7,9,9,12,12,9,12,11,14,13,9,10,11,12,13,12,13,14,16,16,11,12,13,14,16,7,9,9,12,12,9,12,11,13,13,9,12,11,13,13,11,13,13,16,16,12,13,13,16,15,9,11,11,16,14,11,13,13,16,16,11,12,13,16,16,14,16,16,17,17,13,14,15,16,17,10,12,12,15,15,11,13,13,16,17,11,13,13,16,16,14,16,15,19,19,14,15,15,17,18,8,10,10,14,14,10,12,12,15,15,10,12,12,16,16,14,16,15,20,19,13,15,15,17,16,9,12,12,16,16,11,13,13,16,18,11,14,13,16,17,16,17,16,20,0,15,16,18,18,20,9,11,11,15,15,11,14,12,17,16,11,13,13,17,17,15,17,15,20,20,14,16,16,17,0,13,15,14,18,16,14,15,16,0,18,14,16,16,0,0,18,16,0,0,20,16,18,18,0,0,12,14,14,17,18,13,15,14,20,18,14,16,15,19,19,16,20,16,0,18,16,19,17,19,0,8,10,10,14,14,10,12,12,16,15,10,12,12,16,16,13,15,15,18,17,14,16,16,19,0,9,11,11,16,15,11,14,13,18,17,11,12,13,17,18,14,17,16,18,18,15,16,17,18,18,9,12,12,16,16,11,13,13,16,18,11,14,13,17,17,15,16,16,18,20,16,17,17,20,20,12,14,14,18,17,14,16,16,0,19,13,14,15,18,0,16,0,0,0,0,16,16,0,19,20,13,15,14,0,0,14,16,16,18,19,14,16,15,0,20,16,20,18,0,20,17,20,17,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,8,7,8,8,5,7,6,6,8,8,6,8,8,6,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,6,6,6,8,8,6,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,15,14,8,11,11,10,13,12,11,14,14,4,8,8,8,11,11,8,11,11,7,11,11,11,15,14,10,12,14,8,11,11,11,14,14,11,14,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,14,17,15,17,16,14,13,16,10,7,7,10,13,10,15,16,9,4,4,6,5,7,9,16,12,8,7,8,8,8,11,16,14,7,4,6,3,5,8,15,13,8,5,7,4,5,7,16,12,9,6,8,3,3,5,16,14,13,7,10,5,5,7,15,2,0,0,0,64,0,0,0,208,213,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,201,2,0,0,0,0,0,0,0,0,0,0,0,0,0,192,201,2,0,0,0,0,0,0,0,0,0,0,0,0,0,232,201,2,0,0,0,0,0,0,0,0,0,0,0,0,0,16,202,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,202,2,0,0,0,0,0,96,202,2,0,136,202,2,0,0,0,0,0,0,0,0,0,176,202,2,0,216,202,2,0,0,203,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,88,201,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,9,13,12,14,11,10,13,8,4,5,7,8,7,8,12,11,4,3,5,5,7,9,14,11,6,5,6,6,6,7,13,13,7,5,6,4,5,7,14,11,7,6,6,5,5,6,13,9,7,8,6,7,5,3,9,9,12,13,12,14,10,6,7,4,0,0,0,81,0,0,0,104,213,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,192,213,2,0,0,0,0,0,4,0,0,0,81,0,0,0,0,213,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,88,213,2,0,0,0,0,0,4,0,0,0,113,2,0,0,112,210,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,212,2,0,0,0,0,0,4,0,0,0,113,2,0,0,224,207,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,210,2,0,0,0,0,0,2,0,0,0,81,0,0,0,96,207,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,184,207,2,0,0,0,0,0,2,0,0,0,169,0,0,0,120,206,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,40,207,2,0,0,0,0,0,2,0,0,0,25,0,0,0,64,206,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,96,206,2,0,0,0,0,0,2,0,0,0,81,0,0,0,192,205,2,0,1,0,0,0,0,224,63,225,0,224,255,96,4,0,0,0,0,0,0,0,24,206,2,0,0,0,0,0,2,0,0,0,225,0,0,0,152,204,2,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,128,205,2,0,0,0,0,0,2,0,0,0,33,1,0,0,40,203,2,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,80,204,2,0,0,0,0,0,2,5,5,7,6,7,7,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,10,5,6,6,7,7,8,8,8,8,9,8,9,9,9,9,10,9,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,7,7,7,8,8,8,8,9,9,9,9,10,9,10,10,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,7,8,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,10,11,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,6,8,7,9,8,10,9,11,11,4,7,7,8,7,9,9,10,10,11,11,11,11,12,12,4,7,7,7,7,9,9,10,10,11,11,12,12,12,11,6,8,8,9,9,10,10,11,11,12,12,13,12,13,13,6,8,8,9,9,10,11,11,11,12,12,13,14,13,13,8,9,9,11,11,12,12,12,13,14,13,14,14,14,15,8,9,9,11,11,11,12,13,14,13,14,15,17,14,15,9,10,10,12,12,13,13,13,14,15,15,15,16,16,16,9,11,11,12,12,13,13,14,14,14,15,16,16,16,16,10,12,12,13,13,14,14,15,15,15,16,17,17,17,17,10,12,11,13,13,15,14,15,14,16,17,16,16,16,16,11,13,12,14,14,14,14,15,16,17,16,17,17,17,17,11,13,12,14,14,14,15,17,16,17,17,17,17,17,17,12,13,13,15,16,15,16,17,17,16,16,17,17,17,17,12,13,13,15,15,15,16,17,17,17,16,17,16,17,17,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,3,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,10,11,13,14,4,6,5,8,8,9,9,10,10,11,11,14,14,4,6,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,15,15,6,8,8,9,9,10,11,11,11,12,12,15,15,8,9,9,11,10,11,11,12,12,13,13,15,16,8,9,9,10,11,11,11,12,12,13,13,16,16,10,10,11,11,11,12,12,13,13,13,14,17,16,9,10,11,12,11,12,12,13,13,13,13,16,18,11,12,11,12,12,13,13,13,14,15,14,17,17,11,11,12,12,12,13,13,13,14,14,15,18,17,14,15,15,15,15,16,16,17,17,19,18,0,20,14,15,14,15,15,16,16,16,17,18,16,20,18,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,6,6,7,7,9,9,4,5,5,7,7,8,8,10,10,4,5,5,7,7,8,8,10,10,6,7,7,8,8,9,9,11,10,6,7,7,8,8,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,10,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,9,10,10,11,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,9,10,9,12,12,9,10,10,13,12,9,10,10,12,13,12,12,12,14,14,11,12,12,13,14,9,9,10,12,12,9,10,10,12,12,9,10,10,12,13,11,12,11,14,13,12,12,12,14,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,11,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,11,10,13,12,10,11,11,13,13,10,11,11,13,13,12,12,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,12,10,11,11,13,14,12,13,11,15,13,12,13,13,15,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,10,10,11,12,12,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,13,11,11,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,12,13,12,13,13,15,15,12,11,13,13,14,9,10,11,12,13,10,11,11,13,13,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,14,12,12,12,14,13,9,10,10,13,12,10,11,11,13,13,10,11,11,14,12,13,13,14,14,16,12,13,13,15,15,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,15,14,13,13,13,15,15,11,13,12,15,14,11,12,13,14,15,12,13,13,16,14,14,12,15,12,16,14,15,15,17,15,11,12,12,14,14,11,13,11,15,14,12,13,13,15,15,13,15,12,17,13,14,15,15,16,16,8,9,9,12,12,9,10,10,12,13,9,10,10,13,13,12,12,12,14,14,12,13,13,15,15,9,10,10,13,12,10,11,11,14,13,10,10,11,13,14,12,13,13,15,15,12,12,13,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,12,13,13,14,15,13,14,13,16,14,11,12,12,14,14,12,13,13,15,14,11,12,13,14,15,14,15,15,16,16,13,13,15,13,16,11,12,12,14,15,12,13,13,14,15,11,13,12,15,14,14,15,15,16,16,14,15,12,16,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,7,7,5,7,7,9,9,5,7,7,9,9,8,9,9,12,12,8,9,9,11,12,5,7,7,10,10,7,9,9,11,11,7,9,9,10,11,10,11,11,13,13,9,10,11,13,13,5,7,7,10,10,7,9,9,11,10,7,9,9,11,11,9,11,10,13,13,10,11,11,14,13,8,10,10,14,13,10,11,11,15,14,9,11,11,14,14,13,14,13,16,16,12,13,13,15,15,8,10,10,13,14,9,11,11,14,14,10,11,11,14,15,12,13,13,15,15,13,14,14,15,16,5,7,7,10,10,7,9,9,11,11,7,9,9,11,12,10,11,11,14,14,10,11,11,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,12,12,13,15,15,11,12,13,15,16,7,9,9,11,11,8,11,10,13,12,9,11,11,13,13,11,13,12,15,13,11,13,13,15,16,9,12,11,15,14,11,12,13,16,15,11,13,13,15,16,14,14,15,17,16,13,15,16,0,17,9,11,11,15,15,10,13,12,15,15,11,13,13,15,16,13,15,13,16,15,14,16,15,0,19,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,10,11,12,14,14,7,9,9,12,12,9,11,11,14,13,9,10,11,12,13,11,13,13,16,16,11,12,13,13,16,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,11,13,13,15,15,12,13,12,15,14,9,11,11,15,14,11,13,12,16,16,10,12,12,15,15,13,15,15,17,19,13,14,15,16,17,10,12,12,15,15,11,13,13,16,16,11,13,13,15,16,13,15,15,0,0,14,15,15,16,16,8,10,10,14,14,10,12,12,15,15,10,12,11,15,16,14,15,15,19,20,13,14,14,18,16,9,11,11,15,15,11,13,13,17,16,11,13,13,16,16,15,17,17,20,20,14,15,16,17,20,9,11,11,15,15,10,13,12,16,15,11,13,13,15,17,14,16,15,18,0,14,16,15,18,20,12,14,14,0,0,14,14,16,0,0,13,16,15,0,0,17,17,18,0,0,16,17,19,19,0,12,14,14,18,0,12,16,14,0,17,13,15,15,18,0,16,18,17,0,17,16,18,17,0,0,7,10,10,14,14,10,12,11,15,15,10,12,12,16,15,13,15,15,18,0,14,15,15,17,0,9,11,11,15,15,11,13,13,16,16,11,12,13,16,16,14,15,16,17,17,14,16,16,16,18,9,11,12,16,16,11,13,13,17,17,11,14,13,20,17,15,16,16,19,0,15,16,17,0,19,11,13,14,17,16,14,15,15,20,18,13,14,15,17,19,16,18,18,0,20,16,16,19,17,0,12,15,14,17,0,14,15,15,18,19,13,16,15,19,20,15,18,18,0,20,17,0,16,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,4,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,8,7,8,8,5,7,6,7,8,8,6,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,10,8,8,10,7,8,8,8,10,10,8,10,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,14,14,8,11,11,10,14,12,11,14,14,4,8,8,8,11,11,8,11,11,7,11,11,11,14,14,10,12,14,8,11,11,11,14,14,11,14,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,14,14,14,15,13,15,12,16,10,8,7,9,9,8,12,16,10,5,4,6,5,6,9,16,14,8,6,8,7,8,10,16,14,7,4,6,3,5,8,16,15,9,5,7,4,4,7,16,13,10,6,7,4,3,4,13,13,12,7,9,5,5,6,12,2,0,0,0,64,0,0,0,208,226,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,136,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,176,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,2,0,0,0,0,0,40,216,2,0,80,216,2,0,0,0,0,0,0,0,0,0,120,216,2,0,160,216,2,0,200,216,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+175812);
/* memory initializer */ allocate([2,0,0,0,64,0,0,0,32,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,9,14,12,15,13,10,13,7,4,5,6,8,7,8,12,13,4,3,5,5,6,9,15,12,6,5,6,6,6,7,14,14,7,4,6,4,6,8,15,12,6,6,5,5,5,6,14,9,7,8,6,7,5,4,10,10,13,14,14,15,10,6,8,4,0,0,0,81,0,0,0,104,226,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,192,226,2,0,0,0,0,0,4,0,0,0,81,0,0,0,0,226,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,88,226,2,0,0,0,0,0,4,0,0,0,113,2,0,0,112,223,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,225,2,0,0,0,0,0,4,0,0,0,113,2,0,0,224,220,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,223,2,0,0,0,0,0,2,0,0,0,81,0,0,0,96,220,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,184,220,2,0,0,0,0,0,2,0,0,0,169,0,0,0,120,219,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,40,220,2,0,0,0,0,0,2,0,0,0,25,0,0,0,64,219,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,96,219,2,0,0,0,0,0,2,0,0,0,81,0,0,0,192,218,2,0,1,0,0,0,0,32,53,225,0,32,245,96,4,0,0,0,0,0,0,0,24,219,2,0,0,0,0,0,2,0,0,0,169,0,0,0,216,217,2,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,136,218,2,0,0,0,0,0,2,0,0,0,169,0,0,0,240,216,2,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,160,217,2,0,0,0,0,0,2,5,5,6,6,7,7,8,7,8,8,8,8,5,6,6,7,7,8,8,8,8,8,8,8,8,5,6,6,7,7,8,7,8,8,8,8,8,8,6,7,7,7,8,8,8,8,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,8,8,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,6,7,6,8,7,9,7,9,8,4,7,6,8,8,9,8,10,9,10,10,11,11,4,7,7,8,8,8,8,9,10,11,11,11,11,6,8,8,10,10,10,10,11,11,12,12,12,12,7,8,8,10,10,10,10,11,11,12,12,13,13,7,9,9,11,10,12,12,13,13,14,13,14,14,7,9,9,10,11,11,12,13,13,13,13,16,14,9,10,10,12,12,13,13,14,14,15,16,15,16,9,10,10,12,12,12,13,14,14,14,15,16,15,10,12,12,13,13,15,13,16,16,15,17,17,17,10,11,11,12,14,14,14,15,15,17,17,15,17,11,12,12,14,14,14,15,15,15,17,16,17,17,10,12,12,13,14,14,14,17,15,17,17,17,17,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,12,12,12,12,12,12,4,12,12,12,12,12,12,12,12,5,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,10,11,11,14,13,4,6,5,8,8,9,9,11,10,12,11,15,14,4,5,6,8,8,9,9,11,11,11,11,14,14,6,8,8,10,9,11,11,11,11,12,12,15,15,6,8,8,9,9,11,11,11,12,12,12,15,15,8,10,10,11,11,11,11,12,12,13,13,15,16,8,10,10,11,11,11,11,12,12,13,13,16,16,10,11,11,12,12,12,12,13,13,13,13,17,16,10,11,11,12,12,12,12,13,13,13,14,16,17,11,12,12,13,13,13,13,14,14,15,14,18,17,11,12,12,13,13,13,13,14,14,14,15,19,18,14,15,15,15,15,16,16,18,19,18,18,0,0,14,15,15,16,15,17,17,16,18,17,18,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,8,8,9,9,4,6,5,8,8,8,8,10,10,4,5,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,8,8,8,9,9,10,11,12,12,8,8,8,9,9,10,10,12,12,10,10,10,11,11,12,12,13,13,10,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,10,10,10,11,12,9,10,10,11,12,5,7,7,9,9,6,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,12,11,9,10,10,12,12,10,10,10,13,12,9,10,10,12,13,12,12,12,14,14,11,12,12,13,14,9,10,10,12,12,9,10,10,12,13,10,10,10,12,13,11,12,12,14,13,12,12,12,14,13,5,7,7,10,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,10,10,13,13,10,11,11,13,13,10,11,11,14,13,12,11,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,13,10,11,11,13,13,12,13,11,15,13,12,13,13,15,15,5,7,7,9,10,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,11,12,12,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,11,8,9,9,11,11,8,9,8,11,11,10,11,11,13,13,10,11,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,13,13,12,13,13,15,15,12,11,13,12,14,9,10,10,12,13,10,11,11,13,14,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,15,12,12,12,14,14,9,10,10,13,13,10,11,11,13,14,10,11,11,14,12,13,13,14,14,16,12,13,13,15,14,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,16,14,13,13,13,14,15,11,13,12,15,14,11,12,13,14,15,12,13,13,16,15,14,12,15,12,16,14,15,15,17,16,11,12,12,14,15,11,13,11,15,14,12,13,13,15,16,13,15,12,17,13,14,15,15,16,16,8,9,9,12,12,9,10,10,13,13,9,10,10,13,13,12,13,12,14,14,12,13,13,15,15,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,12,13,13,15,14,12,12,14,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,13,13,13,15,15,13,14,13,16,14,11,12,12,14,14,12,13,13,16,15,11,12,13,14,15,14,15,15,16,16,14,13,15,13,17,11,12,12,14,15,12,13,13,15,16,11,13,12,15,15,14,15,14,16,16,14,15,12,17,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,7,8,5,7,7,9,9,5,7,7,9,9,8,9,9,12,11,8,9,9,11,12,5,7,7,10,10,7,9,9,11,11,7,9,9,10,11,10,11,11,13,13,9,10,11,12,13,5,7,7,10,10,7,9,9,11,10,7,9,9,11,11,9,11,10,13,13,10,11,11,13,13,8,10,10,14,13,10,11,11,15,14,9,11,11,15,14,13,14,13,16,14,12,13,13,15,16,8,10,10,13,14,9,11,11,14,15,10,11,11,14,15,12,13,13,15,15,12,13,14,15,16,5,7,7,10,10,7,9,9,11,11,7,9,9,11,12,10,11,11,14,13,10,11,11,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,12,13,12,14,14,11,12,13,15,15,7,9,9,12,12,8,11,10,13,12,9,11,11,13,13,11,13,12,15,13,11,13,13,15,16,9,12,11,15,15,11,12,12,16,15,11,12,13,16,16,13,14,15,16,15,13,15,15,17,17,9,11,11,14,15,10,12,12,15,15,11,13,12,15,16,13,15,14,16,16,13,15,15,17,19,5,7,7,10,10,7,9,9,12,11,7,9,9,11,11,10,11,11,14,14,10,11,11,13,14,7,9,9,12,12,9,11,11,13,13,9,10,11,12,13,11,13,12,16,15,11,12,12,14,15,7,9,9,12,12,9,11,11,13,13,9,11,11,13,12,11,13,12,15,16,12,13,13,15,14,9,11,11,15,14,11,13,12,16,15,10,11,12,15,15,13,14,14,18,17,13,14,14,15,17,10,11,11,14,15,11,13,12,15,17,11,13,12,15,16,13,15,14,18,17,14,15,15,16,18,7,10,10,14,14,10,12,12,15,15,10,12,12,15,15,14,15,15,18,17,13,15,15,16,16,9,11,11,16,15,11,13,13,16,18,11,13,13,16,16,15,16,16,0,0,14,15,16,18,17,9,11,11,15,15,10,13,12,17,16,11,12,13,16,17,14,15,16,19,19,14,15,15,0,20,12,14,14,0,0,13,14,16,19,18,13,15,16,20,17,16,18,0,0,0,15,16,17,18,19,11,14,14,0,19,12,15,14,17,17,13,15,15,0,0,16,17,15,20,19,15,17,16,19,0,8,10,10,14,15,10,12,11,15,15,10,11,12,16,15,13,14,14,19,17,14,15,15,0,0,9,11,11,16,15,11,13,13,17,16,10,12,13,16,17,14,15,15,18,18,14,15,16,20,19,9,12,12,0,15,11,13,13,16,17,11,13,13,19,17,14,16,16,18,17,15,16,16,17,19,11,14,14,18,18,13,14,15,0,0,12,14,15,19,18,15,16,19,0,19,15,16,19,19,17,12,14,14,16,19,13,15,15,0,17,13,15,14,18,18,15,16,15,0,18,16,17,17,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,7,7,8,8,5,6,6,7,8,8,6,8,8,6,8,8,8,9,10,8,10,10,6,8,8,7,10,8,8,10,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,13,13,7,11,11,10,13,12,11,14,14,4,8,8,8,11,11,8,11,11,8,11,11,11,14,13,10,12,13,8,11,11,11,13,13,11,13,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,13,15,17,17,15,15,12,17,11,9,7,10,10,9,12,17,10,6,3,6,5,7,10,17,15,10,6,9,8,9,11,17,15,8,4,7,3,5,9,16,16,10,5,8,4,5,8,16,13,11,5,8,3,3,5,14,13,12,7,10,5,5,7,14,2,0,0,0,64,0,0,0,168,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,136,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,176,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,2,0,0,0,0,0,40,229,2,0,80,229,2,0,0,0,0,0,0,0,0,0,120,229,2,0,160,229,2,0,200,229,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,32,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,13,10,17,11,11,15,7,2,4,5,8,7,9,16,13,4,3,5,6,8,11,20,10,4,5,5,7,6,8,18,15,7,6,7,8,10,14,20,10,6,7,6,9,7,8,17,9,8,10,8,10,5,4,11,12,17,19,14,16,10,7,12,4,0,0,0,81,0,0,0,64,239,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,152,239,2,0,0,0,0,0,4,0,0,0,81,0,0,0,216,238,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,239,2,0,0,0,0,0,4,0,0,0,113,2,0,0,72,236,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,192,238,2,0,0,0,0,0,4,0,0,0,113,2,0,0,184,233,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,236,2,0,0,0,0,0,2,0,0,0,81,0,0,0,56,233,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,233,2,0,0,0,0,0,2,0,0,0,169,0,0,0,80,232,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,0,233,2,0,0,0,0,0,2,0,0,0,25,0,0,0,24,232,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,232,2,0,0,0,0,0,2,0,0,0,49,0,0,0,192,231,2,0,1,0,0,0,0,176,31,225,0,32,245,96,3,0,0,0,0,0,0,0,248,231,2,0,0,0,0,0,2,0,0,0,169,0,0,0,216,230,2,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,136,231,2,0,0,0,0,0,2,0,0,0,169,0,0,0,240,229,2,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,160,230,2,0,0,0,0,0,2,5,4,6,6,7,7,8,8,8,8,9,8,5,5,6,7,7,8,8,8,8,9,9,9,9,5,6,5,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,9,9,9,9,9,9,9,7,8,8,9,8,9,8,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,10,10,8,8,9,9,9,9,9,9,9,9,10,9,10,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,9,9,10,10,9,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,6,6,6,6,7,7,8,8,9,9,5,7,7,8,7,7,7,9,8,10,9,10,11,5,7,7,8,8,7,7,8,9,10,10,11,11,6,8,8,9,9,9,9,11,10,12,12,15,12,6,8,8,9,9,9,9,11,11,12,11,14,12,7,8,8,10,10,12,12,13,13,13,15,13,13,7,8,8,10,10,11,11,13,12,14,15,15,15,9,10,10,11,12,13,13,14,15,14,15,14,15,8,10,10,12,12,14,14,15,14,14,15,15,14,10,12,12,14,14,15,14,15,15,15,14,15,15,10,12,12,13,14,15,14,15,15,14,15,15,15,12,15,13,15,14,15,15,15,15,15,15,15,15,13,13,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,6,6,6,6,5,6,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,9,11,10,14,13,4,6,5,8,8,9,9,11,10,11,11,14,14,4,5,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,16,15,7,8,8,9,9,10,10,11,11,12,12,15,15,9,10,10,10,10,11,11,12,12,12,12,15,15,9,10,9,10,11,11,11,12,12,12,13,15,15,10,10,11,11,11,12,12,13,12,13,13,16,15,10,11,11,11,11,12,12,13,12,13,13,16,17,11,11,12,12,12,13,13,13,14,14,15,17,17,11,11,12,12,12,13,13,13,14,14,14,16,18,14,15,15,15,15,16,16,16,16,17,18,0,0,14,15,15,15,15,17,16,17,18,17,17,18,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,11,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,9,9,5,6,6,9,9,5,6,6,9,9,9,10,9,12,12,9,9,10,12,12,5,7,7,10,10,7,7,8,10,10,6,7,8,10,10,10,10,10,11,13,10,9,10,12,13,5,7,7,10,10,6,8,7,10,10,7,8,7,10,10,9,10,10,12,12,10,10,10,13,11,9,10,10,13,13,10,11,10,13,13,10,10,10,13,13,12,12,13,14,14,12,12,13,14,14,9,10,10,13,13,10,10,10,13,13,10,10,10,13,13,12,13,12,15,14,12,13,12,15,15,5,7,6,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,13,13,10,10,10,12,12,7,8,8,11,10,8,8,9,10,11,8,9,9,11,11,11,10,11,11,14,11,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,14,11,10,11,11,13,13,10,11,11,14,13,10,10,11,14,13,10,11,11,14,14,12,11,13,12,16,13,14,14,15,15,10,10,11,13,14,10,11,10,14,13,10,11,11,14,14,12,13,12,15,13,13,13,14,15,16,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,10,10,13,13,10,10,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,6,8,8,10,11,8,9,9,11,11,8,9,8,12,10,10,11,11,13,13,10,11,10,14,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,13,12,14,14,16,16,12,12,13,13,15,10,11,11,13,14,10,11,11,14,15,10,11,10,13,13,13,14,13,16,16,12,13,11,15,12,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,13,14,13,16,16,13,13,13,15,16,9,10,10,13,13,10,10,11,13,14,10,11,11,15,13,13,13,14,14,18,13,13,14,16,15,9,10,10,13,14,10,11,10,14,13,10,11,11,13,14,13,14,13,16,15,13,13,14,15,16,12,13,12,16,14,11,11,13,15,15,13,14,13,16,15,15,12,16,12,17,14,15,15,17,17,12,13,13,14,16,11,13,11,16,15,12,13,14,15,16,14,15,13,0,14,14,16,16,0,0,9,10,10,13,13,10,11,10,14,14,10,11,11,13,13,12,13,13,14,16,13,14,14,16,16,9,10,10,14,14,11,11,11,14,13,10,10,11,14,14,13,13,13,16,16,13,13,14,14,17,9,10,10,13,14,10,11,11,13,15,10,11,10,14,14,13,13,13,14,17,13,14,13,17,14,12,13,13,16,14,13,14,13,16,15,12,12,13,15,16,15,15,16,18,16,15,13,15,14,0,12,12,13,14,16,13,13,14,15,16,11,12,11,16,14,15,16,16,17,17,14,15,12,17,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,12,12,6,8,8,11,10,8,10,10,11,11,8,9,10,11,11,10,11,11,14,13,10,11,11,13,13,5,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,13,13,10,11,11,13,13,9,11,11,15,14,10,12,12,15,14,10,12,11,15,14,13,14,14,16,16,12,14,13,17,15,9,11,11,14,15,10,11,12,14,16,10,11,12,14,16,12,13,14,16,16,13,13,15,15,18,5,8,8,11,11,8,10,10,12,12,8,10,10,12,13,11,12,12,14,14,11,12,12,15,15,8,10,10,13,13,10,12,12,13,13,10,12,12,14,14,12,13,13,15,15,12,13,13,16,16,7,10,10,12,12,10,12,11,13,13,10,12,12,13,14,12,13,12,15,14,12,13,13,16,16,10,12,12,17,16,12,13,13,16,15,11,13,13,17,17,15,15,15,16,17,14,15,15,19,19,10,12,12,15,16,11,13,12,15,18,11,13,13,16,16,14,15,15,17,17,14,15,15,17,19,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,16,15,11,12,12,14,15,7,10,10,13,13,10,12,12,14,13,10,11,12,13,13,12,13,13,16,16,12,12,13,15,15,8,10,10,13,13,10,12,12,14,14,10,12,12,13,13,12,13,13,16,16,12,13,13,15,15,10,12,12,16,15,11,13,13,17,16,11,12,13,16,15,13,15,15,19,17,14,15,14,17,16,10,12,12,16,16,11,13,13,16,17,12,13,13,15,17,14,15,15,17,19,14,15,15,17,17,8,11,11,16,16,10,13,12,17,17,10,12,13,16,16,15,17,16,20,19,14,15,17,18,19,9,12,12,16,17,11,13,14,17,18,11,13,13,19,18,16,17,18,19,19,15,16,16,19,19,9,12,12,16,17,11,14,13,18,17,11,13,13,17,17,16,17,16,20,19,14,16,16,18,18,12,15,15,19,17,14,15,16,0,20,13,15,16,20,17,18,16,20,0,0,15,16,19,20,0,12,15,14,18,19,13,16,15,20,19,13,16,15,20,18,17,18,17,0,20,16,17,16,0,0,8,11,11,16,15,10,12,12,17,17,10,13,13,17,16,14,16,15,18,20,15,16,16,19,19,9,12,12,16,16,11,13,13,17,16,11,13,14,17,18,15,15,16,20,20,16,16,17,19,19,9,13,12,16,17,11,14,13,17,17,11,14,14,18,17,14,16,15,18,19,16,17,18,18,19,12,14,15,19,18,13,15,16,18,0,13,14,15,0,0,16,16,17,20,0,17,17,20,20,0,12,15,15,19,20,13,15,15,0,0,14,16,15,0,0,15,18,16,0,0,17,18,16,0,19,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,8,8,5,7,7,6,8,8,7,8,8,4,7,7,7,8,8,7,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,10,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,12,11,11,13,13,11,13,14,7,11,11,10,13,12,11,13,14,4,8,8,8,11,11,8,11,12,8,11,11,11,13,13,10,12,13,8,11,11,11,14,13,11,14,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,12,13,14,13,17,12,15,17,5,5,6,10,10,11,15,16,4,3,3,7,5,7,10,16,7,7,7,10,9,11,12,16,6,5,5,9,5,6,10,16,8,7,7,9,6,7,9,16,11,7,3,6,4,5,8,16,12,9,4,8,5,7,9,16,2,0,0,0,64,0,0,0,184,254,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,241,2,0,0,0,0,0,0,0,0,0,0,0,0,0,96,241,2,0,0,0,0,0,0,0,0,0,0,0,0,0,136,241,2,0,0,0,0,0,0,0,0,0,0,0,0,0,176,241,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,241,2,0,0,0,0,0,0,242,2,0,40,242,2,0,0,0,0,0,0,0,0,0,80,242,2,0,120,242,2,0,160,242,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,248,240,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,13,10,17,11,11,15,7,2,4,5,8,7,9,16,13,4,3,5,6,8,11,20,10,4,5,5,7,6,8,18,15,7,6,7,8,10,14,20,10,6,7,6,9,7,8,17,9,8,10,8,10,5,4,11,12,17,19,14,16,10,7,12,4,0,0,0,81,0,0,0,80,254,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,168,254,2,0,0,0,0,0,4,0,0,0,81,0,0,0,232,253,2,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,64,254,2,0,0,0,0,0,4,0,0,0,113,2,0,0,88,251,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,253,2,0,0,0,0,0,4,0,0,0,113,2,0,0,200,248,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,64,251,2,0,0,0,0,0,2,0,0,0,81,0,0,0,72,248,2,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,160,248,2,0,0,0,0,0,2,0,0,0,169,0,0,0,96,247,2,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,16,248,2,0,0,0,0,0,2,0,0,0,25,0,0,0,40,247,2,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,247,2,0,0,0,0,0,4,0,0,0,113,2,0,0,152,244,2,0,1,0,0,0,0,32,21,225,0,32,245,96,3,0,0,0,0,0,0,0,16,247,2,0,0,0,0,0,2,0,0,0,169,0,0,0,176,243,2,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,96,244,2,0,0,0,0,0,2,0,0,0,169,0,0,0,200,242,2,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,120,243,2,0,0,0,0,0,2,5,4,6,6,7,7,8,8,8,8,9,8,5,5,6,7,7,8,8,8,8,9,9,9,9,5,6,5,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,9,9,9,9,9,9,9,7,8,8,9,8,9,8,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,10,10,8,8,9,9,9,9,9,9,9,9,10,9,10,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,9,9,10,10,9,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,6,6,6,6,7,7,8,8,9,9,5,7,7,8,7,7,7,9,8,10,9,10,11,5,7,7,8,8,7,7,8,9,10,10,11,11,6,8,8,9,9,9,9,11,10,12,12,15,12,6,8,8,9,9,9,9,11,11,12,11,14,12,7,8,8,10,10,12,12,13,13,13,15,13,13,7,8,8,10,10,11,11,13,12,14,15,15,15,9,10,10,11,12,13,13,14,15,14,15,14,15,8,10,10,12,12,14,14,15,14,14,15,15,14,10,12,12,14,14,15,14,15,15,15,14,15,15,10,12,12,13,14,15,14,15,15,14,15,15,15,12,15,13,15,14,15,15,15,15,15,15,15,15,13,13,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,11,11,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,6,6,6,6,5,6,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,9,11,10,14,13,4,6,5,8,8,9,9,11,10,11,11,14,14,4,5,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,16,15,7,8,8,9,9,10,10,11,11,12,12,15,15,9,10,10,10,10,11,11,12,12,12,12,15,15,9,10,9,10,11,11,11,12,12,12,13,15,15,10,10,11,11,11,12,12,13,12,13,13,16,15,10,11,11,11,11,12,12,13,12,13,13,16,17,11,11,12,12,12,13,13,13,14,14,15,17,17,11,11,12,12,12,13,13,13,14,14,14,16,18,14,15,15,15,15,16,16,16,16,17,18,0,0,14,15,15,15,15,17,16,17,18,17,17,18,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,11,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,9,9,5,6,6,9,9,5,6,6,9,9,9,10,9,12,12,9,9,10,12,12,5,7,7,10,10,7,7,8,10,10,6,7,8,10,10,10,10,10,11,13,10,9,10,12,13,5,7,7,10,10,6,8,7,10,10,7,8,7,10,10,9,10,10,12,12,10,10,10,13,11,9,10,10,13,13,10,11,10,13,13,10,10,10,13,13,12,12,13,14,14,12,12,13,14,14,9,10,10,13,13,10,10,10,13,13,10,10,10,13,13,12,13,12,15,14,12,13,12,15,15,5,7,6,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,13,13,10,10,10,12,12,7,8,8,11,10,8,8,9,10,11,8,9,9,11,11,11,10,11,11,14,11,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,14,11,10,11,11,13,13,10,11,11,14,13,10,10,11,14,13,10,11,11,14,14,12,11,13,12,16,13,14,14,15,15,10,10,11,13,14,10,11,10,14,13,10,11,11,14,14,12,13,12,15,13,13,13,14,15,16,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,10,10,13,13,10,10,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,6,8,8,10,11,8,9,9,11,11,8,9,8,12,10,10,11,11,13,13,10,11,10,14,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,13,12,14,14,16,16,12,12,13,13,15,10,11,11,13,14,10,11,11,14,15,10,11,10,13,13,13,14,13,16,16,12,13,11,15,12,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,13,14,13,16,16,13,13,13,15,16,9,10,10,13,13,10,10,11,13,14,10,11,11,15,13,13,13,14,14,18,13,13,14,16,15,9,10,10,13,14,10,11,10,14,13,10,11,11,13,14,13,14,13,16,15,13,13,14,15,16,12,13,12,16,14,11,11,13,15,15,13,14,13,16,15,15,12,16,12,17,14,15,15,17,17,12,13,13,14,16,11,13,11,16,15,12,13,14,15,16,14,15,13,0,14,14,16,16,0,0,9,10,10,13,13,10,11,10,14,14,10,11,11,13,13,12,13,13,14,16,13,14,14,16,16,9,10,10,14,14,11,11,11,14,13,10,10,11,14,14,13,13,13,16,16,13,13,14,14,17,9,10,10,13,14,10,11,11,13,15,10,11,10,14,14,13,13,13,14,17,13,14,13,17,14,12,13,13,16,14,13,14,13,16,15,12,12,13,15,16,15,15,16,18,16,15,13,15,14,0,12,12,13,14,16,13,13,14,15,16,11,12,11,16,14,15,16,16,17,17,14,15,12,17,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,12,12,6,8,8,11,10,8,10,10,11,11,8,9,10,11,11,10,11,11,14,13,10,11,11,13,13,5,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,13,13,10,11,11,13,13,9,11,11,15,14,10,12,12,15,14,10,12,11,15,14,13,14,14,16,16,12,14,13,17,15,9,11,11,14,15,10,11,12,14,16,10,11,12,14,16,12,13,14,16,16,13,13,15,15,18,5,8,8,11,11,8,10,10,12,12,8,10,10,12,13,11,12,12,14,14,11,12,12,15,15,8,10,10,13,13,10,12,12,13,13,10,12,12,14,14,12,13,13,15,15,12,13,13,16,16,7,10,10,12,12,10,12,11,13,13,10,12,12,13,14,12,13,12,15,14,12,13,13,16,16,10,12,12,17,16,12,13,13,16,15,11,13,13,17,17,15,15,15,16,17,14,15,15,19,19,10,12,12,15,16,11,13,12,15,18,11,13,13,16,16,14,15,15,17,17,14,15,15,17,19,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,16,15,11,12,12,14,15,7,10,10,13,13,10,12,12,14,13,10,11,12,13,13,12,13,13,16,16,12,12,13,15,15,8,10,10,13,13,10,12,12,14,14,10,12,12,13,13,12,13,13,16,16,12,13,13,15,15,10,12,12,16,15,11,13,13,17,16,11,12,13,16,15,13,15,15,19,17,14,15,14,17,16,10,12,12,16,16,11,13,13,16,17,12,13,13,15,17,14,15,15,17,19,14,15,15,17,17,8,11,11,16,16,10,13,12,17,17,10,12,13,16,16,15,17,16,20,19,14,15,17,18,19,9,12,12,16,17,11,13,14,17,18,11,13,13,19,18,16,17,18,19,19,15,16,16,19,19,9,12,12,16,17,11,14,13,18,17,11,13,13,17,17,16,17,16,20,19,14,16,16,18,18,12,15,15,19,17,14,15,16,0,20,13,15,16,20,17,18,16,20,0,0,15,16,19,20,0,12,15,14,18,19,13,16,15,20,19,13,16,15,20,18,17,18,17,0,20,16,17,16,0,0,8,11,11,16,15,10,12,12,17,17,10,13,13,17,16,14,16,15,18,20,15,16,16,19,19,9,12,12,16,16,11,13,13,17,16,11,13,14,17,18,15,15,16,20,20,16,16,17,19,19,9,13,12,16,17,11,14,13,17,17,11,14,14,18,17,14,16,15,18,19,16,17,18,18,19,12,14,15,19,18,13,15,16,18,0,13,14,15,0,0,16,16,17,20,0,17,17,20,20,0,12,15,15,19,20,13,15,15,0,0,14,16,15,0,0,15,18,16,0,0,17,18,16,0,19,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,8,8,5,7,7,6,8,8,7,8,8,4,7,7,7,8,8,7,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,10,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,12,11,11,13,13,11,13,14,7,11,11,10,13,12,11,13,14,4,8,8,8,11,11,8,11,12,8,11,11,11,13,13,10,12,13,8,11,11,11,14,13,11,14,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,12,13,14,13,17,12,15,17,5,5,6,10,10,11,15,16,4,3,3,7,5,7,10,16,7,7,7,10,9,11,12,16,6,5,5,9,5,6,10,16,8,7,7,9,6,7,9,16,11,7,3,6,4,5,8,16,12,9,4,8,5,7,9,16], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+186096);
/* memory initializer */ allocate([2,0,0,0,64,0,0,0,200,13,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,152,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,232,0,3,0,0,0,0,0,16,1,3,0,56,1,3,0,0,0,0,0,0,0,0,0,96,1,3,0,136,1,3,0,176,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,8,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,12,9,14,9,9,19,6,1,5,5,8,7,9,19,12,4,4,7,7,9,11,18,9,5,6,6,8,7,8,17,14,8,7,8,8,10,12,18,9,6,8,6,8,6,8,18,9,8,11,8,11,7,5,15,16,18,18,18,17,15,11,18,4,0,0,0,81,0,0,0,96,13,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,13,3,0,0,0,0,0,4,0,0,0,81,0,0,0,248,12,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,80,13,3,0,0,0,0,0,4,0,0,0,113,2,0,0,104,10,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,12,3,0,0,0,0,0,4,0,0,0,113,2,0,0,216,7,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,10,3,0,0,0,0,0,2,0,0,0,81,0,0,0,88,7,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,176,7,3,0,0,0,0,0,2,0,0,0,169,0,0,0,112,6,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,32,7,3,0,0,0,0,0,2,0,0,0,25,0,0,0,56,6,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,6,3,0,0,0,0,0,4,0,0,0,113,2,0,0,168,3,3,0,1,0,0,0,0,32,21,225,0,32,245,96,3,0,0,0,0,0,0,0,32,6,3,0,0,0,0,0,2,0,0,0,169,0,0,0,192,2,3,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,112,3,3,0,0,0,0,0,2,0,0,0,169,0,0,0,216,1,3,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,136,2,3,0,0,0,0,0,3,4,4,6,6,7,7,8,8,9,9,9,8,4,5,5,6,6,8,8,9,8,9,9,9,9,4,5,5,7,6,8,8,8,8,9,8,9,8,6,7,7,7,8,8,8,9,9,9,9,9,9,6,7,7,7,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,8,9,9,10,9,9,10,7,8,8,8,8,9,9,9,9,9,9,10,10,8,9,9,9,9,9,9,9,9,10,10,9,10,8,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,10,9,9,10,9,9,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,9,9,9,10,9,9,10,10,9,10,10,10,10,9,9,9,10,9,9,9,10,10,10,10,10,10,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,6,6,6,6,9,8,9,8,8,8,5,7,7,7,7,8,8,8,10,8,10,8,9,5,7,7,8,7,7,8,10,10,11,10,12,11,7,8,8,9,9,9,10,11,11,11,11,11,11,7,8,8,8,9,9,9,10,10,10,11,11,12,7,8,8,9,9,10,11,11,12,11,12,11,11,7,8,8,9,9,10,10,11,11,11,12,12,11,8,10,10,10,10,11,11,14,11,12,12,12,13,9,10,10,10,10,12,11,14,11,14,11,12,13,10,11,11,11,11,13,11,14,14,13,13,13,14,11,11,11,12,11,12,12,12,13,14,14,13,14,12,11,12,12,12,12,13,13,13,14,13,14,14,11,12,12,14,12,13,13,12,13,13,14,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,5,3,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,5,5,4,5,5,6,5,5,6,5,6,6,5,6,6,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,10,10,11,11,15,15,4,5,5,8,8,9,9,11,11,12,12,16,16,4,5,6,8,8,9,9,11,11,12,12,14,14,7,8,8,9,9,10,10,11,12,13,13,16,17,7,8,8,9,9,10,10,12,12,12,13,15,15,9,10,10,10,10,11,11,12,12,13,13,15,16,9,9,9,10,10,11,11,13,12,13,13,17,17,10,11,11,11,12,12,12,13,13,14,15,0,18,10,11,11,12,12,12,13,14,13,14,14,17,16,11,12,12,13,13,14,14,14,14,15,16,17,16,11,12,12,13,13,14,14,14,14,15,15,17,17,14,15,15,16,16,16,17,17,16,0,17,0,18,14,15,15,16,16,0,15,18,18,0,16,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,8,8,9,9,4,6,5,8,7,8,8,10,9,4,6,6,8,8,8,8,10,10,7,8,7,9,9,9,9,11,10,7,8,8,9,9,9,9,10,11,8,8,8,9,9,10,10,11,11,8,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,11,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,9,9,5,6,6,10,9,5,6,6,9,10,10,10,10,12,11,9,10,10,12,12,5,7,7,10,10,7,7,8,10,11,7,7,8,10,11,10,10,11,11,13,10,10,11,11,13,6,7,7,10,10,7,8,7,11,10,7,8,7,10,10,10,11,9,13,11,10,11,10,13,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,14,12,12,13,15,15,12,12,13,13,14,10,10,10,12,13,10,11,10,13,13,10,11,11,13,13,12,13,12,14,13,12,13,13,14,13,5,7,7,10,10,7,8,8,11,10,7,8,8,10,10,11,11,11,13,13,10,11,11,12,12,7,8,8,11,11,7,8,9,10,12,8,9,9,11,11,11,10,12,11,14,11,11,12,13,13,6,8,8,10,11,7,9,7,12,10,8,9,10,11,12,10,12,10,14,11,11,12,11,13,13,10,11,11,14,14,10,10,11,13,14,11,12,12,15,13,12,11,14,12,16,12,13,14,15,16,10,10,11,13,14,10,11,10,14,12,11,12,12,13,14,12,13,11,15,12,14,14,14,15,15,5,7,7,10,10,7,8,8,10,10,7,8,8,10,11,10,11,10,12,12,10,11,11,12,13,6,8,8,11,11,8,9,9,12,11,7,7,9,10,12,11,11,11,12,13,11,10,12,11,15,7,8,8,11,11,8,9,9,11,11,7,9,8,12,10,11,12,11,13,12,11,12,10,15,11,10,11,10,14,12,11,12,11,14,13,10,10,11,13,14,13,13,13,17,15,12,11,14,12,15,10,10,11,13,14,11,12,12,14,14,10,11,10,14,13,13,14,13,16,17,12,14,11,16,12,9,10,10,14,13,10,11,10,14,14,10,11,11,13,13,13,14,14,16,15,12,13,13,14,14,9,11,10,14,13,10,10,12,13,14,11,12,11,14,13,13,14,14,14,15,13,14,14,15,15,9,10,11,13,14,10,11,10,15,13,11,11,12,12,15,13,14,12,15,14,13,13,14,14,15,12,13,12,16,14,11,11,12,15,14,13,15,13,16,14,13,12,15,12,17,15,16,15,16,16,12,12,13,13,15,11,13,11,15,14,13,13,14,15,17,13,14,12,0,13,14,15,14,15,0,9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,13,14,14,15,17,9,10,10,13,13,11,12,11,15,12,10,10,11,13,16,13,14,13,15,14,13,13,14,15,16,10,10,11,13,14,11,11,12,13,14,10,12,11,14,14,13,13,13,14,15,13,15,13,16,15,12,13,12,15,13,12,15,13,15,15,11,11,13,14,15,15,15,15,15,17,13,12,14,13,17,12,12,14,14,15,13,13,14,14,16,11,13,11,16,15,14,16,16,17,0,14,13,11,16,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,11,12,6,8,8,10,10,8,10,10,11,11,8,9,10,11,11,10,11,11,13,13,10,11,11,12,13,6,8,8,10,10,8,10,9,11,11,8,10,10,11,11,10,11,11,13,12,10,11,11,13,12,9,11,11,15,13,10,12,11,15,13,10,11,11,15,14,12,14,13,16,15,12,13,13,17,16,9,11,11,13,15,10,11,12,14,15,10,11,12,14,15,12,13,13,15,16,12,13,13,16,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,8,11,10,13,12,10,11,12,12,13,10,12,12,13,13,12,12,13,13,15,11,12,13,15,14,7,10,10,12,12,9,12,11,13,12,10,12,12,13,14,12,13,12,15,13,11,13,12,14,15,10,12,12,16,14,11,12,12,16,15,11,13,12,17,16,13,13,15,15,17,13,15,15,20,17,10,12,12,14,16,11,12,12,15,15,11,13,13,15,18,13,14,13,15,15,13,15,14,16,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,15,7,10,10,13,12,10,12,12,14,13,9,10,12,12,13,11,13,13,15,15,11,12,13,13,15,8,10,10,12,13,10,12,12,13,13,10,12,11,13,13,11,13,12,15,15,12,13,12,15,13,10,12,12,16,14,11,12,12,16,15,10,12,12,16,14,14,15,14,18,16,13,13,14,15,16,10,12,12,14,16,11,13,13,16,16,11,13,12,14,16,13,15,15,18,18,13,15,13,16,14,8,11,11,16,16,10,13,13,17,16,10,12,12,16,15,14,16,15,20,17,13,14,14,17,17,9,12,12,16,16,11,13,14,16,17,11,13,13,16,16,15,15,19,18,0,14,15,15,18,18,9,12,12,17,16,11,13,12,17,16,11,12,13,15,17,15,16,15,0,19,14,15,14,19,18,12,14,14,0,16,13,14,14,19,18,13,15,16,17,16,15,15,17,18,0,14,16,16,19,0,12,14,14,16,18,13,15,13,17,18,13,15,14,17,18,15,18,14,18,18,16,17,16,0,17,8,11,11,15,15,10,12,12,16,16,10,13,13,16,16,13,15,14,17,17,14,15,17,17,18,9,12,12,16,15,11,13,13,16,16,11,12,13,17,17,14,14,15,17,17,14,15,16,0,18,9,12,12,16,17,11,13,13,16,17,11,14,13,18,17,14,16,14,17,17,15,17,17,18,18,12,14,14,0,16,13,15,15,19,0,12,13,15,0,0,14,17,16,19,0,16,15,18,18,0,12,14,14,17,0,13,14,14,17,0,13,15,14,0,18,15,16,16,0,18,15,18,15,0,17,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,7,9,5,7,7,6,8,7,7,9,8,4,7,7,7,9,8,7,8,8,7,9,8,8,8,10,9,10,10,6,8,8,7,10,8,9,10,10,5,7,7,7,8,8,7,8,9,6,8,8,9,10,10,7,8,10,6,8,9,9,10,10,8,10,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,10,4,9,9,8,11,11,8,11,11,8,12,11,10,12,14,11,13,13,7,11,11,10,13,11,11,13,14,4,8,9,8,11,11,8,11,12,7,11,11,11,14,13,10,11,13,8,11,12,11,13,13,10,14,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,12,12,14,12,14,14,14,14,12,6,6,8,9,9,11,14,12,4,2,6,6,7,11,14,13,6,5,7,8,9,11,14,13,8,5,8,6,8,12,14,12,7,7,8,8,8,10,14,12,6,3,4,4,4,7,14,11,7,4,6,6,6,8,14,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,224,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,64,65,0,0,72,65,0,0,80,65,0,0,88,65,0,0,96,65,0,0,104,65,0,0,112,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,64,65,0,0,72,65,0,0,80,65,0,0,88,65,0,0,96,65,0,0,104,65,0,0,112,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,64,0,0,224,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,216,168,1,0,48,26,3,0,216,168,1,0,112,26,3,0,216,168,1,0,176,26,3,0,216,168,1,0,240,26,3,0,216,168,1,0,48,27,3,0,216,168,1,0,112,27,3,0,216,168,1,0,176,27,3,0,216,168,1,0,240,27,3,0,216,168,1,0,48,28,3,0,216,168,1,0,112,28,3,0,216,168,1,0,176,28,3,0,2,0,0,0,0,0,0,0,32,0,0,0,80,36,4,0,232,207,4,0,16,208,4,0,56,208,4,0,248,208,4,0,2,0,0,0,0,0,0,0,32,0,0,0,80,36,4,0,184,209,4,0,224,209,4,0,56,208,4,0,248,208,4,0,2,0,0,0,0,0,0,0,16,0,0,0,80,36,4,0,8,127,4,0,48,127,4,0,88,127,4,0,24,128,4,0,2,0,0,0,0,0,0,0,32,0,0,0,80,36,4,0,216,128,4,0,0,129,4,0,88,127,4,0,24,128,4,0,2,0,0,0,0,0,0,0,16,0,0,0,80,36,4,0,104,47,4,0,144,47,4,0,184,47,4,0,120,48,4,0,2,0,0,0,0,0,0,0,32,0,0,0,80,36,4,0,56,49,4,0,96,49,4,0,184,47,4,0,120,48,4,0,2,0,0,0,0,0,0,0,16,0,0,0,40,194,1,0,168,249,3,0,168,249,3,0,208,249,3,0,208,249,3,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,144,250,3,0,144,250,3,0,208,249,3,0,208,249,3,0,2,0,0,0,0,0,0,0,16,0,0,0,40,194,1,0,192,206,3,0,192,206,3,0,232,206,3,0,232,206,3,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,168,207,3,0,168,207,3,0,232,206,3,0,232,206,3,0,2,0,0,0,0,0,0,0,16,0,0,0,40,194,1,0,48,163,3,0,48,163,3,0,88,163,3,0,88,163,3,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,24,164,3,0,24,164,3,0,88,163,3,0,88,163,3,0,2,0,0,0,0,0,0,0,16,0,0,0,40,194,1,0,24,119,3,0,24,119,3,0,64,119,3,0,64,119,3,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,0,120,3,0,0,120,3,0,64,119,3,0,64,119,3,0,2,0,0,0,0,0,0,0,16,0,0,0,240,28,3,0,24,100,3,0,24,100,3,0,64,100,3,0,64,100,3,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,0,101,3,0,0,101,3,0,64,100,3,0,64,100,3,0,2,0,0,0,0,0,0,0,16,0,0,0,240,28,3,0,24,81,3,0,24,81,3,0,64,81,3,0,64,81,3,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,0,82,3,0,0,82,3,0,64,81,3,0,64,81,3,0,2,0,0,0,0,0,0,0,16,0,0,0,240,28,3,0,184,60,3,0,184,60,3,0,224,60,3,0,224,60,3,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,160,61,3,0,160,61,3,0,224,60,3,0,224,60,3,0,2,0,0,0,0,0,0,0,16,0,0,0,240,28,3,0,8,40,3,0,8,40,3,0,48,40,3,0,48,40,3,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,240,40,3,0,240,40,3,0,48,40,3,0,48,40,3,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+196336);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,80,60,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,41,3,0,0,0,0,0,0,0,0,0,0,0,0,0,168,41,3,0,0,0,0,0,0,0,0,0,0,0,0,0,208,41,3,0,0,0,0,0,0,0,0,0,0,0,0,0,248,41,3,0,0,0,0,0,32,42,3,0,72,42,3,0,0,0,0,0,0,0,0,0,112,42,3,0,152,42,3,0,0,0,0,0,0,0,0,0,192,42,3,0,232,42,3,0,0,0,0,0,0,0,0,0,16,43,3,0,56,43,3,0,0,0,0,0,0,0,0,0,96,43,3,0,136,43,3,0,176,43,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,24,41,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,12,14,15,15,15,13,15,15,6,5,8,10,12,12,13,12,14,13,10,6,5,6,8,9,11,11,13,13,13,8,5,4,5,6,8,10,11,13,14,10,7,5,4,5,7,9,11,12,13,11,8,6,5,4,5,7,9,11,12,11,10,8,7,5,4,5,9,10,13,13,11,10,8,6,5,4,7,9,15,14,13,12,10,9,8,7,8,9,12,12,14,13,12,11,10,9,8,9,0,0,0,0,4,0,0,0,81,0,0,0,232,59,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,64,60,3,0,0,0,0,0,4,0,0,0,113,2,0,0,88,57,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,59,3,0,0,0,0,0,2,0,0,0,81,0,0,0,216,56,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,48,57,3,0,0,0,0,0,2,0,0,0,33,1,0,0,104,55,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,144,56,3,0,0,0,0,0,4,0,0,0,81,0,0,0,0,55,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,88,55,3,0,0,0,0,0,2,0,0,0,121,0,0,0,80,54,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,208,54,3,0,0,0,0,0,2,0,0,0,169,0,0,0,104,53,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,24,54,3,0,0,0,0,0,2,0,0,0,25,0,0,0,48,53,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,53,3,0,0,0,0,0,2,0,0,0,169,0,0,0,72,52,3,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,248,52,3,0,0,0,0,0,2,0,0,0,121,0,0,0,152,51,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,24,52,3,0,0,0,0,0,2,0,0,0,225,0,0,0,112,50,3,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,88,51,3,0,0,0,0,0,2,0,0,0,185,1,0,0,88,48,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,24,50,3,0,0,0,0,0,2,0,0,0,105,1,0,0,152,46,3,0,1,0,0,0,128,93,176,225,0,24,61,97,5,0,0,0,0,0,0,0,8,48,3,0,0,0,0,0,2,0,0,0,105,1,0,0,216,44,3,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,72,46,3,0,0,0,0,0,1,0,0,0,49,0,0,0,216,43,3,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,16,44,3,0,0,0,0,0,2,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,7,7,8,7,9,8,9,9,10,10,11,11,11,11,6,5,5,8,8,9,9,9,8,10,9,11,10,12,12,13,12,13,13,5,5,5,8,8,9,9,9,9,10,10,11,11,12,12,13,12,13,13,17,8,8,9,9,9,9,9,9,10,10,12,11,13,12,13,13,13,13,18,8,8,9,9,9,9,9,9,11,11,12,12,13,13,13,13,13,13,17,13,12,9,9,10,10,10,10,11,11,12,12,12,13,13,13,14,14,18,13,12,9,9,10,10,10,10,11,11,12,12,13,13,13,14,14,14,17,18,18,10,10,10,10,11,11,11,12,12,12,14,13,14,13,13,14,18,18,18,10,9,10,9,11,11,12,12,12,12,13,13,15,14,14,14,18,18,16,13,14,10,11,11,11,12,13,13,13,13,14,13,13,14,14,18,18,18,14,12,11,9,11,10,13,12,13,13,13,14,14,14,13,14,18,18,17,18,18,11,12,12,12,13,13,14,13,14,14,13,14,14,14,18,18,18,18,17,12,10,12,9,13,11,13,14,14,14,14,14,15,14,18,18,17,17,18,14,15,12,13,13,13,14,13,14,14,15,14,15,14,18,17,18,18,18,15,15,12,10,14,10,14,14,13,13,14,14,14,14,18,16,18,18,18,18,17,14,14,13,14,14,13,13,14,14,14,15,15,18,18,18,18,17,17,17,14,14,14,12,14,13,14,14,15,14,15,14,18,18,18,18,18,18,18,17,16,13,13,13,14,14,14,14,15,16,15,18,18,18,18,18,18,18,17,17,13,13,13,13,14,13,14,15,15,15,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,4,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,6,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,4,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,10,9,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,9,9,9,9,9,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,6,8,8,8,8,9,9,10,10,11,10,6,5,5,7,7,9,9,8,9,10,10,11,11,12,12,6,5,5,7,7,9,9,9,9,10,10,11,11,12,12,21,7,8,8,8,9,9,9,9,10,10,11,11,12,12,21,8,8,8,8,9,9,9,9,10,10,11,11,12,12,21,11,12,9,9,10,10,10,10,10,11,11,12,12,12,21,12,12,9,8,10,10,10,10,11,11,12,12,13,13,21,21,21,9,9,9,9,11,11,11,11,12,12,12,13,21,20,20,9,9,9,9,10,11,11,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,20,20,12,12,12,12,12,12,13,13,14,14,20,20,20,20,20,12,12,12,11,13,12,13,13,14,14,20,20,20,20,20,15,16,13,12,13,13,14,13,14,14,20,20,20,20,20,16,15,12,12,13,12,14,13,14,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,5,6,6,6,6,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,7,7,8,6,6,6,6,7,7,7,7,7,7,8,8,8,6,6,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,10,10,11,11,6,4,4,6,6,8,8,9,9,10,10,12,12,6,4,5,6,6,8,8,9,9,10,10,12,12,20,6,6,6,6,8,8,9,10,11,11,12,12,20,6,6,6,6,8,8,10,10,11,11,12,12,20,10,10,7,7,9,9,10,10,11,11,12,12,20,11,11,7,7,9,9,10,10,11,11,12,12,20,20,20,9,9,9,9,11,11,12,12,13,13,20,20,20,9,9,9,9,11,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,13,13,13,20,20,20,13,13,10,10,11,11,12,13,13,13,20,20,20,20,19,12,12,12,12,13,13,14,15,19,19,19,19,19,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,4,4,4,5,5,5,4,4,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,8,8,9,9,5,4,4,6,6,8,8,9,9,9,9,10,10,6,4,4,6,6,8,8,9,9,9,9,10,10,0,6,6,7,7,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,10,10,11,11,0,10,10,8,8,9,9,10,10,11,11,12,12,0,11,11,8,8,9,9,10,10,11,11,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,4,5,5,6,6,7,7,7,7,7,7,11,5,5,6,6,7,7,7,7,8,8,11,5,5,6,6,7,7,7,7,8,8,11,5,5,6,6,7,7,8,8,8,8,11,11,11,6,6,7,7,7,8,8,8,11,11,11,6,6,7,7,7,8,8,8,11,11,11,6,6,7,7,7,7,8,8,11,11,11,7,7,7,7,7,7,8,8,11,11,11,10,10,7,7,7,7,8,8,11,11,11,11,11,7,7,7,7,7,7,11,11,11,11,11,7,7,7,7,7,7,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,7,6,9,10,10,10,10,9,4,6,7,9,10,10,10,9,10,5,9,9,9,11,11,10,11,11,7,10,9,11,12,11,12,12,12,7,9,10,11,11,12,12,12,12,6,10,10,10,12,12,10,12,11,7,10,10,11,12,12,11,12,12,7,10,10,11,12,12,12,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,0,5,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,6,5,6,6,7,7,8,8,9,9,10,10,11,11,11,12,0,0,0,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,0,0,7,7,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,7,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,3,4,4,5,5,6,6,8,8,0,4,4,5,5,6,7,8,8,0,4,4,5,5,7,7,8,8,0,5,5,6,6,7,7,9,9,0,0,0,6,6,7,7,9,9,0,0,0,7,7,8,8,9,9,0,0,0,7,7,8,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,6,7,7,9,8,0,8,8,9,9,0,8,7,9,9,0,9,10,10,10,0,0,0,11,10,6,7,7,8,9,0,8,8,9,9,0,7,8,9,9,0,10,9,11,10,0,0,0,10,10,8,9,8,10,10,0,10,10,12,11,0,10,10,11,11,0,12,13,13,13,0,0,0,13,12,8,8,9,10,10,0,10,10,11,12,0,10,10,11,11,0,13,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,7,10,10,0,7,7,10,9,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,6,7,8,10,10,0,7,7,9,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,8,9,9,11,11,0,10,10,11,11,0,10,10,11,11,0,12,12,12,12,0,0,0,12,12,8,9,10,11,11,0,9,10,11,11,0,10,10,11,11,0,12,12,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,10,10,0,7,7,10,10,0,7,7,10,9,0,9,9,10,10,0,0,0,10,10,6,7,8,10,10,0,7,7,10,10,0,7,7,9,10,0,9,9,10,10,0,0,0,10,10,8,10,9,12,11,0,10,10,12,11,0,10,9,11,11,0,11,12,12,12,0,0,0,12,12,8,9,10,11,12,0,10,10,11,11,0,9,10,11,11,0,12,11,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,12,12,0,9,9,12,11,0,9,9,11,11,0,10,10,12,11,0,0,0,11,12,7,9,10,12,12,0,9,9,11,12,0,9,9,11,11,0,10,10,11,12,0,0,0,11,11,9,11,10,13,12,0,10,10,12,12,0,10,10,12,12,0,11,11,12,12,0,0,0,13,12,9,10,11,12,13,0,10,10,12,12,0,10,10,12,12,0,11,12,12,12,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,10,13,13,0,10,10,12,12,0,10,10,12,12,0,11,12,12,12,0,0,0,12,12,9,10,11,13,13,0,10,10,12,12,0,10,10,12,12,0,12,11,13,12,0,0,0,12,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,5,5,0,5,5,6,8,8,0,9,8,0,9,8,6,8,8,0,8,9,0,8,9,0,0,0,0,0,0,0,0,0,5,8,8,0,7,7,0,8,8,5,8,8,0,7,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,7,7,5,8,9,0,8,8,0,7,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,13,18,16,17,17,19,18,19,19,5,7,10,11,12,12,13,16,17,18,6,6,7,7,9,9,10,14,17,19,8,7,6,5,6,7,9,12,19,17,8,7,7,6,5,6,8,11,15,19,9,8,7,6,5,5,6,8,13,15,11,10,8,8,7,5,4,4,10,14,12,13,11,9,7,6,4,2,6,12,18,16,16,13,8,7,7,5,8,13,16,17,18,15,11,9,9,8,10,13,0,0,0,0,2,0,0,0,100,0,0,0,176,80,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,62,3,0,0,0,0,0,0,0,0,0,0,0,0,0,88,62,3,0,0,0,0,0,0,0,0,0,0,0,0,0,128,62,3,0,0,0,0,0,0,0,0,0,0,0,0,0,168,62,3,0,0,0,0,0,208,62,3,0,248,62,3,0,0,0,0,0,0,0,0,0,32,63,3,0,72,63,3,0,0,0,0,0,0,0,0,0,112,63,3,0,152,63,3,0,0,0,0,0,0,0,0,0,192,63,3,0,232,63,3,0,0,0,0,0,0,0,0,0,16,64,3,0,56,64,3,0,96,64,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,200,61,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,12,13,14,14,14,13,14,14,6,4,5,8,10,10,11,11,14,13,9,5,4,5,7,8,9,10,13,13,12,7,5,4,5,6,8,9,12,13,13,9,6,5,5,5,7,9,11,14,12,10,7,6,5,4,6,7,10,11,12,11,9,8,7,5,5,6,10,10,13,12,10,9,8,6,6,5,8,10,14,13,12,12,11,10,9,7,8,10,12,13,14,14,13,12,11,9,9,10,0,0,0,0,4,0,0,0,81,0,0,0,72,80,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,160,80,3,0,0,0,0,0,4,0,0,0,113,2,0,0,184,77,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,80,3,0,0,0,0,0,2,0,0,0,81,0,0,0,56,77,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,77,3,0,0,0,0,0,2,0,0,0,33,1,0,0,200,75,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,76,3,0,0,0,0,0,4,0,0,0,81,0,0,0,96,75,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,184,75,3,0,0,0,0,0,2,0,0,0,121,0,0,0,176,74,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,48,75,3,0,0,0,0,0,2,0,0,0,169,0,0,0,200,73,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,120,74,3,0,0,0,0,0,2,0,0,0,25,0,0,0,144,73,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,73,3,0,0,0,0,0,2,0,0,0,169,0,0,0,168,72,3,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,88,73,3,0,0,0,0,0,2,0,0,0,121,0,0,0,248,71,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,120,72,3,0,0,0,0,0,2,0,0,0,225,0,0,0,208,70,3,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,184,71,3,0,0,0,0,0,2,0,0,0,185,1,0,0,184,68,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,120,70,3,0,0,0,0,0,2,0,0,0,33,1,0,0,72,67,3,0,1,0,0,0,0,24,157,225,0,24,61,97,5,0,0,0,0,0,0,0,112,68,3,0,0,0,0,0,2,0,0,0,105,1,0,0,136,65,3,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,248,66,3,0,0,0,0,0,1,0,0,0,49,0,0,0,136,64,3,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,192,64,3,0,0,0,0,0,2,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,6,7,7,7,7,8,8,9,9,10,10,10,10,11,11,6,6,6,8,8,9,8,8,7,10,8,11,10,12,11,12,12,13,13,5,5,6,8,8,9,9,8,8,10,9,11,11,12,12,13,13,13,13,17,8,8,9,9,9,9,9,9,10,9,12,10,12,12,13,12,13,13,17,9,8,9,9,9,9,9,9,10,10,12,12,12,12,13,13,13,13,17,13,13,9,9,10,10,10,10,11,11,12,11,13,12,13,13,14,15,17,13,13,9,8,10,9,10,10,11,11,12,12,14,13,15,13,14,15,17,17,17,9,10,9,10,11,11,12,12,12,12,13,13,14,14,15,15,17,17,17,9,8,9,8,11,11,12,12,12,12,14,13,14,14,14,15,17,17,17,12,14,9,10,11,11,12,12,14,13,13,14,15,13,15,15,17,17,17,13,11,10,8,11,9,13,12,13,13,13,13,13,14,14,14,17,17,17,17,17,11,12,11,11,13,13,14,13,15,14,13,15,16,15,17,17,17,17,17,11,11,12,8,13,12,14,13,17,14,15,14,15,14,17,17,17,17,17,15,15,12,12,12,12,13,14,14,14,15,14,17,14,17,17,17,17,17,16,17,12,12,13,12,13,13,14,14,14,14,14,14,17,17,17,17,17,17,17,14,14,13,12,13,13,15,15,14,13,15,17,17,17,17,17,17,17,17,13,14,13,13,13,13,14,15,15,15,14,15,17,17,17,17,17,17,17,16,15,13,14,13,13,14,14,15,14,14,16,17,17,17,17,17,17,17,16,16,13,14,13,13,14,14,15,14,15,14,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,4,5,5,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,9,10,10,9,10,10,10,10,9,10,9,10,10,9,10,10,10,10,10,10,10,9,10,10,10,10,10,10,9,9,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,10,9,9,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,6,8,8,8,7,9,8,10,10,11,10,6,5,5,7,7,9,9,8,8,10,10,11,11,12,11,6,5,5,7,7,9,9,9,9,10,10,11,11,12,12,20,8,8,8,8,9,9,9,9,10,10,11,11,12,12,20,8,8,8,8,10,9,9,9,10,10,11,11,12,12,20,12,12,9,9,10,10,10,10,10,11,12,12,12,12,20,12,12,9,9,10,10,10,10,11,11,12,12,13,13,20,20,20,9,9,9,9,11,10,11,11,12,12,12,13,20,19,19,9,9,9,9,11,11,11,12,12,12,13,13,19,19,19,13,13,10,10,11,11,12,12,13,13,13,13,19,19,19,14,13,11,10,11,11,12,12,12,13,13,13,19,19,19,19,19,12,12,12,12,13,13,13,13,14,13,19,19,19,19,19,12,12,12,11,12,12,13,14,14,14,19,19,19,19,19,16,15,13,12,13,13,13,14,14,14,19,19,19,19,19,17,17,13,12,13,11,14,13,15,15,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,4,5,6,6,6,7,7,7,7,7,7,8,6,6,6,7,7,7,7,7,7,7,8,6,6,6,6,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,7,9,9,10,10,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,7,5,5,7,7,8,8,10,10,11,11,12,12,21,7,7,7,7,8,9,10,10,11,11,12,12,21,7,7,7,7,9,9,10,10,12,12,13,13,21,11,11,8,8,9,9,11,11,12,12,13,13,21,11,11,8,8,9,9,11,11,12,12,13,13,21,21,21,10,10,10,10,11,11,12,13,13,13,21,21,21,10,10,10,10,11,11,13,13,14,13,21,21,21,13,13,11,11,12,12,13,13,14,14,21,21,21,14,14,11,11,12,12,13,13,14,14,21,21,21,21,20,13,13,13,12,14,14,16,15,20,20,20,20,20,13,13,13,13,14,13,15,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,9,9,10,10,11,11,6,5,5,7,7,8,8,9,9,10,10,11,11,0,7,7,7,7,9,9,10,10,10,10,11,11,0,7,7,7,7,9,9,10,10,10,10,11,11,0,11,11,9,9,10,10,11,11,11,11,12,12,0,12,12,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,5,6,6,7,7,8,8,8,8,11,4,5,6,6,7,7,8,8,8,8,11,5,5,6,6,7,7,8,8,8,9,12,5,5,6,6,7,7,8,8,9,9,12,12,12,6,6,7,7,8,8,9,9,11,11,11,6,6,7,7,8,8,8,8,11,11,11,6,6,7,7,8,8,8,8,11,11,11,7,7,7,8,8,8,8,8,11,11,11,11,11,7,7,8,8,8,8,11,11,11,11,11,7,7,7,7,8,8,11,11,11,11,11,7,7,7,7,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,7,6,10,10,10,10,10,10,4,6,6,10,10,10,10,9,10,5,10,10,9,11,11,10,11,11,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,10,12,12,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,4,4,6,6,7,7,8,8,9,8,10,10,11,11,11,11,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,11,11,0,6,5,6,6,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,6,6,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,12,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,12,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,4,4,5,5,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,5,5,6,6,8,8,10,10,0,0,0,6,6,8,8,10,10,0,0,0,7,7,9,9,10,10,0,0,0,7,7,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,7,10,9,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,7,8,9,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,10,0,11,10,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+206340);
/* memory initializer */ allocate([11,0,11,10,12,12,0,13,13,14,14,0,0,0,14,13,8,9,9,10,11,0,10,11,12,12,0,10,11,12,12,0,13,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,11,10,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,8,10,9,12,12,0,10,10,12,11,0,10,10,12,12,0,12,12,13,12,0,0,0,13,12,8,9,10,12,12,0,10,10,11,12,0,10,10,11,12,0,12,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,10,10,6,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,9,10,9,12,12,0,10,10,12,12,0,10,10,12,11,0,12,12,13,13,0,0,0,13,12,8,9,10,12,12,0,10,10,12,12,0,10,10,11,12,0,12,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,13,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,10,10,13,12,0,11,10,13,12,0,12,12,13,12,0,0,0,13,13,9,11,11,13,14,0,10,11,12,13,0,10,11,13,13,0,12,12,12,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,10,11,13,13,0,11,10,13,13,0,11,12,13,13,0,0,0,13,12,9,11,11,14,14,0,11,10,13,13,0,10,11,13,13,0,12,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,5,5,0,5,5,5,7,7,0,9,8,0,9,8,6,7,7,0,8,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,11,13,14,15,15,18,17,19,17,5,6,8,9,10,10,12,15,19,19,6,6,6,6,8,8,11,14,18,19,8,6,5,4,6,7,10,13,16,17,9,7,6,5,6,7,9,12,15,19,10,8,7,6,6,6,7,9,13,15,12,10,9,8,7,6,4,5,10,15,13,13,11,8,6,6,4,2,7,12,17,15,16,10,8,8,7,6,9,12,19,18,17,13,11,10,10,9,11,14,0,0,0,0,2,0,0,0,100,0,0,0,176,99,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,184,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,224,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,83,3,0,0,0,0,0,48,83,3,0,88,83,3,0,0,0,0,0,0,0,0,0,128,83,3,0,168,83,3,0,0,0,0,0,0,0,0,0,208,83,3,0,248,83,3,0,0,0,0,0,0,0,0,0,32,84,3,0,72,84,3,0,0,0,0,0,0,0,0,0,112,84,3,0,152,84,3,0,192,84,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,40,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,11,13,15,14,14,13,15,14,6,4,5,7,9,10,11,11,14,13,10,4,3,5,7,8,9,10,13,13,12,7,4,4,5,6,8,9,12,14,13,9,6,5,5,6,8,9,12,14,12,9,7,6,5,5,6,8,11,11,12,11,9,8,7,6,6,7,10,11,13,11,10,9,8,7,6,6,9,11,13,13,12,12,12,10,9,8,9,11,12,14,15,15,14,12,11,10,10,12,0,0,0,0,4,0,0,0,81,0,0,0,72,99,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,160,99,3,0,0,0,0,0,4,0,0,0,113,2,0,0,184,96,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,99,3,0,0,0,0,0,2,0,0,0,81,0,0,0,56,96,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,96,3,0,0,0,0,0,2,0,0,0,33,1,0,0,200,94,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,95,3,0,0,0,0,0,4,0,0,0,81,0,0,0,96,94,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,184,94,3,0,0,0,0,0,2,0,0,0,121,0,0,0,176,93,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,48,94,3,0,0,0,0,0,2,0,0,0,169,0,0,0,200,92,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,120,93,3,0,0,0,0,0,2,0,0,0,25,0,0,0,144,92,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,92,3,0,0,0,0,0,2,0,0,0,169,0,0,0,168,91,3,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,88,92,3,0,0,0,0,0,2,0,0,0,121,0,0,0,248,90,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,120,91,3,0,0,0,0,0,2,0,0,0,225,0,0,0,208,89,3,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,184,90,3,0,0,0,0,0,2,0,0,0,185,1,0,0,184,87,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,120,89,3,0,0,0,0,0,2,0,0,0,169,0,0,0,208,86,3,0,1,0,0,0,0,220,125,225,0,232,51,97,4,0,0,0,0,0,0,0,128,87,3,0,0,0,0,0,2,0,0,0,169,0,0,0,232,85,3,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,152,86,3,0,0,0,0,0,1,0,0,0,49,0,0,0,232,84,3,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,32,85,3,0,0,0,0,0,2,4,3,4,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,7,7,7,6,8,8,8,8,6,6,6,8,8,9,8,8,7,9,8,11,10,5,6,6,8,8,9,8,8,8,10,9,11,11,16,8,8,9,8,9,9,9,8,10,9,11,10,16,8,8,9,9,10,10,9,9,10,10,11,11,16,13,13,9,9,10,10,9,10,11,11,12,11,16,13,13,9,8,10,9,10,10,10,10,11,11,16,14,16,8,9,9,9,11,10,11,11,12,11,16,16,16,9,7,10,7,11,10,11,11,12,11,16,16,16,12,12,9,10,11,11,12,11,12,12,16,16,16,12,10,10,7,11,8,12,11,12,12,16,16,15,16,16,11,12,10,10,12,11,12,12,16,16,16,15,15,11,11,10,10,12,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,11,11,11,11,11,11,11,11,11,11,4,6,6,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,5,7,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,10,10,9,9,9,9,9,9,9,9,9,9,10,9,9,10,9,9,10,11,10,11,10,9,9,9,9,9,9,9,10,10,10,9,10,9,9,9,9,11,10,11,10,10,9,9,9,9,9,9,10,9,9,10,9,9,10,9,9,10,11,10,10,11,10,9,9,9,9,9,10,10,9,10,10,10,10,9,10,10,10,10,10,10,11,11,11,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,9,10,11,11,10,11,10,11,10,9,10,10,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,10,10,10,10,10,10,9,10,9,10,10,9,10,9,10,10,10,11,10,11,10,11,11,10,10,10,10,10,10,9,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,11,10,10,10,10,9,9,10,10,9,9,10,9,10,10,10,10,11,11,10,10,10,10,10,10,10,9,9,10,10,10,9,9,10,10,10,10,10,11,10,11,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,7,9,8,9,9,10,10,6,5,5,7,7,9,9,8,8,10,9,11,10,12,11,6,5,5,8,7,9,9,8,8,10,10,11,11,12,11,19,8,8,8,8,10,10,9,9,10,10,11,11,12,11,19,8,8,8,8,10,10,9,9,10,10,11,11,12,12,19,12,12,9,9,10,10,9,10,10,10,11,11,12,12,19,12,12,9,9,10,10,10,10,10,10,12,12,12,12,19,19,19,9,9,9,9,11,10,11,11,12,11,13,13,19,19,19,9,9,9,9,11,10,11,11,11,12,13,13,19,19,19,13,13,10,10,11,11,12,12,12,12,13,12,19,19,19,14,13,10,10,11,11,12,12,12,13,13,13,19,19,19,19,19,12,12,12,11,12,13,14,13,13,13,19,19,19,19,19,12,12,12,11,12,12,13,14,13,14,19,19,19,19,19,16,16,12,13,12,13,13,14,15,14,19,18,18,18,18,16,15,12,11,12,11,14,12,14,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,4,5,5,6,6,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,6,6,6,7,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,7,8,9,9,10,10,12,11,6,5,5,7,7,8,8,9,10,11,11,12,12,7,5,5,7,7,8,8,10,10,11,11,12,12,20,7,7,7,7,8,9,10,10,11,11,12,13,20,7,7,7,7,9,9,10,10,11,12,13,13,20,11,11,8,8,9,9,11,11,12,12,13,13,20,11,11,8,8,9,9,11,11,12,12,13,13,20,20,20,10,10,10,10,12,12,13,13,13,13,20,20,20,10,10,10,10,12,12,13,13,13,14,20,20,20,14,14,11,11,12,12,13,13,14,14,20,20,20,14,14,11,11,12,12,13,13,14,14,20,20,20,20,19,13,13,13,13,14,14,15,14,19,19,19,19,19,13,13,13,13,14,14,15,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,7,9,8,10,10,6,5,5,7,7,8,8,9,9,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,7,7,7,7,9,8,9,9,10,10,11,11,0,8,8,7,7,8,9,9,9,10,10,11,11,0,11,11,9,9,10,10,11,10,11,11,12,12,0,12,12,9,9,10,10,11,11,11,11,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,5,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,9,9,11,4,4,6,6,7,7,8,8,9,9,12,5,5,6,6,7,7,9,9,9,9,12,12,12,6,6,7,7,9,9,9,9,11,11,11,7,7,7,7,8,8,9,9,11,11,11,7,7,7,7,8,8,9,9,11,11,11,7,7,8,8,8,8,9,9,11,11,11,11,11,8,8,8,8,8,9,11,11,11,11,11,8,8,8,8,8,8,11,11,11,11,11,7,7,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,7,10,10,10,10,10,9,4,6,6,10,10,10,10,9,10,5,10,10,9,11,12,10,11,12,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,11,12,12,7,10,10,12,12,12,12,11,12,7,10,10,11,12,12,12,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,5,5,6,6,8,8,9,9,9,9,10,10,11,12,12,12,0,0,0,6,6,8,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,12,13,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,4,4,5,5,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,5,5,6,6,8,8,10,10,0,0,0,6,6,8,8,10,10,0,0,0,7,7,9,9,10,10,0,0,0,7,7,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,8,10,10,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,8,8,10,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,10,0,11,11,12,12,0,11,10,12,12,0,13,14,14,14,0,0,0,14,13,8,9,9,10,11,0,11,11,12,12,0,10,11,12,12,0,13,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,11,11,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,11,8,10,9,12,12,0,10,10,12,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,8,9,10,12,12,0,10,10,12,12,0,10,10,11,12,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,10,5,8,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,10,11,9,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,12,13,13,13,0,0,0,13,12,9,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,13,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,14,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,14,0,9,9,12,13,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,11,10,13,12,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,9,11,11,13,14,0,10,11,12,13,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,10,11,13,13,0,11,10,13,13,0,12,12,13,13,0,0,0,13,12,9,11,11,14,14,0,11,10,13,13,0,10,11,13,13,0,12,12,14,13,0,0,0,13,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,5,5,0,5,5,5,8,7,0,9,9,0,9,8,5,7,8,0,9,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,11,12,14,15,15,17,17,18,18,5,6,6,8,9,10,13,17,18,19,7,5,4,6,8,9,11,15,19,19,8,6,5,5,6,7,11,14,16,17,9,7,7,6,7,7,10,13,15,19,10,8,7,6,7,6,7,9,14,16,12,10,9,7,7,6,4,5,10,15,14,13,11,7,6,6,4,2,7,13,16,16,15,9,8,8,8,6,9,13,19,19,17,12,11,10,10,9,11,14,0,0,0,0,2,0,0,0,100,0,0,0,176,118,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,101,3,0,0,0,0,0,0,0,0,0,0,0,0,0,184,101,3,0,0,0,0,0,0,0,0,0,0,0,0,0,224,101,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,102,3,0,0,0,0,0,48,102,3,0,88,102,3,0,0,0,0,0,0,0,0,0,128,102,3,0,168,102,3,0,0,0,0,0,0,0,0,0,208,102,3,0,248,102,3,0,0,0,0,0,0,0,0,0,32,103,3,0,72,103,3,0,0,0,0,0,0,0,0,0,112,103,3,0,152,103,3,0,192,103,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,40,101,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,11,13,14,14,13,13,16,14,6,3,4,7,9,9,10,11,14,13,10,4,3,5,7,7,9,10,13,15,12,7,4,4,6,6,8,10,13,15,12,8,6,6,6,6,8,10,13,14,11,9,7,6,6,6,7,8,12,11,13,10,9,8,7,6,6,7,11,11,13,11,10,9,9,7,7,6,10,11,13,13,13,13,13,11,9,8,10,12,12,15,15,16,15,12,11,10,10,12,0,0,0,0,4,0,0,0,81,0,0,0,72,118,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,160,118,3,0,0,0,0,0,4,0,0,0,113,2,0,0,184,115,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,118,3,0,0,0,0,0,2,0,0,0,81,0,0,0,56,115,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,115,3,0,0,0,0,0,2,0,0,0,33,1,0,0,200,113,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,114,3,0,0,0,0,0,4,0,0,0,81,0,0,0,96,113,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,184,113,3,0,0,0,0,0,2,0,0,0,121,0,0,0,176,112,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,48,113,3,0,0,0,0,0,2,0,0,0,169,0,0,0,200,111,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,120,112,3,0,0,0,0,0,2,0,0,0,25,0,0,0,144,111,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,111,3,0,0,0,0,0,2,0,0,0,169,0,0,0,168,110,3,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,88,111,3,0,0,0,0,0,2,0,0,0,121,0,0,0,248,109,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,120,110,3,0,0,0,0,0,2,0,0,0,225,0,0,0,208,108,3,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,184,109,3,0,0,0,0,0,2,0,0,0,185,1,0,0,184,106,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,120,108,3,0,0,0,0,0,2,0,0,0,169,0,0,0,208,105,3,0,1,0,0,0,0,220,125,225,0,232,51,97,4,0,0,0,0,0,0,0,128,106,3,0,0,0,0,0,2,0,0,0,169,0,0,0,232,104,3,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,152,105,3,0,0,0,0,0,1,0,0,0,49,0,0,0,232,103,3,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,32,104,3,0,0,0,0,0,2,4,3,4,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,7,7,7,6,8,8,8,8,6,6,6,8,8,8,8,8,7,9,8,10,10,5,6,6,8,8,9,9,8,8,10,10,10,10,16,9,9,9,9,9,9,9,8,10,9,11,11,16,8,9,9,9,9,9,9,9,10,10,11,11,16,13,13,9,9,10,9,9,10,11,11,11,12,16,13,14,9,8,10,8,9,9,10,10,12,11,16,14,16,9,9,9,9,11,11,12,11,12,11,16,16,16,9,7,9,6,11,11,11,10,11,11,16,16,16,11,12,9,10,11,11,12,11,13,13,16,16,16,12,11,10,7,12,10,12,12,12,12,16,16,15,16,16,10,11,10,11,13,13,14,12,16,16,16,15,15,12,10,11,11,13,11,12,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,5,8,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,5,6,6,7,7,7,7,8,7,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,8,8,9,8,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,11,8,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,11,11,11,11,11,9,9,9,9,9,9,10,9,9,10,9,10,9,9,10,9,11,11,11,11,11,9,9,9,9,9,9,9,10,10,10,10,9,10,10,9,10,11,11,11,11,11,9,9,9,9,10,10,10,9,10,10,10,10,9,10,10,9,11,11,11,11,11,11,11,9,9,9,9,10,10,10,10,9,10,10,10,10,10,11,11,11,11,11,11,11,10,9,10,10,10,10,10,10,10,9,10,9,10,10,11,11,11,11,11,11,11,10,9,10,9,10,10,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,9,10,10,10,10,10,9,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,9,10,10,11,11,11,11,11,11,11,11,11,10,10,10,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,10,11,9,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,7,8,8,7,7,8,7,9,8,10,9,6,5,5,8,8,9,9,8,8,9,9,11,10,11,10,6,5,5,8,8,9,9,8,8,9,9,10,10,11,11,18,8,8,9,8,10,10,9,9,10,10,10,10,11,10,18,8,8,9,9,10,10,9,9,10,10,11,11,12,12,18,12,13,9,10,10,10,9,10,10,10,11,11,12,11,18,13,13,9,9,10,10,10,10,10,10,11,11,12,12,18,18,18,10,10,9,9,11,11,11,11,11,12,12,12,18,18,18,10,9,10,9,11,10,11,11,11,11,13,12,18,18,18,14,13,10,10,11,11,12,12,12,12,12,12,18,18,18,14,13,10,10,11,10,12,12,12,12,12,12,18,18,18,18,18,12,12,11,11,12,12,13,13,13,14,18,18,18,18,18,12,12,11,11,12,11,13,13,14,13,18,18,18,18,18,16,16,11,12,12,13,13,13,14,13,18,18,18,18,18,16,15,12,11,12,11,13,11,15,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,3,5,5,6,6,7,7,7,7,7,7,9,5,5,6,6,7,7,7,7,8,7,8,5,5,6,6,7,7,7,7,7,7,9,6,6,7,7,7,7,8,7,7,8,9,9,9,7,7,7,7,7,7,7,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,7,7,8,8,9,9,9,8,8,8,8,7,7,8,8,9,9,9,9,8,8,8,7,7,8,8,9,9,9,8,8,8,8,7,7,8,8,9,9,9,8,8,7,7,7,7,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,8,8,8,8,10,10,11,10,6,5,5,7,7,8,8,9,9,10,10,12,11,6,5,5,7,7,8,8,9,9,10,10,12,11,21,7,7,7,7,9,9,10,10,11,11,12,12,21,7,7,7,7,9,9,10,10,11,11,12,12,21,12,12,9,9,10,10,11,11,11,11,12,12,21,12,12,9,9,10,10,11,11,12,12,12,12,21,21,21,11,11,10,10,11,12,12,12,13,13,21,21,21,11,11,10,10,12,12,12,12,13,13,21,21,21,15,15,11,11,12,12,13,13,13,13,21,21,21,15,16,11,11,12,12,13,13,14,14,21,21,21,21,20,13,13,13,13,13,13,14,14,20,20,20,20,20,13,13,13,13,13,13,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,8,8,8,10,9,10,10,6,5,5,7,7,9,9,9,9,10,10,11,11,6,5,5,7,7,9,9,10,9,11,10,11,11,0,6,6,7,7,9,9,10,10,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,11,11,8,8,10,10,11,11,12,12,12,12,0,11,12,9,8,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,3,5,4,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,8,8,11,6,6,6,6,8,8,8,8,9,9,11,11,11,6,6,7,8,8,8,8,9,11,11,11,7,7,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,8,8,11,11,11,8,8,8,8,8,8,8,8,11,11,11,10,10,8,8,8,8,8,8,11,11,11,10,10,8,8,8,8,8,8,11,11,11,10,10,7,7,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,6,9,9,10,10,10,9,4,6,6,9,10,9,10,9,10,6,9,9,10,12,11,10,11,11,7,10,9,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,11,12,12,7,9,10,11,12,12,12,12,12,7,10,9,12,12,12,12,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,9,9,9,10,10,10,0,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,3,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,10,0,4,4,6,6,7,7,10,9,0,5,5,7,7,8,8,10,10,0,0,0,7,6,8,8,10,10,0,0,0,7,7,9,9,11,11,0,0,0,7,7,9,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,8,10,10,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,8,8,10,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,11,0,11,11,12,12,0,11,10,12,12,0,13,14,14,14,0,0,0,14,13,8,9,9,11,11,0,11,11,12,12,0,10,11,12,12,0,14,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,11,11,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,11,8,10,9,12,12,0,10,10,12,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,8,9,10,12,12,0,10,10,11,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,10,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,11,11,0,0,0,10,11,8,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,12,13,13,13,0,0,0,14,13,8,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,13,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,14,13,0,9,9,13,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,14,0,9,9,12,13,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,11,10,14,13,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,9,11,11,13,14,0,10,11,13,14,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,11,11,13,13,0,11,10,13,13,0,12,12,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+216580);
/* memory initializer */ allocate([13,13,9,11,11,14,14,0,11,11,13,13,0,10,11,13,13,0,12,12,14,13,0,0,0,13,13,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,5,5,0,5,5,5,8,7,0,9,9,0,9,8,5,7,8,0,9,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,9,9,0,8,8,0,8,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,9,11,11,13,14,19,17,17,19,5,4,5,8,10,10,13,16,18,19,7,4,4,5,8,9,12,14,17,19,8,6,5,5,7,7,10,13,16,18,10,8,7,6,5,5,8,11,17,19,11,9,7,7,5,4,5,8,17,19,13,11,8,7,7,5,5,7,16,18,14,13,8,6,6,5,5,7,16,18,18,16,10,8,8,7,7,9,16,18,18,18,12,10,10,9,9,10,17,18,0,0,0,0,2,0,0,0,100,0,0,0,200,162,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,184,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,224,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,8,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,48,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,88,121,3,0,0,0,0,0,128,121,3,0,168,121,3,0,0,0,0,0,0,0,0,0,208,121,3,0,248,121,3,0,0,0,0,0,0,0,0,0,32,122,3,0,72,122,3,0,112,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,40,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,9,13,10,12,12,12,12,12,6,4,6,8,6,8,10,10,11,12,8,5,4,10,4,7,8,9,10,11,13,8,10,8,9,9,11,12,13,14,10,6,4,9,3,5,6,8,10,11,11,8,6,9,5,5,6,7,9,11,12,9,7,11,6,6,6,7,8,10,12,11,9,12,7,7,6,6,7,9,13,12,10,13,9,8,7,7,7,8,11,15,11,15,11,10,9,8,7,7,0,0,0,0,8,0,0,0,161,25,0,0,16,137,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,162,3,0,0,0,0,0,4,0,0,0,113,2,0,0,128,134,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,136,3,0,0,0,0,0,4,0,0,0,113,2,0,0,240,131,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,134,3,0,0,0,0,0,2,0,0,0,81,0,0,0,112,131,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,200,131,3,0,0,0,0,0,2,0,0,0,81,0,0,0,240,130,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,72,131,3,0,0,0,0,0,2,0,0,0,33,1,0,0,128,129,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,168,130,3,0,0,0,0,0,4,0,0,0,81,0,0,0,24,129,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,112,129,3,0,0,0,0,0,2,0,0,0,121,0,0,0,104,128,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,232,128,3,0,0,0,0,0,2,0,0,0,169,0,0,0,128,127,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,48,128,3,0,0,0,0,0,2,0,0,0,25,0,0,0,72,127,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,127,3,0,0,0,0,0,2,0,0,0,225,0,0,0,32,126,3,0,1,0,0,0,0,134,115,225,0,80,22,97,4,0,0,0,0,0,0,0,8,127,3,0,0,0,0,0,2,0,0,0,33,1,0,0,176,124,3,0,1,0,0,0,0,0,245,224,0,0,149,96,5,0,0,0,0,0,0,0,216,125,3,0,0,0,0,0,2,0,0,0,185,1,0,0,152,122,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,88,124,3,0,0,0,0,0,3,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,11,5,6,7,7,8,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,5,5,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,10,9,10,11,11,11,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,5,5,7,7,9,8,10,9,10,10,11,10,11,11,6,5,5,7,7,8,9,10,10,11,10,12,11,12,11,13,12,6,5,5,7,7,9,9,10,10,11,11,12,12,13,12,13,13,18,8,8,8,8,9,9,10,11,11,11,12,11,13,11,13,12,18,8,8,8,8,10,10,11,11,12,12,13,13,13,13,13,14,18,12,12,9,9,11,11,11,11,12,12,13,12,13,12,13,13,20,13,12,9,9,11,11,11,11,12,12,13,13,13,14,14,13,20,18,19,11,12,11,11,12,12,13,13,13,13,13,13,14,13,18,19,19,12,11,11,11,12,12,13,12,13,13,13,14,14,13,18,17,19,14,15,12,12,12,13,13,13,14,14,14,14,14,14,19,19,19,16,15,12,11,13,12,14,14,14,13,13,14,14,14,19,18,19,18,19,13,13,13,13,14,14,14,13,14,14,14,14,18,17,19,19,19,13,13,13,11,13,11,13,14,14,14,14,14,19,17,17,18,18,16,16,13,13,13,13,14,13,15,15,14,14,19,19,17,17,18,16,16,13,11,14,10,13,12,14,14,14,14,19,19,19,19,19,18,17,13,14,13,11,14,13,14,14,15,15,19,19,19,17,19,18,18,14,13,12,11,14,11,15,15,15,15,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,13,13,13,13,13,13,13,13,13,13,13,13,4,7,7,13,13,13,13,13,13,13,13,13,13,13,13,3,8,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,2,4,4,5,5,6,5,5,5,5,6,4,5,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,9,10,10,10,10,7,5,5,7,7,8,8,9,9,10,10,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,10,10,11,11,0,13,13,9,9,9,9,10,10,11,11,11,11,0,0,0,10,10,10,10,10,10,11,11,11,11,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,0,0,12,12,12,12,12,12,13,13,0,0,0,0,0,12,12,12,12,12,12,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,9,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,11,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,12,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,8,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,9,10,10,10,11,11,12,12,12,12,0,0,0,0,0,10,10,10,10,11,11,11,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,12,12,12,12,13,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,4,3,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,6,6,7,7,7,7,9,9,0,0,0,7,6,7,7,9,9,0,0,0,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,3,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,5,5,0,0,0,5,5,0,0,0,8,7,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,7,0,0,0,10,10,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,7,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,5,7,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,5,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,10,0,0,0,10,10,0,0,0,9,10,0,0,0,11,10,0,0,0,0,0,0,0,8,10,10,0,0,0,10,10,0,0,0,10,10,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,4,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,11,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+226822);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,8,10,14,11,11,12,16,15,17,5,5,7,9,7,8,10,13,17,17,7,5,5,10,5,7,8,11,13,15,10,8,10,8,8,8,11,15,18,18,8,5,5,8,3,4,6,10,14,16,9,7,6,7,4,3,5,9,14,18,10,9,8,10,6,5,6,9,14,18,12,12,11,12,8,7,8,11,14,18,14,13,12,10,7,5,6,9,14,18,14,14,13,10,6,5,6,8,11,16,0,0,0,0,2,0,0,0,100,0,0,0,88,206,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,208,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,248,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,32,165,3,0,0,0,0,0,0,0,0,0,0,0,0,0,72,165,3,0,0,0,0,0,0,0,0,0,0,0,0,0,112,165,3,0,0,0,0,0,152,165,3,0,192,165,3,0,0,0,0,0,0,0,0,0,232,165,3,0,16,166,3,0,0,0,0,0,0,0,0,0,56,166,3,0,96,166,3,0,136,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,64,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,11,11,11,11,10,11,12,11,5,2,11,5,6,6,7,9,11,12,11,9,6,10,6,7,8,9,10,11,11,5,11,7,8,8,9,11,13,14,11,6,5,8,4,5,7,8,10,11,10,6,7,7,5,5,6,8,9,11,10,7,8,9,6,6,6,7,8,9,11,9,9,11,7,7,6,6,7,9,12,12,10,13,9,8,7,7,7,8,11,13,11,14,11,10,9,8,7,7,0,0,0,0,8,0,0,0,161,25,0,0,160,180,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,72,206,3,0,0,0,0,0,4,0,0,0,113,2,0,0,16,178,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,180,3,0,0,0,0,0,4,0,0,0,113,2,0,0,128,175,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,177,3,0,0,0,0,0,2,0,0,0,81,0,0,0,0,175,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,88,175,3,0,0,0,0,0,2,0,0,0,81,0,0,0,128,174,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,216,174,3,0,0,0,0,0,2,0,0,0,33,1,0,0,16,173,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,56,174,3,0,0,0,0,0,4,0,0,0,81,0,0,0,168,172,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,0,173,3,0,0,0,0,0,2,0,0,0,121,0,0,0,248,171,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,120,172,3,0,0,0,0,0,2,0,0,0,169,0,0,0,16,171,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,192,171,3,0,0,0,0,0,2,0,0,0,25,0,0,0,216,170,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,170,3,0,0,0,0,0,2,0,0,0,169,0,0,0,240,169,3,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,160,170,3,0,0,0,0,0,2,0,0,0,225,0,0,0,200,168,3,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,176,169,3,0,0,0,0,0,2,0,0,0,185,1,0,0,176,166,3,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,112,168,3,0,0,0,0,0,2,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,11,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,11,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,9,10,10,10,10,11,7,7,7,7,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,12,11,11,7,7,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,12,11,12,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,12,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,11,11,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,12,11,11,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,12,12,12,11,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,12,11,12,12,12,12,12,11,12,11,11,10,10,10,10,10,10,10,10,10,10,12,12,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,5,5,7,7,9,8,10,9,10,10,10,10,6,5,5,7,7,9,8,10,9,11,10,12,12,13,13,6,5,5,7,7,9,9,10,10,11,11,12,12,12,13,19,8,8,8,8,9,9,10,10,12,11,12,12,13,13,19,8,8,8,8,9,9,11,11,12,12,13,13,13,13,19,12,12,9,9,11,11,11,11,12,11,13,12,13,13,18,12,12,9,9,11,10,11,11,12,12,12,13,13,14,19,18,18,11,11,11,11,12,12,13,12,13,13,14,14,16,18,18,11,11,11,10,12,11,13,13,13,13,13,14,17,18,18,14,15,11,12,12,13,13,13,13,14,14,14,18,18,18,15,15,12,10,13,10,13,13,13,13,13,14,18,17,18,17,18,12,13,12,13,13,13,14,14,16,14,18,17,18,18,17,13,12,13,10,12,12,14,14,14,14,17,18,18,18,18,14,15,12,12,13,12,14,14,15,15,18,18,18,17,18,15,14,12,11,12,12,14,14,14,15,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,3,3,12,12,12,12,12,12,12,12,12,12,4,7,7,12,12,12,12,12,12,12,12,12,12,3,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,5,5,6,5,5,5,5,6,5,4,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,9,10,10,10,10,11,11,0,13,13,9,9,10,9,10,10,11,11,11,12,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,12,13,0,0,0,0,0,12,12,12,12,12,12,13,13,0,0,0,0,0,13,12,12,12,12,12,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,9,8,10,10,10,10,10,8,8,8,8,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,11,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,12,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,4,4,6,6,8,8,9,9,8,8,9,9,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,4,4,7,6,8,8,9,9,9,9,10,10,11,11,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,9,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,9,9,10,10,11,11,11,12,12,12,0,0,0,0,0,10,10,10,10,11,11,11,11,12,12,13,12,0,0,0,0,0,0,0,10,10,11,11,11,11,12,12,12,12,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,12,12,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,12,13,13,13,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,3,3,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,5,6,6,7,7,9,9,0,6,6,7,7,8,8,10,10,0,0,0,7,7,8,8,10,9,0,0,0,9,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,0,0,0,5,5,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,8,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+238256);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,14,10,15,10,12,15,16,15,4,2,11,5,10,6,8,11,14,14,14,10,7,11,6,8,10,11,13,15,9,4,11,5,9,6,9,12,14,15,14,9,6,9,4,5,7,10,12,13,9,5,7,6,5,5,7,10,13,13,10,8,9,8,7,6,8,10,14,14,13,11,10,10,7,7,8,11,14,15,13,12,9,9,6,5,7,10,14,17,15,13,11,10,6,6,7,9,12,17,0,0,0,0,2,0,0,0,100,0,0,0,64,249,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,96,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,136,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,176,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,216,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,3,0,0,0,0,0,40,209,3,0,80,209,3,0,0,0,0,0,0,0,0,0,120,209,3,0,160,209,3,0,0,0,0,0,0,0,0,0,200,209,3,0,240,209,3,0,24,210,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,208,207,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,11,11,11,11,10,10,12,11,5,2,11,5,6,6,7,9,11,13,13,10,7,11,6,7,8,9,10,12,11,5,11,6,8,7,9,11,14,15,11,6,6,8,4,5,7,8,10,13,10,5,7,7,5,5,6,8,10,11,10,7,7,8,6,5,5,7,9,9,11,8,8,11,8,7,6,6,7,9,12,11,10,13,9,9,7,7,7,9,11,13,12,15,12,11,9,8,8,8,0,0,0,0,8,0,0,0,161,25,0,0,136,223,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,249,3,0,0,0,0,0,4,0,0,0,113,2,0,0,248,220,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,112,223,3,0,0,0,0,0,4,0,0,0,113,2,0,0,104,218,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,220,3,0,0,0,0,0,2,0,0,0,81,0,0,0,232,217,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,64,218,3,0,0,0,0,0,2,0,0,0,81,0,0,0,104,217,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,192,217,3,0,0,0,0,0,2,0,0,0,33,1,0,0,248,215,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,32,217,3,0,0,0,0,0,4,0,0,0,81,0,0,0,144,215,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,232,215,3,0,0,0,0,0,2,0,0,0,121,0,0,0,224,214,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,96,215,3,0,0,0,0,0,2,0,0,0,169,0,0,0,248,213,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,168,214,3,0,0,0,0,0,2,0,0,0,25,0,0,0,192,213,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,213,3,0,0,0,0,0,2,0,0,0,169,0,0,0,216,212,3,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,136,213,3,0,0,0,0,0,2,0,0,0,225,0,0,0,176,211,3,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,152,212,3,0,0,0,0,0,2,0,0,0,33,1,0,0,64,210,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,104,211,3,0,0,0,0,0,2,5,5,6,6,7,7,7,7,7,7,8,8,8,8,8,8,10,6,6,7,7,8,7,8,8,8,8,8,9,9,9,9,9,10,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,8,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,11,11,11,9,9,9,9,9,9,10,10,9,9,10,9,11,10,11,11,11,9,9,9,9,9,9,9,9,10,10,10,9,11,11,11,11,11,9,9,9,9,10,10,9,9,9,9,10,9,11,11,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,10,9,10,10,9,10,9,9,10,9,11,10,10,11,11,11,11,9,10,9,9,9,9,10,10,10,10,11,11,11,11,11,11,10,10,10,9,9,10,9,10,9,10,10,10,10,11,11,11,11,11,11,11,9,9,9,9,9,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,7,9,9,10,10,10,10,6,5,5,7,7,8,8,10,8,11,10,12,12,13,13,6,5,5,7,7,8,8,10,9,11,11,12,12,13,12,18,8,8,8,8,9,9,10,9,11,10,12,12,13,13,18,8,8,8,8,9,9,10,10,11,11,13,12,14,13,18,11,11,9,9,10,10,11,11,11,12,13,12,13,14,18,11,11,9,8,11,10,11,11,11,11,12,12,14,13,18,18,18,10,11,10,11,12,12,12,12,13,12,14,13,18,18,18,10,11,11,9,12,11,12,12,12,13,13,13,18,18,17,14,14,11,11,12,12,13,12,14,12,14,13,18,18,18,14,14,11,10,12,9,12,13,13,13,13,13,18,18,17,16,18,13,13,12,12,13,11,14,12,14,14,17,18,18,17,18,13,12,13,10,12,11,14,14,14,14,17,18,18,18,18,15,16,12,12,13,10,14,12,14,15,18,18,18,16,17,16,14,12,11,13,10,13,13,14,15,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,4,4,12,12,12,12,12,12,12,12,12,12,4,9,8,12,12,12,12,12,12,12,12,12,12,2,9,7,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,5,5,6,5,5,5,5,6,4,5,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,9,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,12,0,13,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,13,13,0,0,0,14,14,11,11,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,14,13,0,0,0,0,0,13,13,12,12,13,12,14,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,7,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,9,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,11,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,6,6,7,7,8,8,8,8,9,9,10,10,11,10,0,5,5,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,5,5,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,10,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,8,8,9,9,10,10,11,11,12,11,12,12,0,0,0,0,0,9,10,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,4,6,6,7,7,9,9,0,5,5,7,7,7,8,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,0,0,0,5,5,0,0,0,5,5,0,0,0,7,8,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+249408);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,10,9,13,11,14,10,12,13,13,14,7,2,12,5,10,5,7,10,12,14,12,6,9,8,7,7,9,11,13,16,10,4,12,5,10,6,8,12,14,16,12,6,8,7,6,5,7,11,12,16,10,4,8,5,6,4,6,9,13,16,10,6,10,7,7,6,7,9,13,15,12,9,11,9,8,6,7,10,12,14,14,11,10,9,6,5,6,9,11,13,15,13,11,10,6,5,6,8,9,11,0,0,0,0,2,0,0,0,100,0,0,0,232,35,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,72,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,112,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,152,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,192,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,232,251,3,0,0,0,0,0,16,252,3,0,56,252,3,0,0,0,0,0,0,0,0,0,96,252,3,0,136,252,3,0,0,0,0,0,0,0,0,0,176,252,3,0,216,252,3,0,0,253,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,184,250,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,12,10,10,10,9,10,12,12,6,1,10,5,6,6,7,9,11,14,12,9,8,11,7,8,9,11,13,15,10,5,12,7,8,7,9,12,14,15,10,6,7,8,5,6,7,9,12,14,9,6,8,7,6,6,7,9,12,12,9,7,9,9,7,6,6,7,10,10,10,9,10,11,8,7,6,6,8,10,12,11,13,13,11,10,8,8,8,10,11,13,15,15,14,13,10,8,8,9,0,0,0,0,8,0,0,0,161,25,0,0,48,10,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,216,35,4,0,0,0,0,0,4,0,0,0,113,2,0,0,160,7,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,24,10,4,0,0,0,0,0,4,0,0,0,113,2,0,0,16,5,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,7,4,0,0,0,0,0,2,0,0,0,81,0,0,0,144,4,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,232,4,4,0,0,0,0,0,2,0,0,0,81,0,0,0,16,4,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,4,4,0,0,0,0,0,2,0,0,0,33,1,0,0,160,2,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,200,3,4,0,0,0,0,0,4,0,0,0,81,0,0,0,56,2,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,144,2,4,0,0,0,0,0,2,0,0,0,121,0,0,0,136,1,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,8,2,4,0,0,0,0,0,2,0,0,0,169,0,0,0,160,0,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,80,1,4,0,0,0,0,0,2,0,0,0,25,0,0,0,104,0,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,0,4,0,0,0,0,0,2,0,0,0,169,0,0,0,128,255,3,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,48,0,4,0,0,0,0,0,2,0,0,0,169,0,0,0,152,254,3,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,72,255,3,0,0,0,0,0,2,0,0,0,33,1,0,0,40,253,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,80,254,3,0,0,0,0,0,2,4,4,6,6,7,7,7,7,7,7,8,8,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,7,8,8,8,8,9,9,9,9,9,9,9,9,10,11,11,8,8,8,8,9,9,9,9,9,9,10,9,9,9,10,11,10,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,11,10,8,8,9,9,9,9,9,9,10,9,9,10,9,10,11,10,11,11,11,8,8,9,9,9,9,9,9,9,9,10,10,11,11,11,11,11,9,9,9,9,9,9,10,9,9,9,10,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,10,9,10,11,11,11,11,11,9,9,9,9,10,10,9,9,9,10,10,10,11,11,11,11,11,11,11,9,9,9,10,9,9,10,10,10,10,11,11,10,11,11,11,11,10,9,10,10,9,9,9,9,10,10,11,10,11,11,11,11,11,9,9,9,9,10,9,10,10,10,10,11,10,11,11,11,11,11,10,10,9,9,10,9,10,10,10,10,10,10,10,11,11,11,11,11,11,9,9,10,9,10,9,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,6,8,8,10,9,10,10,6,5,5,7,7,8,7,10,9,11,11,12,13,6,5,5,7,7,8,8,10,10,11,11,13,13,18,8,8,8,8,9,9,10,10,12,12,12,13,18,8,8,8,8,9,9,10,10,12,12,13,13,18,11,11,8,8,10,10,11,11,12,11,13,12,18,11,11,9,7,10,10,11,11,11,12,12,13,17,17,17,10,10,11,11,12,12,12,10,12,12,17,17,17,11,10,11,10,13,12,11,12,12,12,17,17,17,15,14,11,11,12,11,13,10,13,12,17,17,17,14,14,12,10,11,11,13,13,13,13,17,17,16,17,16,13,13,12,10,13,10,14,13,17,16,17,16,17,13,12,12,10,13,11,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,5,4,12,12,12,12,12,12,12,12,12,12,4,9,8,11,11,11,11,11,11,11,11,11,11,2,8,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,5,4,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,6,5,5,7,7,8,8,8,8,9,9,10,10,7,6,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,10,11,11,11,12,12,13,13,0,0,0,14,14,11,10,11,11,13,12,13,13,0,0,0,0,0,12,12,11,12,13,12,14,14,0,0,0,0,0,12,12,12,12,13,12,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,4,6,6,7,7,7,7,7,7,9,7,7,6,6,7,7,8,8,8,8,9,6,6,6,6,7,7,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,10,9,9,7,10,10,11,10,11,11,10,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,12,11,11,6,9,9,11,10,10,11,11,10,6,9,9,11,10,10,12,10,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,3,6,6,8,8,9,9,9,9,9,9,10,10,11,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,8,8,7,7,9,9,10,10,9,9,10,10,11,11,12,12,0,0,0,7,7,9,9,10,10,10,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,13,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,6,7,7,9,9,0,7,7,7,7,7,7,9,9,0,7,7,7,7,7,7,9,9,0,8,8,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,3,6,6,0,0,0,0,0,6,6,6,6,0,0,0,0,0,6,6,6,6,0,0,0,0,0,7,7,6,6,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,0,0,0,7,7,0,0,0,7,7,0,0,0,8,8,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,11,11,0,0,0,11,11,0,0,0,12,11,0,0,0,0,0,0,0,7,8,8,0,0,0,10,11,0,0,0,11,11,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,11,11,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,6,8,8,0,0,0,10,11,0,0,0,10,11,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,0,0,0,11,12,0,0,0,11,12,0,0,0,12,11,0,0,0,0,0,0,0,8,10,9,0,0,0,12,11,0,0,0,12,11,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+260392);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,11,9,13,12,12,11,12,12,13,15,8,2,11,4,8,5,7,10,12,15,13,7,10,9,8,8,10,13,17,17,11,4,12,5,9,5,8,11,14,16,12,6,8,7,6,6,8,11,13,16,11,4,9,5,6,4,6,10,13,16,11,6,11,7,7,6,7,10,13,15,13,9,12,9,8,6,8,10,12,14,14,10,10,8,6,5,6,9,11,13,15,11,11,9,6,5,6,8,9,12,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,9,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+271312);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,3,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,176,126,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,88,126,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,88,4,0,0,0,0,0,0,0,0,0,0,0,0,0,112,88,4,0,0,0,0,0,0,0,0,0,0,0,0,0,152,88,4,0,0,0,0,0,0,0,0,0,0,0,0,0,192,88,4,0,0,0,0,0,0,0,0,0,0,0,0,0,232,88,4,0,0,0,0,0,16,89,4,0,56,89,4,0,0,0,0,0,0,0,0,0,96,89,4,0,136,89,4,0,0,0,0,0,0,0,0,0,176,89,4,0,216,89,4,0,0,90,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,50,4,0,0,0,0,0,0,0,0,0,0,0,0,0,96,50,4,0,0,0,0,0,0,0,0,0,0,0,0,0,136,50,4,0,0,0,0,0,0,0,0,0,0,0,0,0,176,50,4,0,0,0,0,0,0,0,0,0,0,0,0,0,216,50,4,0,0,0,0,0,0,51,4,0,40,51,4,0,0,0,0,0,0,0,0,0,80,51,4,0,120,51,4,0,0,0,0,0,0,0,0,0,160,51,4,0,200,51,4,0,240,51,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,224,49,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,136,49,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,8,10,9,9,10,11,12,4,2,5,6,6,8,10,11,13,8,4,6,8,7,9,12,12,14,10,6,8,4,5,6,9,11,12,9,5,6,5,5,6,9,11,11,9,7,9,6,5,5,7,10,10,10,9,11,8,7,6,7,9,11,11,12,13,10,10,9,8,9,11,11,15,15,12,13,11,9,10,11,0,0,0,0,0,0,0,5,5,9,10,9,9,10,11,12,5,1,5,6,6,7,10,12,14,9,5,6,8,8,10,12,14,14,10,5,8,5,6,8,11,13,14,9,5,7,6,6,8,10,12,11,9,7,9,7,6,6,7,10,10,10,9,12,9,8,7,7,10,12,11,11,13,12,10,9,8,9,11,11,14,15,15,13,11,9,9,11,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,144,62,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,56,88,4,0,0,0,0,0,4,0,0,0,113,2,0,0,0,60,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,62,4,0,0,0,0,0,2,0,0,0,81,0,0,0,128,59,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,216,59,4,0,0,0,0,0,2,0,0,0,81,0,0,0,0,59,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,88,59,4,0,0,0,0,0,2,0,0,0,33,1,0,0,144,57,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,184,58,4,0,0,0,0,0,4,0,0,0,81,0,0,0,40,57,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,128,57,4,0,0,0,0,0,2,0,0,0,121,0,0,0,120,56,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,56,4,0,0,0,0,0,2,0,0,0,169,0,0,0,144,55,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,64,56,4,0,0,0,0,0,2,0,0,0,25,0,0,0,88,55,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,55,4,0,0,0,0,0,2,0,0,0,169,0,0,0,112,54,4,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,32,55,4,0,0,0,0,0,2,0,0,0,169,0,0,0,136,53,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,56,54,4,0,0,0,0,0,2,0,0,0,33,1,0,0,24,52,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,64,53,4,0,0,0,0,0,2,5,5,6,6,7,6,7,7,8,8,8,8,8,8,8,8,10,6,6,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,11,11,8,8,8,8,9,9,9,9,9,9,10,10,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,10,10,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,11,11,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,10,9,11,11,11,11,11,9,8,9,9,9,9,9,9,9,10,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,9,11,11,11,11,11,11,11,9,9,10,9,9,9,9,10,9,10,10,11,10,11,11,11,11,9,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,11,11,10,10,9,9,9,9,9,9,10,9,10,11,10,11,11,11,11,11,11,9,9,10,9,9,9,9,9,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,7,9,9,10,11,12,12,6,5,5,7,7,8,7,10,10,11,11,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,16,7,7,8,8,9,9,11,11,12,12,13,13,17,7,7,8,7,9,9,11,10,12,12,13,13,19,11,10,8,8,10,10,11,11,12,12,13,13,19,11,11,9,7,11,10,11,11,12,12,13,12,19,19,19,10,10,10,10,11,12,12,12,13,14,18,19,19,11,9,11,9,13,12,12,12,13,13,19,20,19,13,15,11,11,12,12,13,13,14,13,18,19,20,15,13,12,10,13,10,13,13,13,14,20,20,20,20,20,13,14,12,12,13,12,13,13,20,20,20,20,20,13,12,12,12,14,12,14,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,13,13,13,13,13,13,13,13,13,13,3,6,6,13,13,13,13,13,13,13,13,13,13,4,8,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,4,5,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,5,6,7,7,8,8,8,8,9,9,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,12,12,0,0,0,9,10,9,10,11,11,12,11,13,12,0,0,0,10,10,9,9,11,11,12,12,13,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,12,13,14,13,0,0,0,0,0,12,12,11,11,13,12,14,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,10,11,11,11,10,10,6,9,9,11,11,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,11,11,11,11,11,11,11,6,9,9,11,10,10,11,11,10,6,9,9,10,10,10,11,10,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,5,5,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,5,5,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,10,10,10,11,11,11,12,12,0,0,0,8,8,8,8,9,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,6,7,7,9,9,0,6,6,7,7,8,8,9,9,0,6,6,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,8,8,9,9,11,11,0,0,0,9,9,9,9,11,11,0,0,0,10,10,10,10,11,11,0,0,0,0,0,9,9,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,3,7,7,0,0,0,0,0,5,5,6,6,0,0,0,0,0,5,5,7,7,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+273764);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,160,100,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,72,126,4,0,0,0,0,0,4,0,0,0,113,2,0,0,16,98,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,100,4,0,0,0,0,0,2,0,0,0,81,0,0,0,144,97,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,232,97,4,0,0,0,0,0,2,0,0,0,81,0,0,0,16,97,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,97,4,0,0,0,0,0,2,0,0,0,33,1,0,0,160,95,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,200,96,4,0,0,0,0,0,4,0,0,0,81,0,0,0,56,95,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,144,95,4,0,0,0,0,0,2,0,0,0,121,0,0,0,136,94,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,8,95,4,0,0,0,0,0,2,0,0,0,169,0,0,0,160,93,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,80,94,4,0,0,0,0,0,2,0,0,0,25,0,0,0,104,93,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,93,4,0,0,0,0,0,2,0,0,0,169,0,0,0,128,92,4,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,48,93,4,0,0,0,0,0,2,0,0,0,169,0,0,0,152,91,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,72,92,4,0,0,0,0,0,2,0,0,0,33,1,0,0,40,90,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,80,91,4,0,0,0,0,0,2,4,4,6,6,6,6,7,7,8,8,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,9,9,9,9,9,9,10,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,11,11,8,8,8,8,9,9,9,9,9,9,10,9,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,11,11,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,11,11,11,8,8,9,9,9,9,10,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,10,11,11,9,9,9,9,9,9,9,9,9,10,10,10,10,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,9,10,10,11,11,11,11,11,9,9,9,10,9,9,9,9,9,9,10,11,11,11,11,11,11,10,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,9,9,9,9,10,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,10,9,11,11,10,11,11,11,11,10,11,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,5,7,7,9,9,10,10,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,15,7,7,8,8,9,9,11,11,12,12,13,12,15,8,8,8,7,9,9,10,10,12,12,13,13,16,11,10,8,8,10,10,11,11,12,12,13,13,16,11,11,9,8,11,10,11,11,12,12,13,12,16,16,16,10,11,10,11,12,12,12,12,13,13,16,16,16,11,9,11,9,14,12,12,12,13,13,16,16,16,12,14,11,12,12,12,13,13,14,13,16,16,16,15,13,12,10,13,10,13,14,13,13,16,16,16,16,16,13,14,12,13,13,12,13,13,16,16,16,16,16,13,12,12,11,14,12,15,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,3,10,10,10,10,10,10,10,10,10,10,4,8,6,10,10,10,10,10,10,10,10,10,10,4,8,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,10,9,7,5,6,7,7,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,11,0,0,0,10,10,10,10,11,11,12,11,12,12,0,0,0,10,10,10,9,11,11,12,11,13,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,12,12,14,13,0,0,0,0,0,12,11,11,11,13,10,14,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,6,6,7,7,7,7,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,6,10,10,11,11,11,11,10,10,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,12,11,11,7,9,9,11,10,10,11,11,10,6,9,9,10,10,10,12,10,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,3,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,0,0,8,8,9,9,9,10,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,10,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,12,12,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,5,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,2,7,7,0,0,0,0,0,13,13,6,6,0,0,0,0,0,12,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,4,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,0,0,0,0,0,0,5,7,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+284720);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,13,14,14,15,16,18,18,4,2,5,8,7,9,12,15,15,10,4,5,10,6,8,11,15,17,12,5,7,5,6,8,11,14,17,11,5,6,6,5,6,9,13,17,12,6,7,6,5,6,8,12,14,14,7,8,6,6,7,9,11,14,14,8,9,6,5,6,9,11,13,16,10,10,7,6,7,8,10,11,0,0,0,0,0,0,0,6,8,13,12,13,14,15,16,16,4,2,4,7,6,8,11,13,15,10,4,4,8,6,8,11,14,17,11,5,6,5,6,8,12,14,17,11,5,5,6,5,7,10,13,16,12,6,7,8,7,8,10,13,15,13,8,8,7,7,8,10,12,15,15,7,7,5,5,7,9,12,14,15,8,8,6,6,7,8,10,11,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,144,207,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,56,207,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,167,4,0,0,0,0,0,0,0,0,0,0,0,0,0,168,167,4,0,0,0,0,0,0,0,0,0,0,0,0,0,208,167,4,0,0,0,0,0,0,0,0,0,0,0,0,0,248,167,4,0,0,0,0,0,0,0,0,0,0,0,0,0,32,168,4,0,0,0,0,0,72,168,4,0,112,168,4,0,0,0,0,0,0,0,0,0,152,168,4,0,192,168,4,0,0,0,0,0,0,0,0,0,232,168,4,0,16,169,4,0,56,169,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,129,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,4,0,0,0,0,0,0,0,0,0,0,0,0,0,40,130,4,0,0,0,0,0,0,0,0,0,0,0,0,0,80,130,4,0,0,0,0,0,0,0,0,0,0,0,0,0,120,130,4,0,0,0,0,0,160,130,4,0,200,130,4,0,0,0,0,0,0,0,0,0,240,130,4,0,24,131,4,0,0,0,0,0,0,0,0,0,64,131,4,0,104,131,4,0,144,131,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,128,129,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,40,129,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,9,10,9,10,11,12,13,4,1,5,7,7,9,11,12,14,8,5,7,9,8,10,13,13,13,10,7,9,4,6,7,10,12,14,9,6,7,6,6,7,10,12,12,9,8,9,7,6,7,8,11,12,11,11,11,9,8,7,8,10,12,12,13,14,12,11,9,9,9,12,12,17,17,15,16,12,10,11,13,0,0,0,0,0,0,0,5,4,8,9,8,9,10,12,15,4,1,5,5,6,8,11,12,12,8,5,8,9,9,11,13,12,12,9,5,8,5,7,9,12,13,13,8,6,8,7,7,9,11,11,11,9,7,9,7,7,7,7,10,12,10,10,11,9,8,7,7,9,11,11,12,13,12,11,9,8,9,11,13,16,16,15,15,12,10,11,12,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,200,141,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,112,167,4,0,0,0,0,0,4,0,0,0,113,2,0,0,56,139,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,141,4,0,0,0,0,0,2,0,0,0,81,0,0,0,184,138,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,16,139,4,0,0,0,0,0,2,0,0,0,81,0,0,0,56,138,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,138,4,0,0,0,0,0,2,0,0,0,33,1,0,0,200,136,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,137,4,0,0,0,0,0,4,0,0,0,81,0,0,0,96,136,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,184,136,4,0,0,0,0,0,2,0,0,0,121,0,0,0,176,135,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,48,136,4,0,0,0,0,0,2,0,0,0,169,0,0,0,200,134,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,120,135,4,0,0,0,0,0,2,0,0,0,25,0,0,0,144,134,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,134,4,0,0,0,0,0,2,0,0,0,81,0,0,0,16,134,4,0,1,0,0,0,0,160,59,225,0,160,251,96,4,0,0,0,0,0,0,0,104,134,4,0,0,0,0,0,2,0,0,0,169,0,0,0,40,133,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,216,133,4,0,0,0,0,0,2,0,0,0,33,1,0,0,184,131,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,224,132,4,0,0,0,0,0,2,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,10,6,6,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,6,6,7,7,8,7,8,8,9,9,9,9,9,9,9,9,10,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,10,11,8,8,8,8,9,9,9,9,9,9,9,10,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,10,10,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,11,11,8,8,9,9,9,9,9,9,9,9,9,10,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,10,11,11,11,11,11,9,9,10,9,9,9,9,9,9,9,10,11,10,11,11,11,11,10,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,9,9,9,9,9,9,9,9,11,11,10,11,11,11,10,10,10,9,9,9,9,9,9,9,9,10,11,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,7,9,9,10,11,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,17,7,7,8,8,9,9,10,10,12,12,13,13,18,7,7,8,7,9,9,10,10,12,12,12,13,19,10,10,8,8,10,10,11,11,12,12,13,14,19,11,10,8,7,10,10,11,11,12,12,13,12,19,19,19,10,10,10,10,11,11,12,12,13,13,19,19,19,11,9,11,9,14,12,13,12,13,13,19,20,18,13,14,11,11,12,12,13,13,14,13,20,20,20,15,13,11,10,13,11,13,13,14,13,20,20,20,20,20,13,14,12,12,13,13,13,13,20,20,20,20,20,13,13,12,12,16,13,15,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,3,11,11,11,11,11,11,3,7,6,11,11,11,11,11,11,4,8,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,4,4,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,6,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,9,10,10,10,11,11,12,11,12,12,0,0,0,10,10,9,9,11,11,12,12,12,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,13,12,13,13,0,0,0,0,0,12,12,11,11,13,12,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,7,8,9,5,5,6,6,7,7,8,8,8,8,9,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,10,11,11,11,10,10,6,9,9,11,11,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,11,11,11,6,9,9,11,10,10,11,11,10,6,9,9,11,10,10,11,10,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,6,6,8,8,8,8,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,5,6,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,7,7,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,11,12,12,13,13,13,13,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,3,6,6,7,7,9,9,0,5,5,7,7,8,7,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,11,11,0,0,0,9,9,9,9,11,11,0,0,0,10,10,10,10,11,11,0,0,0,0,0,9,9,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,3,7,7,0,0,0,0,0,5,4,7,7,0,0,0,0,0,5,5,7,7,0,0,0,0,0,6,7,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+294464);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,128,181,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,40,207,4,0,0,0,0,0,4,0,0,0,113,2,0,0,240,178,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,181,4,0,0,0,0,0,2,0,0,0,81,0,0,0,112,178,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,200,178,4,0,0,0,0,0,2,0,0,0,81,0,0,0,240,177,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,72,178,4,0,0,0,0,0,2,0,0,0,33,1,0,0,128,176,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,168,177,4,0,0,0,0,0,4,0,0,0,81,0,0,0,24,176,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,112,176,4,0,0,0,0,0,2,0,0,0,121,0,0,0,104,175,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,232,175,4,0,0,0,0,0,2,0,0,0,169,0,0,0,128,174,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,48,175,4,0,0,0,0,0,2,0,0,0,25,0,0,0,72,174,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,174,4,0,0,0,0,0,4,0,0,0,113,2,0,0,184,171,4,0,1,0,0,0,0,160,27,225,0,160,251,96,3,0,0,0,0,0,0,0,48,174,4,0,0,0,0,0,2,0,0,0,169,0,0,0,208,170,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,128,171,4,0,0,0,0,0,2,0,0,0,33,1,0,0,96,169,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,136,170,4,0,0,0,0,0,2,4,4,6,6,7,7,7,7,8,8,8,8,8,8,8,8,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,8,9,9,9,9,9,10,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,10,10,8,8,8,8,9,8,9,9,9,9,9,10,9,10,10,10,10,7,7,8,8,9,9,9,9,9,9,10,9,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,9,11,10,10,10,10,8,8,9,9,9,9,9,10,9,9,9,10,10,10,10,11,11,9,9,9,9,9,9,9,9,10,9,9,10,11,10,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,10,10,11,11,11,11,9,9,9,9,9,9,9,9,9,9,10,10,10,11,11,11,11,9,10,9,10,9,9,9,9,10,9,10,11,10,11,10,10,10,10,10,9,9,9,10,9,9,9,10,11,11,10,11,11,10,11,10,10,10,9,9,9,9,10,9,9,10,11,10,11,11,11,11,10,11,10,10,9,10,9,9,9,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,7,7,9,9,11,12,13,12,6,5,5,7,7,8,8,10,9,12,12,12,12,6,5,5,7,7,8,8,10,9,12,11,11,13,16,7,7,8,8,9,9,10,10,12,12,13,12,16,7,7,8,7,9,9,10,10,11,12,12,13,16,10,10,8,8,10,10,11,12,12,12,13,13,16,11,10,8,7,11,10,11,11,12,11,13,13,16,16,16,10,10,10,10,11,11,13,12,13,13,16,16,16,11,9,11,9,15,13,12,13,13,13,16,16,16,15,13,11,11,12,13,12,12,14,13,16,16,16,14,13,11,11,13,12,14,13,13,13,16,16,16,16,16,13,13,13,12,14,13,14,14,16,16,16,16,16,13,13,12,12,14,14,15,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,5,5,10,10,6,9,8,10,10,6,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,5,6,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,10,10,10,10,11,11,11,11,12,12,0,0,0,10,10,9,9,11,11,11,12,12,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,11,11,11,13,12,13,13,0,0,0,0,0,12,12,11,11,12,12,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,6,6,7,7,7,7,7,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,10,9,9,4,6,7,10,9,9,11,9,9,7,10,10,11,11,11,12,10,11,6,9,9,11,10,11,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,12,11,11,11,11,11,7,9,9,10,10,10,11,11,10,6,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,3,6,6,8,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,9,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,11,11,11,11,11,12,12,12,13,13,0,0,0,0,0,0,0,11,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,12,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,12,12,12,12,13,13,13,0,0,0,0,0,0,0,12,12,12,12,12,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,8,9,9,0,0,0,7,7,7,7,9,9,0,0,0,9,9,8,8,10,10,0,0,0,8,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,2,8,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+305000);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,6,6,12,13,13,14,16,17,17,4,2,5,8,7,9,12,15,15,9,4,5,9,7,9,12,16,18,11,6,7,4,6,8,11,14,18,10,5,6,5,5,7,10,14,17,10,5,7,7,6,7,10,13,16,11,5,7,7,7,8,10,12,15,13,6,7,5,5,7,9,12,13,16,8,9,6,6,7,9,10,12,0,0,0,0,0,0,0,9,8,12,11,12,13,14,14,16,6,1,5,6,6,9,12,14,17,9,4,5,9,7,9,13,15,16,8,5,8,6,8,10,13,17,17,9,6,7,7,8,9,13,15,17,11,8,9,9,9,10,12,16,16,13,7,8,7,7,9,12,14,15,13,6,7,5,5,7,10,13,13,14,7,8,5,6,7,9,10,12,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,112,32,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,24,32,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,248,4,0,0,0,0,0,0,0,0,0,0,0,0,0,136,248,4,0,0,0,0,0,0,0,0,0,0,0,0,0,176,248,4,0,0,0,0,0,0,0,0,0,0,0,0,0,216,248,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,4,0,0,0,0,0,40,249,4,0,80,249,4,0,0,0,0,0,0,0,0,0,120,249,4,0,160,249,4,0,0,0,0,0,0,0,0,0,200,249,4,0,240,249,4,0,24,250,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,210,4,0,0,0,0,0,0,0,0,0,0,0,0,0,224,210,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,211,4,0,0,0,0,0,0,0,0,0,0,0,0,0,48,211,4,0,0,0,0,0,0,0,0,0,0,0,0,0,88,211,4,0,0,0,0,0,128,211,4,0,168,211,4,0,0,0,0,0,0,0,0,0,208,211,4,0,248,211,4,0,0,0,0,0,0,0,0,0,32,212,4,0,72,212,4,0,112,212,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,96,210,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,8,210,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,8,8,8,8,10,12,14,3,2,6,7,7,8,10,12,16,7,6,7,9,8,10,12,14,16,8,6,8,4,5,7,9,11,13,7,6,8,5,6,7,9,11,14,8,8,10,7,7,6,8,10,13,9,11,12,9,9,7,8,10,12,10,13,15,11,11,10,9,10,13,13,16,17,14,15,14,13,14,17,0,0,0,0,0,0,0,4,4,7,8,7,8,10,12,17,3,1,6,6,7,8,10,12,15,7,6,9,9,9,11,12,14,17,8,6,9,6,7,9,11,13,17,7,6,9,7,7,8,9,12,15,8,8,10,8,7,7,7,10,14,9,10,12,10,8,8,8,10,14,11,13,15,13,12,11,11,12,16,17,18,18,19,20,18,16,16,20,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,168,222,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,80,248,4,0,0,0,0,0,4,0,0,0,113,2,0,0,24,220,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,222,4,0,0,0,0,0,2,0,0,0,81,0,0,0,152,219,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,240,219,4,0,0,0,0,0,2,0,0,0,81,0,0,0,24,219,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,112,219,4,0,0,0,0,0,2,0,0,0,33,1,0,0,168,217,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,208,218,4,0,0,0,0,0,4,0,0,0,81,0,0,0,64,217,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,152,217,4,0,0,0,0,0,2,0,0,0,121,0,0,0,144,216,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,16,217,4,0,0,0,0,0,2,0,0,0,169,0,0,0,168,215,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,88,216,4,0,0,0,0,0,2,0,0,0,25,0,0,0,112,215,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,215,4,0,0,0,0,0,2,0,0,0,81,0,0,0,240,214,4,0,1,0,0,0,0,160,59,225,0,160,251,96,4,0,0,0,0,0,0,0,72,215,4,0,0,0,0,0,2,0,0,0,169,0,0,0,8,214,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,184,214,4,0,0,0,0,0,2,0,0,0,33,1,0,0,152,212,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,192,213,4,0,0,0,0,0,3,4,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,6,6,6,6,7,7,8,8,8,9,9,9,9,9,9,9,10,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,11,10,11,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,11,11,8,8,8,8,9,9,9,9,9,9,9,9,11,10,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,10,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,10,10,9,9,9,9,9,9,11,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,10,11,11,11,6,5,5,7,7,8,8,10,10,10,11,11,11,6,5,5,7,7,8,8,10,10,11,12,12,12,14,7,7,7,8,9,9,11,11,11,12,11,12,17,7,7,8,7,9,9,11,11,12,12,12,12,14,11,11,8,8,10,10,11,12,12,13,11,12,14,11,11,8,8,10,10,11,12,12,13,13,12,14,15,14,10,10,10,10,11,12,12,12,12,11,14,13,16,10,10,10,9,12,11,12,12,13,14,14,15,14,14,13,10,10,11,11,12,11,13,11,14,12,15,13,14,11,10,12,10,12,12,13,13,13,13,14,15,15,12,12,11,11,12,11,13,12,14,14,14,14,17,12,12,11,10,13,11,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,12,11,13,13,14,14,4,7,7,11,13,14,14,14,14,3,8,3,14,14,14,14,14,14,14,10,12,14,14,14,14,14,14,14,14,5,14,8,14,14,14,14,14,12,14,13,14,14,14,14,14,14,14,13,14,10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,4,5,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,9,9,10,10,7,5,5,7,7,8,8,8,8,10,9,11,10,7,5,5,7,7,8,8,8,8,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,12,12,0,13,13,9,9,9,9,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,13,13,13,0,0,0,14,14,11,10,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,13,14,0,0,0,0,0,13,12,12,12,13,13,13,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,4,4,5,5,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,10,10,10,10,10,9,9,9,9,8,9,10,10,10,10,10,8,9,8,8,9,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,7,6,10,9,9,11,9,9,4,6,7,10,9,9,11,9,9,7,10,10,10,11,11,11,11,10,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,11,11,11,11,12,11,11,7,9,9,11,10,10,12,10,10,7,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,9,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,6,5,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,10,10,11,11,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,12,12,12,13,13,13,14,14,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,14,14,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,3,6,6,7,7,9,9,0,5,5,7,7,8,7,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,4,7,7,0,0,0,0,0,4,4,7,7,0,0,0,0,0,4,5,7,7,0,0,0,0,0,6,7,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,10,9,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+315168);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,96,6,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,8,32,5,0,0,0,0,0,4,0,0,0,113,2,0,0,208,3,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,6,5,0,0,0,0,0,2,0,0,0,81,0,0,0,80,3,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,168,3,5,0,0,0,0,0,2,0,0,0,81,0,0,0,208,2,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,40,3,5,0,0,0,0,0,2,0,0,0,33,1,0,0,96,1,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,136,2,5,0,0,0,0,0,4,0,0,0,81,0,0,0,248,0,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,80,1,5,0,0,0,0,0,2,0,0,0,121,0,0,0,72,0,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,200,0,5,0,0,0,0,0,2,0,0,0,169,0,0,0,96,255,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,16,0,5,0,0,0,0,0,2,0,0,0,25,0,0,0,40,255,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,255,4,0,0,0,0,0,4,0,0,0,113,2,0,0,152,252,4,0,1,0,0,0,0,160,27,225,0,160,251,96,3,0,0,0,0,0,0,0,16,255,4,0,0,0,0,0,2,0,0,0,169,0,0,0,176,251,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,96,252,4,0,0,0,0,0,2,0,0,0,33,1,0,0,64,250,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,104,251,4,0,0,0,0,0,3,4,3,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,11,11,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,10,9,10,11,10,7,6,7,7,8,8,9,9,9,9,9,9,9,10,10,10,11,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,8,8,8,8,8,8,9,9,9,9,9,9,9,9,11,10,10,11,11,8,8,8,9,9,9,9,9,9,10,9,10,10,10,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,10,10,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,10,11,11,11,11,9,9,9,9,9,9,9,9,10,10,10,11,11,10,11,11,11,9,10,10,9,9,9,9,9,9,9,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,9,9,11,11,11,10,11,11,11,11,11,9,9,9,10,9,9,9,9,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,4,4,6,6,8,8,9,10,10,11,11,11,6,5,5,7,7,8,8,9,10,9,11,11,12,5,5,5,7,7,8,9,10,10,12,12,14,13,15,7,7,8,8,9,10,11,11,10,12,10,11,15,7,8,8,8,9,9,11,11,13,12,12,13,15,10,10,8,8,10,10,12,12,11,14,10,10,15,11,11,8,8,10,10,12,13,13,14,15,13,15,15,15,10,10,10,10,12,12,13,12,13,10,15,15,15,10,10,11,10,13,11,13,13,15,13,15,15,15,13,13,10,11,11,11,12,10,14,11,15,15,14,14,13,10,10,12,11,13,13,14,14,15,15,15,15,15,11,11,11,11,12,11,15,12,15,15,15,15,15,12,12,11,11,14,12,13,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,7,7,11,11,8,11,11,11,11,4,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,9,11,11,7,5,5,7,7,8,8,8,8,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,11,12,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,13,12,0,0,0,14,14,11,10,11,12,12,13,13,14,0,0,0,15,15,11,11,12,11,12,12,14,13,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,13,13,12,12,13,13,13,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,6,6,7,7,8,8,8,8,10,10,10,7,6,8,8,8,8,8,8,10,10,10,7,6,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,6,6,7,6,6,4,6,6,10,9,9,11,9,9,4,6,6,10,9,9,10,9,9,7,10,10,11,11,11,12,11,11,7,9,9,11,11,10,11,10,10,7,9,9,11,10,11,11,10,10,7,10,10,11,11,11,12,11,11,7,9,9,11,10,10,11,10,10,7,9,9,11,10,10,11,10,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,3,6,6,7,7,8,8,8,8,9,9,10,10,10,10,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,9,9,10,10,10,11,11,11,12,12,0,0,0,9,9,10,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,11,10,11,11,11,12,13,12,13,13,0,0,0,0,0,0,0,11,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,12,12,12,13,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,12,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,6,6,7,7,9,9,0,0,0,6,6,7,7,9,9,0,0,0,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,11,9,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,9,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+325704);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,6,12,14,12,14,16,17,18,4,2,5,11,7,10,12,14,15,9,4,5,11,7,10,13,15,18,15,6,7,5,6,8,11,13,16,11,5,6,5,5,6,9,13,15,12,5,7,6,5,6,9,12,14,12,6,7,8,6,7,9,12,13,14,8,8,7,5,5,8,10,12,16,9,9,8,6,6,7,9,9,0,0,0,0,0,0,0,10,9,12,15,12,13,16,14,16,7,1,5,14,7,10,13,16,16,9,4,6,16,8,11,16,16,16,14,4,7,16,9,12,14,16,16,10,5,7,14,9,12,14,15,15,13,8,9,14,10,12,13,14,15,13,9,9,7,6,8,11,12,12,14,8,8,5,4,5,8,11,12,16,10,10,6,5,6,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,64,191,64,0,0,0,0,0,88,203,64,0,0,0,0,0,130,228,64,0,0,0,0,0,112,183,64,0,0,0,0,0,148,193,64,0,0,0,0,0,64,223,64,0,0,0,0,0,112,199,64,0,0,0,0,0,136,211,64,0,0,0,0,0,106,232,64,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,2,0,0,0,2,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,51,51,51,51,51,51,211,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,22,64,0,0,0,0,0,0,62,64,224,36,5,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,64,191,64,0,0,0,0,0,100,201,64,0,0,0,0,0,124,229,64,0,0,0,0,0,64,207,64,0,0,0,0,0,88,219,64,0,0,0,0,0,64,239,64,0,0,0,0,0,106,248,64,154,153,153,153,153,153,185,191,154,153,153,153,153,153,169,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,22,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,255,255,255,255,10,0,0,0,10,0,0,0,255,255,255,255,20,0,0,0,20,0,0,0,255,255,255,255,20,0,0,0,20,0,0,0,255,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,15,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,249,255,255,255,251,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,238,255,255,255,238,255,255,255,238,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,12,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,14,0,0,0,20,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,12,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,0,0,0,0,0,0,0,0,154,153,153,153,153,153,233,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,1,0,0,0,1,0,0,15,39,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,51,51,51,51,51,51,211,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,156,255,255,255,156,255,255,255,156,255,255,255,151,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,116,255,255,255,0,0,0,0,0,0,26,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,62,64,0,0,0,0,0,192,88,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,216,104,5,0,232,104,5,0,24,46,1,0,32,53,5,0,24,46,1,0,64,53,5,0,24,46,1,0,128,53,5,0,1,0,0,0,0,0,0,0,32,0,0,0,0,99,1,0,232,90,5,0,232,90,5,0,16,91,5,0,16,91,5,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,216,73,5,0,216,73,5,0,0,74,5,0,0,74,5,0,1,0,0,0,0,0,0,0,32,0,0,0,104,71,1,0,192,74,5,0,192,74,5,0,0,74,5,0,0,74,5,0,1,0,0,0,0,0,0,0,32,0,0,0,176,85,2,0,192,53,5,0,192,53,5,0,232,53,5,0,232,53,5,0,1,0,0,0,0,0,0,0,32,0,0,0,176,85,2,0,168,54,5,0,168,54,5,0,232,53,5,0,232,53,5,0,2,0,0,0,100,0,0,0,112,73,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,55,5,0,0,0,0,0,0,0,0,0,0,0,0,0,96,55,5,0,0,0,0,0,0,0,0,0,0,0,0,0,136,55,5,0,0,0,0,0,0,0,0,0,0,0,0,0,176,55,5,0,0,0,0,0,216,55,5,0,0,56,5,0,0,0,0,0,0,0,0,0,40,56,5,0,80,56,5,0,0,0,0,0,0,0,0,0,120,56,5,0,160,56,5,0,0,0,0,0,0,0,0,0,200,56,5,0,240,56,5,0,0,0,0,0,0,0,0,0,24,57,5,0,64,57,5,0,104,57,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,208,54,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,10,10,10,11,11,12,14,18,7,5,5,6,8,9,10,12,14,17,9,5,4,5,6,8,10,11,13,19,9,5,4,4,5,6,9,10,12,17,8,6,5,4,4,5,7,10,11,15,8,7,7,6,5,5,6,9,11,14,8,9,8,7,6,5,6,7,11,14,9,11,11,9,7,6,6,6,9,14,11,14,15,13,9,8,7,7,9,14,13,15,19,17,12,11,10,9,10,14,0,0,0,0,4,0,0,0,81,0,0,0,8,73,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,96,73,5,0,0,0,0,0,4,0,0,0,113,2,0,0,120,70,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,240,72,5,0,0,0,0,0,2,0,0,0,81,0,0,0,248,69,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,80,70,5,0,0,0,0,0,2,0,0,0,33,1,0,0,136,68,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,176,69,5,0,0,0,0,0,4,0,0,0,81,0,0,0,32,68,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,120,68,5,0,0,0,0,0,2,0,0,0,121,0,0,0,112,67,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,240,67,5,0,0,0,0,0,2,0,0,0,169,0,0,0,136,66,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,56,67,5,0,0,0,0,0,2,0,0,0,25,0,0,0,80,66,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,112,66,5,0,0,0,0,0,2,0,0,0,169,0,0,0,104,65,5,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,24,66,5,0,0,0,0,0,2,0,0,0,121,0,0,0,184,64,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,56,65,5,0,0,0,0,0,2,0,0,0,225,0,0,0,144,63,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,120,64,5,0,0,0,0,0,2,0,0,0,185,1,0,0,120,61,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,56,63,5,0,0,0,0,0,2,0,0,0,225,0,0,0,80,60,5,0,1,0,0,0,0,117,153,225,0,24,61,97,4,0,0,0,0,0,0,0,56,61,5,0,0,0,0,0,2,0,0,0,105,1,0,0,144,58,5,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,0,60,5,0,0,0,0,0,1,0,0,0,49,0,0,0,144,57,5,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,200,57,5,0,0,0,0,0,2,3,4,4,4,5,5,6,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,8,8,8,8,8,8,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,7,7,7,6,9,7,10,8,12,12,13,13,14,14,4,7,7,9,9,9,8,9,8,10,9,11,9,14,9,14,10,13,11,4,7,7,9,9,9,9,8,9,10,10,11,11,12,13,12,13,14,15,7,9,9,10,11,10,10,10,10,11,12,13,13,13,14,17,14,15,16,7,9,9,10,10,10,10,10,10,11,12,13,13,14,14,15,15,18,18,8,9,9,11,10,11,11,11,12,13,12,14,14,16,15,15,17,18,15,8,9,9,10,10,11,11,11,11,13,13,14,14,15,15,15,16,16,18,7,9,8,10,10,11,11,12,12,14,14,15,15,16,16,15,17,16,18,8,9,9,10,10,11,12,12,12,13,13,16,15,17,16,17,18,17,18,9,10,10,12,11,13,13,14,13,14,14,15,17,16,18,17,18,17,18,9,10,10,12,11,12,13,13,14,15,16,14,15,16,18,18,18,18,17,11,11,11,13,13,14,14,16,15,15,15,16,15,15,18,18,18,17,16,11,11,12,13,13,15,14,15,16,16,16,17,16,15,18,17,18,16,18,12,13,13,15,15,15,16,18,16,17,16,17,16,17,17,17,18,18,17,13,13,13,15,13,16,15,17,16,16,16,18,18,18,18,16,17,17,18,13,15,14,15,15,18,17,18,18,18,16,18,17,18,17,18,16,17,17,14,14,14,15,16,17,16,18,18,18,17,18,17,18,18,18,16,16,16,14,17,16,17,15,16,18,18,17,18,17,18,17,18,18,18,17,18,17,15,16,15,18,15,18,17,16,18,18,18,18,18,18,17,18,16,18,17,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,5,3,9,8,9,9,9,9,9,9,9,9,9,9,5,7,8,9,9,9,9,9,9,9,9,9,9,9,9,5,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,3,5,5,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,5,6,6,7,7,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,7,7,7,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,9,10,9,8,8,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,7,7,8,8,7,7,9,8,10,9,11,11,4,7,6,9,8,9,9,9,9,10,9,11,9,12,9,4,6,7,8,8,9,9,9,9,10,10,10,11,11,12,7,9,8,10,10,11,11,10,10,11,11,12,12,13,12,7,8,8,10,10,10,11,10,10,11,11,11,12,12,13,8,9,9,11,11,11,11,11,11,12,12,13,13,13,13,8,9,9,11,11,11,11,11,11,12,12,13,13,13,14,8,9,9,10,10,11,11,12,11,13,13,14,13,14,14,8,9,9,10,10,11,11,12,12,12,12,13,13,14,14,9,10,10,11,11,12,12,13,12,13,13,14,14,15,15,9,10,10,11,11,12,12,12,13,13,13,14,14,14,15,10,11,11,12,12,13,13,14,13,14,14,15,14,15,15,10,11,11,12,12,13,12,13,14,14,14,14,14,15,15,11,12,12,13,13,13,13,14,14,15,14,15,15,16,16,11,12,12,13,13,13,13,14,14,14,15,15,15,16,16,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,2,5,5,7,7,7,7,7,7,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,8,9,9,10,10,4,6,6,8,8,9,9,9,9,10,10,11,10,4,6,6,8,8,9,9,9,9,10,10,11,11,7,8,8,10,9,10,10,10,10,11,11,12,12,7,8,8,10,10,10,10,10,10,11,11,12,12,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,11,10,11,11,12,12,13,13,14,13,8,9,9,10,10,11,11,12,12,13,13,13,13,9,10,10,11,11,12,12,13,13,13,13,14,14,9,10,10,11,11,12,12,13,13,13,13,14,14,10,11,11,12,12,13,13,14,13,14,14,15,14,10,11,11,12,12,13,13,14,13,14,14,15,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,4,7,7,8,8,8,8,10,10,11,11,4,6,6,7,7,9,9,9,9,10,10,11,11,4,6,6,7,7,9,9,9,9,10,10,11,11,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,9,8,10,9,10,10,11,11,12,12,8,9,9,9,10,10,10,11,11,12,12,13,13,8,9,9,10,9,10,10,11,11,12,12,13,13,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,10,10,11,11,12,11,12,12,13,13,10,10,10,11,11,12,12,12,12,13,13,14,14,10,10,10,11,11,12,12,12,12,13,13,14,14,11,11,11,12,12,13,13,13,13,14,14,14,14,11,11,11,12,12,13,13,13,13,14,14,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,5,5,6,6,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,6,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,8,8,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,8,7,9,9,7,9,10,5,8,8,7,10,9,7,10,9,5,8,8,8,11,10,8,10,10,7,10,10,9,9,12,10,12,12,7,10,10,9,12,10,10,11,12,5,8,8,8,10,10,8,11,11,7,11,10,10,12,11,9,10,12,7,10,11,10,12,12,9,12,9,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,5,5,6,6,7,7,8,8,9,9,10,10,11,11,11,11,5,5,5,7,6,8,7,9,9,9,9,10,10,11,11,12,12,5,5,5,6,6,7,8,8,9,9,9,10,10,11,11,12,12,6,7,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,6,6,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,8,8,8,8,9,9,9,9,10,10,11,11,11,11,12,12,7,7,8,8,8,9,9,9,9,10,10,11,11,11,11,12,12,8,9,9,9,9,9,9,10,10,10,10,11,11,12,12,12,12,8,9,9,9,9,9,9,10,10,10,10,11,11,12,12,12,12,9,9,9,9,9,10,10,10,10,10,11,11,11,12,12,13,13,9,9,9,9,9,10,10,10,10,11,10,11,11,12,12,13,13,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,13,13,10,10,10,10,10,11,11,11,11,11,11,12,11,12,12,13,13,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,11,11,11,11,11,11,11,12,12,12,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,14,14,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,4,4,6,6,7,7,9,9,4,5,5,6,6,8,7,9,9,4,5,5,6,6,7,8,9,9,6,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,8,7,8,8,9,9,11,10,7,7,8,8,8,9,9,10,11,9,9,9,10,10,11,10,11,11,9,9,9,10,10,10,11,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,5,7,7,9,9,5,7,7,9,9,9,10,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,11,12,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,11,10,10,10,12,12,9,10,10,12,12,10,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,14,9,10,10,12,12,9,10,10,12,12,10,10,10,12,12,11,12,12,14,13,12,12,12,14,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,10,12,12,7,8,8,11,10,8,9,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,12,13,7,8,8,10,10,8,9,8,11,10,8,9,9,11,11,10,11,10,13,12,10,11,11,13,13,10,11,10,13,12,10,11,11,13,13,10,11,11,13,13,12,12,13,13,14,12,13,13,14,14,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,12,13,12,14,13,12,13,13,14,15,5,7,7,9,10,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,11,12,12,7,8,8,10,10,8,9,9,11,11,8,8,9,10,11,10,11,11,13,13,10,10,11,12,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,12,10,11,11,13,12,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,15,14,12,12,13,12,14,9,10,11,12,13,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,12,13,12,14,13,8,10,10,12,12,9,11,10,13,12,9,10,10,12,13,12,13,13,14,14,12,12,12,14,14], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+335872);
/* memory initializer */ allocate([9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,13,13,13,14,15,12,13,13,14,15,9,10,10,12,13,10,11,10,13,13,10,11,11,12,13,12,13,12,15,14,12,13,13,14,15,11,12,12,15,14,12,12,13,14,15,12,13,13,15,14,13,13,15,14,16,14,14,14,16,15,11,12,12,14,14,11,12,12,14,14,12,13,13,14,15,13,14,13,15,13,14,14,14,15,16,8,9,10,12,12,9,10,10,13,12,9,10,11,12,13,12,12,12,14,14,12,13,13,14,14,9,10,10,13,12,10,11,11,13,13,10,10,11,13,13,12,13,13,15,14,12,12,13,14,15,9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,13,13,13,15,15,11,12,12,14,13,12,13,13,15,14,11,12,12,14,14,14,14,14,16,15,13,13,14,13,16,11,12,12,14,14,12,13,13,14,15,12,13,12,14,14,14,14,14,16,16,14,15,13,16,14,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,5,7,7,5,7,7,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,8,9,9,5,7,7,8,9,9,7,9,9,7,9,9,9,10,11,9,10,10,7,9,9,9,10,9,9,10,11,5,8,7,7,9,9,8,9,9,7,9,9,9,11,10,9,9,10,7,9,9,9,10,10,9,11,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,8,11,13,13,15,16,19,19,19,19,11,8,8,9,9,11,13,15,19,20,14,8,7,7,8,9,12,13,15,20,15,9,6,5,5,7,10,12,14,18,14,9,7,5,3,4,7,10,12,16,13,10,8,6,3,3,5,8,11,14,11,10,9,7,5,4,4,6,11,14,10,10,10,8,6,5,5,6,10,14,10,10,10,9,8,7,7,7,10,14,11,12,12,12,11,10,10,10,12,16,0,0,0,0,2,0,0,0,100,0,0,0,128,90,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,75,5,0,0,0,0,0,0,0,0,0,0,0,0,0,120,75,5,0,0,0,0,0,0,0,0,0,0,0,0,0,160,75,5,0,0,0,0,0,0,0,0,0,0,0,0,0,200,75,5,0,0,0,0,0,0,0,0,0,0,0,0,0,240,75,5,0,0,0,0,0,0,0,0,0,0,0,0,0,24,76,5,0,0,0,0,0,64,76,5,0,104,76,5,0,0,0,0,0,0,0,0,0,144,76,5,0,184,76,5,0,0,0,0,0,0,0,0,0,224,76,5,0,8,77,5,0,48,77,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,232,74,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,10,8,12,8,14,8,14,19,5,3,5,5,7,6,11,7,16,19,7,5,6,7,7,9,11,12,19,19,6,4,7,5,7,6,10,7,18,18,8,6,7,7,7,7,8,9,18,18,7,5,8,5,7,5,8,6,18,18,12,9,10,9,9,9,8,9,18,18,8,7,10,6,8,5,6,4,11,18,11,15,16,12,11,8,8,6,9,18,14,18,18,18,16,16,16,13,16,18,0,0,0,0,4,0,0,0,81,0,0,0,24,90,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,112,90,5,0,0,0,0,0,4,0,0,0,81,0,0,0,176,89,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,8,90,5,0,0,0,0,0,4,0,0,0,113,2,0,0,32,87,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,89,5,0,0,0,0,0,4,0,0,0,113,2,0,0,144,84,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,8,87,5,0,0,0,0,0,2,0,0,0,81,0,0,0,16,84,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,84,5,0,0,0,0,0,2,0,0,0,81,0,0,0,144,83,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,232,83,5,0,0,0,0,0,4,0,0,0,81,0,0,0,40,83,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,128,83,5,0,0,0,0,0,2,0,0,0,121,0,0,0,120,82,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,82,5,0,0,0,0,0,2,0,0,0,121,0,0,0,200,81,5,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,72,82,5,0,0,0,0,0,2,0,0,0,121,0,0,0,24,81,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,152,81,5,0,0,0,0,0,2,0,0,0,225,0,0,0,240,79,5,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,216,80,5,0,0,0,0,0,2,0,0,0,225,0,0,0,200,78,5,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,176,79,5,0,0,0,0,0,2,0,0,0,33,1,0,0,88,77,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,128,78,5,0,0,0,0,0,1,6,6,7,8,8,11,10,9,9,11,9,10,9,11,11,9,6,7,6,11,8,11,9,10,10,11,9,11,10,10,10,11,9,5,7,7,8,8,10,11,8,8,11,9,9,10,11,9,10,11,8,9,6,8,8,9,9,10,10,11,11,11,9,11,10,9,11,8,8,8,9,8,9,10,11,9,9,11,11,10,9,9,11,10,8,11,8,9,8,11,9,10,9,10,11,11,10,10,9,10,10,8,8,9,10,10,10,9,11,9,10,11,11,11,11,10,9,11,9,9,11,11,10,8,11,11,11,9,10,10,11,10,11,11,9,11,10,9,11,10,10,10,10,9,11,10,11,10,9,9,10,11,9,8,10,11,11,10,10,11,9,11,10,11,11,10,11,9,9,8,10,8,9,11,9,8,10,10,9,11,10,11,10,11,9,11,8,10,11,11,11,11,10,10,11,11,11,11,10,11,11,10,9,8,10,10,9,11,10,11,11,11,9,9,9,11,11,11,10,10,9,9,10,9,11,11,11,11,8,10,11,10,11,11,10,11,11,9,9,9,10,9,11,9,11,11,11,11,11,10,11,11,10,11,10,11,11,9,11,10,11,10,9,10,9,10,10,11,11,11,11,9,10,9,10,11,11,10,11,11,11,11,11,11,10,11,11,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,6,5,9,9,10,10,6,7,9,9,10,10,10,10,5,10,8,10,8,10,10,8,8,10,9,10,10,10,10,5,8,9,10,10,10,10,8,10,10,10,10,10,10,10,9,10,10,10,10,10,10,9,9,10,10,10,10,10,10,9,9,8,9,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,6,8,8,10,10,10,8,10,10,10,10,10,10,10,10,5,8,8,10,10,10,9,9,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,2,5,5,6,6,7,7,8,8,8,8,4,6,6,7,7,8,7,8,8,8,8,4,6,6,7,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,9,6,7,7,7,7,8,8,8,8,9,9,7,7,7,8,8,8,8,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,9,8,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,5,8,8,10,10,12,12,4,7,7,8,8,9,9,12,11,14,13,4,7,7,7,8,9,10,11,11,13,12,5,8,8,9,9,11,11,12,13,15,14,5,7,8,9,9,11,11,13,13,17,15,8,9,10,11,11,12,13,17,14,17,16,8,10,9,11,11,12,12,13,15,15,17,10,11,11,12,13,14,15,15,16,16,17,9,11,11,12,12,14,15,17,15,15,16,11,14,12,14,15,16,15,16,16,16,15,11,13,13,14,14,15,15,16,16,15,16,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,4,6,5,7,7,8,8,8,8,8,8,4,5,6,7,7,8,8,8,8,8,8,6,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,7,8,8,8,8,9,9,9,10,9,10,7,8,8,8,8,9,9,9,9,10,9,8,8,8,9,9,10,10,10,10,10,10,8,8,8,9,9,9,9,10,10,10,10,8,8,8,9,9,9,10,10,10,10,10,8,8,8,9,9,10,10,10,10,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,4,8,8,4,8,8,5,11,9,8,12,11,8,12,11,5,10,11,8,11,12,8,11,12,4,11,11,11,14,13,10,13,13,8,14,13,12,14,16,12,16,15,8,14,14,13,16,14,12,15,16,4,11,11,10,14,13,11,14,14,8,15,14,12,15,15,12,14,16,8,14,14,11,16,15,12,15,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,6,6,7,7,9,9,4,4,4,6,6,8,8,9,9,4,4,4,6,6,7,7,9,9,6,6,6,7,7,8,8,10,9,6,6,6,7,7,8,8,9,10,7,8,7,8,8,9,9,10,10,7,8,8,8,8,9,9,10,10,9,9,9,10,10,10,10,11,11,9,9,9,10,10,10,10,11,11,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,10,10,4,5,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,7,8,8,10,9,11,11,12,11,7,8,8,9,9,11,11,12,12,9,10,10,11,11,12,12,13,12,9,10,10,11,11,12,12,12,13,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,5,5,8,8,6,6,7,9,9,6,6,6,9,9,9,10,9,11,11,9,9,10,11,11,6,7,7,10,9,7,7,8,9,10,7,7,8,10,10,10,10,10,10,12,9,9,10,11,12,6,7,7,9,9,7,8,7,10,10,7,8,7,10,10,9,10,9,12,11,10,10,9,12,10,9,10,10,12,11,10,10,10,12,12,9,10,10,12,12,12,11,12,13,13,11,11,12,12,13,9,10,10,11,12,9,10,10,12,12,10,10,10,12,12,11,12,11,14,13,11,12,12,14,13,5,7,7,10,10,7,8,8,10,10,7,8,7,10,10,10,10,10,12,12,10,10,10,12,12,6,8,7,10,10,7,7,9,10,11,8,9,9,11,10,10,10,11,11,13,10,10,11,12,13,6,8,8,10,10,7,9,8,11,10,8,9,9,10,11,10,11,10,13,11,10,11,10,12,12,10,11,10,12,11,10,10,10,12,13,10,11,11,13,12,11,11,13,11,14,12,12,13,14,14,9,10,10,12,13,10,11,10,13,12,10,11,11,12,13,11,12,11,14,12,12,13,13,15,14,5,7,7,10,10,7,7,8,10,10,7,8,8,10,10,10,10,10,11,12,10,10,10,12,12,7,8,8,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,7,8,10,10,8,8,9,10,11,7,9,7,11,10,10,11,11,13,12,11,11,10,13,11,9,10,10,12,12,10,11,11,13,12,10,10,11,12,12,12,13,13,14,14,11,11,12,12,14,10,10,11,12,12,10,11,11,12,13,10,10,10,13,12,12,13,13,15,14,12,13,10,14,11,8,10,10,12,12,10,11,10,13,13,9,10,10,12,12,12,13,13,15,14,11,12,12,13,13,9,10,10,13,12,10,10,11,13,13,10,11,10,13,12,12,12,13,14,15,12,13,12,15,13,9,10,10,12,13,10,11,10,13,12,10,10,11,12,13,12,14,12,15,13,12,12,13,14,15,11,12,11,14,13,11,11,12,14,15,12,13,12,15,14,13,11,15,11,16,13,14,14,16,15,11,12,12,14,14,11,12,11,14,13,12,12,13,14,15,13,14,12,16,12,14,14,14,15,15,8,10,10,12,12,9,10,10,12,12,10,10,11,13,13,11,12,12,13,13,12,13,13,14,15,9,10,10,13,12,10,11,11,13,12,10,10,11,13,13,12,13,12,15,14,12,12,13,13,16,9,9,10,12,13,10,10,11,12,13,10,11,10,13,13,12,12,13,13,15,13,13,12,15,13,11,12,12,14,14,12,13,12,15,14,11,11,12,13,14,14,14,14,16,15,13,12,15,12,16,11,11,12,13,14,12,13,13,14,15,10,12,11,14,13,14,15,14,16,16,13,14,11,15,11,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,8,8,6,7,7,9,9,5,7,7,9,9,9,10,9,11,11,9,9,10,11,11,6,8,8,10,10,8,9,10,11,11,8,9,10,11,11,10,11,11,12,13,10,11,11,13,13,6,8,8,10,10,8,10,9,11,11,8,10,9,11,11,10,11,11,13,13,10,11,11,13,12,9,11,11,14,13,10,12,12,15,14,10,12,11,14,13,12,13,13,15,15,12,13,13,16,14,9,11,11,13,14,10,11,12,14,14,10,12,12,14,15,12,13,13,14,15,12,13,14,15,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,8,10,10,12,12,9,11,12,12,13,10,12,12,13,13,12,12,13,14,15,11,13,13,15,15,7,10,10,12,12,9,12,11,13,12,10,11,12,13,13,12,13,12,15,14,11,12,13,15,15,10,12,12,15,14,11,13,13,16,15,11,13,13,16,15,14,13,14,15,16,13,15,15,17,17,10,12,12,14,15,11,12,12,15,15,11,13,13,15,16,13,15,13,16,15,13,15,15,16,17,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,7,10,10,12,12,10,12,12,14,13,9,11,12,12,13,12,13,13,15,15,12,12,13,13,15,7,10,10,12,13,10,11,12,13,13,10,12,11,13,13,11,13,13,15,15,12,13,12,15,14,9,12,12,15,14,11,13,13,15,15,11,12,13,15,15,13,14,14,17,19,13,13,14,16,16,10,12,12,14,15,11,13,13,15,16,11,13,12,16,15,13,15,15,17,18,14,15,13,16,15,8,11,11,15,14,10,12,12,16,15,10,12,12,16,16,14,15,15,18,17,13,14,15,16,18,9,12,12,15,15,11,12,14,16,17,11,13,13,16,15,15,15,15,17,18,14,15,16,17,17,9,12,12,15,15,11,14,13,16,16,11,13,13,16,16,15,16,15,17,18,14,16,15,17,16,12,14,14,17,16,12,14,15,18,17,13,15,15,17,17,15,15,18,16,20,15,16,17,18,18,11,14,14,16,17,13,15,14,18,17,13,15,15,17,17,15,17,15,18,17,15,17,16,19,18,8,11,11,14,15,10,12,12,15,15,10,12,12,16,16,13,14,14,17,16,14,15,15,17,17,9,12,12,15,16,11,13,13,16,16,11,12,13,16,16,14,16,15,20,17,14,16,16,17,17,9,12,12,15,16,11,13,13,16,17,11,13,13,17,16,14,15,15,17,18,15,15,15,18,18,11,14,14,17,16,13,15,15,17,17,13,14,14,18,17,15,16,16,18,19,15,15,17,17,19,11,14,14,16,17,13,15,14,17,19,13,15,14,18,17,15,17,16,18,18,15,17,15,18,16,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,4,5,6,6,5,6,6,5,6,6,6,7,8,6,7,8,5,6,6,6,8,7,6,8,7,5,6,6,6,8,8,6,8,8,6,8,8,7,7,10,8,9,9,6,8,8,7,9,8,8,9,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,9,7,8,9,6,8,8,8,9,9,7,10,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,7,5,8,7,7,10,10,7,9,10,5,7,8,7,10,9,7,10,10,5,8,8,8,10,10,8,10,10,7,10,10,10,11,12,10,12,13,7,10,10,9,13,11,10,12,13,5,8,8,8,10,10,8,10,10,7,10,10,10,12,12,9,11,12,7,10,11,10,12,12,10,13,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,7,10,9,11,10,15,11,13,16,6,4,6,6,7,7,10,9,12,16,10,6,5,6,6,7,10,11,16,16,9,6,7,6,7,7,10,8,14,16,11,6,5,4,5,6,8,9,15,16,9,6,6,5,6,6,9,8,14,16,12,7,6,6,5,6,6,7,13,16,8,6,7,6,5,5,4,4,11,16,9,8,9,9,7,7,6,5,13,16,14,14,16,15,16,15,16,16,16,16,0,0,0,0,2,0,0,0,64,0,0,0,152,104,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,91,5,0,0,0,0,0,0,0,0,0,0,0,0,0,248,91,5,0,0,0,0,0,0,0,0,0,0,0,0,0,32,92,5,0,0,0,0,0,0,0,0,0,0,0,0,0,72,92,5,0,0,0,0,0,0,0,0,0,0,0,0,0,112,92,5,0,0,0,0,0,152,92,5,0,192,92,5,0,0,0,0,0,0,0,0,0,232,92,5,0,16,93,5,0,56,93,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,48,104,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,136,104,5,0,0,0,0,0,4,0,0,0,81,0,0,0,200,103,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,32,104,5,0,0,0,0,0,4,0,0,0,113,2,0,0,56,101,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,103,5,0,0,0,0,0,4,0,0,0,113,2,0,0,168,98,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,101,5,0,0,0,0,0,2,0,0,0,81,0,0,0,40,98,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,128,98,5,0,0,0,0,0,2,0,0,0,169,0,0,0,64,97,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,240,97,5,0,0,0,0,0,2,0,0,0,25,0,0,0,8,97,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,40,97,5,0,0,0,0,0,4,0,0,0,81,0,0,0,160,96,5,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,248,96,5,0,0,0,0,0,2,0,0,0,225,0,0,0,120,95,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,96,96,5,0,0,0,0,0,2,0,0,0,185,1,0,0,96,93,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,32,95,5,0,0,0,0,0,1,6,6,7,8,7,7,10,9,10,9,11,10,9,11,10,9,9,9,9,10,6,8,7,9,9,8,8,10,10,9,11,11,12,12,10,9,11,9,12,10,9,6,9,8,9,12,8,8,11,9,11,11,12,11,12,12,10,11,11,10,10,11,7,10,9,9,9,9,9,10,9,10,9,10,10,12,10,10,10,11,12,10,10,7,9,9,9,10,9,9,10,10,9,9,9,11,11,10,10,10,10,9,9,12,7,9,10,9,11,9,10,9,10,11,11,11,10,11,12,9,12,11,10,10,10,7,9,9,9,9,10,12,10,9,11,12,10,11,12,12,11,9,10,11,10,11,7,9,10,10,11,10,9,10,11,11,11,10,12,12,12,11,11,10,11,11,12,8,9,10,12,11,10,10,12,12,12,12,12,10,11,11,9,11,10,12,11,11,8,9,10,10,11,12,11,11,10,10,10,12,12,12,9,10,12,12,12,12,12,8,10,11,10,10,12,9,11,12,12,11,12,12,12,12,10,12,10,10,10,10,8,12,11,11,11,10,10,11,12,12,12,12,11,12,12,12,11,11,11,12,10,9,10,10,12,10,12,10,12,12,10,10,10,11,12,12,12,11,12,12,12,11,10,11,12,12,12,11,12,12,11,12,12,11,12,12,12,12,11,12,12,10,10,10,10,11,11,12,11,12,12,12,12,12,12,12,11,12,11,10,11,11,12,11,11,9,10,10,10,12,10,10,11,9,11,12,11,12,11,12,12,10,11,10,12,9,9,9,12,11,10,11,10,12,10,12,10,12,12,12,11,11,11,11,11,10,9,10,10,11,10,11,11,12,11,10,11,12,12,12,11,11,9,12,10,12,9,10,12,10,10,11,10,11,11,12,11,10,11,10,11,11,11,11,12,11,11,10,9,10,10,10,9,11,11,10,9,12,10,11,12,11,12,12,11,12,11,12,11,10,11,10,12,11,12,11,12,11,12,10,11,10,10,12,11,10,11,11,11,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,5,5,6,5,9,10,11,11,10,10,10,10,10,10,5,8,8,8,10,10,10,10,10,10,10,10,10,10,10,5,8,9,9,9,10,10,10,10,10,10,10,10,10,10,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,4,8,9,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,5,6,6,4,6,6,6,6,4,6,6,6,6,6,6,6,7,7,6,6,6,7,7,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,7,10,10,12,12,13,13,18,17,3,6,6,9,9,11,11,13,13,14,14,18,17,3,6,6,9,9,11,11,13,13,14,14,17,18,7,9,9,11,11,13,13,14,14,15,15,0,0,7,9,9,11,11,13,13,14,14,15,16,19,18,10,11,11,13,13,14,14,16,15,17,18,0,0,10,11,11,13,13,14,14,15,15,16,18,0,0,11,13,13,14,14,15,15,17,17,0,19,0,0,11,13,13,14,14,14,15,16,18,0,19,0,0,13,14,14,15,15,18,17,18,18,0,19,0,0,13,14,14,15,16,16,16,18,18,19,0,0,0,16,17,17,0,17,19,19,0,19,0,0,0,0,16,19,16,17,18,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,11,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,10,11,11,12,12,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,5,5,8,8,6,6,6,9,9,6,6,6,9,9,9,10,9,11,11,9,9,9,11,11,6,7,7,10,10,7,7,8,10,10,7,7,8,10,10,10,10,10,11,12,9,10,10,11,12,6,7,7,10,10,7,8,7,10,10,7,8,7,10,10,10,11,10,12,11,10,10,10,13,10,9,10,10,12,12,10,11,10,14,12,9,11,11,13,13,11,12,13,13,13,11,12,12,15,13,9,10,10,12,13,9,11,10,12,13,10,10,11,12,13,11,12,12,12,13,11,12,12,13,13,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,12,13,10,10,11,12,12,6,8,8,11,10,7,8,9,10,12,8,9,9,11,11,11,10,11,11,12,10,11,11,13,12,7,8,8,10,11,8,9,8,11,10,8,9,9,11,11,10,12,10,13,11,10,11,11,13,13,10,11,10,14,13,10,10,11,13,13,10,12,11,14,13,12,11,13,12,13,13,12,13,14,14,10,11,11,13,13,10,11,10,12,13,10,12,12,12,14,12,12,12,14,12,12,13,12,17,15,5,7,7,10,10,7,8,8,10,10,7,8,8,11,10,10,10,11,12,12,10,11,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,11,11,11,12,12,10,10,11,12,13,6,8,8,10,11,8,9,9,11,11,7,9,7,11,10,10,12,12,13,13,11,11,10,13,11,9,11,10,14,13,11,11,11,15,13,10,10,11,13,13,12,13,13,14,14,12,11,12,12,13,10,11,11,12,13,10,11,12,13,13,10,11,10,13,12,12,12,13,14,0,12,13,11,13,11,8,10,10,13,13,10,11,11,14,13,10,11,11,13,12,13,14,14,14,15,12,12,12,15,14,9,11,10,13,12,10,10,11,13,14,11,11,11,15,12,13,12,14,15,16,13,13,13,14,13,9,11,11,12,12,10,12,11,13,13,10,11,11,13,14,13,13,13,15,15,13,13,14,17,15,11,12,12,14,14,10,11,12,13,15,12,13,13,0,15,13,11,14,12,16,14,16,14,0,15,11,12,12,14,16,11,13,12,16,15,12,13,13,14,15,12,14,12,15,13,15,14,14,16,16,8,10,10,13,13,10,11,10,13,14,10,11,11,13,13,13,13,12,14,14,14,13,13,16,17,9,10,10,12,14,10,12,11,14,13,10,11,12,13,14,12,12,12,15,15,13,13,13,14,14,9,10,10,13,13,10,11,12,12,14,10,11,10,13,13,13,13,13,14,16,13,13,13,14,14,11,12,13,15,13,12,14,13,14,16,12,12,13,13,14,13,14,14,17,15,13,12,17,13,16,11,12,13,14,15,12,13,14,14,17,11,12,11,14,14,13,16,14,16,0,14,15,11,15,11,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,7,7,6,7,7,8,8,6,7,8,8,8,8,9,9,11,11,8,9,9,11,11,6,9,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,10,13,12,9,11,10,13,13,6,8,9,10,10,8,10,10,11,11,8,10,10,11,11,9,10,11,13,12,10,10,11,12,12,8,11,11,14,13,10,12,11,15,13,9,12,11,15,14,12,14,13,16,14,12,13,13,17,14,8,11,11,13,14,9,11,12,14,15,10,11,12,13,15,11,13,13,14,16,12,13,14,14,16,5,9,9,11,11,9,11,11,12,12,8,11,11,12,12,11,12,12,15,14,10,12,12,15,15,8,11,11,13,12,10,12,12,13,13,10,12,12,14,13,12,12,13,14,15,11,13,13,17,16,7,11,11,13,13,10,12,12,14,13,10,12,12,13,14,12,13,12,15,14,11,13,13,15,14,9,12,12,16,15,11,13,13,17,16,10,13,13,16,16,13,14,15,15,16,13,15,14,19,17,9,12,12,14,16,11,13,13,15,16,10,13,13,17,16,13,14,13,17,15,12,15,15,16,17,5,9,9,11,11,8,11,11,13,12,9,11,11,12,12,10,12,12,14,15,11,12,12,14,14,7,11,10,13,12,10,12,12,14,13,10,11,12,13,13,11,13,13,15,16,12,12,13,15,15,7,11,11,13,13,10,13,13,14,14,10,12,12,13,13,11,13,13,16,15,12,13,13,15,14,9,12,12,15,15,10,13,13,17,16,11,12,13,15,15,12,15,14,18,18,13,14,14,16,17,9,12,12,15,16,10,13,13,15,16,11,13,13,15,16,13,15,15,17,17,13,15,14,16,15,7,11,11,15,16,10,13,12,16,17,10,12,13,15,17,15,16,16,18,17,13,15,15,17,18,8,12,12,16,16,11,13,14,17,18,11,13,13,18,16,15,17,16,17,19,14,15,15,17,16,8,12,12,16,15,11,14,13,18,17,11,13,14,18,17,15,16,16,18,17,13,16,16,18,18,11,15,14,18,17,13,14,15,18,0,12,15,15,0,17,17,16,17,17,18,14,16,18,18,0,11,14,14,17,0,12,15,14,17,19,12,15,14,18,0,15,18,16,0,17,14,18,16,18,0,7,11,11,16,15,10,12,12,18,16,10,13,13,16,15,13,15,14,17,17,14,16,16,19,18,8,12,12,16,16,11,13,13,18,16,11,13,14,17,16,14,15,15,19,18,15,16,16,0,19,8,12,12,16,17,11,13,13,17,17,11,14,13,17,17,13,15,15,17,19,15,17,17,19,0,11,14,15,19,17,12,15,16,18,18,12,14,15,19,17,14,16,17,0,18,16,16,19,17,0,11,14,14,18,19,12,15,14,17,17,13,16,14,17,16,14,17,16,18,18,15,18,15,0,18,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,5,6,6,5,6,6,5,7,7,7,8,9,7,8,9,5,7,7,7,9,8,7,9,7,4,7,7,7,9,9,7,8,8,6,9,8,7,8,11,9,11,10,6,8,9,8,11,8,9,10,11,4,7,7,7,8,8,7,9,9,6,9,8,9,11,10,8,8,11,6,8,9,9,10,11,8,11,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,5,7,7,5,7,8,5,8,8,8,10,10,8,10,11,5,8,8,8,10,10,8,10,10,4,9,9,9,12,11,8,11,11,8,12,11,10,12,14,10,13,13,7,11,11,10,14,12,11,14,14,4,9,9,8,11,11,9,11,12,7,11,11,10,13,14,10,12,14,8,11,12,10,14,14,10,13,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,5,8,7,14,8,9,19,5,2,5,5,9,6,9,19,8,4,5,7,8,9,13,19,7,4,6,5,9,6,9,19,12,8,7,9,10,11,13,19,8,5,8,6,9,6,7,19,8,8,10,7,7,4,5,19,12,17,19,15,18,13,11,18,9,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,112,199,64,0,0,0,0,0,136,211,64,0,0,0,0,0,124,229,64,0,0,0,0,0,255,244,64,216,168,1,0,48,105,5,0,216,168,1,0,80,105,5,0,216,168,1,0,144,105,5,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,8,167,5,0,8,167,5,0,48,167,5,0,48,167,5,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,48,126,5,0,48,126,5,0,88,126,5,0,88,126,5,0,2,0,0,0,0,0,0,0,32,0,0,0,40,194,1,0,24,127,5,0,24,127,5,0,88,126,5,0,88,126,5,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,208,105,5,0,208,105,5,0,248,105,5,0,248,105,5,0,2,0,0,0,0,0,0,0,32,0,0,0,240,28,3,0,184,106,5,0,184,106,5,0,248,105,5,0,248,105,5,0,2,0,0,0,100,0,0,0,200,125,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,107,5,0,0,0,0,0,0,0,0,0,0,0,0,0,112,107,5,0,0,0,0,0,0,0,0,0,0,0,0,0,152,107,5,0,0,0,0,0,0,0,0,0,0,0,0,0,192,107,5,0,0,0,0,0,232,107,5,0,16,108,5,0,0,0,0,0,0,0,0,0,56,108,5,0,96,108,5,0,0,0,0,0,0,0,0,0,136,108,5,0,176,108,5,0,0,0,0,0,0,0,0,0,216,108,5,0,0,109,5,0,0,0,0,0,0,0,0,0,40,109,5,0,80,109,5,0,120,109,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,224,106,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,9,9,9,8,9,10,13,16,5,4,5,6,7,7,8,9,12,16,6,5,5,5,7,7,9,10,12,15,7,6,5,4,5,6,8,9,10,13,8,7,7,5,5,5,7,9,10,12,7,7,7,6,5,5,6,7,10,12,8,8,8,7,7,5,5,6,9,11,8,9,9,8,8,6,6,5,8,11,10,11,12,12,11,9,9,8,9,12,13,14,15,15,14,12,12,11,11,13,0,0,0,0,4,0,0,0,81,0,0,0,96,125,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,125,5,0,0,0,0,0,4,0,0,0,113,2,0,0,208,122,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,125,5,0,0,0,0,0,2,0,0,0,81,0,0,0,80,122,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,168,122,5,0,0,0,0,0,2,0,0,0,33,1,0,0,224,120,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,8,122,5,0,0,0,0,0,4,0,0,0,81,0,0,0,120,120,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,208,120,5,0,0,0,0,0,2,0,0,0,121,0,0,0,200,119,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,72,120,5,0,0,0,0,0,2,0,0,0,169,0,0,0,224,118,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,144,119,5,0,0,0,0,0,2,0,0,0,25,0,0,0,168,118,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,200,118,5,0,0,0,0,0,2,0,0,0,169,0,0,0,192,117,5,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,112,118,5,0,0,0,0,0,2,0,0,0,121,0,0,0,16,117,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,144,117,5,0,0,0,0,0,2,0,0,0,225,0,0,0,232,115,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,208,116,5,0,0,0,0,0,2,0,0,0,185,1,0,0,208,113,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,144,115,5,0,0,0,0,0,2,0,0,0,33,1,0,0,96,112,5,0,1,0,0,0,0,24,157,225,0,24,61,97,5,0,0,0,0,0,0,0,136,113,5,0,0,0,0,0,2,0,0,0,105,1,0,0,160,110,5,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,16,112,5,0,0,0,0,0,1,0,0,0,49,0,0,0,160,109,5,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,216,109,5,0,0,0,0,0,2,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,1,4,4,7,7,7,7,7,7,8,8,10,9,11,10,13,11,14,13,6,6,6,8,8,8,8,8,7,9,8,11,9,13,11,14,12,14,13,5,6,6,8,8,8,8,8,8,9,9,11,11,13,11,14,13,15,15,17,8,8,8,8,9,9,9,8,11,9,12,10,13,11,14,12,14,13,17,8,8,8,8,9,9,9,9,10,10,11,11,13,13,13,14,16,15,17,12,12,8,8,9,9,10,10,11,11,12,11,13,12,13,12,14,13,16,12,12,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,17,17,17,9,9,9,9,11,11,12,12,12,13,13,13,16,14,14,14,17,17,17,9,8,9,8,11,10,12,12,13,13,14,14,15,15,16,16,17,17,17,12,12,10,10,11,12,12,13,13,14,13,15,15,14,16,15,17,17,17,12,12,10,8,12,9,13,12,14,14,15,14,15,16,16,16,17,17,17,17,17,11,11,12,12,14,14,14,16,15,16,15,16,15,17,17,17,17,17,17,11,9,12,10,13,11,15,14,16,16,17,16,16,15,17,17,17,17,17,15,15,12,12,14,14,15,16,16,15,16,16,17,17,17,17,17,17,17,14,14,12,10,14,11,15,12,17,16,15,16,17,16,17,17,17,17,17,17,17,13,13,14,14,14,16,17,17,16,17,17,17,17,17,17,17,17,17,17,13,9,13,12,15,13,16,16,17,17,17,17,17,17,17,17,17,17,17,15,17,14,14,15,16,16,17,16,17,16,17,17,17,17,17,17,17,17,17,17,14,13,15,16,16,17,16,17,17], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+346112);
/* memory initializer */ allocate([17,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,4,3,10,8,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,10,11,11,11,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,10,10,6,6,6,8,8,9,9,8,8,9,9,10,10,11,11,6,5,5,8,7,9,9,8,8,9,9,10,10,11,11,20,8,8,8,8,9,9,9,9,10,10,11,10,12,11,20,8,8,8,8,9,9,9,9,10,10,11,11,12,12,20,12,12,9,9,10,10,10,10,11,11,12,12,13,12,20,13,13,9,9,10,10,10,10,11,11,12,12,13,13,20,20,20,9,9,9,9,10,10,11,11,12,12,13,12,20,20,20,9,9,9,8,10,10,12,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,13,13,10,10,11,10,12,11,13,13,14,14,20,20,20,20,20,11,11,11,11,12,12,13,13,14,14,20,20,20,20,20,11,10,11,11,13,11,13,13,14,14,20,20,21,21,21,14,14,11,12,13,13,13,13,14,14,21,21,21,21,21,15,15,12,11,13,12,14,13,15,14,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,2,4,4,6,6,7,7,7,7,7,7,9,9,9,6,7,7,7,7,7,8,8,9,9,9,6,6,7,7,7,7,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,7,7,8,8,9,9,9,7,7,8,8,7,7,8,8,9,9,9,9,9,8,8,7,7,8,8,9,9,9,9,9,8,8,7,7,8,8,9,9,9,9,9,7,7,7,7,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,7,7,8,8,8,8,10,9,10,10,5,5,5,7,7,9,9,10,10,11,10,12,11,6,5,5,7,7,9,9,10,10,11,11,12,12,20,7,7,7,7,9,9,10,10,11,11,12,12,20,7,7,7,7,9,9,11,10,12,11,12,12,20,11,11,8,8,10,10,11,11,12,12,13,13,20,12,12,8,8,9,9,11,11,12,12,13,13,20,20,21,10,10,10,10,11,11,12,12,13,13,21,21,21,10,10,10,10,11,11,12,12,13,13,21,21,21,14,14,11,11,12,12,13,13,13,14,21,21,21,16,15,11,11,12,11,13,13,14,14,21,21,21,21,21,13,13,12,12,13,13,14,14,21,21,21,21,21,13,13,12,12,13,13,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,8,7,8,8,9,9,10,10,5,5,5,7,7,9,9,9,9,11,11,12,12,6,5,5,7,7,9,9,10,9,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,11,11,8,8,10,10,11,11,12,12,13,13,0,12,12,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,6,6,6,6,7,7,7,7,11,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,11,11,11,6,7,8,8,8,8,9,9,11,11,11,7,7,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,11,11,11,8,8,8,8,8,8,8,8,11,11,11,11,11,8,8,8,8,8,8,12,11,11,11,11,8,8,8,8,8,8,12,11,11,11,11,7,7,8,8,8,8,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,6,10,11,10,10,10,11,4,6,6,10,10,11,10,11,10,5,10,10,9,12,11,10,12,12,7,10,10,12,12,12,12,13,13,7,11,10,11,12,12,12,13,13,6,11,10,10,12,12,11,12,12,7,11,10,12,13,13,12,12,12,7,10,11,12,13,13,12,12,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,6,7,7,8,8,8,8,9,9,0,0,0,6,6,7,7,8,8,8,8,9,9,10,10,11,10,0,0,0,6,6,7,7,8,8,8,8,9,9,10,10,10,10,0,0,0,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,7,8,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,5,5,7,7,8,8,0,0,0,6,6,8,8,9,9,0,0,0,6,6,8,8,9,9,0,0,0,7,7,8,9,10,10,0,0,0,7,7,9,9,10,10,0,0,0,8,8,9,9,11,11,0,0,0,7,7,9,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,4,7,7,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,4,4,4,8,7,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,9,9,4,4,4,7,8,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,9,9,7,8,8,10,9,0,0,0,12,11,0,0,0,11,12,0,0,0,14,13,0,0,0,14,14,7,8,8,9,10,0,0,0,11,12,0,0,0,11,11,0,0,0,14,14,0,0,0,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,11,11,0,0,0,12,11,0,0,0,12,12,0,0,0,13,12,0,0,0,13,13,8,8,8,11,11,0,0,0,11,11,0,0,0,12,12,0,0,0,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,8,12,11,0,0,0,12,12,0,0,0,12,11,0,0,0,13,13,0,0,0,13,13,8,8,8,11,12,0,0,0,11,12,0,0,0,11,12,0,0,0,13,14,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,12,0,0,0,13,13,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,12,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,13,0,0,0,13,12,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,13,0,0,0,12,12,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,3,3,0,0,0,0,0,0,4,5,5,0,0,0,0,0,0,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,7,10,12,11,12,13,15,16,18,15,10,8,8,8,9,10,12,13,14,17,10,7,7,7,7,8,10,12,15,18,10,7,7,5,5,6,8,10,13,15,10,7,6,5,4,4,6,9,12,15,11,7,7,5,4,3,4,7,11,13,12,9,8,7,5,4,4,5,10,13,11,11,11,9,7,5,5,5,9,12,13,12,13,12,10,8,8,7,9,13,14,14,14,14,13,11,11,10,10,13,0,0,0,0,2,0,0,0,100,0,0,0,160,166,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,127,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,127,5,0,0,0,0,0,0,0,0,0,0,0,0,0,248,127,5,0,0,0,0,0,0,0,0,0,0,0,0,0,32,128,5,0,0,0,0,0,0,0,0,0,0,0,0,0,72,128,5,0,0,0,0,0,112,128,5,0,152,128,5,0,0,0,0,0,0,0,0,0,192,128,5,0,232,128,5,0,0,0,0,0,0,0,0,0,16,129,5,0,56,129,5,0,96,129,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,64,127,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,20,7,10,7,8,10,11,11,4,2,20,5,8,6,7,9,10,10,20,20,20,20,19,19,19,19,19,19,7,5,19,6,10,7,9,11,13,17,11,8,19,10,7,7,8,10,11,15,7,5,19,7,7,5,6,9,11,16,7,6,19,8,7,6,6,7,9,13,9,9,19,11,9,8,6,7,8,13,12,14,19,16,13,10,9,8,9,13,14,17,19,18,18,17,12,11,11,13,0,0,0,0,8,0,0,0,161,25,0,0,232,140,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,144,166,5,0,0,0,0,0,4,0,0,0,113,2,0,0,88,138,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,140,5,0,0,0,0,0,2,0,0,0,81,0,0,0,216,137,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,48,138,5,0,0,0,0,0,2,0,0,0,81,0,0,0,88,137,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,176,137,5,0,0,0,0,0,2,0,0,0,33,1,0,0,232,135,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,16,137,5,0,0,0,0,0,4,0,0,0,81,0,0,0,128,135,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,216,135,5,0,0,0,0,0,2,0,0,0,121,0,0,0,208,134,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,80,135,5,0,0,0,0,0,2,0,0,0,169,0,0,0,232,133,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,152,134,5,0,0,0,0,0,2,0,0,0,25,0,0,0,176,133,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,133,5,0,0,0,0,0,2,0,0,0,169,0,0,0,200,132,5,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,120,133,5,0,0,0,0,0,2,0,0,0,225,0,0,0,160,131,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,136,132,5,0,0,0,0,0,2,0,0,0,185,1,0,0,136,129,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,72,131,5,0,0,0,0,0,1,4,4,6,6,7,7,8,7,8,8,9,9,9,9,10,10,10,9,10,10,11,12,12,8,8,8,8,9,9,9,9,10,10,10,10,10,11,11,10,12,11,11,13,11,7,7,8,8,8,8,9,9,9,10,10,10,10,9,10,10,11,11,12,11,11,8,8,8,8,9,9,10,10,10,10,11,11,11,11,11,11,11,12,11,12,12,8,8,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,11,9,9,9,9,10,10,10,10,11,10,11,11,11,11,11,11,12,12,12,12,11,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,13,9,10,10,9,11,10,10,10,10,11,11,11,11,11,10,11,12,11,12,12,11,12,11,10,9,10,10,11,10,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,12,13,12,12,11,9,10,10,11,11,10,11,11,11,12,11,11,11,11,11,12,12,13,13,12,13,10,10,12,10,11,11,11,11,11,11,11,11,11,12,12,11,13,12,12,12,12,13,12,11,11,11,11,11,11,12,11,12,11,11,11,11,12,12,13,12,11,12,12,11,11,11,11,11,12,11,11,11,11,12,11,11,12,11,12,13,13,12,12,12,12,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,13,12,12,12,12,13,11,11,11,12,12,11,11,11,12,11,12,12,12,11,12,13,12,11,11,12,12,11,12,11,11,11,12,12,11,12,11,11,11,12,12,12,12,13,12,13,12,12,12,12,11,11,12,11,11,11,11,11,11,12,12,12,13,12,11,13,13,12,12,11,12,10,11,11,11,11,12,11,12,12,11,12,12,13,12,12,13,12,12,12,12,12,11,12,12,12,11,12,11,11,11,12,13,12,13,13,13,13,13,12,13,13,12,12,13,11,11,11,11,11,12,11,11,12,11,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,4,4,4,4,8,8,12,13,14,14,14,14,14,14,6,6,6,6,6,10,9,14,14,14,14,14,14,14,14,7,6,5,6,6,10,9,12,13,13,13,13,13,13,13,13,7,7,9,9,11,11,12,13,13,13,13,13,13,13,13,7,7,8,8,11,12,13,13,13,13,13,13,13,13,13,12,12,10,10,13,12,13,13,13,13,13,13,13,13,13,12,12,10,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,6,6,7,7,7,7,8,8,9,9,6,5,5,7,8,8,9,8,8,9,9,10,11,6,5,5,8,8,9,9,8,8,9,10,10,11,0,8,8,8,9,9,9,9,9,10,10,11,11,0,9,9,9,8,9,9,9,9,10,10,11,11,0,13,13,9,9,10,10,10,10,11,11,12,12,0,14,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,9,9,11,11,12,12,13,12,0,0,0,10,10,9,9,10,10,12,12,13,13,0,0,0,13,14,11,10,11,11,12,12,13,14,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,14,15,0,0,0,0,0,12,12,12,12,13,13,14,15,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,2,3,3,5,6,7,7,7,7,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,10,10,10,10,10,9,9,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,6,7,6,6,4,7,7,10,9,10,10,10,9,4,7,7,10,10,10,11,10,10,6,10,10,11,11,11,11,10,10,6,10,9,11,11,11,11,10,10,6,10,10,11,11,11,11,10,10,7,11,11,11,11,11,12,12,11,6,10,10,11,10,10,11,11,11,6,10,10,10,11,10,11,11,11,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,9,10,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,10,10,11,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,5,5,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,8,8,8,8,9,9,0,0,0,8,8,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,11,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,8,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+356352);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,6,17,8,12,9,10,10,12,13,5,2,17,4,9,5,7,8,11,13,16,16,16,16,16,16,16,16,16,16,6,4,16,5,10,5,7,10,14,16,13,9,16,11,8,7,8,9,13,16,7,4,16,5,7,4,6,8,11,13,8,6,16,7,8,5,5,7,9,13,9,8,16,9,8,6,6,7,9,13,11,11,16,10,10,7,7,7,9,13,13,13,16,13,13,9,9,9,10,13,0,0,0,0,2,0,0,0,100,0,0,0,104,206,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,167,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,168,5,0,0,0,0,0,0,0,0,0,0,0,0,0,64,168,5,0,0,0,0,0,0,0,0,0,0,0,0,0,104,168,5,0,0,0,0,0,0,0,0,0,0,0,0,0,144,168,5,0,0,0,0,0,184,168,5,0,224,168,5,0,0,0,0,0,0,0,0,0,8,169,5,0,48,169,5,0,0,0,0,0,0,0,0,0,88,169,5,0,128,169,5,0,168,169,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,176,180,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,88,206,5,0,0,0,0,0,4,0,0,0,113,2,0,0,32,178,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,180,5,0,0,0,0,0,2,0,0,0,81,0,0,0,160,177,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,248,177,5,0,0,0,0,0,2,0,0,0,81,0,0,0,32,177,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,120,177,5,0,0,0,0,0,2,0,0,0,33,1,0,0,176,175,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,216,176,5,0,0,0,0,0,4,0,0,0,81,0,0,0,72,175,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,160,175,5,0,0,0,0,0,2,0,0,0,121,0,0,0,152,174,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,24,175,5,0,0,0,0,0,2,0,0,0,169,0,0,0,176,173,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,96,174,5,0,0,0,0,0,2,0,0,0,25,0,0,0,120,173,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,173,5,0,0,0,0,0,4,0,0,0,81,0,0,0,16,173,5,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,104,173,5,0,0,0,0,0,2,0,0,0,225,0,0,0,232,171,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,208,172,5,0,0,0,0,0,2,0,0,0,185,1,0,0,208,169,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,144,171,5,0,0,0,0,0,1,5,5,7,8,8,7,9,9,9,12,12,11,12,12,10,10,11,12,12,12,11,12,12,8,9,8,7,9,10,10,11,11,10,11,12,10,12,10,12,12,12,11,12,11,9,8,8,9,10,9,8,9,10,12,12,11,11,12,11,10,11,12,11,12,12,8,9,9,9,10,11,12,11,12,11,11,11,11,12,12,11,11,12,12,11,11,9,9,8,9,9,11,9,9,10,9,11,11,11,11,12,11,11,10,12,12,12,9,12,11,10,11,11,11,11,12,12,12,11,11,11,12,10,12,12,12,10,10,9,10,9,10,10,9,9,9,10,10,12,10,11,11,9,11,11,10,11,11,11,10,10,10,9,9,10,10,9,9,10,11,11,10,11,10,11,10,11,11,10,11,11,11,10,9,10,10,9,10,9,9,11,9,9,11,10,10,11,11,10,10,11,10,11,8,9,11,11,10,9,10,11,11,10,11,11,10,10,10,11,10,9,10,10,11,9,10,10,9,11,10,10,10,10,11,10,11,11,9,11,10,11,10,10,11,11,10,10,10,9,10,10,11,11,11,9,10,10,10,10,10,11,10,10,10,9,10,10,11,10,10,10,10,10,9,10,11,10,10,10,10,11,11,11,10,10,10,10,10,11,10,11,10,11,10,10,10,9,11,11,10,10,10,11,11,10,10,10,10,10,10,10,10,11,11,9,10,10,10,11,10,11,10,10,10,11,9,10,11,10,11,10,10,9,10,10,10,11,10,11,10,10,10,10,10,11,11,10,11,11,10,10,11,11,10,9,9,10,10,10,10,10,9,11,9,10,10,10,11,11,10,10,10,10,11,11,11,10,9,9,10,10,11,10,10,10,10,10,11,11,11,10,10,10,11,11,11,9,10,10,10,10,9,10,9,10,11,10,11,10,10,11,11,10,11,11,11,11,11,10,11,10,10,10,9,11,11,10,11,11,11,11,11,11,11,11,11,10,11,10,10,10,10,11,10,10,11,9,10,10,10,0,0,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,1,5,5,5,5,9,11,11,10,10,10,10,10,10,10,7,6,6,6,6,10,10,10,10,10,10,10,10,10,10,7,6,6,6,6,10,9,10,10,10,10,10,10,10,10,10,7,7,8,9,10,10,10,10,10,10,10,10,10,10,10,8,7,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,3,5,5,7,7,7,6,6,7,7,7,5,5,7,7,7,6,6,7,7,7,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,7,7,7,7,6,8,8,10,10,6,5,6,8,8,8,8,8,8,8,9,10,10,7,6,6,8,8,8,8,8,8,8,8,10,10,0,8,8,8,8,9,8,9,9,9,10,10,10,0,9,8,8,8,9,9,8,8,9,9,10,10,0,12,11,8,8,9,9,9,9,10,10,11,10,0,12,13,8,8,9,10,9,9,11,11,11,12,0,0,0,8,8,8,8,10,9,12,13,12,14,0,0,0,8,8,8,9,10,10,12,12,13,14,0,0,0,13,13,9,9,11,11,0,0,14,0,0,0,0,14,14,10,10,12,11,12,14,14,14,0,0,0,0,0,11,11,13,13,14,13,14,14,0,0,0,0,0,12,13,13,12,13,14,14,14,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,4,6,6,7,7,8,8,8,8,10,10,10,7,7,8,8,8,9,9,9,10,10,10,6,7,8,8,8,8,9,8,10,10,10,7,7,8,8,9,9,9,9,10,10,10,7,7,8,8,9,9,8,9,10,10,10,8,8,9,9,9,9,9,9,11,11,11,8,8,9,9,9,9,9,10,10,11,11,9,9,9,9,9,9,9,10,11,11,11,10,11,9,9,9,9,10,9,11,11,11,10,11,10,10,9,9,10,10,11,11,11,11,11,9,9,9,9,10,10,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,4,4,6,6,6,7,6,6,4,7,7,11,10,10,11,11,10,4,7,7,10,10,10,11,10,10,6,10,10,11,11,11,11,11,10,6,9,9,11,12,12,11,9,9,6,9,10,11,12,12,11,9,10,7,11,11,11,11,11,12,13,12,6,9,10,11,10,10,12,13,13,6,10,9,11,10,10,11,12,13,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,4,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,0,0,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,13,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,14,0,0,0,0,0,10,10,10,11,11,11,12,12,13,13,13,14,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,12,13,13,14,15,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,14,14,15,0,0,0,0,0,0,0,0,0,12,12,13,13,14,13,14,14,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,8,8,9,9,0,0,0,7,7,8,8,9,9,0,0,0,8,9,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,3,2,7,8,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,6,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,9,12,0,0,0,0,0,0,10,12,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,12,10,0,0,0,0,0,0,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,12,11,0,0,0,0,0,0,9,10,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,12,0,0,0,0,0,0,9,12,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+370312);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,19,7,9,7,8,11,9,12,4,1,19,6,7,7,8,10,11,13,18,18,18,18,18,18,18,18,18,18,8,6,18,8,9,9,11,12,14,18,9,6,18,9,7,8,9,11,12,18,7,6,18,8,7,7,7,9,11,17,8,8,18,9,7,6,6,8,11,17,10,10,18,12,9,8,7,9,12,18,13,15,18,15,13,11,10,11,15,18,14,18,18,18,18,18,16,16,18,18,0,0,0,0,0,0,0,0,0,64,207,64,0,0,0,0,0,88,219,64,0,0,0,0,0,106,232,64,0,0,0,0,0,249,245,64,0,0,0,0,0,0,35,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,62,64,0,0,0,0,0,192,88,64,0,0,0,0,0,76,205,64,0,0,0,0,0,136,211,64,0,0,0,0,0,124,229,64,0,0,0,0,0,255,244,64,0,0,0,0,0,76,221,64,0,0,0,0,0,130,228,64,0,0,0,0,0,100,233,64,0,0,0,0,0,64,239,64,0,0,0,0,0,148,241,64,0,0,0,0,0,11,243,64,0,0,0,0,0,255,244,64,0,0,0,0,0,118,246,64,0,0,0,0,0,219,250,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,128,49,7,65,154,153,153,153,153,153,40,64,0,0,0,0,0,0,42,64,0,0,0,0,0,0,42,64,0,0,0,0,0,0,44,64,0,0,0,0,0,0,46,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,148,209,64,0,0,0,0,0,88,219,64,0,0,0,0,0,23,225,64,0,0,0,0,0,249,229,64,0,0,0,0,0,88,235,64,0,0,0,0,0,76,237,64,0,0,0,0,128,79,242,64,0,0,0,0,0,249,245,64,0,0,0,0,0,106,248,64,0,0,0,0,128,19,252,64,0,0,0,0,128,79,2,65,0,0,0,0,128,49,7,65,0,0,0,0,0,64,223,64,0,0,0,0,0,112,231,64,0,0,0,0,0,76,237,64,0,0,0,0,0,23,241,64,0,0,0,0,0,136,243,64,0,0,0,0,0,255,244,64,0,0,0,0,0,112,247,64,0,0,0,0,0,219,250,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,0,136,3,65,0,0,0,0,8,76,13,65,0,0,0,0,0,88,203,64,0,0,0,0,0,136,211,64,0,0,0,0,0,88,219,64,0,0,0,0,0,142,226,64,0,0,0,0,0,118,230,64,0,0,0,0,0,94,234,64,0,0,0,0,128,79,242,64,0,0,0,0,0,112,247,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,0,249,5,65,0,0,0,0,8,76,13,65,104,209,5,0,120,234,5,0,104,209,5,0,216,234,5,0,104,209,5,0,56,235,5,0,104,209,5,0,152,235,5,0,104,209,5,0,248,235,5,0,104,209,5,0,88,236,5,0,184,236,5,0,200,5,6,0,184,236,5,0,40,6,6,0,184,236,5,0,136,6,6,0,184,236,5,0,232,6,6,0,184,236,5,0,72,7,6,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,30,0,0,0,224,232,7,0,40,66,8,0,40,66,8,0,80,66,8,0,80,66,8,0,2,0,0,0,0,0,0,0,30,0,0,0,224,232,7,0,16,67,8,0,16,67,8,0,80,66,8,0,80,66,8,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,56,67,8,0,56,67,8,0,96,67,8,0,96,67,8,0,2,0,0,0,0,0,0,0,15,0,0,0,224,232,7,0,16,27,8,0,16,27,8,0,56,27,8,0,56,27,8,0,2,0,0,0,0,0,0,0,30,0,0,0,224,232,7,0,248,27,8,0,248,27,8,0,56,27,8,0,56,27,8,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,32,28,8,0,32,28,8,0,72,28,8,0,72,28,8,0,2,0,0,0,0,0,0,0,15,0,0,0,224,232,7,0,248,243,7,0,248,243,7,0,32,244,7,0,32,244,7,0,2,0,0,0,0,0,0,0,30,0,0,0,224,232,7,0,224,244,7,0,224,244,7,0,32,244,7,0,32,244,7,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,8,245,7,0,8,245,7,0,48,245,7,0,48,245,7,0,2,0,0,0,0,0,0,0,15,0,0,0,88,63,7,0,16,180,7,0,16,180,7,0,56,180,7,0,56,180,7,0,2,0,0,0,0,0,0,0,30,0,0,0,88,63,7,0,248,180,7,0,248,180,7,0,56,180,7,0,56,180,7,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,32,181,7,0,32,181,7,0,72,181,7,0,72,181,7,0,2,0,0,0,0,0,0,0,15,0,0,0,88,63,7,0,64,127,7,0,64,127,7,0,104,127,7,0,104,127,7,0,2,0,0,0,0,0,0,0,30,0,0,0,88,63,7,0,40,128,7,0,40,128,7,0,104,127,7,0,104,127,7,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,80,128,7,0,80,128,7,0,120,128,7,0,120,128,7,0,2,0,0,0,0,0,0,0,15,0,0,0,88,63,7,0,112,74,7,0,112,74,7,0,152,74,7,0,152,74,7,0,2,0,0,0,0,0,0,0,30,0,0,0,88,63,7,0,88,75,7,0,88,75,7,0,152,74,7,0,152,74,7,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,128,75,7,0,128,75,7,0,168,75,7,0,168,75,7,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+380496);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+391480);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,15,0,0,0,168,7,6,0,136,10,7,0,136,10,7,0,176,10,7,0,176,10,7,0,2,0,0,0,0,0,0,0,30,0,0,0,168,7,6,0,112,11,7,0,112,11,7,0,176,10,7,0,176,10,7,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,152,11,7,0,152,11,7,0,192,11,7,0,192,11,7,0,2,0,0,0,0,0,0,0,15,0,0,0,168,7,6,0,192,217,6,0,192,217,6,0,232,217,6,0,232,217,6,0,2,0,0,0,0,0,0,0,30,0,0,0,168,7,6,0,168,218,6,0,168,218,6,0,232,217,6,0,232,217,6,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,232,30,6,0,232,30,6,0,16,31,6,0,16,31,6,0,2,0,0,0,0,0,0,0,15,0,0,0,168,7,6,0,152,167,6,0,152,167,6,0,192,167,6,0,192,167,6,0,2,0,0,0,0,0,0,0,30,0,0,0,168,7,6,0,128,168,6,0,128,168,6,0,192,167,6,0,192,167,6,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,232,30,6,0,232,30,6,0,16,31,6,0,16,31,6,0,2,0,0,0,0,0,0,0,15,0,0,0,168,7,6,0,40,106,6,0,40,106,6,0,80,106,6,0,80,106,6,0,2,0,0,0,0,0,0,0,30,0,0,0,168,7,6,0,16,107,6,0,16,107,6,0,80,106,6,0,80,106,6,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,232,30,6,0,232,30,6,0,16,31,6,0,16,31,6,0,2,0,0,0,0,0,0,0,15,0,0,0,168,7,6,0,192,18,6,0,192,18,6,0,232,18,6,0,232,18,6,0,2,0,0,0,0,0,0,0,30,0,0,0,168,7,6,0,168,19,6,0,168,19,6,0,232,18,6,0,232,18,6,0,1,0,0,0,2,0,0,0,6,0,0,0,208,19,6,0,232,30,6,0,232,30,6,0,16,31,6,0,16,31,6,0,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+394688);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,32,106,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,34,6,0,0,0,0,0,0,0,0,0,32,35,6,0,0,0,0,0,0,0,0,0,72,35,6,0,112,35,6,0,0,0,0,0,0,0,0,0,152,35,6,0,192,35,6,0,0,0,0,0,0,0,0,0,232,35,6,0,16,36,6,0,0,0,0,0,0,0,0,0,56,36,6,0,96,36,6,0,16,36,6,0,0,0,0,0,136,36,6,0,176,36,6,0,216,36,6,0,0,37,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,240,34,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+397500);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+400608);
/* memory initializer */ allocate([14,12,13,12,14,13,14,15,15,16,16,13,14,13,16,13,10,11,12,13,14,11,12,13,13,15,12,12,13,14,14,13,14,14,15,16,13,14,14,16,15,12,12,13,12,14,12,12,13,13,15,13,13,13,13,15,14,14,15,14,16,14,15,15,15,16,12,13,12,14,14,13,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,16,16,13,14,14,13,16,14,14,15,14,16,14,14,15,14,16,15,15,16,15,18,16,16,16,16,17,14,14,14,16,15,14,15,15,16,16,14,15,15,16,16,16,16,16,17,17,15,16,16,17,16,10,12,11,14,13,12,13,13,14,14,12,13,12,15,14,14,14,14,15,15,14,15,14,16,15,12,13,12,14,13,12,13,13,15,14,13,14,13,15,14,14,15,15,16,16,14,15,15,17,15,12,13,12,14,14,13,14,14,15,15,13,14,13,15,14,15,15,15,16,16,14,15,15,17,15,14,14,14,16,15,14,15,15,16,16,14,15,15,16,15,16,16,16,16,17,16,17,16,18,17,14,14,14,16,15,15,15,15,16,16,14,15,14,16,15,16,16,17,17,17,15,16,15,17,16,6,8,8,11,11,8,9,10,12,12,8,10,9,12,11,10,11,12,13,13,10,11,11,13,13,8,9,10,11,12,9,10,11,12,13,10,11,11,12,12,11,12,12,13,14,11,12,12,14,14,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,12,11,14,13,11,11,12,13,13,11,12,12,13,14,12,12,12,14,14,13,13,14,14,15,13,14,14,15,15,10,11,11,13,13,11,12,12,14,14,11,12,12,14,13,13,14,14,15,15,13,14,13,15,13,7,9,9,11,12,9,10,11,12,13,9,10,10,12,12,11,12,13,13,14,11,12,12,14,14,9,10,10,12,12,10,10,11,12,13,11,12,11,13,13,12,12,13,13,15,12,13,13,15,14,9,10,10,12,12,10,11,12,13,13,10,11,10,13,12,12,13,13,14,15,12,13,12,14,13,12,12,12,14,14,12,12,13,13,14,13,13,13,15,14,14,13,14,13,16,14,15,15,16,16,11,12,12,13,14,12,13,13,14,15,12,13,12,14,13,14,14,15,15,16,13,14,13,15,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,12,11,14,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,14,15,12,13,13,15,14,9,10,9,12,11,10,11,10,13,12,10,11,10,13,12,12,13,12,14,14,12,13,12,15,13,11,12,12,13,14,12,13,13,14,14,12,13,13,14,14,14,14,14,14,16,14,14,14,16,15,11,12,11,14,12,12,13,12,15,13,12,13,12,15,13,14,14,14,16,15,13,14,13,16,14,10,11,12,13,14,12,12,13,13,15,12,13,13,14,14,14,14,15,15,16,14,14,14,15,16,12,12,13,14,14,12,13,14,14,15,13,14,14,15,15,14,15,15,15,17,15,15,15,16,16,12,12,13,13,14,13,13,14,14,15,12,13,13,14,15,15,15,15,15,17,14,15,15,15,15,14,14,14,16,16,14,15,15,15,16,15,15,15,16,16,16,15,16,16,18,16,16,17,17,17,14,14,14,15,16,15,15,15,16,17,14,15,14,16,16,16,16,17,17,18,16,16,15,17,16,10,12,11,14,13,12,12,12,14,14,11,13,12,14,13,13,14,14,15,15,13,14,13,16,15,12,12,13,14,14,12,13,13,15,15,13,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,12,14,12,13,13,13,15,13,12,13,12,15,13,14,15,15,16,15,14,15,14,16,14,14,14,14,16,16,14,15,15,16,16,14,15,15,16,16,15,16,16,16,17,16,17,16,18,17,13,14,14,16,13,14,15,15,16,14,14,15,14,16,14,16,16,16,17,16,15,16,15,18,15,9,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,15,15,13,14,14,15,15,11,12,12,14,14,11,12,13,14,15,12,13,13,15,14,13,14,14,15,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,14,14,14,14,16,16,14,15,14,16,15,12,13,13,14,15,12,13,14,15,16,13,14,14,16,16,14,14,15,16,17,15,15,15,17,17,13,14,14,15,15,14,15,14,16,16,14,15,14,16,15,15,16,16,17,17,15,16,15,17,16,10,12,12,13,14,11,12,13,14,14,12,13,12,14,14,13,14,14,15,16,13,14,14,16,15,11,12,12,14,14,12,12,13,14,15,12,13,13,15,15,13,13,15,15,17,14,14,15,16,16,12,13,12,14,14,12,13,13,15,15,12,13,13,15,14,14,15,15,16,16,14,15,14,16,16,13,12,14,13,16,13,13,15,14,16,14,13,15,15,16,14,14,16,15,17,15,15,16,16,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,15,16,16,16,17,17,15,16,16,18,16,10,12,12,14,14,12,12,13,14,14,12,13,12,15,14,13,14,14,15,16,14,15,14,16,15,11,12,12,14,14,12,13,13,14,15,13,14,13,15,15,14,14,15,15,16,14,15,15,17,16,12,13,13,14,14,13,13,14,15,15,12,14,13,15,15,14,15,15,16,16,14,15,15,17,15,13,14,13,15,15,13,14,14,15,16,14,15,14,17,16,15,15,15,15,17,16,16,16,18,17,14,14,14,16,16,15,15,15,16,16,14,15,14,16,16,16,16,17,17,17,16,16,16,17,16,11,12,13,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,13,14,15,13,13,14,14,16,13,14,14,15,16,15,14,16,15,17,15,15,16,16,17,12,13,13,15,15,13,14,14,16,16,13,14,14,16,15,15,15,16,17,17,15,16,15,17,16,14,14,15,13,16,15,14,16,14,17,15,15,16,14,17,16,15,17,15,18,16,16,17,16,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,16,17,17,18,18,16,17,15,18,16,11,12,12,14,14,13,13,14,14,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,12,13,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,16,15,16,16,16,16,18,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,16,16,16,17,17,15,16,15,17,15,14,15,14,16,15,14,15,15,16,16,15,16,15,17,16,16,15,16,15,17,17,18,17,18,17,15,15,15,16,16,16,16,16,17,17,14,15,15,17,16,17,17,18,18,18,16,17,15,18,15,9,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,15,15,11,12,12,14,14,12,13,13,14,15,12,13,13,14,14,14,14,15,15,16,14,14,14,16,16,11,12,12,14,14,12,13,13,14,15,11,13,12,14,14,13,14,14,16,16,13,14,14,16,15,13,14,14,15,15,14,14,15,15,16,14,15,14,16,16,15,15,16,16,17,15,16,16,17,17,12,13,13,15,15,13,14,14,16,15,12,14,13,16,15,15,16,15,17,17,14,15,15,17,15,10,12,12,14,14,12,12,13,14,15,12,13,12,14,14,14,14,15,15,16,13,14,14,16,16,12,13,13,14,14,13,13,14,14,15,13,14,13,15,15,14,15,15,15,17,14,15,15,16,16,11,12,12,14,14,13,13,14,15,15,12,13,13,15,14,14,15,15,16,17,14,15,14,16,15,14,14,14,16,16,14,15,15,16,16,15,15,15,16,16,15,16,16,16,18,16,17,16,18,17,13,13,14,15,15,14,14,15,16,16,13,14,14,16,15,16,16,17,17,17,15,15,15,17,15,10,12,12,14,13,12,12,13,14,14,11,13,12,14,14,13,14,14,16,16,13,14,14,16,15,12,12,13,14,14,12,13,13,14,15,13,13,13,15,15,14,14,15,16,16,14,15,15,16,16,11,12,12,14,14,12,13,13,15,15,12,13,12,15,14,14,15,14,16,16,13,15,13,16,15,13,14,14,15,16,14,15,15,15,17,14,15,15,16,16,16,15,16,16,17,16,16,16,17,17,13,14,12,16,13,14,15,13,16,15,13,15,13,16,14,15,16,15,17,16,15,16,14,17,15,11,12,12,14,15,13,13,14,14,16,13,14,13,15,14,15,15,16,16,17,15,15,15,16,16,12,13,13,15,15,13,13,14,15,16,14,15,14,16,15,15,15,16,15,17,16,16,16,17,17,12,13,13,14,15,14,14,15,15,16,13,14,13,15,15,16,16,16,17,17,15,16,15,16,15,15,15,15,16,16,14,15,15,16,17,16,16,16,17,17,16,15,17,15,18,17,18,17,18,18,14,14,15,15,17,15,15,16,16,17,14,15,15,16,16,17,17,17,17,18,16,16,15,17,15,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,14,17,16,13,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,15,16,16,17,15,16,16,17,17,12,13,13,15,14,13,14,14,16,15,13,14,13,16,14,15,16,16,17,16,15,16,14,17,15,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,15,17,16,18,16,17,17,18,18,14,15,14,16,13,15,16,15,17,14,15,16,14,17,14,16,17,16,18,16,16,17,15,18,15,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,8,8,10,9,8,9,9,10,10,8,9,9,10,10,8,10,10,10,10,8,10,10,10,10,9,9,9,10,10,9,10,10,10,11,9,10,10,11,11,10,10,10,11,11,10,10,10,11,11,9,9,9,10,10,9,10,10,11,11,9,10,10,11,10,10,10,10,11,11,10,10,10,11,11,10,10,10,10,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,10,10,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,9,10,10,10,11,10,10,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,12,12,10,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,9,10,10,11,10,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,12,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,7,10,10,11,11,10,10,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,10,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,12,12,10,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,10,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,7,10,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,12,12,10,10,10,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,10,10,10,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,13,13,13,13,12,13,13,13,13,8,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,8,11,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,4,7,7,4,7,6,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,6,7,8,8,9,10,8,10,10,8,9,10,10,11,12,10,11,12,8,10,10,10,11,12,10,12,11,6,8,7,8,10,10,8,10,9,8,10,10,10,11,12,10,12,12,8,10,9,10,12,11,10,12,11,5,8,8,8,10,10,8,10,10,7,9,10,9,10,11,10,11,11,8,10,10,10,12,12,10,12,11,7,9,9,9,11,11,9,11,11,9,10,11,11,11,12,11,12,12,9,11,11,11,12,12,11,12,12,7,9,9,10,11,12,10,12,11,9,11,10,11,11,12,12,13,13,9,11,11,12,13,13,11,13,11,5,8,8,8,10,10,8,10,10,8,10,10,10,11,12,10,12,12,7,9,9,9,11,11,9,11,10,7,9,9,10,11,12,10,12,11,9,11,11,11,11,13,12,13,13,9,10,11,12,13,13,11,12,11,7,9,9,9,11,11,9,11,11,9,11,11,11,12,12,11,12,12,9,11,10,11,12,12,10,12,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,6,6,6,7,7,6,7,7,6,7,7,7,7,8,7,7,8,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,9,5,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,9,8,8,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,8,8,8,9,9,8,9,9,8,9,8,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,6,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,8,8,9,9,8,9,9,8,8,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,8,8,8,8,9,9,8,9,9,8,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,5,4,4,7,7,4,7,6,5,6,7,7,8,9,7,9,9,5,7,6,7,9,9,7,9,8,6,8,8,8,10,10,8,10,10,8,9,10,10,11,12,10,12,12,8,10,10,10,12,12,10,12,11,6,8,8,8,10,10,8,10,10,8,10,10,10,11,12,10,12,12,8,10,9,10,12,11,10,12,11,5,8,8,8,10,10,8,10,10,8,9,10,10,11,11,10,11,11,8,10,10,10,11,12,10,12,11,8,10,10,10,11,11,10,11,11,10,11,11,11,12,13,11,12,13,10,11,11,11,13,13,11,13,13,7,9,9,10,11,12,10,12,11,9,11,11,11,12,13,12,14,13,9,11,11,12,13,14,11,13,12,5,8,8,8,10,10,8,10,10,8,10,10,10,11,12,10,12,12,8,10,9,10,12,11,9,11,11,7,9,9,10,11,12,10,12,11,9,11,11,11,12,13,12,14,13,9,11,11,12,13,14,11,13,12,8,10,10,10,11,11,10,11,11,10,11,11,11,13,13,11,13,13,10,11,10,11,13,12,11,13,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,6,6,8,8,5,7,7,9,9,5,7,7,9,9,6,8,8,11,11,6,8,8,11,11,6,7,7,9,9,7,8,9,10,11,7,9,9,11,10,8,9,10,12,12,8,10,10,12,12,6,7,7,9,9,7,9,9,10,10,7,9,8,11,10,8,10,10,12,12,8,10,9,12,12,8,9,9,11,11,9,10,10,12,12,9,11,11,12,13,11,12,12,13,14,11,12,12,14,14,8,9,9,11,11,9,11,10,13,12,9,10,10,13,12,11,12,12,14,14,11,12,12,14,13,7,8,9,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,13,13,10,11,11,13,13,8,9,10,10,11,10,11,11,12,13,10,11,11,12,12,11,11,12,13,14,11,12,12,14,14,8,10,10,11,11,10,11,11,12,13,10,11,11,12,12,11,12,12,14,14,11,12,12,14,14,10,11,11,12,13,11,12,12,13,14,12,13,13,14,14,13,13,14,14,16,13,14,14,15,16,10,11,11,13,13,12,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,16,15,7,8,8,10,10,8,10,10,11,11,8,10,10,12,11,10,11,11,13,13,10,11,11,13,13,8,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,14,14,11,12,12,14,14,8,10,9,11,10,10,11,11,13,12,10,11,10,13,12,11,12,12,14,14,11,12,11,14,13,10,11,11,13,13,11,12,12,14,14,12,12,12,14,14,13,14,14,15,16,13,14,14,15,15,10,11,11,13,12,12,12,12,14,14,11,12,12,14,13,13,14,14,16,15,13,14,13,16,14,10,11,11,13,13,12,12,13,14,15,12,13,13,14,15,13,14,15,15,16,13,14,14,16,16,11,12,13,14,14,13,13,14,15,16,13,14,14,15,16,14,15,15,16,17,14,15,16,17,17,11,12,12,14,14,13,14,14,15,16,13,14,14,15,15,14,15,15,16,18,14,15,15,17,16,13,14,15,15,16,15,15,16,16,18,15,15,15,17,17,16,16,17,17,18,16,16,16,18,18,14,14,14,16,16,15,15,15,16,17,15,15,15,16,17,16,17,17,18,18,16,16,17,18,17,10,11,11,14,13,12,13,13,15,14,11,13,13,15,14,13,15,15,16,16,13,14,14,16,16,11,12,12,14,14,13,13,13,15,15,13,14,13,15,15,15,15,15,17,16,14,15,15,17,16,11,13,12,14,14,13,14,13,15,15,13,14,13,15,15,14,15,15,17,17,14,15,15,17,16,14,14,14,16,16,14,15,15,17,17,15,15,16,17,16,17,16,17,18,18,16,17,17,18,18,13,14,14,16,15,15,15,15,17,17,14,16,15,16,16,17,17,17,18,18,16,17,16,20,19,6,8,8,10,10,8,10,10,11,11,8,10,10,12,11,10,11,11,13,13,10,11,11,13,13,8,9,10,11,11,10,11,11,12,12,10,11,11,13,12,11,12,12,14,14,11,12,12,14,14,9,10,10,11,11,10,11,11,12,12,10,11,11,13,12,11,12,12,14,14,11,12,12,14,14,10,10,11,12,13,11,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,15,16,10,11,11,13,13,12,12,12,14,14,12,13,12,14,14,13,14,14,16,16,13,14,14,15,15,9,10,10,11,12,10,11,11,12,13,10,11,11,13,12,11,12,12,14,14,11,12,12,14,14,10,10,11,12,13,11,12,12,13,14,11,12,12,13,14,12,13,14,14,15,12,13,13,15,15,10,11,11,13,13,11,12,12,13,14,11,12,12,14,13,12,13,13,15,15,12,13,13,15,15,12,11,13,12,14,13,13,14,14,15,13,13,14,14,15,14,15,15,16,17,14,15,15,16,17,12,13,12,14,14,13,14,14,15,15,13,14,14,15,15,14,15,15,16,17,14,15,15,16,17,8,9,9,11,11,10,11,11,12,13,10,11,11,13,12,12,13,13,14,15,11,13,12,15,14,9,11,10,12,12,11,12,12,13,14,11,12,12,14,13,13,13,14,15,15,13,14,13,15,15,9,11,11,12,12,11,12,12,14,14,11,12,12,14,13,13,14,14,15,16,13,14,13,15,14,11,12,12,14,13,12,13,13,14,15,13,14,14,16,15,15,15,15,15,16,15,16,15,17,17,11,12,12,14,14,13,14,14,15,15,12,13,13,15,14,15,15,15,17,17,14,15,15,17,15,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,16,16,12,13,13,14,15,13,14,14,16,16,14,14,14,15,16,15,16,16,17,17,15,16,16,17,17,12,13,13,15,15,14,14,14,16,16,14,14,15,16,16,15,16,16,17,17,15,16,16,17,17,14,15,15,15,16,15,15,16,16,18,15,16,16,17,17,17,17,17,18,18,16,17,17,19,18,14,15,15,16,17,15,16,16,17,17,15,16,16,18,17,16,17,17,19,18,17,17,17,19,18,10,12,12,14,14,13,13,14,15,15,12,14,13,16,15,15,15,15,17,17,14,15,15,17,16,12,13,13,15,14,13,14,14,16,16,14,14,15,17,16,15,16,16,17,17,15,16,16,18,17,12,13,13,15,14,14,15,15,16,16,13,15,14,16,15,16,17,16,19,17,15,16,16,17,17,14,15,15,17,15,15,16,15,17,17,16,17,16,18,17,17,17,18,18,18,17,17,18,19,18,14,15,15,16,16,15,16,16,17,18,15,16,16,18,16,17,18,18,19,19,17,18,17,18,19,6,8,8,10,10,8,10,10,11,11,8,10,10,12,11,10,11,11,13,13,9,11,11,13,13,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,14,14,11,12,12,14,14,8,10,9,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,14,14,11,12,12,14,14,10,11,11,13,13,11,12,13,14,14,12,12,12,14,14,13,14,14,15,16,13,14,14,16,16,10,11,10,13,12,11,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,16,15,8,9,9,11,11,10,11,11,12,13,10,11,11,13,12,12,13,13,14,15,12,13,13,15,14,10,11,11,12,12,11,11,12,13,14,11,12,12,14,14,13,13,14,15,16,13,14,14,15,15,9,10,11,12,12,11,12,12,13,14,11,12,12,14,13,13,14,14,15,16,12,14,13,15,15,11,12,12,14,14,12,13,13,14,15,13,14,14,16,15,14,15,15,15,17,15,15,16,16,17,11,12,12,13,14,13,14,14,15,15,12,13,13,15,14,15,16,15,16,17,14,16,15,17,15,9,10,10,12,11,10,11,11,13,13,10,11,11,13,12,11,12,12,14,14,11,12,12,14,14,10,11,11,12,13,11,12,12,13,14,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,10,11,10,13,12,11,12,12,13,13,11,12,12,14,13,12,13,13,15,15,12,13,13,15,14,12,13,12,14,14,13,14,14,15,15,13,14,14,15,15,14,15,15,16,16,14,15,15,16,16,11,13,11,14,12,13,13,13,15,14,12,14,13,15,14,15,15,15,17,16,14,15,14,17,15,10,12,12,14,14,13,13,14,15,16,12,14,13,15,15,14,15,16,17,17,14,15,16,17,17,12,13,13,14,15,13,14,14,16,16,14,14,15,16,16,16,16,16,17,17,16,16,16,18,18,12,13,13,14,15,14,14,15,16,16,13,14,14,16,15,16,16,16,17,18,15,16,16,17,17,14,15,15,16,16,15,15,16,17,17,15,16,16,17,18,17,18,18,18,19,17,18,18,19,19,14,15,15,16,16,15,16,16,17,17,15,16,16,17,17,17,17,18,20,18,17,18,17,18,18,11,12,12,14,14,12,13,14,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,17,12,13,13,15,15,14,14,14,16,16,14,14,14,16,16,15,16,16,17,17,15,16,16,17,17,12,13,13,15,14,13,14,14,16,15,14,15,14,16,15,15,16,16,17,17,15,16,16,17,16,14,15,15,16,16,15,16,16,17,17,16,16,16,17,17,17,17,17,19,18,17,17,17,18,19,14,15,14,17,15,15,16,16,17,17,15,16,15,17,17,16,17,17,18,18,16,17,17,18,17,6,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,16,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,17,18,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,16,16,13,14,14,15,16,14,15,15,16,17,14,15,15,17,16,15,16,17,18,17,16,16,16,18,17,14,14,15,16,16,14,15,15,18,16,14,15,15,17,16,16,17,17,18,18,16,17,16,18,17,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,16,16,17,17,15,15,16,17,17,12,13,13,15,15,14,14,14,16,16,13,14,14,16,16,15,16,16,17,17,15,16,16,17,17,14,14,15,15,16,15,15,16,16,17,15,15,16,16,17,16,17,17,17,18,16,17,17,18,18,14,15,15,16,16,15,16,16,17,17,15,16,16,17,17,17,17,17,18,19,17,17,17,18,18,10,12,12,14,14,12,13,14,15,16,13,14,13,15,15,14,15,15,17,17,14,15,16,17,17,12,13,13,15,15,13,14,14,15,15,14,15,14,16,16,15,16,16,17,18,15,17,16,18,17,12,13,13,15,15,14,14,14,16,16,13,14,14,16,15,15,16,16,17,18,15,16,16,17,17,14,14,14,16,16,15,15,16,17,17,15,16,16,17,17,17,17,17,18,20,17,17,17,19,19,14,15,15,16,16,15,17,16,18,18,15,16,15,17,16,17,18,19,19,19,17,17,17,18,17,13,14,14,16,16,14,15,15,17,17,14,15,15,16,17,15,17,17,18,18,16,16,17,18,17,14,15,15,16,17,15,16,16,17,17,15,16,16,17,17,16,17,17,18,18,17,17,17,18,19,14,15,15,16,17,15,16,16,17,17,15,16,16,17,17,16,17,17,18,18,17,17,17,19,19,16,16,16,16,18,16,17,17,17,18,17,17,17,17,19,18,18,18,19,19,18,18,18,19,20,16,16,17,18,18,16,18,17,18,18,17,17,17,20,19,18,18,19,21,20,18,20,18,18,19,10,12,12,14,14,14,14,15,15,17,14,15,14,17,15,16,16,17,18,18,16,18,17,19,18,12,14,13,16,15,14,14,15,15,17,15,16,16,18,17,16,17,18,17,19,17,19,18,20,19,12,13,13,15,15,15,16,17,17,18,14,16,14,17,16,17,18,18,19,19,17,17,17,18,18,15,15,15,17,16,15,16,16,17,17,17,19,17,18,18,18,18,18,18,21,19,20,19,20,19,15,15,16,16,17,17,17,18,20,20,15,16,16,18,17,18,19,19,19,20,18,19,18,19,17,6,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,16,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,17,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,16,16,13,14,14,16,16,15,15,15,16,16,14,15,15,17,16,16,17,17,19,18,16,17,17,18,18,13,14,14,15,15,14,15,15,17,16,14,15,15,17,16,16,17,16,17,18,15,16,16,18,18,10,12,12,14,14,12,13,14,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,17,16,12,13,13,15,15,14,14,14,15,16,14,15,15,16,16,15,16,16,17,18,16,16,16,18,18,12,13,13,14,14,14,14,15,16,16,13,14,14,16,16,15,16,16,18,18,15,16,16,19,17,14,15,15,16,17,15,15,16,17,17,16,17,16,17,18,17,17,18,17,19,17,17,18,18,19,14,14,14,16,16,15,16,16,17,17,15,16,15,17,17,17,17,17,19,20,16,17,17,18,18,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,14,16,16,12,13,13,15,15,14,14,14,16,16,13,14,14,16,16,15,16,16,18,17,15,16,16,17,17,12,13,13,15,15,13,14,14,16,16,13,14,14,16,16,15,16,15,18,18,15,16,15,17,16,14,15,15,16,16,15,16,16,17,17,15,16,16,18,17,16,17,17,18,18,16,17,17,18,18,14,15,14,16,15,15,16,15,17,17,15,16,15,17,16,16,17,17,18,18,17,17,16,19,17,10,12,12,14,15,14,14,15,15,17,14,15,14,17,15,16,17,17,17,18,16,17,17,18,18,12,14,13,16,15,14,14,16,15,17,15,17,16,18,17,17,17,18,17,19,18,18,18,19,18,12,13,14,15,15,15,16,16,16,17,14,15,14,18,16,18,17,18,19,19,17,18,17,20,18,15,15,15,17,17,15,16,16,17,18,18,18,18,19,18,18,18,19,18,20,18,19,19,21,21,15,15,16,16,17,17,18,18,18,18,15,16,16,17,17,17,19,20,19,20,17,18,18,19,17,13,14,14,16,16,14,15,15,16,17,14,15,15,17,17,16,16,17,17,18,15,17,16,17,17,14,15,15,16,16,15,16,16,17,17,16,16,16,17,17,17,17,18,17,18,17,17,17,18,20,14,15,15,17,16,15,16,16,17,17,15,16,16,17,17,17,17,17,18,18,16,17,17,19,18,16,16,17,17,17,17,18,17,19,18,17,17,17,18,19,17,20,18,19,21,17,19,18,19,20,15,17,15,17,16,16,17,17,18,18,17,17,17,18,17,18,19,18,19,21,18,18,17,19,19,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,4,8,8,4,8,8,5,7,8,8,9,10,8,10,10,5,8,7,8,10,10,8,10,9,7,9,9,9,11,11,9,11,11,9,11,11,11,12,13,11,13,13,9,11,11,11,13,13,11,13,13,7,9,9,9,11,11,9,11,11,9,11,11,11,13,13,11,13,13,9,11,11,11,13,13,11,13,12,5,9,9,9,11,11,9,11,11,9,11,11,11,12,13,11,13,13,9,11,11,11,13,13,11,13,13,9,11,12,11,13,13,12,13,13,11,12,13,13,14,15,13,14,14,12,13,13,13,15,15,13,15,14,8,10,10,11,13,13,12,14,13,11,12,12,13,14,15,13,15,15,11,12,12,13,15,15,13,15,14,5,9,9,9,11,11,9,11,11,9,11,11,11,13,13,11,13,13,9,11,10,11,13,13,11,13,12,8,10,10,11,13,13,12,13,13,11,12,12,13,14,15,14,15,15,10,12,12,13,14,15,13,15,14,9,12,11,12,13,13,11,13,13,12,13,13,13,15,15,13,14,15,11,13,12,13,15,14,13,15,14,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,0,0,0,64,0,0,0,88,167,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,107,6,0,0,0,0,0,0,0,0,0,160,107,6,0,0,0,0,0,0,0,0,0,200,107,6,0,240,107,6,0,0,0,0,0,0,0,0,0,24,108,6,0,64,108,6,0,0,0,0,0,0,0,0,0,104,108,6,0,144,108,6,0,0,0,0,0,0,0,0,0,184,108,6,0,224,108,6,0,144,108,6,0,0,0,0,0,8,109,6,0,48,109,6,0,88,109,6,0,128,109,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,56,107,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,14,16,17,18,20,21,7,4,6,8,11,12,14,16,13,5,4,4,8,9,11,13,15,8,4,3,5,7,9,10,17,11,8,4,4,6,9,9,17,11,9,7,6,5,7,8,19,13,11,9,9,7,8,8,21,15,13,11,10,8,8,7,5,0,0,0,243,0,0,0,80,166,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,72,167,6,0,0,0,0,0,5,0,0,0,53,12,0,0,0,154,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,166,6,0,0,0,0,0,5,0,0,0,243,0,0,0,248,152,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,240,153,6,0,0,0,0,0,5,0,0,0,243,0,0,0,240,151,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,232,152,6,0,0,0,0,0,5,0,0,0,243,0,0,0,232,150,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,224,151,6,0,0,0,0,0,5,0,0,0,53,12,0,0,152,138,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,150,6,0,0,0,0,0,5,0,0,0,53,12,0,0,72,126,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,128,138,6,0,0,0,0,0,1,0,0,0,7,0,0,0,32,126,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,40,126,6,0,0,0,0,0,5,0,0,0,243,0,0,0,24,125,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,16,126,6,0,0,0,0,0,5,0,0,0,243], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+410848);
/* memory initializer */ allocate([16,124,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,8,125,6,0,0,0,0,0,5,0,0,0,243,0,0,0,8,123,6,0,1,0,0,0,0,106,120,225,0,106,120,97,2,0,0,0,0,0,0,0,0,124,6,0,0,0,0,0,5,0,0,0,53,12,0,0,184,110,6,0,1,0,0,0,0,136,83,225,0,136,51,97,3,0,0,0,0,0,0,0,240,122,6,0,0,0,0,0,1,0,0,0,25,0,0,0,48,110,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,80,110,6,0,0,0,0,0,1,0,0,0,25,0,0,0,168,109,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,200,109,6,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,4,5,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,7,7,12,12,5,11,12,12,12,5,12,11,12,12,12,12,12,12,12,12,13,13,13,13,7,11,11,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,13,10,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,7,7,7,8,7,8,7,7,7,8,7,8,8,8,8,8,7,8,7,8,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,9,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,8,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,6,5,7,7,5,7,7,5,7,7,7,7,9,7,9,9,6,7,7,8,9,9,7,9,7,6,8,8,8,9,10,8,9,9,8,9,10,9,9,10,10,10,10,8,9,9,10,10,11,9,10,10,6,8,8,8,9,9,8,10,9,8,9,9,9,10,10,10,11,10,8,10,9,10,11,10,9,11,9,6,8,8,7,9,9,7,9,9,7,9,9,8,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,9,9,9,9,10,9,10,10,9,9,10,10,9,11,10,11,11,9,10,10,10,11,11,10,11,10,6,9,8,9,9,10,9,10,9,8,10,10,9,9,10,10,11,11,9,10,10,10,11,11,9,11,9,6,8,8,7,9,9,7,9,9,8,9,9,9,9,10,9,10,10,7,9,9,9,10,10,8,10,9,6,8,9,9,9,10,9,10,9,9,10,10,9,9,11,10,11,11,8,9,10,10,11,11,9,10,9,7,9,9,9,10,10,9,10,9,9,10,10,10,10,11,10,11,11,9,10,9,10,11,11,10,11,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,6,6,9,9,5,7,8,10,11,5,8,7,11,10,8,10,11,12,13,8,11,10,13,12,6,7,8,10,11,7,8,10,10,12,8,9,9,12,12,10,10,12,12,14,10,12,12,14,13,6,8,7,11,10,8,9,9,12,12,7,10,8,12,11,10,12,12,13,14,10,12,10,14,12,9,10,11,11,13,10,10,11,11,13,11,12,12,13,14,12,12,13,11,15,13,14,14,15,14,9,11,10,13,11,11,12,12,13,13,10,11,10,13,11,13,14,14,15,15,12,13,12,15,11,6,8,9,11,12,8,9,11,12,13,8,10,10,13,13,11,12,13,14,15,11,12,13,14,14,9,9,10,12,13,10,10,12,12,14,10,11,11,13,14,12,12,14,14,15,13,13,14,15,15,9,10,10,13,13,10,11,11,13,14,10,11,10,14,13,13,13,14,15,15,12,14,13,15,14,12,12,13,13,14,12,13,14,13,15,13,14,14,15,15,14,14,15,14,16,15,15,15,16,16,12,13,13,14,14,13,14,14,15,15,12,14,13,15,14,14,15,15,16,16,14,15,14,16,14,6,9,8,12,11,8,10,10,13,13,8,11,9,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,13,13,10,10,11,13,14,10,12,11,14,13,12,13,14,14,15,13,13,13,15,14,9,10,9,13,12,10,11,11,14,13,10,12,10,14,12,13,14,13,15,15,12,14,12,15,14,12,13,13,14,14,13,13,13,14,15,13,14,14,15,15,14,14,15,14,16,14,15,15,16,16,12,13,12,14,13,13,14,14,15,15,12,14,13,15,13,15,15,15,16,16,14,15,14,16,14,11,12,12,13,14,12,13,14,14,16,12,13,13,15,15,14,14,16,15,17,14,15,15,16,16,12,13,14,14,15,13,13,15,15,16,14,14,14,15,16,15,15,16,16,17,15,15,16,16,17,13,13,13,15,15,14,14,15,15,16,13,14,14,15,16,15,15,16,16,17,15,16,15,17,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,17,16,18,16,17,17,17,17,15,15,15,16,16,15,16,16,17,17,15,16,16,17,16,16,17,17,18,18,16,17,16,17,16,11,12,12,15,13,13,13,13,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,17,15,13,13,13,15,14,13,14,14,16,15,14,14,14,16,15,15,15,16,16,17,15,16,15,17,16,12,14,13,15,14,14,14,14,16,15,13,14,13,16,15,15,16,16,17,16,15,16,15,17,16,15,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,17,17,17,17,17,17,18,17,14,15,15,16,16,15,16,16,17,16,15,16,15,17,16,17,17,17,18,17,16,17,16,18,16,6,9,9,12,12,8,10,10,12,13,8,10,10,13,12,10,12,12,14,15,11,13,12,15,14,8,9,10,12,13,9,10,11,13,14,10,11,11,14,13,12,12,13,14,15,12,13,13,15,15,8,10,10,13,13,10,11,11,13,14,10,12,10,14,13,12,13,13,15,15,12,14,13,15,14,11,12,12,13,14,12,12,13,13,15,12,13,13,15,15,14,13,15,14,16,14,15,15,16,16,12,13,13,14,14,13,13,14,15,14,12,14,13,15,14,14,15,15,16,15,14,15,14,16,14,7,9,10,12,12,9,10,11,13,14,9,11,10,13,13,11,12,13,14,15,12,13,13,15,14,9,10,11,12,13,10,10,12,13,14,11,11,12,14,14,12,12,14,14,15,13,13,14,15,15,9,11,11,13,13,11,12,12,14,14,10,12,10,14,13,13,14,14,15,15,13,14,13,16,14,12,12,13,14,15,13,13,14,14,16,13,14,14,15,15,14,14,15,14,17,14,15,15,16,16,12,13,13,15,14,13,14,14,15,15,13,14,13,16,14,15,15,15,16,16,14,15,14,16,14,7,10,9,13,12,10,11,12,12,14,10,12,11,14,12,12,13,13,14,15,12,14,13,15,14,9,11,10,13,13,10,11,12,13,14,12,13,12,15,13,13,13,14,13,15,13,14,14,16,15,10,11,11,13,13,12,12,13,14,14,11,12,11,14,13,14,14,14,15,16,13,14,13,16,13,12,13,13,14,14,12,13,13,14,15,14,14,14,15,15,14,13,15,13,16,15,15,15,17,16,13,13,13,14,14,14,14,14,15,15,12,13,13,15,14,15,16,16,16,16,14,15,14,16,13,11,12,13,14,15,12,13,14,15,16,13,14,14,15,15,14,14,15,15,17,14,15,15,16,16,13,13,14,14,15,13,13,15,14,16,14,14,15,15,16,15,14,16,15,17,15,16,16,16,17,13,14,14,15,15,14,14,15,16,16,13,15,14,16,16,15,16,16,17,17,15,16,15,17,16,14,15,15,15,17,15,15,16,15,17,15,16,16,16,17,16,16,17,16,18,17,17,17,17,18,15,15,15,17,16,15,16,16,17,17,15,16,16,17,16,16,17,17,18,18,16,17,16,18,17,11,13,12,15,14,13,13,14,15,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,13,14,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,16,16,16,15,16,15,18,16,13,14,14,15,15,14,15,15,15,16,13,15,13,16,15,15,16,16,17,17,15,16,15,17,16,15,15,15,16,16,15,15,15,16,17,16,16,16,17,16,16,16,17,16,17,17,17,17,18,17,15,15,15,16,16,16,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,17,15,6,9,9,12,12,8,10,10,12,13,8,10,10,13,12,11,12,13,14,15,10,12,12,14,14,9,10,10,13,13,10,10,12,13,14,10,11,11,14,13,12,13,14,14,15,12,13,13,15,15,8,10,9,13,12,10,11,11,13,14,9,11,10,14,13,12,13,13,15,15,12,13,12,15,14,12,13,13,14,14,12,13,13,14,15,13,14,14,14,15,14,14,15,14,16,14,15,15,16,16,11,12,12,14,13,13,13,13,15,15,12,13,12,15,13,14,15,15,16,16,14,15,14,16,14,7,9,10,12,13,10,10,12,12,14,10,12,11,14,13,12,13,14,14,15,12,13,13,15,14,10,11,11,13,13,11,11,12,13,14,12,13,12,14,14,13,13,14,13,16,14,14,14,15,15,9,10,11,13,14,12,12,13,13,15,10,12,10,14,13,13,14,14,15,16,13,14,13,15,13,13,14,13,14,15,12,13,13,14,15,14,14,14,15,15,14,13,15,13,16,15,16,16,16,16,12,13,13,14,14,14,14,14,15,15,12,13,13,15,14,15,15,16,16,16,14,15,13,16,13,7,10,9,12,12,9,10,11,13,13,9,11,10,14,13,12,13,13,14,15,11,13,12,15,14,9,11,11,13,13,10,10,12,13,14,11,12,12,14,14,13,13,14,14,16,13,14,14,16,15,9,11,10,13,12,11,12,11,14,14,10,12,10,14,13,13,14,13,15,15,12,14,12,16,14,12,13,13,14,15,13,13,14,14,16,13,14,14,15,15,14,14,15,14,16,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,17,14,11,12,13,14,15,13,13,14,14,16,13,14,13,15,15,15,15,16,16,17,15,15,15,16,16,13,14,13,15,15,13,13,15,15,16,14,15,15,16,16,15,15,16,15,17,16,16,16,17,17,13,13,14,14,15,14,14,15,15,16,13,14,13,15,15,15,16,16,16,17,15,16,15,16,16,15,15,15,16,16,15,15,16,16,17,16,16,16,17,17,16,16,17,16,18,17,17,17,18,18,15,15,15,16,16,16,16,16,17,17,15,15,15,16,16,17,17,17,17,18,16,16,16,17,15,11,13,12,15,14,13,13,14,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,16,15,13,14,14,15,15,13,14,14,16,16,14,15,14,16,16,15,15,16,17,17,15,16,16,17,17,13,14,13,15,14,14,14,14,16,15,13,15,13,16,14,15,16,15,17,16,15,16,14,17,15,14,16,15,16,17,15,16,16,16,17,15,16,16,17,17,16,16,17,17,18,16,17,17,18,17,14,15,15,17,15,15,16,16,17,16,15,16,15,17,15,16,17,17,18,17,16,17,16,18,15,10,12,12,14,14,12,13,13,15,15,12,13,13,15,15,13,14,14,15,16,14,15,14,16,16,12,13,13,15,15,12,13,14,15,15,13,14,14,15,15,14,14,15,16,17,14,15,15,17,16,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,15,16,14,14,15,15,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,14,15,15,16,16,15,15,15,16,16,15,15,15,16,16,16,17,16,17,17,16,16,16,18,16,11,12,12,14,14,12,13,14,15,15,12,13,13,15,15,13,14,15,16,16,14,15,15,16,16,12,13,13,15,15,13,13,14,15,16,13,14,14,15,16,14,14,15,16,17,15,15,15,16,17,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,15,15,15,16,17,15,16,15,17,16,14,14,15,15,16,14,14,15,15,17,15,15,16,16,17,15,15,16,15,18,16,16,16,17,17,14,15,15,16,16,15,16,16,17,17,15,15,15,17,16,16,17,16,17,17,16,16,16,18,16,11,12,12,14,14,13,13,14,15,15,13,14,13,15,15,14,15,15,16,16,14,15,15,16,16,12,13,13,15,15,13,13,14,15,15,14,14,14,16,15,15,15,15,15,16,15,16,15,17,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,15,15,16,16,17,15,16,15,17,15,14,15,14,16,16,14,15,15,16,16,15,16,15,17,16,15,15,16,15,17,16,17,16,17,17,14,15,15,16,16,15,16,16,16,17,14,15,15,16,16,16,17,17,17,18,16,16,16,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,15,16,14,14,15,15,17,14,15,15,16,16,15,14,16,15,17,15,16,16,17,17,13,14,14,16,16,14,15,15,16,16,14,15,14,16,16,15,16,16,17,17,15,16,15,17,16,15,15,16,15,17,15,15,16,15,17,15,16,16,16,17,16,15,17,15,18,17,17,17,17,17,15,15,15,17,17,16,16,16,17,17,15,16,15,17,17,16,17,17,18,18,16,17,15,18,15,11,12,12,15,15,13,13,15,14,16,13,14,13,16,14,15,15,16,16,17,15,16,15,17,15,12,14,13,16,14,13,13,14,14,16,14,15,14,16,15,15,15,16,15,17,16,16,16,17,16,12,13,14,15,16,15,15,15,15,16,13,15,13,16,14,16,16,16,17,17,15,16,15,17,15,15,16,15,16,15,14,14,15,16,16,16,16,16,17,16,15,15,16,15,17,17,17,17,18,17,15,15,15,16,16,16,16,16,16,17,14,15,15,17,16,17,17,17,17,18,15,16,15,18,14,10,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,14,15,15,16,13,15,14,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,15,15,14,15,15,16,17,14,15,15,17,16,12,13,13,15,15,13,14,14,15,15,12,14,13,15,15,14,15,15,16,17,14,15,14,17,15,14,15,15,16,16,14,15,15,16,17,15,15,15,17,16,16,16,16,16,17,16,16,16,17,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,16,15,16,16,17,17,15,16,15,17,16,11,12,12,14,15,13,13,14,14,15,13,14,13,15,15,14,15,15,16,16,14,15,15,16,16,12,14,13,15,15,13,13,14,15,16,14,15,14,16,15,15,15,16,15,17,15,16,16,17,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,15,15,16,16,17,15,15,15,16,16,14,15,15,16,16,14,15,15,16,16,15,16,16,17,17,16,16,16,16,17,16,17,17,18,17,14,14,15,15,16,15,15,16,16,17,14,15,15,16,16,16,16,16,17,17,15,16,15,17,15,11,12,12,14,14,12,13,14,15,15,12,13,13,15,15,14,15,15,16,16,13,15,14,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,15,15,16,17,15,15,15,17,16,12,13,13,15,15,13,14,14,16,15,13,14,13,16,15,15,16,15,17,17,14,15,14,17,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,16,16,18,16,17,16,18,17,14,15,14,16,15,15,15,15,17,16,14,15,14,17,15,16,17,16,17,17,15,16,15,17,15,11,12,12,15,15,13,13,15,14,16,13,15,13,16,14,15,15,16,15,17,15,16,15,17,16,12,14,13,15,15,13,13,15,15,16,15,15,15,16,15,15,15,16,15,17,16,16,16,17,16,12,13,14,15,16,14,14,15,15,16,13,14,13,16,14,16,16,16,16,17,15,16,15,17,15,15,16,15,16,16,14,15,15,16,16,16,16,16,17,16,15,15,16,15,17,17,17,17,18,17,15,15,15,15,16,16,16,16,16,17,14,15,14,16,15,17,17,17,17,18,15,16,15,17,15,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,16,15,13,14,15,16,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,13,14,13,16,15,14,15,15,16,16,13,15,14,16,15,15,16,16,17,17,15,16,14,17,15,15,15,16,17,17,15,15,16,16,17,16,16,16,17,17,16,15,17,16,18,17,17,17,18,18,15,15,15,17,14,16,16,16,17,16,15,16,15,17,15,16,17,17,18,17,16,17,15,18,15,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,9,9,10,10,9,10,10,10,11,9,10,10,11,10,9,10,10,11,11,9,10,10,11,11,9,10,10,11,11,10,10,10,11,11,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,9,10,10,11,11,10,10,10,11,11,9,10,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,9,10,10,11,11,10,10,11,11,11,10,10,11,11,11,10,11,11,11,12,10,11,11,12,12,10,10,11,11,11,10,11,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,11,11,11,11,11,11,11,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,10,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,11,10,11,11,11,11,10,11,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,11,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,10,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,12,13,12,9,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,11,11,11,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,10,11,11,11,10,11,11,12,12,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,10,11,11,11,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,12,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,11,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,10,11,11,12,11,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,9,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,11,11,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,11,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,11,12,10,11,11,12,11,11,11,12,12,12,11,11,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,12,13,12,12,12,12,12,12,13,13,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,13,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,13,13,13,12,12,13,12,13,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+421088);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+431328);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+441568);
/* memory initializer */ allocate([17,14,15,13,17,14,13,14,13,16,16,13,13,14,15,16,14,15,15,17,17,15,14,16,15,18,17,18,17,20,18,13,14,14,16,16,15,15,15,17,17,13,14,13,17,15,17,17,18,18,18,15,16,14,19,14,12,13,13,15,16,13,13,15,16,17,13,14,14,16,16,15,15,17,17,19,16,17,17,19,18,13,13,14,15,17,14,13,15,15,17,14,15,15,16,17,16,15,18,16,19,17,17,17,18,19,13,14,14,17,16,14,15,15,17,17,14,15,14,17,16,17,17,17,18,19,16,17,16,19,17,16,16,17,16,18,16,16,17,16,19,17,17,18,18,19,18,17,18,17,21,19,19,19,20,19,16,17,17,18,18,17,17,18,18,19,16,17,16,18,18,19,19,19,19,20,18,18,17,20,18,11,13,13,16,15,13,14,14,16,17,13,15,14,17,16,16,17,17,18,18,17,17,17,19,18,13,14,13,17,16,14,13,14,16,17,15,16,15,18,16,17,16,17,17,19,18,18,18,20,18,13,14,14,16,17,15,15,15,17,18,14,15,14,18,16,18,18,18,19,20,17,18,16,20,17,16,17,16,18,18,16,16,17,18,18,17,18,18,19,18,18,17,19,17,20,19,20,19,22,20,16,16,17,18,18,18,17,17,19,19,16,17,16,18,17,19,20,19,22,21,18,19,18,21,17,6,8,8,12,12,8,9,10,13,13,8,9,9,13,13,12,13,13,15,16,11,13,13,16,15,8,9,10,13,13,9,10,11,13,14,10,11,11,14,14,13,13,14,15,16,13,14,14,16,16,8,9,9,13,13,10,11,11,14,14,9,10,9,14,13,13,14,14,16,17,12,14,12,16,14,12,13,13,15,16,13,13,14,15,16,13,14,14,15,17,15,15,16,15,18,16,16,17,17,17,12,13,13,16,14,13,14,14,16,16,12,14,13,16,14,16,17,17,18,18,15,15,14,18,14,7,9,9,13,13,9,10,11,13,14,9,10,10,14,13,13,14,14,15,17,13,14,14,16,15,9,10,10,14,14,10,10,11,13,15,11,12,12,15,14,14,13,15,14,17,14,15,15,17,17,9,10,10,13,14,11,11,12,14,15,9,11,10,14,13,14,15,15,16,18,13,14,13,16,14,13,14,14,16,16,13,13,14,15,17,15,15,15,16,17,15,14,16,15,18,17,17,18,19,18,13,14,14,16,16,14,15,15,17,17,13,14,13,16,15,17,17,18,18,18,15,16,14,18,15,7,9,9,13,13,9,10,10,13,14,9,11,10,14,13,12,13,14,15,16,12,14,13,16,15,9,10,10,13,14,10,10,11,13,14,11,11,11,15,14,13,13,14,14,16,14,14,14,17,16,9,10,9,14,13,11,11,11,14,14,10,11,9,15,13,14,14,14,16,16,13,14,12,17,14,13,13,14,15,16,13,13,14,15,16,14,15,14,16,17,15,14,16,14,18,16,17,17,18,18,13,14,13,16,14,14,14,14,16,16,13,14,13,17,14,17,17,17,18,18,15,16,14,18,15,11,13,13,16,16,13,14,15,16,17,13,14,14,17,16,16,17,17,18,19,17,17,17,19,18,13,14,14,17,17,13,13,15,16,18,15,15,15,17,17,17,16,18,17,20,18,17,18,19,19,13,14,14,16,17,15,15,16,16,18,14,15,14,16,16,17,17,18,18,20,17,18,16,18,17,16,17,16,19,18,16,16,17,18,19,18,18,18,19,19,18,17,18,17,21,20,19,19,21,21,16,16,17,18,18,17,17,18,19,19,16,17,16,19,18,20,20,20,19,21,18,18,17,20,18,12,13,13,16,15,13,14,14,16,16,13,14,13,17,16,16,17,17,18,18,15,17,15,19,17,13,14,14,16,17,14,14,15,16,17,14,15,15,17,17,16,16,17,17,18,17,17,17,19,19,13,14,13,17,15,14,15,15,17,16,14,15,13,17,15,17,18,17,19,18,16,17,15,20,16,16,17,17,18,18,16,16,17,18,18,17,18,17,19,18,17,17,18,18,20,19,20,19,20,19,16,16,16,19,16,17,17,17,19,18,16,17,16,19,16,19,19,19,19,19,18,19,17,19,17,11,13,13,16,16,13,14,14,17,17,13,14,14,17,17,15,17,17,19,19,16,18,17,20,19,12,14,14,17,17,13,14,15,17,18,14,15,15,17,18,16,16,17,18,20,17,18,18,20,18,13,14,14,17,17,14,15,15,17,18,14,15,15,17,17,17,18,17,19,19,17,18,17,19,19,15,16,16,18,18,15,16,17,18,19,16,17,17,19,19,17,17,18,18,21,18,19,19,21,19,16,17,17,18,18,17,17,18,19,19,17,18,17,19,19,19,19,19,20,20,18,19,18,21,19,12,13,13,16,16,13,14,14,16,17,13,15,14,17,16,15,16,17,17,19,16,17,17,19,18,13,13,14,16,17,14,13,15,16,17,14,15,15,17,17,15,15,17,17,20,17,17,18,19,18,13,14,14,17,16,15,15,15,17,18,14,15,14,17,16,17,17,17,18,18,16,17,16,19,17,16,15,17,17,19,16,15,17,16,19,17,16,17,18,19,17,16,19,16,20,19,18,19,19,19,16,17,17,18,18,17,17,17,18,19,16,17,16,19,18,20,19,19,20,19,18,18,17,20,17,11,13,13,16,16,13,14,15,16,17,14,15,14,18,16,17,17,17,18,21,17,18,17,20,19,13,14,14,17,16,13,14,15,16,18,15,16,15,18,17,17,16,17,17,19,17,18,18,20,19,13,14,14,16,17,15,15,16,17,18,14,15,14,18,17,17,18,18,19,20,17,18,16,19,17,16,17,15,19,18,16,16,16,18,18,17,18,17,20,19,18,17,18,17,20,20,20,19,22,20,16,17,17,18,19,18,18,18,19,20,16,17,16,19,18,20,19,19,20,20,18,19,17,20,17,13,14,14,16,17,14,14,16,16,18,14,16,15,17,16,16,16,17,17,18,17,17,16,19,18,14,14,15,16,17,14,14,16,16,18,16,16,16,17,17,16,15,17,16,19,18,18,18,19,19,14,15,15,17,17,15,16,16,17,18,14,16,14,18,16,17,17,18,18,19,16,17,16,19,17,16,16,17,16,18,16,16,17,16,19,18,18,18,17,18,17,16,18,16,20,19,19,19,19,19,16,17,17,18,18,17,17,18,19,19,16,17,16,19,17,18,19,19,19,20,17,18,16,20,16,11,14,13,17,17,14,14,16,16,18,14,16,14,19,16,18,18,19,18,19,18,19,18,21,18,13,15,14,18,16,14,14,16,16,18,16,17,16,19,17,18,16,19,17,20,19,19,19,21,19,13,14,15,17,18,17,16,17,17,19,14,16,14,18,16,20,19,19,20,21,18,19,16,21,17,17,18,16,19,17,16,16,17,18,18,19,19,18,21,18,17,17,18,17,20,20,20,20,22,20,17,17,18,18,20,19,19,19,18,20,16,17,17,19,19,21,21,21,20,21,17,19,17,23,17,11,13,13,16,16,13,14,14,17,17,13,14,14,17,17,16,17,17,19,20,15,16,16,19,19,13,14,14,16,17,14,15,15,17,18,14,15,15,17,17,17,17,18,19,19,17,17,18,19,19,13,14,14,17,16,14,15,15,17,17,13,15,14,18,17,17,18,18,19,20,16,17,16,19,18,16,16,17,18,18,17,17,17,18,19,17,18,17,19,19,19,19,19,19,20,19,20,19,20,20,15,16,16,18,17,16,17,17,20,18,15,16,16,19,17,19,19,19,20,20,17,18,17,21,17,11,13,13,16,16,13,14,15,16,17,13,15,14,17,16,17,17,18,18,20,17,17,17,19,19,13,14,14,17,17,14,14,15,17,18,15,15,15,18,17,17,17,18,17,20,18,18,17,20,18,13,14,14,16,17,15,15,16,17,18,14,15,13,17,17,17,18,18,19,20,17,17,16,19,17,16,17,17,18,18,16,16,17,18,18,18,18,18,19,19,18,17,19,18,21,19,20,20,20,20,16,15,17,18,18,17,17,18,18,20,16,16,16,18,17,20,19,20,21,22,17,18,17,20,17,12,13,13,16,16,13,14,15,16,17,13,14,14,17,16,16,17,18,18,19,15,16,16,19,18,13,14,14,16,17,14,14,15,16,17,14,15,15,17,17,16,16,17,17,19,17,17,17,19,18,13,14,13,17,16,14,15,15,17,17,13,15,13,17,16,17,17,17,19,19,15,17,15,19,17,16,17,17,18,18,16,16,17,17,19,17,18,17,19,19,18,17,19,17,19,19,19,19,20,19,15,17,15,19,16,17,17,16,19,18,16,17,15,18,16,19,19,19,20,19,17,19,16,19,16,11,14,14,17,17,15,14,16,16,18,15,16,14,18,16,18,18,19,18,21,18,19,18,20,18,13,15,14,18,17,14,14,16,16,18,16,17,16,19,17,17,17,19,17,22,19,19,19,21,19,13,14,15,17,18,17,16,17,17,19,14,16,14,18,16,19,19,19,20,21,18,18,16,20,17,17,18,16,19,18,15,17,17,19,19,19,19,18,21,19,18,17,20,17,21,22,21,20,21,21,17,16,19,18,20,19,18,19,18,20,16,17,16,19,18,21,20,21,19,23,18,19,16,20,17,13,14,14,17,16,14,14,15,16,18,14,16,14,17,16,16,16,17,17,19,16,17,16,19,17,14,15,15,17,17,14,14,16,16,17,15,16,16,18,17,16,16,17,17,19,17,18,17,19,18,14,15,14,17,16,16,16,16,17,17,14,16,14,17,16,18,18,18,18,19,16,17,15,19,16,17,17,17,18,18,16,15,17,17,18,18,18,18,19,19,17,16,18,16,19,19,19,19,19,19,16,17,16,19,16,18,18,17,19,18,16,17,16,19,16,19,19,20,19,19,17,18,16,20,16,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,8,8,10,10,8,9,9,10,11,8,10,9,11,10,9,10,10,11,11,9,10,10,11,11,8,9,9,10,10,9,9,10,11,11,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,8,9,9,11,10,10,10,10,11,11,9,10,9,11,11,10,11,11,11,11,10,11,10,11,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,9,10,11,11,10,10,11,11,11,10,10,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,10,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,10,10,11,11,11,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,9,11,11,10,10,10,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,10,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,10,11,11,11,11,11,12,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,12,11,11,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,12,12,13,12,10,11,11,12,11,11,11,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,12,8,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,11,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,13,13,13,13,12,13,13,13,13,8,10,10,11,11,10,10,11,11,11,9,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,11,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,12,12,13,12,13,12,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,12,13,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,13,12,13,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,13,13,13,13,12,13,12,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,5,7,8,5,8,7,5,7,7,7,7,9,7,9,9,5,7,7,8,9,9,7,9,7,6,8,8,8,9,10,8,9,9,8,9,10,9,9,11,10,11,11,8,9,9,10,11,11,9,11,10,6,8,8,8,9,9,8,10,9,8,9,9,9,10,11,10,11,10,8,10,9,10,11,11,9,11,9,6,8,8,7,9,9,8,10,9,7,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,11,10,7,9,9,8,10,10,9,10,10,9,9,10,10,10,11,10,11,11,9,10,10,10,11,11,10,11,10,7,9,9,9,9,10,9,10,9,8,10,9,9,9,11,10,11,11,9,10,10,10,11,11,9,11,9,6,8,8,8,9,10,7,9,9,8,9,9,9,10,10,9,10,10,7,9,9,9,10,10,9,10,9,7,9,9,9,9,10,9,10,9,9,10,10,9,9,11,10,11,11,8,9,10,10,11,11,9,11,9,7,9,9,9,10,10,8,10,10,9,10,10,10,10,11,10,11,11,9,10,9,10,11,11,10,11,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,7,7,6,7,7,6,7,7,6,7,7,7,8,8,7,8,8,6,7,7,7,8,8,7,8,8,7,7,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,7,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,6,8,8,7,8,8,7,8,8,7,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,9,8,8,9,8,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,8,8,8,9,9,8,9,8,8,8,8,8,9,9,9,9,9,8,9,8,9,9,9,9,9,9,6,8,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,8,8,8,9,9,9,9,9,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,9,9,8,9,8,8,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,5,7,8,5,8,7,5,7,8,8,8,10,8,10,10,5,8,7,8,10,10,8,10,8,6,8,9,8,10,12,9,11,11,9,10,11,11,11,13,12,13,13,9,11,11,11,13,13,11,13,12,6,9,8,9,11,11,8,12,10,9,11,11,11,12,13,11,13,13,9,11,10,11,13,13,11,13,11,5,9,9,8,11,11,9,12,11,8,10,11,10,11,13,11,13,13,9,11,11,11,13,13,11,13,12,8,10,11,10,12,13,10,13,12,10,10,13,11,11,14,12,13,14,11,13,12,13,14,14,12,14,12,8,11,10,11,12,13,11,14,12,10,13,12,12,12,13,13,15,14,11,12,13,13,14,15,12,14,12,5,9,9,9,11,12,8,11,11,9,11,11,11,12,13,11,13,13,8,11,10,11,13,13,10,13,11,8,10,11,11,12,14,11,13,12,11,13,12,12,12,14,13,15,14,10,12,13,13,14,15,12,13,12,8,11,10,10,12,13,10,13,12,11,12,13,12,12,14,13,14,14,10,13,10,12,14,13,11,14,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,6,6,9,9,6,7,8,10,10,6,8,7,10,10,8,10,10,12,13,8,10,10,13,12,6,8,8,10,10,7,8,9,10,11,8,9,9,11,11,10,10,11,12,13,10,11,11,14,13,6,8,8,10,10,8,9,9,11,11,7,9,8,11,10,10,11,11,13,14,10,11,10,13,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,13,14,13,15,14,9,10,10,13,12,10,11,11,13,13,10,11,10,13,12,13,13,14,14,15,12,13,12,15,12,6,8,8,10,11,8,9,10,11,12,8,9,9,11,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,11,12,13,11,11,13,13,15,11,12,12,14,14,8,9,9,12,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,14,14,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,14,14,11,13,12,14,13,14,15,15,16,16,13,14,14,16,14,6,8,8,11,10,8,9,9,12,11,8,10,9,12,11,10,11,11,13,13,10,12,11,14,13,8,9,9,12,12,9,10,10,12,13,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,8,9,9,12,11,9,10,10,13,12,9,11,10,13,12,12,12,12,14,14,11,13,12,15,13,11,11,12,13,14,11,12,13,13,14,12,13,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,15,13,16,14,9,10,11,12,13,11,11,12,13,14,11,12,12,13,14,13,13,14,14,16,13,14,14,15,16,11,11,12,13,14,12,12,13,14,15,12,13,13,14,15,14,14,15,15,17,14,15,15,16,17,11,12,12,14,14,12,13,13,14,15,12,13,12,15,15,14,15,15,16,17,14,15,15,16,16,13,14,14,15,16,14,14,15,15,17,15,15,15,16,17,16,16,17,16,18,16,17,17,18,18,13,14,14,16,15,14,15,15,17,16,14,15,15,16,16,16,17,17,18,18,16,16,16,17,16,9,11,10,13,12,11,12,12,14,13,11,12,11,15,13,13,14,14,16,15,13,14,13,17,14,11,12,12,14,14,12,12,13,15,15,12,13,13,15,14,14,14,15,16,16,14,15,15,17,16,11,12,11,14,13,12,13,13,15,14,12,13,12,15,13,14,15,15,16,16,14,15,14,17,15,13,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,16,17,17,16,17,17,18,18,13,15,14,16,15,15,15,15,17,16,14,15,14,17,15,16,17,17,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,12,11,14,13,7,9,9,11,12,9,10,10,12,13,9,10,10,13,12,11,11,12,13,15,11,12,12,15,14,8,9,9,12,11,9,10,10,13,13,9,11,10,13,12,12,12,12,14,15,11,13,12,15,13,10,11,11,13,14,11,12,12,13,15,11,12,12,14,14,13,13,14,14,16,14,15,14,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,14,14,16,14,8,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,15,14,9,9,11,11,13,10,10,12,12,14,10,10,11,13,14,12,12,13,14,16,12,13,13,15,15,9,11,10,13,12,10,11,11,13,14,10,12,11,14,13,12,13,13,15,16,12,13,13,15,15,11,11,13,13,15,12,12,14,13,15,13,13,14,14,15,14,14,15,14,17,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,15,14,15,15,15,17,17,14,15,14,17,15,7,9,9,12,11,9,10,10,12,12,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,12,12,10,10,11,12,13,10,11,11,14,13,12,12,13,14,15,12,13,13,16,15,9,10,10,13,12,10,11,11,13,13,10,11,10,14,12,13,13,13,15,15,12,13,12,15,14,11,12,12,14,14,12,12,13,14,15,13,14,13,15,15,14,13,15,14,16,15,16,15,17,16,12,12,12,14,14,13,13,14,15,15,12,13,12,15,14,15,15,16,16,17,14,15,14,17,14,10,11,12,13,14,11,12,13,14,15,11,12,13,14,15,13,14,15,15,17,14,15,15,16,16,11,12,13,12,15,12,12,14,13,16,13,13,14,13,16,14,14,16,14,18,15,15,16,16,17,12,13,12,15,15,13,14,14,15,16,13,14,13,16,15,15,15,16,17,18,15,15,15,17,16,14,14,15,14,17,15,14,16,14,17,15,15,16,15,18,16,16,17,16,19,17,17,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,18,16,17,17,18,18,18,16,17,16,18,17,10,11,11,14,13,11,12,12,15,14,11,13,12,15,14,14,15,15,16,16,14,15,15,17,16,11,12,12,15,14,12,13,13,15,14,13,14,13,16,14,14,15,15,16,16,15,16,15,18,16,11,13,12,15,15,13,14,14,15,15,12,14,13,16,15,15,16,16,17,17,15,16,15,17,16,14,15,14,16,16,14,15,15,16,16,15,16,15,17,16,16,16,17,16,17,17,18,17,19,18,14,15,15,17,16,15,16,16,17,17,15,15,15,18,16,17,18,18,18,18,16,17,16,19,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,10,13,13,11,12,13,13,15,11,12,12,15,14,7,9,9,12,11,9,10,10,12,13,9,10,10,13,12,11,12,12,14,15,11,12,11,14,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,10,11,11,14,13,11,12,12,14,14,11,12,12,15,13,14,14,14,16,16,13,14,13,16,14,7,9,9,11,12,9,10,10,12,13,9,10,10,12,12,11,12,13,14,15,11,12,12,14,14,9,10,10,12,13,10,10,11,12,14,10,11,11,13,13,12,12,13,14,15,13,13,13,15,15,9,10,10,12,12,10,11,11,13,14,10,11,10,13,12,12,13,13,15,16,12,13,12,15,14,11,12,13,14,14,12,12,13,14,15,13,14,13,15,15,14,14,15,14,17,15,16,15,17,16,11,12,12,14,14,13,13,13,15,15,12,13,12,15,14,15,15,15,16,17,14,15,14,16,14,8,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,15,11,12,12,15,14,9,10,11,13,13,10,11,12,13,14,10,11,11,14,13,12,13,13,15,15,12,13,13,16,15,9,11,9,13,11,10,11,10,14,13,10,12,10,14,12,12,13,13,15,15,12,13,12,16,14,12,12,13,14,15,12,13,14,14,16,13,14,14,15,15,14,14,15,15,17,15,16,15,17,16,11,13,11,15,13,13,14,13,15,14,12,14,12,16,13,15,15,15,16,16,14,15,14,17,14,10,11,11,13,14,11,12,13,14,15,11,12,12,14,15,14,14,15,16,17,14,15,15,16,16,11,12,13,14,15,12,13,14,15,16,13,14,14,15,16,15,15,16,16,18,15,16,16,17,17,11,12,12,14,15,13,13,14,14,16,12,13,13,15,15,15,15,16,16,18,14,15,15,16,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,19,17,18,17,18,18,14,14,15,16,16,15,15,16,16,17,14,15,15,16,16,17,17,18,18,19,16,17,16,17,16,10,12,11,14,13,11,13,12,15,14,11,13,12,15,14,14,15,15,16,16,13,15,14,17,15,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,14,15,15,17,17,15,16,16,17,17,11,13,12,15,12,13,14,13,16,13,12,14,12,16,13,15,16,15,17,16,14,16,14,18,14,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,17,18,17,18,17,18,18,14,15,14,17,14,15,16,15,18,15,15,16,15,18,14,17,17,17,18,17,16,17,16,19,16,9,11,11,13,13,10,12,12,14,14,11,12,12,15,14,13,14,14,16,16,13,14,14,16,16,10,11,12,14,14,11,12,13,14,15,12,13,13,15,15,13,14,15,16,16,14,15,15,17,16,11,12,12,15,14,12,13,13,15,15,12,13,12,15,15,14,15,15,16,17,14,15,14,17,16,12,13,14,15,16,13,13,14,15,16,13,14,15,16,16,14,15,16,16,18,15,16,16,18,18,13,14,14,16,15,14,15,15,17,16,14,15,15,17,16,16,17,17,18,18,16,17,16,18,17,10,12,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,11,13,14,15,12,12,14,15,16,13,13,14,15,16,14,14,15,16,17,15,15,16,17,17,12,13,12,15,15,13,14,14,16,16,13,14,13,16,15,15,16,15,17,17,15,16,15,18,16,13,12,15,14,17,14,13,16,14,17,14,14,16,15,18,15,14,17,16,18,16,16,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,18,16,17,17,17,18,18,16,17,16,19,17,10,11,11,14,14,11,12,12,15,15,11,13,12,15,15,14,15,14,16,16,14,15,15,17,16,11,12,12,15,14,12,12,13,15,15,13,14,13,16,15,14,15,15,16,16,15,16,15,18,17,11,13,12,15,15,13,14,13,15,15,12,14,13,16,15,15,16,15,17,17,15,16,15,18,16,13,14,13,16,16,14,15,14,16,16,14,15,15,17,16,16,16,16,16,18,16,18,17,19,18,14,15,15,17,16,15,16,16,17,17,15,15,15,17,16,17,17,18,18,19,16,17,16,18,16,12,13,13,15,16,13,14,14,16,17,13,14,14,16,16,15,15,16,17,18,15,16,16,18,17,13,13,14,14,17,14,14,15,15,17,14,14,15,16,17,15,15,17,16,18,16,17,17,18,18,13,14,14,17,16,14,15,15,17,17,14,15,14,17,16,16,17,17,18,18,16,17,16,18,17,15,14,16,13,18,16,15,17,14,19,16,16,17,15,18,17,16,18,15,19,18,18,18,17,19,15,16,16,18,17,16,17,17,18,18,16,17,16,19,17,18,19,18,19,19,17,18,17,20,18,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,17,17,15,16,16,18,17,12,14,13,16,15,13,13,14,15,16,14,15,14,17,16,16,16,16,16,17,16,17,17,19,17,12,13,14,16,16,14,15,15,16,17,13,15,13,17,15,16,17,17,18,18,16,17,16,18,16,15,16,15,17,16,15,15,15,17,17,16,17,16,18,17,17,16,17,16,18,18,19,18,20,18,15,16,16,17,17,16,17,17,18,18,15,16,15,18,17,18,18,19,19,19,17,18,16,19,16,9,11,11,13,13,11,12,12,14,15,10,12,12,14,14,13,14,14,16,16,13,14,14,16,16,11,12,12,14,14,12,12,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,10,12,11,14,14,12,13,13,15,15,11,13,12,15,14,14,15,15,16,17,13,15,14,17,16,13,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,17,17,18,16,17,17,18,18,12,14,13,16,15,13,15,14,17,16,13,14,13,17,15,15,16,16,18,18,15,16,15,18,16,10,11,11,14,14,11,12,13,14,15,11,12,12,15,15,14,15,15,16,17,14,15,15,16,16,11,12,13,15,15,12,13,14,15,16,13,14,14,15,16,15,15,16,16,18,15,15,16,17,17,11,12,12,14,15,13,13,14,15,16,12,13,13,15,15,15,15,16,17,18,14,15,15,17,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,19,17,17,18,19,18,13,13,14,16,16,14,15,16,17,17,14,14,15,16,16,16,16,17,18,18,16,16,16,18,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,17,18,15,15,16,17,17,11,13,12,15,14,13,14,13,16,15,12,14,12,16,14,15,16,15,17,17,14,16,14,17,16,14,15,15,16,17,15,15,16,16,18,15,16,16,17,17,16,17,17,17,19,17,17,17,18,18,13,15,12,17,14,14,16,14,17,15,14,15,13,17,14,16,17,16,18,17,15,17,14,19,15,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,17,18,15,16,16,17,17,12,14,13,16,16,13,13,15,15,17,14,15,15,17,16,16,16,17,16,19,16,17,17,18,18,12,13,14,15,16,14,14,15,16,17,13,14,13,16,15,16,17,17,18,19,15,16,16,17,16,15,16,16,18,17,15,15,16,17,18,16,17,17,18,18,16,16,18,16,19,18,19,19,20,19,15,15,16,16,17,16,16,17,17,18,15,15,15,17,16,18,18,19,18,20,17,17,16,18,16,12,13,13,16,15,13,14,14,16,16,13,14,14,16,16,15,16,16,17,18,15,16,15,18,17,13,14,14,16,16,14,15,15,16,17,14,15,15,17,17,16,17,17,18,18,16,17,17,18,18,13,14,13,17,14,14,15,14,17,16,14,15,14,17,15,16,17,17,18,18,15,17,15,19,15,16,16,16,17,18,16,16,17,17,19,16,17,17,18,19,17,17,18,18,20,18,18,18,19,19,15,16,14,18,13,16,17,16,19,15,16,17,15,19,14,18,18,18,19,17,17,18,16,20,15,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,8,9,10,8,9,9,8,9,10,9,10,12,10,11,11,8,9,10,10,11,11,9,11,11,5,8,7,8,9,9,8,10,9,8,10,9,9,11,11,10,11,11,8,10,9,10,11,11,9,12,10,5,8,8,7,9,10,8,10,9,7,9,9,9,10,11,9,11,11,8,10,10,10,11,11,10,12,11,7,9,9,9,10,11,9,11,11,9,9,11,10,10,13,11,11,12,9,11,11,11,12,13,11,13,12,7,9,9,9,11,11,9,12,10,9,11,10,10,11,12,11,13,12,9,11,11,11,13,13,11,13,11,5,8,8,8,9,10,7,10,9,8,10,10,10,11,11,10,11,11,7,9,9,9,11,11,9,11,10,7,9,9,9,10,12,9,11,11,9,11,11,11,11,13,11,13,13,9,10,11,11,12,13,10,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,13,11,13,12,9,11,9,11,12,11,10,13,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,8,13,15,16,18,21,22,5,4,6,8,10,12,17,21,9,5,5,6,8,11,15,19,11,6,5,5,6,7,12,14,14,8,7,5,4,4,9,11,16,11,9,7,4,3,7,10,22,15,14,12,8,7,9,11,21,16,15,12,9,5,6,8,2,0,0,0,64,0,0,0,24,63,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,15,7,0,0,0,0,0,0,0,0,0,8,16,7,0,0,0,0,0,0,0,0,0,48,16,7,0,88,16,7,0,0,0,0,0,0,0,0,0,128,16,7,0,168,16,7,0,0,0,0,0,0,0,0,0,208,16,7,0,248,16,7,0,0,0,0,0,0,0,0,0,32,17,7,0,72,17,7,0,248,16,7,0,0,0,0,0,112,17,7,0,152,17,7,0,248,12,7,0,32,13,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,160,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,152,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,12,7,0,168,12,7,0,0,0,0,0,0,0,0,0,208,12,7,0,248,12,7,0,32,13,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,176,14,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,96,15,7,0,0,0,0,0,2,0,0,0,25,0,0,0,120,14,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,14,7,0,0,0,0,0,2,0,0,0,9,0,0,0,88,14,7,0,1,0,0,0,0,136,51,225,0,136,51,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+451808);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,104,14,7,0,0,0,0,0,1,0,0,0,25,0,0,0,208,13,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,240,13,7,0,0,0,0,0,1,0,0,0,25,0,0,0,72,13,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,104,13,7,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,2,3,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,14,14,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,4,4,5,5,4,5,5,5,5,4,5,4,4,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,8,8,10,10,10,10,9,8,11,11,4,6,5,8,6,10,10,10,10,10,9,10,9,4,5,6,6,9,10,10,10,10,9,10,9,10,8,9,8,9,8,9,9,10,9,11,10,12,10,8,8,9,8,9,9,9,9,10,10,11,10,12,9,10,10,11,10,11,10,12,11,12,11,13,11,9,10,10,10,11,10,11,11,12,11,12,11,12,11,12,12,12,12,13,12,13,12,13,12,13,13,11,12,12,12,12,12,12,12,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,12,13,13,13,14,14,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,3,7,12,14,14,16,18,19,6,2,4,6,8,9,12,14,12,3,3,5,7,8,11,13,13,6,4,5,7,8,10,11,14,8,7,7,7,7,9,10,15,9,8,7,7,6,8,9,17,11,11,10,9,8,9,9,19,14,13,11,10,9,9,9,5,0,0,0,243,0,0,0,16,62,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,8,63,7,0,0,0,0,0,5,0,0,0,53,12,0,0,192,49,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,248,61,7,0,0,0,0,0,5,0,0,0,243,0,0,0,184,48,7,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,176,49,7,0,0,0,0,0,5,0,0,0,243,0,0,0,176,47,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,168,48,7,0,0,0,0,0,5,0,0,0,243,0,0,0,168,46,7,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,160,47,7,0,0,0,0,0,5,0,0,0,53,12,0,0,88,34,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,46,7,0,0,0,0,0,5,0,0,0,53,12,0,0,8,22,7,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,64,34,7,0,0,0,0,0,1,0,0,0,7,0,0,0,224,21,7,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,232,21,7,0,0,0,0,0,5,0,0,0,243,0,0,0,216,20,7,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,208,21,7,0,0,0,0,0,5,0,0,0,243,0,0,0,208,19,7,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,200,20,7,0,0,0,0,0,5,0,0,0,243,0,0,0,200,18,7,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,192,19,7,0,0,0,0,0,5,0,0,0,243,0,0,0,192,17,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,184,18,7,0,0,0,0,0,1,7,7,6,9,9,7,9,9,6,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,6,5,7,8,5,8,7,6,7,7,7,7,8,8,8,8,6,7,7,7,8,8,7,8,7,6,8,8,8,9,10,8,9,9,8,9,9,9,9,10,10,10,10,8,9,9,10,10,10,9,10,10,6,8,8,8,9,9,8,10,9,9,9,9,9,9,10,10,10,10,8,9,9,10,10,10,9,10,9,6,8,9,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,8,9,8,9,9,9,9,9,8,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,9,9,9,10,10,9,10,10,9,10,9,9,9,10,10,10,10,9,10,9,10,10,10,9,10,9,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,9,9,9,10,10,9,10,9,9,9,10,10,9,10,10,10,10,9,9,9,10,10,10,9,10,9,7,9,8,8,9,9,8,9,9,9,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,5,7,9,5,9,7,5,7,8,7,7,10,9,9,10,5,8,7,9,10,9,7,10,7,6,9,9,9,10,12,10,12,11,9,10,11,11,10,13,12,12,13,10,11,11,12,13,13,11,13,11,6,9,9,10,11,12,9,12,11,10,11,11,11,11,13,12,13,13,9,11,10,12,13,13,11,13,10,6,9,10,9,11,12,10,12,11,9,10,11,10,10,13,11,13,13,10,11,11,12,13,12,11,13,11,7,9,10,9,10,12,10,11,11,10,10,11,10,10,12,12,11,12,10,11,10,12,12,12,10,12,10,7,10,10,11,11,13,11,13,11,10,12,11,11,10,13,13,14,13,10,11,12,13,13,14,11,13,10,6,10,9,10,11,12,9,12,11,9,11,11,11,11,13,12,12,13,9,11,10,12,13,13,10,13,10,7,10,10,11,11,14,11,13,11,10,12,11,11,10,14,13,14,13,10,11,12,13,13,14,11,13,10,7,10,9,10,10,12,9,12,10,10,11,11,10,10,12,12,12,12,9,11,10,11,12,12,10,12,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,6,6,10,10,6,7,9,11,13,5,9,7,13,11,8,11,12,13,15,8,12,11,15,13,6,7,8,11,11,7,8,10,11,13,9,10,10,13,13,11,11,13,12,16,12,13,13,16,15,6,8,7,11,11,9,10,10,13,13,7,10,7,13,11,12,13,13,15,16,11,13,11,16,12,10,11,11,11,13,11,11,13,12,15,13,13,13,14,15,13,12,15,12,17,15,16,16,16,16,10,11,11,14,11,13,13,13,15,14,11,13,11,15,12,15,15,16,16,16,13,15,12,17,12,6,8,9,12,12,9,10,12,13,15,9,11,11,15,14,12,13,15,16,18,13,14,14,17,16,9,10,11,13,14,11,10,13,14,16,11,12,12,15,15,14,13,16,15,18,14,15,15,17,17,9,11,11,14,14,11,12,13,15,16,11,13,11,15,14,15,15,15,17,18,14,15,14,17,15,13,14,14,15,16,14,14,15,15,17,15,16,15,17,17,16,16,17,15,19,17,18,18,19,18,13,14,14,16,15,15,15,16,17,17,14,15,14,18,15,17,17,17,19,19,16,17,15,19,16,6,9,8,13,12,9,11,11,14,15,9,12,10,15,13,13,14,14,16,17,12,15,13,18,16,9,11,11,14,14,11,11,13,14,15,11,13,12,16,15,14,14,15,15,18,14,15,15,18,17,9,11,10,14,13,11,12,12,15,15,11,13,10,16,14,14,15,15,16,18,14,16,13,18,15,13,14,14,16,16,14,14,15,15,17,15,16,15,17,17,16,16,17,16,19,17,18,17,18,19,13,14,14,16,15,15,15,15,17,17,14,15,14,17,15,17,17,17,18,19,16,17,15,19,15,11,13,13,15,16,13,14,15,16,18,14,15,15,17,17,16,16,18,18,20,17,18,17,19,20,13,14,14,16,17,15,15,16,17,18,15,16,16,17,17,18,17,19,18,19,18,18,18,19,21,14,14,15,16,17,15,15,16,18,18,15,16,16,17,18,18,18,19,19,21,18,19,19,22,20,16,16,17,17,19,17,17,17,18,20,17,18,18,20,19,19,19,20,19,0,19,19,20,20,21,17,17,17,19,18,18,18,20,19,19,18,18,18,20,20,19,19,20,20,20,20,21,20,21,19,11,13,13,16,15,14,15,15,17,17,14,15,14,18,16,16,18,18,20,19,16,19,17,21,18,13,14,15,16,17,15,15,16,18,18,15,16,15,19,18,18,18,18,19,19,18,18,18,22,20,13,14,14,16,16,15,16,16,18,17,15,16,15,18,17,18,18,18,19,19,17,18,17,21,18,16,17,17,18,18,17,18,19,19,19,18,20,18,19,19,19,20,21,19,21,20,20,20,0,21,16,17,17,19,19,18,18,18,19,21,17,18,18,19,18,20,19,21,20,21,19,20,20,22,19,7,9,9,13,13,8,10,11,14,15,9,12,11,15,14,11,13,14,16,17,13,15,14,17,16,8,10,11,14,14,10,10,12,14,16,11,12,12,16,15,13,12,15,15,18,14,15,15,19,17,9,11,11,14,14,11,12,12,15,15,11,13,11,16,14,14,15,14,17,17,14,16,14,18,15,12,13,14,15,16,13,13,15,14,17,15,15,15,17,17,15,14,17,14,19,17,18,18,19,18,13,14,14,16,16,15,15,15,17,17,14,15,14,18,15,17,18,17,18,17,16,18,16,19,15,7,10,10,13,13,9,10,12,14,15,10,12,11,15,14,12,13,14,16,17,13,15,14,18,16,10,10,12,13,14,10,10,13,13,16,12,12,13,15,15,13,12,15,15,18,15,15,16,18,17,10,11,11,14,14,12,13,13,15,16,10,13,10,16,14,14,15,15,17,17,14,15,13,17,15,13,13,14,15,16,14,13,15,14,18,15,15,16,16,17,16,15,18,15,18,17,18,18,18,18,13,15,14,17,16,15,16,16,17,17,14,15,13,17,15,17,17,18,18,18,16,17,14,20,14,8,10,10,14,14,11,11,13,14,16,11,13,11,16,14,14,15,16,16,18,14,16,15,18,16,10,12,11,15,14,11,11,13,14,16,13,14,13,16,15,15,14,16,15,19,16,17,16,20,18,10,11,12,14,15,13,13,14,16,16,11,14,11,16,14,16,16,17,18,19,15,17,14,20,15,14,15,14,17,16,13,14,15,15,18,16,17,16,19,18,16,15,18,15,19,18,19,18,21,21,14,14,15,16,17,16,16,17,18,18,13,15,14,17,15,18,18,19,18,22,16,18,15,21,15,12,13,14,16,16,14,14,16,16,18,14,15,15,17,18,16,16,18,18,20,18,18,17,20,20,13,14,15,15,17,15,14,16,16,18,16,16,16,17,19,17,15,18,17,21,18,18,18,19,19,14,15,15,18,17,15,16,16,18,19,15,16,15,18,18,17,18,18,20,21,17,19,17,20,19,16,16,17,16,19,17,17,18,17,20,18,18,18,18,19,19,18,20,17,22,20,20,19,20,20,17,17,18,18,19,18,18,20,21,20,17,18,17,20,20,21,21,21,21,21,19,21,18,22,20,11,13,13,17,16,14,14,16,16,18,14,16,14,18,16,17,18,19,19,20,18,19,18,21,19,14,15,14,17,16,14,14,16,18,18,16,17,16,18,17,18,17,19,18,20,19,19,18,20,20,13,14,15,16,17,16,16,17,18,19,14,16,14,19,17,18,19,18,20,20,18,20,17,21,18,17,17,17,19,18,16,17,18,18,19,18,19,18,21,21,18,18,20,17,21,19,20,20,22,21,16,17,18,18,19,18,18,19,21,20,16,17,17,20,18,21,21,22,21,22,18,21,18,0,18,7,9,9,13,13,9,11,12,14,15,8,11,10,15,14,13,14,15,16,18,11,14,13,17,15,9,11,11,14,14,11,11,13,14,16,11,12,12,15,15,14,14,16,15,18,14,14,15,17,17,8,11,10,14,14,11,12,12,15,15,10,12,10,16,14,14,15,15,17,18,13,15,12,18,15,13,14,14,16,16,14,14,15,15,17,15,15,15,16,17,16,15,17,15,19,17,17,17,18,18,12,14,13,16,15,15,15,15,17,17,13,15,13,17,14,17,18,18,18,19,15,17,14,19,14,8,10,10,14,14,11,11,13,14,16,11,13,11,16,14,14,15,16,17,19,14,16,15,18,17,10,12,11,15,14,11,11,14,14,17,13,14,13,17,15,15,14,17,15,19,16,17,16,19,17,10,11,12,14,15,13,13,14,15,17,11,13,11,17,14,16,16,17,18,19,15,16,14,18,15,14,15,14,16,16,13,14,15,15,18,16,16,16,18,18,16,15,18,15,20,18,19,18,21,18,14,14,15,16,17,16,16,17,17,18,13,15,14,17,16,19,19,19,19,19,15,18,15,20,15,7,10,10,13,13,10,11,12,14,15,9,12,10,15,14,13,14,15,16,17,12,15,13,17,16,10,11,11,14,14,10,10,13,14,16,12,13,13,16,15,14,13,16,15,18,15,15,16,17,17,10,12,10,14,13,12,13,12,15,15,10,13,10,16,13,15,16,15,17,18,13,16,12,18,15,13,14,14,16,17,14,13,15,15,18,15,16,15,17,17,16,14,17,15,19,17,18,18,19,19,13,15,13,17,14,15,15,15,18,17,14,15,13,17,14,18,17,18,18,19,15,17,15,19,15,11,13,13,16,17,14,14,16,16,18,14,16,15,18,17,17,18,19,18,21,18,18,17,20,18,13,15,14,17,16,14,14,16,17,18,16,17,16,19,17,18,17,19,18,22,18,19,19,21,21,13,14,15,16,18,16,16,17,17,20,14,16,14,18,17,18,18,19,19,21,17,18,17,21,18,17,18,17,19,18,16,17,17,18,19,18,18,18,22,22,18,17,19,17,0,20,21,19,21,20,17,17,18,18,21,18,18,18,19,21,17,17,17,19,19,20,20,22,21,21,19,20,18,20,17,12,14,13,17,16,14,15,15,17,18,14,16,14,18,16,17,18,18,21,20,16,18,16,21,18,14,15,15,17,17,15,15,16,18,18,15,17,16,18,18,17,17,19,19,20,18,19,18,20,19,14,15,14,17,15,15,16,16,18,17,15,16,14,19,15,18,18,18,19,20,17,20,15,21,17,16,17,18,18,19,17,17,18,18,20,18,19,18,19,21,19,18,19,19,21,20,0,19,21,20,16,17,16,19,16,18,18,18,19,19,17,18,17,20,17,19,20,20,22,0,19,20,17,21,17,11,13,14,16,17,14,15,15,17,18,14,15,15,18,18,16,17,17,19,20,16,18,17,19,21,13,14,15,17,17,14,15,16,17,19,15,16,16,18,19,16,17,18,19,21,17,18,20,21,21,13,15,15,17,17,15,16,16,18,19,15,16,16,18,19,17,17,18,19,22,17,19,18,22,19,15,16,17,19,19,16,17,18,18,20,17,18,18,19,20,19,18,20,18,22,20,19,19,22,21,16,17,17,18,19,18,18,18,19,20,17,18,18,20,19,20,19,20,22,20,19,20,21,21,20,12,14,14,16,16,13,14,16,17,18,14,16,15,18,18,15,17,17,19,19,17,18,18,19,19,13,14,15,16,17,14,14,16,16,20,15,16,16,17,19,16,15,18,17,20,18,17,19,19,19,14,15,15,17,17,16,16,16,18,18,15,16,15,19,18,17,18,18,20,21,17,18,17,21,18,16,15,17,17,19,17,15,18,17,20,19,17,18,19,20,18,16,19,17,22,20,19,20,19,20,17,17,18,19,19,18,18,19,20,20,17,18,17,18,18,21,21,20,20,21,18,20,17,21,19,11,14,14,16,17,15,14,16,17,19,14,16,14,18,17,18,18,19,19,21,17,19,18,20,20,13,15,14,17,17,14,14,16,17,18,16,17,16,19,18,18,17,19,18,20,18,21,18,20,20,13,15,15,16,17,16,16,17,18,19,14,16,15,19,18,19,19,19,21,20,18,19,17,20,18,16,17,16,19,18,16,17,17,19,20,17,19,18,20,19,18,17,21,18,0,21,20,20,0,20,17,17,18,18,19,18,19,19,20,22,16,17,17,20,18,21,22,20,20,22,18,22,18,22,18,12,14,14,17,17,14,15,16,17,19,14,16,15,17,17,17,17,18,18,21,17,19,17,20,19,14,15,15,16,18,15,14,16,16,19,16,17,16,19,18,17,16,20,17,20,18,20,19,19,20,14,15,15,18,17,16,16,17,18,19,14,16,15,19,17,18,21,18,19,21,17,18,17,19,18,17,17,18,17,20,17,16,18,17,21,18,19,19,19,19,18,17,19,17,20,20,21,20,21,20,17,17,17,19,19,19,18,18,20,21,16,18,16,19,18,20,20,21,21,20,18,19,16,0,17,12,14,14,17,17,15,15,18,17,19,15,18,15,20,16,20,19,21,18,22,20,20,20,22,19,14,16,14,20,17,14,15,17,17,20,18,18,17,20,18,18,17,19,17,21,20,21,20,0,21,14,15,16,17,19,18,17,19,18,21,14,18,15,21,17,21,20,21,20,0,18,21,17,21,17,18,19,17,20,18,16,17,17,19,19,19,21,20,0,20,18,17,21,17,0,22,0,21,0,22,17,17,19,18,20,20,20,21,19,22,16,17,18,20,18,22,22,0,22,0,17,21,17,22,17,11,14,13,16,16,14,15,15,17,18,14,15,14,18,17,17,18,18,19,20,16,17,17,21,19,13,14,15,17,17,15,16,16,18,18,15,16,16,19,18,18,18,18,19,20,17,18,18,20,19,13,15,14,17,17,15,16,16,17,18,14,16,15,19,17,17,18,19,21,21,17,18,17,20,18,16,17,17,19,19,17,18,19,19,20,18,19,18,21,21,21,20,19,21,22,20,20,19,21,20,15,17,16,19,19,17,18,18,20,21,16,18,17,20,18,19,19,21,21,21,19,19,19,20,18,11,14,13,17,16,14,14,16,16,19,14,16,15,19,16,18,18,18,19,22,17,18,17,20,19,13,15,14,17,17,15,15,16,17,19,16,17,16,20,18,18,17,19,18,21,19,19,18,22,0,13,14,15,17,18,16,16,17,17,19,14,16,15,19,18,18,19,19,20,21,18,18,17,20,18,17,18,17,20,18,16,17,17,18,20,18,19,18,20,20,18,18,21,17,21,20,21,21,0,19,16,16,18,18,19,19,18,20,19,20,16,17,17,20,18,21,20,21,22,22,18,20,17,21,17,12,14,14,17,16,14,15,16,18,18,13,15,14,18,17,17,18,18,19,19,15,17,16,19,19,14,15,15,17,17,15,15,16,18,19,15,16,16,19,18,17,17,18,18,20,18,18,18,21,20,13,15,14,17,16,15,16,15,18,18,14,16,14,18,17,18,18,18,19,21,16,18,16,20,17,17,18,17,18,19,17,17,18,18,19,18,19,19,21,19,19,18,20,18,21,21,20,20,21,20,16,17,15,20,17,17,19,17,19,19,17,18,15,20,17,19,20,19,21,22,17,20,16,0,17,12,14,14,17,18,16,15,18,16,20,16,18,15,21,17,20,18,21,19,22,19,21,19,0,19,14,16,15,19,17,14,15,17,16,21,18,19,18,21,17,19,17,21,17,22,20,21,21,0,21,14,15,16,17,19,18,17,19,18,21,14,17,15,20,17,21,22,21,20,22,18,21,17,21,17,17,19,17,21,18,16,17,17,19,20,19,21,20,21,20,17,18,20,17,21,0,22,20,21,22,17,17,20,18,21,21,20,22,20,21,16,17,17,21,19,0,22,0,21,21,18,22,17,21,17,12,14,14,17,16,14,15,16,17,18,14,16,15,18,17,17,17,20,19,20,16,18,17,21,18,14,15,15,17,17,14,15,16,17,19,16,17,16,18,18,17,16,19,18,19,18,19,18,21,20,14,15,15,18,17,16,16,16,19,18,15,16,14,20,16,18,18,19,19,20,16,19,16,21,17,17,17,18,19,19,16,16,18,18,19,19,19,18,20,20,18,16,19,18,20,22,21,20,19,20,16,18,17,20,16,18,19,18,19,18,16,18,16,20,17,21,20,21,20,20,18,19,17,21,16,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,7,7,10,10,7,8,9,10,11,7,9,8,11,10,9,10,10,11,11,9,10,10,11,11,7,9,9,10,10,8,9,10,10,11,9,10,10,11,11,10,10,11,11,11,10,11,11,12,12,7,9,9,10,10,9,10,10,11,11,8,10,9,11,10,10,11,11,11,11,10,11,10,11,11,10,10,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,12,10,10,10,11,11,10,11,11,11,11,10,11,10,11,11,11,12,11,12,12,11,12,11,12,11,8,9,9,11,11,9,10,10,11,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,9,9,11,11,9,10,10,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,11,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,13,12,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,9,9,11,11,9,10,10,11,11,9,10,10,12,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,10,11,11,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,13,12,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,8,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,10,11,10,12,12,10,10,11,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,10,11,11,12,12,11,12,12,12,12,10,12,11,12,12,12,12,12,13,13,12,13,12,13,12,11,12,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,9,9,11,11,9,10,10,11,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,8,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,10,11,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,10,10,11,12,12,11,12,12,12,12,10,11,10,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,11,12,12,13,12,12,13,13,13,13,12,13,12,13,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,13,12,12,12,13,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,12,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,11,12,11,12,12,12,12,12,13,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,13,13,13,12,13,13,13,13,11,12,12,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,11,12,12,12,12,12,12,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,13,13,13,12,13,12,13,13,11,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,12,13,13,13,13,13,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,11,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,13,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,13,13,13,13,12,13,12,13,13,11,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,12,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,13,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,13,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,11,12,12,12,12,12,13,13,11,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,13,13,13,12,13,13,13,13,11,12,12,13,13,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,12,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,13,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,13,13,13,13,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,13,13,13,13,13,13,13,13,13,12,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,5,5,5,7,9,5,9,7,5,7,8,7,7,10,9,10,10,5,8,7,9,10,10,7,10,7,6,8,9,9,10,12,9,11,11,9,10,11,11,11,13,12,13,13,9,11,11,11,12,13,11,13,11,6,9,8,9,11,11,9,12,10,9,11,11,11,11,13,11,13,12,9,11,10,12,13,13,11,13,11,6,9,9,8,10,11,9,12,11,9,10,11,10,10,12,11,13,13,9,11,11,11,13,12,11,13,11,8,10,10,9,10,12,10,12,11,10,10,12,10,10,13,12,13,13,10,12,11,12,13,13,10,13,10,7,10,10,11,11,13,11,14,11,10,12,11,11,11,13,13,14,13,10,12,12,14,14,14,11,14,11,6,9,9,9,11,12,8,11,10,9,11,11,11,11,13,11,12,13,8,11,10,11,13,13,10,12,10,7,10,10,11,11,14,11,13,11,10,12,12,11,11,14,14,14,14,10,11,12,13,13,14,11,13,11,8,10,10,10,11,12,9,12,10,10,11,12,11,10,13,12,13,13,10,12,10,12,13,13,11,13,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,6,6,6,7,7,6,7,7,6,7,7,7,7,8,7,8,8,6,7,7,7,8,8,7,8,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,7,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,8,6,8,8,7,8,8,7,8,8,7,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,9,9,8,9,9,8,8,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,8,8,8,8,9,8,9,8,8,8,8,8,9,9,9,9,9,8,9,8,9,9,9,8,9,9,6,8,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,8,8,8,9,8,9,9,9,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,9,9,8,9,9,8,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,6,5,7,8,5,8,7,5,7,8,7,8,10,8,10,10,5,8,7,8,10,10,7,10,8,6,8,9,8,10,11,9,10,10,9,10,11,10,11,12,11,12,12,9,11,10,11,12,12,10,12,11,6,9,8,9,10,10,8,11,10,9,10,11,10,11,12,11,12,12,9,11,10,11,12,12,10,12,11,6,9,9,8,10,11,9,11,10,8,10,10,10,10,12,11,12,12,9,11,10,11,12,12,10,12,11,8,10,10,10,11,12,10,12,11,10,10,12,11,11,13,12,13,13,10,12,11,12,13,13,11,13,11,7,10,10,10,11,12,10,12,11,10,12,11,11,11,12,12,14,13,10,12,12,12,14,14,11,13,11,6,9,9,9,10,11,8,11,10,9,10,11,10,11,12,11,12,12,8,11,10,11,12,12,10,12,10,7,10,10,10,11,12,10,12,11,10,12,12,11,11,13,12,13,13,10,11,12,12,13,14,11,12,11,8,10,10,10,11,12,10,12,11,10,11,12,11,11,13,12,13,13,10,12,10,12,13,13,11,13,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,6,6,9,9,6,7,8,10,10,6,8,7,10,10,8,10,10,12,13,8,10,10,13,12,6,7,8,10,10,7,8,9,10,11,8,9,9,11,11,10,10,11,12,14,10,11,11,14,13,6,8,7,10,10,8,9,9,11,11,7,9,8,11,10,10,11,11,13,14,10,11,10,14,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,13,14,13,15,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,13,13,14,14,15,12,13,12,15,12,6,7,8,10,11,8,9,10,11,12,8,9,9,11,12,10,11,12,13,14,10,11,11,14,13,8,9,10,11,12,9,10,11,12,13,9,10,11,12,13,11,12,13,13,15,12,12,13,15,14,8,9,9,12,12,9,10,11,12,13,9,10,10,13,12,12,12,13,14,15,11,12,12,14,14,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,14,13,15,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,14,13,14,15,15,15,16,13,14,14,16,14,6,8,7,11,10,8,9,9,11,12,8,10,9,12,11,10,11,11,13,14,10,12,11,14,13,8,9,9,12,12,9,10,10,12,13,9,11,10,13,12,11,12,12,13,14,12,13,12,15,14,8,10,9,12,11,9,11,10,13,12,9,11,10,13,12,12,13,12,14,15,11,13,12,15,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,15,13,16,14,9,10,11,12,14,11,11,12,13,15,11,12,12,13,14,13,14,15,15,17,13,14,14,15,16,11,11,12,13,15,12,12,13,14,16,12,13,13,14,15,14,14,16,15,17,15,15,15,16,17,11,12,12,14,14,12,13,13,15,16,12,13,13,15,15,15,15,15,16,17,14,15,15,16,16,14,14,15,15,17,14,15,15,15,17,15,15,16,16,17,16,16,17,16,18,17,17,17,18,18,14,15,14,16,16,15,15,16,17,17,14,15,15,17,16,17,17,17,18,18,16,16,16,17,17,9,11,10,14,12,11,12,12,14,13,11,12,11,15,13,13,14,14,16,15,13,15,14,17,15,11,12,12,15,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,15,15,15,17,16,11,12,11,15,13,12,13,13,15,14,12,13,12,16,14,15,15,15,17,16,14,15,14,17,15,14,14,15,16,16,14,15,15,16,16,15,16,15,17,17,16,16,16,17,17,17,17,17,18,17,14,15,14,16,15,15,15,15,17,16,15,15,15,17,15,17,17,17,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,12,11,14,13,7,9,9,11,12,9,10,10,12,13,9,10,10,13,13,11,11,12,13,15,11,12,12,15,14,8,9,9,12,11,9,11,10,13,13,9,11,10,13,12,12,13,12,14,15,11,13,12,15,13,10,11,12,13,14,11,12,12,13,15,12,12,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,15,16,13,14,14,16,14,7,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,12,14,15,11,12,12,15,14,9,9,11,11,13,10,10,12,12,14,10,11,12,13,14,12,12,13,14,16,12,13,13,15,15,9,11,10,13,13,10,12,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+462048);
/* memory initializer */ allocate([13,14,10,12,11,14,13,12,13,13,15,16,12,13,13,15,14,11,11,13,13,15,12,12,14,13,16,13,13,13,14,15,14,14,15,14,17,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,16,14,15,15,16,16,17,14,15,14,17,15,7,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,13,12,10,10,11,12,13,10,12,11,14,13,12,12,13,13,15,12,14,13,16,15,9,10,10,13,12,11,11,12,13,13,10,12,10,14,12,13,13,13,15,15,12,13,12,15,13,11,12,12,14,14,12,12,13,14,15,13,14,13,15,15,14,13,15,13,16,15,16,15,17,16,12,13,12,14,14,13,14,14,15,15,12,13,12,15,14,15,15,16,16,17,14,15,13,16,13,10,11,12,13,14,11,12,13,14,15,12,13,13,15,15,14,14,15,15,17,14,15,15,16,16,12,12,13,12,15,12,12,14,13,16,13,13,14,14,16,14,14,16,15,17,15,15,16,16,17,12,13,13,15,15,13,14,14,16,16,13,14,13,16,15,15,16,16,17,17,14,15,15,17,16,14,14,15,14,17,15,15,16,15,17,15,15,16,15,17,16,16,17,16,18,17,17,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,18,17,10,12,11,14,14,12,13,13,15,15,12,13,12,15,14,14,15,15,16,16,14,15,15,17,16,11,13,12,15,14,12,13,13,15,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,12,13,13,15,15,13,14,14,16,16,12,14,13,16,15,15,16,16,17,17,15,16,15,17,16,14,15,15,16,16,14,15,15,16,16,15,16,16,17,16,16,16,16,16,17,17,18,17,18,17,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,18,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,11,13,13,11,12,13,13,15,12,12,12,15,14,7,9,9,12,11,9,10,10,13,13,9,10,10,13,12,11,12,12,14,15,11,12,11,15,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,10,12,11,14,13,12,13,12,14,14,11,12,12,15,13,14,15,15,16,16,13,14,13,16,14,7,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,14,14,9,10,10,12,13,10,10,12,12,14,11,12,11,13,13,12,12,14,13,15,13,13,13,15,15,9,10,10,12,13,10,11,12,13,14,10,11,10,13,12,13,13,14,15,16,12,13,12,15,13,12,13,13,14,14,12,12,13,14,15,13,14,14,15,15,14,13,15,13,16,15,16,15,17,16,11,12,12,14,14,13,13,14,15,15,12,13,12,15,14,15,15,16,16,17,14,14,13,16,13,7,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,15,11,12,12,15,14,9,10,11,13,13,10,11,12,13,14,10,12,12,14,13,12,13,13,14,16,12,13,13,16,15,9,11,9,13,11,10,12,11,13,13,10,12,10,14,12,12,13,13,15,15,12,13,12,16,14,12,12,13,14,15,12,13,14,14,15,13,14,14,15,15,14,14,15,15,17,15,16,15,17,16,11,13,11,15,13,13,14,13,15,14,12,14,12,16,13,15,15,15,16,16,14,15,14,17,14,10,11,12,14,14,12,12,13,14,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,12,12,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,16,17,15,16,16,17,17,11,12,13,14,15,13,13,14,15,16,12,13,13,15,15,15,15,16,16,17,15,15,15,16,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,18,17,17,17,18,18,14,15,15,16,16,15,16,16,16,17,15,15,15,16,16,17,17,17,18,18,16,16,16,17,16,10,12,11,14,13,12,13,13,15,15,11,13,12,15,14,14,15,15,16,16,14,15,14,17,15,12,13,13,15,15,13,13,14,16,16,13,14,14,16,16,15,15,15,16,17,15,16,16,17,17,12,13,12,15,12,13,14,13,16,14,12,14,12,16,13,15,16,15,17,16,14,16,14,17,15,14,15,15,16,17,15,15,16,17,17,15,16,16,17,17,16,16,17,17,18,17,18,17,18,18,14,15,14,17,14,15,16,15,17,15,15,16,15,17,15,17,17,17,18,17,16,17,16,18,16,9,11,11,14,14,11,12,12,14,14,11,12,12,15,14,13,14,14,16,16,13,15,14,16,16,10,11,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,12,12,15,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,14,15,16,13,14,14,15,16,13,14,15,16,16,15,15,16,16,18,16,16,16,18,17,14,14,14,16,15,15,15,15,17,16,14,15,15,17,16,16,17,17,18,17,16,16,16,18,16,10,12,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,12,13,14,15,12,12,14,15,16,13,13,14,15,16,14,14,15,16,17,15,15,16,17,17,12,13,13,15,15,13,14,14,16,16,13,14,13,16,15,15,16,15,17,17,15,16,15,17,16,13,13,15,14,17,14,13,16,15,17,15,14,16,15,17,15,15,17,16,18,16,16,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,18,17,10,12,11,14,14,11,12,13,15,15,12,13,12,15,15,14,15,15,16,16,14,15,15,17,16,11,12,12,15,15,12,13,13,15,15,13,14,13,16,15,14,15,15,16,16,15,16,15,17,16,11,13,13,15,15,13,14,14,15,15,12,14,13,16,15,15,16,15,17,17,15,16,15,17,16,13,15,14,16,16,14,15,14,16,16,15,16,15,17,16,15,16,16,16,17,16,17,16,18,17,14,15,15,16,16,15,16,16,17,17,15,15,15,17,16,17,17,17,18,18,16,16,16,18,16,12,13,13,15,16,13,14,14,15,16,13,14,14,16,16,15,15,16,16,18,15,16,16,17,17,13,13,14,15,16,14,14,15,15,17,14,15,15,16,17,15,15,17,16,18,16,16,17,17,17,13,14,14,16,16,14,15,15,17,17,14,15,14,17,16,16,17,16,17,18,16,17,16,18,17,15,15,16,14,17,16,15,17,14,18,16,16,16,15,18,16,16,18,15,19,18,18,18,17,19,15,16,16,18,17,16,17,17,18,17,16,17,16,18,17,18,18,18,19,19,17,18,16,18,17,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,16,17,15,16,16,17,16,12,14,13,16,15,13,13,14,15,16,14,15,14,17,15,15,15,16,16,17,16,17,16,18,17,12,13,14,15,16,14,15,15,16,16,13,14,13,16,15,16,16,16,17,17,15,16,15,17,15,15,16,15,17,16,15,15,15,16,16,16,17,16,18,16,16,15,16,15,17,17,18,17,18,17,15,15,16,17,17,16,16,17,17,17,15,16,15,17,16,18,18,18,18,18,16,17,16,18,15,9,11,11,14,14,11,12,12,14,15,10,12,12,15,14,13,14,15,16,16,13,14,14,16,16,11,12,12,14,15,12,12,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,16,16,14,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,17,16,18,16,17,17,17,17,12,14,13,16,15,13,15,14,16,16,13,14,14,16,15,16,16,16,17,17,15,16,15,17,16,10,11,11,14,14,12,12,13,14,15,11,13,12,15,14,14,15,15,16,17,14,15,15,16,16,12,13,13,15,15,12,13,14,15,16,13,14,14,15,15,15,15,16,16,17,15,15,16,17,17,11,12,12,15,15,13,13,14,15,16,12,13,13,15,15,15,15,16,16,17,14,15,15,16,16,14,15,15,16,16,15,15,15,16,17,15,16,16,17,17,16,16,17,16,18,17,17,17,17,18,13,14,15,16,16,15,15,16,16,17,14,14,14,16,16,16,16,17,17,18,16,16,16,17,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,16,17,15,15,16,17,17,11,13,12,15,14,13,14,13,16,15,12,14,12,16,15,15,16,15,17,17,14,15,14,17,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,17,18,17,17,17,18,18,13,15,13,17,14,14,16,14,17,16,14,15,13,17,15,16,17,16,18,17,15,17,15,18,16,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,16,17,15,16,16,17,16,12,14,13,16,15,13,13,14,15,16,14,15,15,16,16,16,15,16,16,17,16,16,16,17,17,12,13,14,15,16,14,14,15,15,17,13,14,13,16,15,16,16,17,17,18,15,16,15,17,15,15,16,15,17,17,15,15,16,16,17,16,17,16,17,17,16,15,17,15,18,17,18,17,18,18,15,15,16,16,17,16,16,17,16,18,15,15,15,16,16,17,17,18,17,18,16,16,15,17,15,12,13,13,15,15,13,14,14,16,16,13,14,14,16,16,15,16,16,17,18,15,16,15,18,16,13,14,14,16,16,14,14,15,16,17,14,15,15,17,17,16,16,17,17,18,16,16,17,18,17,13,14,13,16,14,14,15,15,17,16,14,15,14,17,15,16,17,17,18,17,15,17,15,18,16,15,16,16,17,17,16,16,17,17,18,16,17,17,18,18,17,16,18,17,19,18,18,18,18,18,15,16,15,17,14,16,16,16,18,15,16,17,15,18,14,18,18,18,18,17,17,18,16,19,15,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,8,9,10,8,9,10,8,9,10,9,10,12,10,11,11,8,10,10,10,11,11,9,11,11,5,8,7,8,9,9,8,10,9,8,10,10,9,11,11,10,11,11,8,10,9,10,11,11,9,12,10,5,8,8,7,9,10,8,10,9,7,9,9,9,10,11,9,11,11,8,10,9,10,11,11,10,11,11,7,9,9,9,10,11,9,11,11,9,9,11,10,10,13,11,11,12,9,11,11,11,12,13,11,13,12,7,9,9,9,11,11,9,11,10,9,11,10,10,11,12,11,13,12,9,11,11,11,12,13,11,13,11,5,8,8,8,9,10,7,10,9,8,9,10,10,11,11,10,11,11,7,9,9,9,11,11,9,11,10,7,9,9,9,10,11,9,11,11,9,11,11,11,11,13,11,13,12,9,10,11,11,12,13,10,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,13,11,13,12,9,11,9,11,12,11,10,13,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,7,12,14,15,18,20,20,5,3,4,6,9,11,15,19,9,4,3,4,7,9,13,18,11,6,3,3,5,8,13,19,14,9,6,5,7,10,16,20,16,11,9,8,10,10,14,16,21,14,13,11,8,7,11,14,21,14,13,9,6,5,10,12,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+472288);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,0,127,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,79,7,0,0,0,0,0,0,0,0,0,240,79,7,0,0,0,0,0,0,0,0,0,24,80,7,0,64,80,7,0,0,0,0,0,0,0,0,0,104,80,7,0,144,80,7,0,0,0,0,0,0,0,0,0,184,80,7,0,224,80,7,0,0,0,0,0,0,0,0,0,8,81,7,0,48,81,7,0,224,80,7,0,0,0,0,0,88,81,7,0,128,81,7,0,224,76,7,0,8,77,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,136,79,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,128,79,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,76,7,0,144,76,7,0,0,0,0,0,0,0,0,0,184,76,7,0,224,76,7,0,8,77,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,152,78,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,72,79,7,0,0,0,0,0,2,0,0,0,25,0,0,0,96,78,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,128,78,7,0,0,0,0,0,2,0,0,0,9,0,0,0,64,78,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,80,78,7,0,0,0,0,0,1,0,0,0,25,0,0,0,184,77,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,216,77,7,0,0,0,0,0,1,0,0,0,25,0,0,0,48,77,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,80,77,7,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,4,4,5,5,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,8,8,9,8,9,9,10,10,10,10,4,6,5,8,7,9,9,9,9,10,9,10,10,4,5,6,7,8,9,9,9,9,9,10,9,10,8,9,8,9,8,10,9,11,9,12,10,11,10,8,8,9,8,9,9,10,9,11,10,11,10,12,9,10,10,11,10,11,11,12,11,12,12,12,12,9,10,10,11,11,11,11,11,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,13,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,11,13,12,12,12,13,12,12,12,12,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,3,5,13,9,9,12,16,18,4,2,20,6,7,10,15,20,10,7,5,5,6,8,10,13,8,5,5,3,5,7,10,11,9,7,6,5,5,7,9,9,11,10,8,7,6,6,8,8,15,15,10,10,9,7,8,9,17,19,13,12,10,8,9,9,5,0,0,0,243,0,0,0,248,125,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,240,126,7,0,0,0,0,0,5,0,0,0,53,12,0,0,168,113,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,125,7,0,0,0,0,0,5,0,0,0,243,0,0,0,160,112,7,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,152,113,7,0,0,0,0,0,5,0,0,0,243,0,0,0,152,111,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,144,112,7,0,0,0,0,0,5,0,0,0,243,0,0,0,144,110,7,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,136,111,7,0,0,0,0,0,5,0,0,0,53,12,0,0,64,98,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,110,7,0,0,0,0,0,5,0,0,0,53,12,0,0,240,85,7,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,40,98,7,0,0,0,0,0,1,0,0,0,7,0,0,0,200,85,7,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,208,85,7,0,0,0,0,0,5,0,0,0,243,0,0,0,192,84,7,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,184,85,7,0,0,0,0,0,5,0,0,0,243,0,0,0,184,83,7,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,176,84,7,0,0,0,0,0,5,0,0,0,243,0,0,0,176,82,7,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,168,83,7,0,0,0,0,0,5,0,0,0,243,0,0,0,168,81,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,160,82,7,0,0,0,0,0,1,9,9,7,9,9,8,8,9,9,9,9,9,9,9,8,9,9,7,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,6,6,7,7,7,7,7,7,8,8,9,9,9,9,7,7,8,8,8,9,9,9,9,8,8,6,7,7,8,8,8,8,8,8,9,8,8,9,8,9,9,8,8,10,8,8,10,9,9,10,8,8,6,6,6,8,6,6,8,7,7,8,7,7,10,8,8,9,7,7,9,7,7,10,8,8,9,7,7,7,7,7,10,8,8,11,9,9,10,9,9,11,9,9,11,8,8,11,9,9,12,9,9,12,8,8,7,7,7,10,9,9,10,9,9,10,9,9,11,10,10,10,9,9,11,9,10,11,10,11,10,9,9,9,8,8,10,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,8,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,10,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,9,10,11,10,10,11,10,10,11,9,9,11,10,10,11,10,10,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,7,7,7,8,8,7,8,8,7,9,9,11,11,11,9,8,8,8,9,9,12,11,12,9,8,8,6,7,7,10,11,11,10,10,10,11,11,11,14,14,14,12,11,12,11,11,11,15,15,14,13,12,12,5,6,6,8,5,5,8,7,7,8,7,7,12,10,10,10,7,6,9,8,8,12,10,10,10,6,6,7,8,8,12,10,10,12,10,10,11,10,10,16,14,14,13,10,10,12,10,10,15,14,14,14,10,10,7,7,7,13,11,11,13,11,11,12,11,11,16,14,14,14,12,12,12,11,11,18,15,15,14,12,12,10,9,10,14,11,11,13,11,11,12,11,11,17,14,14,14,11,11,13,11,11,16,15,15,14,11,11,7,8,8,13,11,11,12,10,10,12,10,10,16,14,13,13,10,10,12,10,10,17,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,16,15,14,14,12,12,12,11,11,16,15,15,14,12,12,11,10,10,14,11,11,13,11,11,13,11,11,17,14,14,14,11,11,13,11,11,18,14,15,15,11,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,7,6,15,15,7,8,8,15,15,8,8,8,15,15,0,13,13,16,16,0,14,14,16,16,7,9,9,16,16,10,11,11,17,17,10,8,8,15,16,0,14,14,18,18,0,14,14,16,16,9,9,9,16,16,12,11,11,17,17,10,9,9,15,15,0,14,14,19,19,0,14,14,16,16,0,15,15,18,17,0,0,0,20,20,0,13,13,16,16,0,17,17,22,20,0,15,15,17,17,0,15,15,18,18,0,22,21,20,21,0,13,13,16,16,0,18,18,0,22,0,15,15,17,17,6,7,7,13,13,9,10,10,15,15,11,10,10,15,15,0,21,22,18,18,0,0,0,18,18,10,10,10,15,15,12,13,13,17,17,12,11,11,15,15,0,22,22,18,18,0,0,21,18,18,12,11,11,15,15,15,14,14,18,18,13,11,11,15,15,0,0,21,18,19,0,21,22,18,19,0,22,0,18,19,0,0,0,0,0,0,21,21,18,18,0,22,0,0,21,0,0,0,19,18,0,0,0,18,19,0,0,0,0,0,0,20,20,18,17,0,0,22,0,21,0,0,0,19,19,6,6,6,13,13,8,6,6,11,11,9,7,7,13,13,0,10,10,11,11,0,12,12,14,14,9,8,8,14,14,12,10,10,13,13,10,7,7,13,13,0,11,11,15,15,0,11,11,13,13,9,8,8,14,14,13,10,10,13,14,11,7,7,13,13,0,11,11,15,15,0,11,11,13,13,0,12,12,15,15,0,21,21,17,17,0,10,10,13,13,0,14,14,20,20,0,12,12,13,13,0,12,12,15,15,0,21,22,17,18,0,10,10,13,13,0,16,16,20,21,0,12,12,13,13,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,16,16,0,21,0,17,18,0,0,0,12,12,15,15,0,15,15,18,18,0,12,12,16,16,0,16,16,21,22,0,17,17,22,21,0,12,12,16,16,0,15,15,19,19,0,12,12,16,16,0,16,16,22,22,0,17,16,22,0,0,17,18,0,0,0,0,0,0,0,0,15,15,21,20,0,19,20,0,22,0,18,18,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,22,21,0,20,20,0,22,0,20,19,0,0,0,11,11,12,12,0,10,10,11,11,0,11,11,12,12,0,12,12,10,10,0,13,13,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,13,14,13,0,12,12,12,12,0,12,12,13,13,0,14,14,13,13,0,10,10,12,12,0,13,13,14,14,0,13,12,12,12,0,14,14,14,14,0,21,21,16,16,0,12,12,12,12,0,16,16,20,21,0,13,13,11,11,0,14,14,14,14,0,20,20,16,15,0,12,12,12,12,0,17,17,20,20,0,13,13,11,11,7,8,8,16,16,11,10,10,15,15,12,10,10,17,17,0,14,14,16,15,0,15,15,17,17,11,9,9,16,16,14,12,12,17,17,13,9,9,16,15,0,14,14,19,18,0,14,14,16,16,12,10,10,17,18,16,13,13,17,18,14,10,10,16,16,0,14,14,19,19,0,14,15,17,17,0,15,15,18,19,0,0,0,20,20,0,13,13,17,17,0,17,18,0,22,0,15,15,16,17,0,15,15,18,18,0,0,0,20,21,0,14,14,17,17,0,19,18,0,0,0,16,16,17,17,8,7,7,14,14,12,11,11,15,15,13,11,11,15,15,0,0,0,18,19,0,21,20,18,18,12,10,11,15,16,14,13,13,18,18,14,11,11,15,15,0,20,20,19,18,0,20,0,18,18,13,11,11,16,16,17,15,15,19,19,14,12,12,15,15,0,21,0,18,20,0,22,22,18,19,0,22,22,19,19,0,0,0,0,0,0,21,22,19,18,0,0,0,0,21,0,0,0,19,19,0,0,22,20,20,0,0,0,0,0,0,22,0,18,18,0,0,0,0,22,0,0,0,19,20,11,10,10,14,14,14,11,11,13,13,14,11,11,15,15,0,14,13,12,12,0,15,15,16,16,13,11,11,15,15,16,13,13,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,15,15,13,11,11,15,15,18,14,14,15,15,15,10,10,15,14,0,14,14,16,16,0,14,14,15,15,0,15,15,17,16,0,21,22,18,18,0,13,13,14,14,0,18,17,20,21,0,15,15,14,14,0,15,16,16,17,0,0,0,19,18,0,13,13,15,14,0,19,19,0,0,0,15,15,14,14,0,12,12,14,13,0,13,13,16,16,0,12,12,16,16,0,16,16,22,0,0,17,18,0,22,0,13,13,16,16,0,15,15,18,18,0,12,12,16,16,0,16,16,22,22,0,17,17,0,0,0,13,13,17,17,0,16,16,19,20,0,12,12,17,17,0,17,17,22,0,0,17,17,22,21,0,18,18,0,0,0,0,0,0,0,0,16,16,21,21,0,19,19,0,0,0,18,18,0,22,0,18,18,0,22,0,0,0,0,0,0,16,16,22,0,0,20,20,0,0,0,19,18,0,0,0,12,12,15,15,0,12,12,15,14,0,13,13,15,15,0,14,14,14,14,0,15,15,16,16,0,13,13,15,16,0,15,15,16,16,0,12,12,15,15,0,14,14,16,16,0,14,14,15,15,0,13,13,15,16,0,15,15,16,16,0,12,12,15,15,0,15,15,17,17,0,14,14,15,15,0,15,15,17,17,0,21,21,19,19,0,13,13,14,14,0,17,17,22,0,0,14,14,15,15,0,15,15,17,17,0,22,0,18,20,0,13,13,15,15,0,18,18,0,22,0,15,15,14,15,8,8,8,17,16,12,10,10,16,16,13,10,10,17,16,0,15,15,17,17,0,15,15,17,17,12,11,11,18,18,15,12,12,18,18,15,10,10,16,17,0,14,14,18,18,0,14,14,17,17,13,10,10,16,16,17,14,14,17,17,15,10,10,16,15,0,15,15,19,20,0,14,14,15,16,0,16,16,19,19,0,0,0,21,22,0,13,13,17,17,0,18,17,0,21,0,15,15,17,17,0,15,15,18,19,0,0,22,0,21,0,13,13,16,17,0,19,19,0,22,0,16,15,16,16,9,8,8,14,14,12,11,11,15,15,13,11,11,15,15,0,21,20,19,18,0,0,0,19,18,12,11,11,16,15,15,13,13,17,18,14,11,11,15,15,0,22,22,19,18,0,22,21,18,18,14,11,11,15,15,17,14,14,18,18,15,12,12,15,15,0,22,22,20,19,0,0,21,18,18,0,0,22,20,20,0,0,0,0,0,0,20,21,18,18,0,0,0,21,21,0,0,0,20,19,0,22,21,19,19,0,0,0,0,0,0,0,22,17,18,0,0,22,0,22,0,22,0,19,19,0,11,11,15,15,0,11,11,14,14,0,12,12,15,15,0,15,15,14,14,0,16,16,16,16,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,15,15,17,17,0,15,15,15,15,0,12,12,16,16,0,14,14,15,15,0,11,11,15,15,0,15,15,17,17,0,15,15,14,15,0,16,16,17,17,0,0,0,19,19,0,14,14,15,15,0,18,18,21,0,0,15,15,14,15,0,16,16,17,17,0,21,0,19,19,0,14,14,15,15,0,20,20,22,0,0,16,15,14,14,0,12,12,13,13,0,12,12,16,16,0,12,12,16,16,0,16,16,22,21,0,18,17,21,0,0,13,13,16,16,0,15,15,18,19,0,12,12,16,16,0,16,17,22,0,0,17,17,0,22,0,13,13,17,16,0,15,15,19,19,0,12,12,16,16,0,16,16,21,20,0,17,16,22,0,0,18,18,22,21,0,0,0,0,0,0,15,16,21,21,0,19,19,0,0,0,18,17,0,0,0,18,18,21,0,0,0,0,0,0,0,16,16,22,22,0,20,21,0,0,0,18,19,0,22,0,13,13,16,16,0,12,12,15,15,0,13,13,16,16,0,14,14,15,15,0,15,15,17,17,0,13,13,17,16,0,15,15,17,17,0,12,12,16,16,0,15,15,17,17,0,14,14,16,16,0,13,13,16,17,0,15,15,17,17,0,12,12,16,16,0,14,14,17,17,0,14,14,16,16,0,16,16,17,17,0,21,0,21,19,0,13,13,16,16,0,17,17,0,0,0,15,15,16,16,0,16,15,18,18,0,22,0,20,20,0,13,13,15,15,0,18,18,0,0,0,15,15,15,15,0,12,12,17,17,0,14,14,17,17,0,14,14,17,17,0,17,17,18,17,0,17,17,19,18,0,13,13,17,17,0,16,16,18,18,0,13,13,16,16,0,17,17,19,19,0,16,16,17,17,0,13,13,18,18,0,17,17,18,18,0,13,13,17,17,0,17,17,19,19,0,16,17,17,17,0,17,17,19,19,0,21,0,21,19,0,14,14,16,16,0,20,19,0,21,0,16,16,16,16,0,17,18,19,19,0,0,0,0,21,0,15,15,16,17,0,21,20,0,0,0,17,18,16,17,0,9,9,14,14,0,14,14,15,16,0,14,14,15,15,0,0,0,18,18,0,21,0,18,19,0,12,12,15,15,0,16,16,17,17,0,14,14,14,14,0,22,0,19,18,0,22,0,17,18,0,14,14,16,15,0,18,18,19,18,0,14,15,15,15,0,0,21,20,20,0,0,0,18,18,0,21,21,19,19,0,0,0,0,0,0,21,21,18,18,0,22,0,20,20,0,22,0,19,19,0,22,0,19,20,0,0,0,0,0,0,0,21,17,18,0,0,0,22,22,0,0,0,19,18,0,18,20,16,16,0,21,20,17,17,0,0,21,18,18,0,22,21,18,18,0,0,22,19,19,0,20,20,17,17,0,0,0,18,18,0,19,20,17,17,0,22,0,19,21,0,22,21,18,18,0,20,19,17,18,0,0,0,19,19,0,20,20,17,17,0,22,22,21,21,0,20,0,18,18,0,22,22,18,18,0,0,0,20,22,0,20,20,16,16,0,0,0,21,0,0,21,20,16,17,0,22,0,19,20,0,0,0,21,20,0,19,21,17,17,0,0,0,0,0,0,21,21,17,17,0,12,12,13,13,0,14,14,16,16,0,14,14,16,16,0,18,18,0,0,0,19,18,22,0,0,13,13,16,16,0,16,16,18,18,0,13,13,16,16,0,17,18,21,0,0,18,18,21,0,0,13,13,16,16,0,17,17,19,20,0,13,13,16,17,0,18,18,21,0,0,18,18,21,0,0,18,19,0,21,0,0,0,0,0,0,16,16,21,20,0,20,20,0,0,0,18,19,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,0,21,0,22,22,0,0,0,19,19,0,0,0,16,16,19,20,0,17,16,22,21,0,17,17,21,20,0,19,18,0,22,0,19,19,22,22,0,16,15,22,22,0,19,19,0,21,0,15,15,20,20,0,18,19,0,21,0,18,18,22,22,0,16,16,21,20,0,20,19,21,22,0,16,15,20,20,0,19,19,0,22,0,18,18,21,0,0,19,18,21,22,0,0,0,0,0,0,16,16,19,21,0,20,22,0,22,0,18,18,20,21,0,19,18,0,22,0,0,0,22,0,0,16,16,20,20,0,21,21,0,0,0,18,18,21,0,0,12,12,17,17,0,15,14,17,17,0,14,14,18,18,0,17,17,17,18,0,18,18,18,18,0,13,13,18,18,0,16,17,19,18,0,13,13,16,17,0,17,17,18,19,0,17,17,17,17,0,13,13,17,17,0,17,18,18,18,0,13,13,16,16,0,18,18,19,20,0,16,17,17,16,0,17,18,19,18,0,0,0,22,21,0,15,15,16,16,0,20,20,21,22,0,17,17,16,16,0,16,17,18,18,0,0,0,21,21,0,15,15,16,16,0,21,20,0,0,0,17,17,16,16,0,10,10,14,14,0,14,14,15,15,0,14,14,15,15,0,22,0,18,18,0,0,0,19,19,0,13,13,15,16,0,17,16,18,18,0,14,14,15,15,0,21,21,19,18,0,22,21,18,17,0,14,14,15,15,0,18,18,19,18,0,15,15,14,14,0,22,21,19,19,0,22,21,17,18,0,0,0,19,19,0,0,0,0,0,0,20,22,17,17,0,0,22,22,20,0,0,0,19,18,0,21,22,19,18,0,0,0,0,0,0,22,22,17,18,0,0,0,21,22,0,0,0,19,18,0,20,20,17,17,0,21,21,17,18,0,21,22,18,18,0,21,0,18,18,0,22,0,19,19,0,19,21,18,18,0,0,22,18,18,0,22,21,17,17,0,22,0,20,20,0,0,0,18,18,0,22,21,18,18,0,21,0,19,19,0,20,21,17,17,0,0,22,22,20,0,21,22,17,17,0,0,21,19,18,0,0,0,21,21,0,21,20,16,17,0,0,0,0,0,0,21,0,17,17,0,21,0,19,20,0,0,0,20,22,0,20,20,17,17,0,0,0,0,0,0,21,21,17,17,0,12,12,13,13,0,14,14,16,16,0,14,14,16,16,0,18,18,21,0,0,19,19,22,0,0,13,13,16,16,0,16,16,18,18,0,13,13,16,16,0,18,18,21,22,0,18,18,0,22,0,13,13,16,16,0,17,17,20,18,0,13,13,16,16,0,19,18,0,22,0,18,18,22,21,0,18,19,0,0,0,0,0,0,0,0,16,16,21,21,0,21,21,0,0,0,18,19,0,0,0,19,19,21,0,0,0,0,0,0,0,16,16,0,21,0,20,20,0,0,0,20,20,0,0,0,16,16,21,20,0,18,17,21,22,0,17,18,0,21,0,18,19,22,22,0,19,19,0,22,0,16,17,21,22,0,20,19,0,0,0,16,16,20,21,0,19,19,0,0,0,19,19,0,22,0,17,17,21,21,0,19,20,0,0,0,16,16,0,20,0,19,20,0,21,0,18,18,0,22,0,19,20,22,22,0,0,0,0,22,0,17,17,0,21,0,21,21,0,0,0,18,19,23,21,0,20,19,0,0,0,0,0,0,0,0,17,17,0,20,0,0,0,0,0,0,19,19,23,22,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,5,5,9,9,12,9,9,12,12,12,10,10,13,13,13,11,11,12,12,13,13,13,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,13,12,13,11,11,13,13,13,14,14,13,12,13,10,10,13,13,12,13,13,13,13,13,10,10,12,12,13,11,11,13,13,13,14,14,12,12,13,12,12,13,13,13,13,13,13,13,13,11,11,12,12,13,11,11,13,13,13,14,14,12,12,13,14,14,13,13,14,13,13,14,14,14,14,14,12,12,13,14,14,13,13,14,14,14,12,12,12,8,8,12,12,13,12,12,11,11,13,11,11,11,11,14,12,12,11,11,14,12,12,10,11,14,12,12,12,12,14,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,12,12,12,12,14,12,12,12,12,14,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,13,13,12,12,14,12,12,12,12,14,13,13,11,11,14,12,12,11,11,14,13,13,11,11,15,13,13,12,12,14,12,12,12,12,15,13,13,12,12,14,12,12,11,11,15,13,13,11,11,12,9,9,11,11,13,7,7,11,11,13,8,8,12,12,14,10,10,10,10,14,14,14,11,11,14,8,8,12,12,14,14,14,12,12,14,7,7,11,11,14,9,9,12,12,14,14,14,11,11,14,8,8,12,12,14,14,14,12,12,14,7,7,11,11,14,9,9,12,12,14,14,14,11,11,14,10,10,12,12,14,14,14,13,13,14,9,9,11,11,14,10,10,12,11,15,14,14,11,11,14,15,15,12,12,15,14,14,14,14,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,11,11,10,10,15,10,10,10,10,15,10,10,10,10,15,11,11,9,9,15,12,13,9,9,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,10,11,15,12,12,11,11,15,13,13,11,10,15,11,11,10,10,15,11,12,10,9,15,13,13,10,10,15,14,14,11,11,15,13,13,11,11,15,14,14,10,10,15,13,13,10,10,15,14,14,10,10,14,13,13,10,10,15,13,13,10,10,15,13,13,10,10,14,14,14,8,9,15,14,14,9,9,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,9,9,15,14,14,11,11,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,15,15,11,11,15,14,14,12,12,15,15,15,10,10,15,14,15,10,10,15,15,15,9,9,15,10,10,13,13,17,8,8,12,12,17,10,9,13,13,18,11,11,12,12,18,14,14,12,12,17,9,9,13,13,17,13,13,12,12,18,8,8,12,12,18,10,10,12,12,18,14,14,12,12,18,10,10,13,13,18,13,13,13,13,18,9,9,12,12,18,10,10,13,13,18,14,14,12,12,18,11,11,13,13,18,14,14,13,13,18,10,10,12,12,17,11,11,12,12,18,14,14,12,12,18,14,14,13,13,18,14,14,13,13,19,14,15,12,12,18,14,14,12,12,18,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,16,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,12,14,15,15,12,12,13,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,16,16,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,14,15,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,14,15,15,12,12,15,15,15,12,12,13,13,13,11,11,14,14,15,11,11,14,14,14,12,12,14,15,15,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,14,15,15,12,12,14,14,15,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,15,10,10,14,15,15,11,11,15,15,15,10,10,15,15,15,12,12,15,15,15,14,14,15,15,15,11,11,15,15,15,11,11,15,15,15,11,11,14,10,10,10,10,15,9,9,12,11,15,10,10,12,12,15,11,11,11,11,15,13,13,12,12,16,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,13,12,15,13,13,11,11,15,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,12,12,15,13,13,11,11,15,11,11,12,12,15,13,13,13,13,15,10,10,11,11,15,11,11,12,12,15,13,14,11,11,15,14,14,13,13,16,14,14,20,19,15,14,14,11,11,15,13,14,12,12,15,14,14,11,11,14,13,13,10,10,14,14,13,11,11,15,13,14,12,12,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,15,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,15,15,15,12,12,15,15,15,13,13,16,14,14,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,12,12,14,10,10,13,13,17,9,9,12,12,17,9,9,13,13,17,11,11,12,12,18,14,14,12,12,18,10,10,13,13,18,14,13,12,12,18,9,9,12,12,18,10,10,12,13,18,14,14,12,12,17,9,9,12,12,17,13,14,12,12,17,9,9,12,12,17,10,10,12,12,17,14,14,11,11,18,11,11,12,12,18,14,14,12,13,18,10,10,12,12,18,11,11,12,12,18,14,14,11,11,18,15,15,12,12,18,14,14,13,13,18,14,15,12,12,17,14,14,12,12,17,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,15,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,16,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,15,15,15,12,12,15,15,15,12,12,13,13,13,12,12,14,14,14,11,11,14,14,14,12,12,14,14,14,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,12,12,15,15,14,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,11,11,15,14,14,10,10,14,15,15,12,12,14,14,14,12,12,14,15,15,10,10,14,15,15,11,11,15,15,15,10,10,15,15,15,12,12,15,14,14,13,13,15,15,15,10,10,15,14,14,11,11,15,15,15,10,10,14,10,10,10,10,14,9,9,12,12,15,10,10,12,12,14,11,11,11,11,15,13,14,12,12,15,10,10,13,13,15,13,13,12,12,15,9,9,12,12,15,10,10,13,13,15,13,14,11,11,15,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,12,12,15,13,13,11,11,15,11,11,12,12,15,13,13,13,13,15,10,10,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,20,19,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,13,13,11,11,15,13,13,11,11,15,14,13,12,12,15,14,14,11,12,15,14,14,11,11,15,14,14,12,12,14,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,14,14,14,12,12,15,15,15,13,13,16,14,14,12,12,15,15,15,13,13,15,14,14,12,12,15,15,15,12,12,15,11,11,13,13,18,10,10,12,12,17,11,11,12,12,18,12,12,11,11,18,14,14,12,12,18,10,10,13,13,18,14,14,12,12,18,10,10,12,12,18,11,11,12,12,18,14,14,12,12,18,11,11,12,13,18,14,14,12,12,18,10,10,12,12,18,11,11,12,12,18,14,14,11,11,18,11,11,12,12,18,14,14,12,12,17,10,10,11,11,17,12,12,11,11,17,14,14,11,11,18,15,15,12,12,18,14,14,13,13,18,15,15,11,11,18,15,14,12,12,18,15,15,11,11,14,8,8,11,11,14,15,15,10,10,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,11,11,15,15,15,12,12,14,15,15,10,10,15,15,15,11,11,15,15,15,12,12,15,15,15,11,11,15,15,15,13,13,14,15,15,10,10,15,15,15,11,11,15,15,15,12,12,15,15,15,12,12,15,16,16,12,12,15,14,14,11,11,15,15,15,11,11,15,15,15,12,12,16,15,15,13,13,15,16,16,13,13,16,15,15,12,12,15,15,15,12,12,15,15,15,12,12,14,13,13,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,15,15,14,11,11,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,14,15,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,11,11,15,14,14,11,11,15,15,14,12,12,15,14,14,12,12,15,15,15,10,11,15,14,14,11,11,15,15,15,10,10,15,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,14,14,11,11,15,15,15,11,11,14,11,11,9,9,14,10,10,12,12,15,11,11,12,12,15,12,12,12,12,15,14,14,13,13,15,11,11,12,12,15,14,14,13,13,14,10,10,12,12,15,11,11,13,13,15,14,14,12,12,15,10,10,12,12,14,14,14,13,13,14,10,10,11,11,15,11,11,12,12,15,14,14,12,12,15,12,12,13,13,15,14,14,14,14,15,11,11,11,11,15,12,11,12,12,15,14,14,11,11,15,15,15,13,14,15,14,14,20,19,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,13,13,10,10,14,13,13,11,11,14,13,13,11,11,15,14,14,12,12,15,14,14,12,12,15,14,14,12,11,14,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,14,14,15,14,14,11,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,18,15,15,12,12,18,15,15,12,12,18,16,16,11,11,18,17,17,12,12,18,15,15,13,13,18,17,17,12,12,18,15,15,12,12,18,15,16,12,12,18,17,17,12,12,18,15,15,13,12,17,16,17,12,12,17,15,15,11,12,18,15,15,12,12,18,17,17,11,11,18,16,16,12,12,18,17,16,12,12,18,15,15,11,11,18,15,15,12,12,18,17,17,11,11,18,17,17,12,12,18,16,16,13,13,18,17,17,11,11,17,16,16,11,11,18,17,17,11,11,15,15,15,11,11,16,15,15,11,11,16,15,15,11,11,16,15,15,12,12,17,15,15,14,14,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,17,15,15,13,13,16,15,15,12,12,17,16,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,18,14,15,13,13,18,15,15,14,14,18,15,15,13,13,15,13,13,12,12,15,14,14,12,12,16,14,14,12,12,16,14,14,12,12,17,14,15,12,12,16,14,14,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,14,14,12,12,16,14,14,12,12,17,14,14,13,13,15,15,15,11,11,16,14,14,12,12,17,14,14,12,12,16,15,15,12,12,17,14,14,13,12,16,15,15,11,11,16,14,14,12,12,17,15,15,11,11,17,15,15,13,13,17,14,14,13,13,18,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,15,15,9,9,14,15,15,12,12,15,16,15,13,13,15,15,15,14,14,15,15,15,21,19,15,15,15,13,13,15,15,15,19,19,15,15,15,12,12,15,16,16,14,14,15,15,15,19,19,15,16,15,13,13,15,16,16,19,20,15,15,15,12,13,15,16,16,14,14,15,15,15,20,19,15,15,15,14,14,15,16,16,19,19,15,15,15,14,13,15,15,15,14,14,15,15,15,19,19,15,16,16,20,19,15,17,16,21,20,15,15,15,20,19,15,16,16,20,20,15,15,15,19,20,14,13,13,10,10,14,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,15,14,20,20,15,14,14,12,12,14,14,14,19,19,15,14,14,11,11,15,14,14,12,12,15,14,14,20,19,15,14,14,12,12,14,14,14,20,20,14,14,14,11,11,15,14,14,12,12,15,14,14,20,21,15,14,14,13,13,15,14,14,20,20,15,14,14,12,12,15,14,14,13,13,14,15,15,20,20,15,15,15,20,19,15,14,14,20,19,15,15,15,20,20,15,14,14,21,20,15,15,15,20,20,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,8,8,8,11,11,12,9,8,8,5,7,7,9,11,11,10,11,11,10,11,11,12,14,14,11,12,12,10,12,12,13,14,14,12,12,12,5,6,6,7,6,6,8,7,7,8,7,7,11,10,10,10,7,7,9,8,8,12,11,11,10,7,7,7,7,7,11,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,7,7,7,11,11,11,12,11,11,12,11,11,14,14,14,13,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,11,11,0,12,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,7,8,8,12,11,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,13,13,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,13,0,15,14,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,5,5,0,8,8,0,8,8,0,9,9,0,10,10,0,8,8,0,8,8,0,10,10,0,8,8,0,7,7,0,8,8,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,7,7,0,6,6,0,7,7,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,5,5,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,6,6,0,9,10,0,10,10,0,10,10,0,11,11,0,9,9,0,10,10,0,11,11,0,9,9,0,8,8,0,8,8,0,8,8,0,9,9,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,8,8,0,7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,7,7,0,8,8,0,6,6,0,6,6,0,10,10,0,10,10,0,10,10,0,12,12,0,9,9,0,10,10,0,12,12,0,9,9,0,8,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+477292);
/* memory initializer */ allocate([7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,6,6,5,7,8,0,8,8,6,9,9,7,10,10,0,8,8,0,9,9,0,12,12,0,8,8,4,7,7,6,10,10,0,12,12,7,11,11,8,12,12,0,12,12,0,13,12,0,15,15,0,12,12,0,7,7,0,7,7,0,7,7,0,8,8,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,5,7,7,8,9,9,0,10,10,8,9,9,11,11,11,0,10,9,0,11,11,0,13,13,0,10,10,6,7,7,8,10,10,0,12,12,9,10,10,10,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,10,10,0,11,11,0,11,11,0,11,11,0,13,13,0,11,11,0,11,11,0,15,15,0,10,10,0,8,8,0,10,10,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,7,7,0,10,10,0,12,12,0,10,10,0,12,12,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,9,9,0,0,0,8,8,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,5,5,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,9,9,0,0,0,10,10,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,5,16,9,9,13,18,21,4,2,21,6,6,10,15,21,16,19,6,5,7,10,13,16,8,6,5,4,4,8,13,16,8,5,6,4,4,7,12,15,13,10,9,7,7,9,13,16,18,15,13,12,9,7,10,14,21,18,13,13,7,5,8,12,2,0,0,0,64,0,0,0,208,179,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,132,7,0,0,0,0,0,0,0,0,0,192,132,7,0,0,0,0,0,0,0,0,0,232,132,7,0,16,133,7,0,0,0,0,0,0,0,0,0,56,133,7,0,96,133,7,0,0,0,0,0,0,0,0,0,136,133,7,0,176,133,7,0,0,0,0,0,0,0,0,0,216,133,7,0,0,134,7,0,176,133,7,0,0,0,0,0,40,134,7,0,80,134,7,0,176,129,7,0,216,129,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,88,132,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,80,132,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,129,7,0,96,129,7,0,0,0,0,0,0,0,0,0,136,129,7,0,176,129,7,0,216,129,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,104,131,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,24,132,7,0,0,0,0,0,2,0,0,0,25,0,0,0,48,131,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,131,7,0,0,0,0,0,2,0,0,0,9,0,0,0,16,131,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,32,131,7,0,0,0,0,0,1,0,0,0,25,0,0,0,136,130,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,168,130,7,0,0,0,0,0,1,0,0,0,25,0,0,0,0,130,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,32,130,7,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,5,5,4,4,5,5,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,8,8,8,8,9,9,10,10,10,10,4,6,5,8,7,9,9,9,9,10,9,11,9,4,5,6,7,8,9,9,9,9,9,10,9,10,8,9,8,9,8,10,9,11,9,12,10,12,10,8,8,9,8,9,9,10,9,11,10,12,10,12,9,10,10,11,10,12,11,12,11,12,12,12,12,9,10,10,11,11,11,11,11,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,13,12,13,12,13,12,12,11,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,12,13,12,12,12,13,12,13,12,13,12,13,12,13,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,3,4,13,9,9,12,15,17,4,2,18,5,7,10,14,18,11,8,6,5,6,8,11,14,8,5,5,3,5,8,11,13,9,6,7,5,5,7,9,10,11,10,9,8,6,6,8,10,14,14,11,11,9,8,9,10,17,17,14,13,10,9,10,10,5,0,0,0,243,0,0,0,200,178,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,192,179,7,0,0,0,0,0,5,0,0,0,53,12,0,0,120,166,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,176,178,7,0,0,0,0,0,5,0,0,0,243,0,0,0,112,165,7,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,104,166,7,0,0,0,0,0,5,0,0,0,243,0,0,0,104,164,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,96,165,7,0,0,0,0,0,5,0,0,0,243,0,0,0,96,163,7,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,88,164,7,0,0,0,0,0,5,0,0,0,53,12,0,0,16,151,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,163,7,0,0,0,0,0,5,0,0,0,53,12,0,0,192,138,7,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,248,150,7,0,0,0,0,0,1,0,0,0,7,0,0,0,152,138,7,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,160,138,7,0,0,0,0,0,5,0,0,0,243,0,0,0,144,137,7,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,136,138,7,0,0,0,0,0,5,0,0,0,243,0,0,0,136,136,7,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,128,137,7,0,0,0,0,0,5,0,0,0,243,0,0,0,128,135,7,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,120,136,7,0,0,0,0,0,5,0,0,0,243,0,0,0,120,134,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,112,135,7,0,0,0,0,0,1,9,9,6,9,9,5,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,6,7,7,7,7,7,7,7,8,8,9,9,9,9,7,7,8,8,8,9,9,9,9,7,8,6,7,7,8,8,8,8,8,8,9,8,8,10,9,9,10,8,8,10,8,8,10,9,9,10,8,8,6,6,6,8,6,6,8,7,7,8,7,7,10,8,8,9,7,7,9,7,7,10,8,9,9,7,7,7,7,7,10,8,8,11,8,8,10,8,8,12,9,9,12,8,8,11,9,9,12,9,9,11,8,8,7,7,7,10,9,9,10,9,9,10,9,9,11,10,10,10,9,9,11,9,9,11,10,10,11,9,9,9,8,8,10,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,8,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,9,10,11,10,9,11,10,10,11,9,9,11,9,10,11,10,10,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,6,6,7,7,7,7,8,8,7,9,9,11,11,11,9,8,8,8,9,9,12,11,11,9,8,8,6,7,7,10,11,10,10,10,10,11,11,10,14,13,14,12,11,11,11,11,11,15,14,14,13,12,12,5,6,6,8,5,5,8,7,7,8,8,8,12,10,10,9,7,7,9,7,8,12,10,10,10,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,10,10,11,10,10,16,13,14,14,10,10,7,7,7,12,11,11,12,11,11,11,11,11,16,15,15,14,12,12,12,11,11,16,15,16,14,12,12,10,9,9,14,11,11,13,11,11,12,11,11,16,14,14,14,11,11,12,11,11,17,15,15,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,14,13,14,10,10,12,10,10,17,14,14,14,10,10,8,7,7,13,11,11,12,11,11,12,11,11,16,15,14,14,12,12,12,11,11,16,15,14,15,12,12,11,10,10,13,11,11,13,12,11,13,11,11,17,14,14,14,11,11,13,11,11,17,14,15,14,11,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,6,6,14,14,6,7,7,14,14,7,7,7,15,15,0,12,12,15,15,0,13,13,15,15,7,8,8,15,15,10,10,10,16,16,9,8,8,15,15,0,13,13,18,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,16,9,8,8,15,15,0,13,13,18,18,0,13,13,16,16,0,14,14,17,17,0,20,0,19,20,0,12,12,16,16,0,16,16,20,22,0,14,14,16,16,0,14,14,17,17,0,20,22,20,19,0,13,13,15,16,0,17,18,0,21,0,15,15,16,16,5,7,7,13,13,8,9,9,14,14,10,10,10,14,14,0,20,22,18,18,0,22,21,18,17,9,10,10,14,14,12,12,12,17,17,12,10,10,14,14,0,0,20,17,17,0,22,21,17,18,11,10,10,14,14,14,13,13,18,18,12,11,11,14,14,0,22,21,18,19,0,20,0,17,17,0,22,0,18,18,0,0,0,0,0,0,20,20,17,17,0,22,0,22,21,0,21,0,19,18,0,22,22,18,18,0,0,0,0,0,0,21,0,17,17,0,22,0,20,20,0,0,0,19,18,6,6,6,12,12,8,6,6,10,10,8,6,6,13,12,0,10,10,11,11,0,11,11,13,13,8,7,7,13,13,11,9,9,13,13,10,6,6,12,12,0,10,10,14,14,0,10,10,13,13,9,7,7,13,13,12,10,10,13,13,10,6,6,12,12,0,11,11,15,15,0,10,10,13,13,0,12,12,15,14,0,19,20,16,17,0,9,9,13,13,0,14,14,20,21,0,12,11,13,12,0,12,12,15,14,0,20,19,17,17,0,10,10,12,13,0,15,15,22,21,0,12,12,12,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,22,22,0,16,17,0,0,0,11,11,15,15,0,14,14,18,18,0,11,11,16,16,0,16,15,0,21,0,16,16,0,0,0,12,12,15,15,0,14,14,19,19,0,11,11,15,15,0,15,15,22,0,0,16,16,22,0,0,16,16,0,21,0,0,0,0,0,0,15,15,19,20,0,18,18,0,0,0,17,17,0,0,0,17,17,0,0,0,0,0,0,0,0,16,15,22,21,0,20,20,0,0,0,18,18,0,0,0,10,10,12,12,0,10,10,11,11,0,11,11,12,12,0,11,11,9,9,0,13,12,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,12,13,13,0,12,12,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,13,14,13,0,12,12,12,12,0,14,13,13,14,0,20,21,15,15,0,11,11,12,12,0,15,16,20,20,0,12,13,10,10,0,13,13,14,13,0,20,20,15,15,0,11,11,12,12,0,16,17,21,21,0,13,13,11,11,6,7,7,16,15,11,9,9,14,15,12,9,9,16,16,0,13,13,15,15,0,14,14,17,17,10,9,9,16,16,14,12,12,16,16,12,9,9,15,15,0,13,13,17,18,0,13,13,15,15,12,10,10,17,17,15,12,12,17,17,13,9,9,16,16,0,13,13,18,19,0,14,14,16,16,0,15,15,18,18,0,0,0,20,19,0,12,12,17,16,0,16,17,0,21,0,14,15,16,16,0,15,15,18,18,0,0,22,19,21,0,13,13,16,16,0,18,17,22,22,0,15,15,16,16,7,7,7,13,13,11,10,10,15,15,12,10,10,14,14,0,21,0,18,17,0,21,22,18,18,11,10,10,15,15,14,12,12,17,17,14,11,11,14,14,0,21,20,18,18,0,22,21,18,17,12,11,10,16,16,16,14,14,17,19,14,11,11,15,15,0,0,22,19,19,0,21,22,18,18,0,21,0,18,19,0,0,0,22,0,0,22,21,17,17,0,0,0,20,22,0,0,21,18,18,0,0,0,19,20,0,0,0,0,0,0,0,21,17,17,0,0,0,22,21,0,0,0,19,19,10,9,9,14,13,13,10,10,12,12,13,10,10,14,14,0,13,13,12,12,0,15,14,16,15,13,10,10,14,14,15,12,12,14,14,15,10,10,14,14,0,14,14,15,15,0,14,13,14,14,13,10,10,15,15,17,13,13,15,15,14,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,15,15,16,16,0,21,22,17,18,0,12,12,14,14,0,17,17,20,21,0,14,14,14,14,0,15,15,16,16,0,21,22,18,18,0,13,13,14,14,0,18,18,22,0,0,15,15,14,14,0,11,11,13,13,0,12,12,16,15,0,12,12,16,16,0,16,16,0,0,0,16,17,0,22,0,12,12,16,16,0,14,14,17,18,0,11,11,16,16,0,15,15,0,21,0,16,16,21,22,0,12,12,16,16,0,15,15,19,19,0,12,12,17,16,0,16,16,21,22,0,16,16,0,0,0,17,17,0,22,0,0,0,0,0,0,15,15,19,20,0,17,19,0,0,0,17,17,22,0,0,17,17,0,22,0,0,0,0,0,0,15,15,21,0,0,19,20,0,0,0,19,18,22,0,0,11,12,14,14,0,11,11,14,14,0,12,12,15,15,0,13,13,13,13,0,14,14,16,16,0,12,12,15,15,0,14,14,16,15,0,11,11,15,15,0,13,13,16,16,0,13,13,15,15,0,12,12,15,15,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,15,15,0,15,15,16,16,0,0,0,18,18,0,12,12,14,14,0,16,16,22,0,0,14,14,15,15,0,15,15,16,17,0,21,22,18,18,0,13,13,15,14,0,18,17,22,0,0,14,14,15,15,8,8,8,16,15,12,10,10,16,15,12,10,10,16,16,0,14,14,16,17,0,14,14,17,16,12,10,10,17,18,14,12,12,18,18,14,10,10,16,16,0,14,14,18,18,0,14,14,16,16,12,9,9,16,16,17,13,13,16,17,14,9,9,15,15,0,14,14,18,19,0,13,13,15,15,0,15,15,18,19,0,0,0,22,21,0,13,13,16,16,0,16,16,22,0,0,15,15,16,16,0,14,14,18,17,0,0,0,20,0,0,13,13,16,16,0,18,18,0,0,0,15,15,16,16,8,7,7,13,13,12,10,10,15,15,12,10,10,14,14,0,22,22,19,18,0,0,0,18,18,12,10,10,15,15,14,13,13,17,17,14,11,11,15,15,0,19,20,18,18,0,22,21,17,18,13,11,11,15,15,16,13,13,18,18,14,11,11,14,15,0,22,21,20,19,0,22,21,17,17,0,0,22,19,18,0,0,0,0,0,0,22,20,17,17,0,0,0,21,20,0,0,0,19,17,0,0,22,19,19,0,0,0,0,0,0,22,20,18,17,0,0,0,0,0,0,0,0,18,18,0,10,10,14,14,0,11,11,14,14,0,11,11,15,15,0,14,14,14,14,0,15,15,16,16,0,11,11,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,11,11,15,15,0,13,13,15,15,0,10,10,15,15,0,15,15,17,17,0,14,14,14,14,0,16,16,16,16,0,0,22,19,19,0,13,13,14,14,0,17,17,0,0,0,15,15,14,14,0,16,16,17,17,0,0,22,18,18,0,13,13,14,14,0,21,18,0,0,0,15,15,14,14,0,11,11,13,13,0,12,12,15,15,0,12,12,16,15,0,16,16,0,0,0,17,17,22,22,0,12,12,16,16,0,14,14,18,18,0,11,12,16,16,0,15,16,0,21,0,16,16,22,21,0,12,12,16,16,0,15,15,19,20,0,11,12,16,16,0,15,15,20,22,0,16,16,0,22,0,17,17,22,0,0,0,0,0,0,0,15,15,21,22,0,19,18,0,0,0,17,17,0,0,0,17,17,0,22,0,0,0,0,0,0,16,15,22,0,0,19,19,0,0,0,17,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,15,15,0,13,13,14,14,0,15,15,16,17,0,12,12,16,16,0,14,14,16,16,0,12,11,15,16,0,14,14,16,17,0,14,14,16,16,0,13,12,16,16,0,15,15,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,15,15,18,17,0,0,22,0,20,0,13,13,15,15,0,16,17,22,22,0,14,14,15,15,0,15,15,17,18,0,20,0,19,19,0,13,13,15,15,0,18,18,22,0,0,14,14,15,15,0,11,11,16,16,0,14,14,17,16,0,13,13,17,17,0,16,16,17,17,0,17,17,18,19,0,12,12,16,17,0,15,15,18,18,0,12,12,16,16,0,16,16,19,18,0,16,16,17,16,0,12,13,17,17,0,17,16,18,17,0,13,12,16,16,0,16,16,18,19,0,16,16,16,17,0,16,16,18,18,0,22,0,22,22,0,13,13,16,16,0,19,18,22,20,0,16,15,16,16,0,16,17,18,18,0,0,0,22,20,0,14,14,16,16,0,19,19,0,0,0,16,16,16,16,0,9,9,13,13,0,13,13,15,15,0,14,14,15,15,0,0,22,17,18,0,22,0,18,19,0,12,12,15,15,0,15,16,17,17,0,14,14,14,14,0,22,0,18,18,0,21,22,17,17,0,13,13,15,15,0,17,17,17,18,0,14,14,15,15,0,22,21,21,19,0,20,21,17,17,0,21,21,19,18,0,0,0,0,0,0,21,21,17,17,0,0,0,22,22,0,0,22,19,18,0,0,21,19,18,0,0,0,0,22,0,19,20,17,17,0,0,0,0,22,0,0,0,19,18,0,19,19,15,16,0,21,19,16,17,0,0,21,17,17,0,0,22,17,17,0,22,22,18,19,0,20,20,16,16,0,0,22,18,18,0,20,19,16,17,0,22,21,20,19,0,0,21,17,17,0,21,20,17,17,0,0,0,18,18,0,19,19,17,16,0,22,0,19,19,0,21,22,17,18,0,0,22,19,18,0,0,0,19,20,0,19,19,16,16,0,22,22,22,0,0,20,22,16,16,0,22,20,18,19,0,0,0,20,19,0,20,20,16,16,0,0,0,0,0,0,22,20,17,16,0,11,11,13,13,0,14,13,15,15,0,13,13,16,15,0,18,17,21,0,0,18,18,21,0,0,12,12,15,15,0,15,16,17,18,0,12,12,15,15,0,17,17,22,20,0,17,18,22,0,0,12,12,17,16,0,16,17,19,19,0,13,13,16,16,0,17,17,0,22,0,17,17,0,21,0,18,18,20,22,0,0,0,0,0,0,15,15,21,20,0,20,19,0,0,0,18,18,22,0,0,17,17,22,0,0,0,0,0,0,0,15,16,20,22,0,20,21,0,0,0,19,18,0,0,0,15,15,19,19,0,17,16,20,20,0,16,17,20,21,0,18,17,0,0,0,19,19,0,0,0,15,15,21,19,0,19,19,0,0,0,15,15,22,22,0,18,18,0,22,0,17,18,22,21,0,15,15,20,19,0,19,19,0,0,0,15,15,20,22,0,18,19,20,0,0,18,17,21,21,0,18,18,19,22,0,0,0,0,0,0,15,15,20,19,0,19,19,0,0,0,18,18,21,22,0,18,18,22,0,0,0,0,0,0,0,15,15,19,20,0,21,21,0,0,0,17,17,20,20,0,12,12,17,17,0,14,14,16,17,0,13,14,17,17,0,16,16,17,17,0,17,17,17,19,0,13,13,17,17,0,16,16,18,18,0,13,13,16,16,0,16,16,18,18,0,16,16,17,17,0,13,13,17,17,0,17,17,18,17,0,12,12,15,16,0,17,18,19,20,0,16,16,16,16,0,17,16,18,19,0,0,22,21,22,0,14,14,16,16,0,19,19,0,0,0,16,16,16,16,0,16,16,18,17,0,0,22,21,21,0,14,14,16,16,0,22,20,22,0,0,16,16,15,15,0,9,9,13,13,0,14,14,15,15,0,14,14,14,14,0,22,22,18,18,0,0,22,18,18,0,12,12,15,15,0,16,16,18,17,0,14,14,14,14,0,20,21,18,18,0,22,21,17,17,0,13,13,15,15,0,17,17,18,18,0,14,14,14,14,0,0,21,18,19,0,0,22,17,17,0,22,22,19,18,0,0,0,0,0,0,19,21,17,17,0,0,0,22,20,0,0,21,18,19,0,0,22,18,18,0,0,0,0,22,0,20,22,17,17,0,0,0,20,22,0,0,0,18,18,0,19,21,16,16,0,20,22,16,17,0,20,0,17,17,0,22,0,18,17,0,21,0,18,19,0,20,20,17,17,0,22,0,18,18,0,21,20,17,17,0,0,20,20,19,0,0,21,18,17,0,21,21,17,17,0,22,0,18,17,0,19,19,17,17,0,0,22,20,21,0,0,21,17,17,0,22,0,18,18,0,0,0,20,22,0,20,19,16,16,0,0,0,0,0,0,22,22,17,17,0,22,0,18,19,0,0,0,21,20,0,19,21,16,17,0,0,0,0,0,0,22,22,17,16,0,11,11,13,13,0,13,13,15,15,0,13,13,15,15,0,17,17,22,21,0,18,18,22,0,0,12,13,16,15,0,15,16,18,18,0,13,13,16,16,0,17,17,0,22,0,17,17,22,22,0,13,13,16,16,0,16,16,19,18,0,13,13,16,16,0,18,17,0,20,0,18,17,20,0,0,17,17,21,0,0,0,0,0,0,0,15,15,21,22,0,19,20,0,0,0,18,18,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,22,22,0,20,20,0,0,0,21,19,0,0,0,15,15,20,19,0,16,16,22,20,0,17,17,0,22,0,18,18,0,22,0,19,17,0,0,0,15,16,22,20,0,18,19,0,0,0,16,16,22,20,0,18,18,0,22,0,18,18,22,0,0,16,16,21,20,0,19,20,0,22,0,16,16,0,22,0,18,18,0,22,0,18,18,0,21,0,19,18,0,22,0,0,0,0,0,0,16,16,21,20,0,20,0,0,0,0,18,18,21,0,0,18,18,0,0,0,0,0,0,0,0,16,16,21,19,0,0,0,0,0,0,18,18,0,21,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,5,8,8,12,10,10,12,12,12,10,10,12,12,13,11,11,12,12,13,12,12,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,13,13,13,11,11,13,13,14,13,13,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,12,12,13,11,11,13,13,13,13,13,12,12,13,12,12,13,13,13,13,13,13,13,14,11,11,12,12,14,12,12,13,12,14,14,14,12,12,13,14,14,13,13,14,13,13,13,13,14,14,14,12,12,14,13,13,13,13,14,14,14,12,12,12,8,8,11,11,12,12,12,11,11,12,11,11,10,10,13,12,12,10,10,13,12,12,10,10,13,12,12,12,12,14,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,12,12,12,12,13,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,13,13,12,12,14,12,12,12,11,14,13,13,11,11,14,13,12,11,11,14,13,13,11,11,14,13,13,12,12,14,12,12,12,12,15,13,13,12,12,14,12,12,11,11,14,13,13,11,11,12,9,9,10,10,12,7,7,11,11,12,9,9,12,12,13,10,10,10,10,14,14,14,11,11,13,9,9,12,12,14,14,14,12,12,13,8,8,11,11,14,9,9,12,12,14,14,14,11,11,13,9,9,12,12,14,14,14,12,12,14,8,8,11,11,14,9,9,12,12,14,14,14,11,11,14,10,10,12,12,14,14,14,13,13,14,9,9,11,11,14,10,10,12,12,14,14,14,11,11,14,14,15,12,12,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+487532);
/* memory initializer */ allocate([14,14,14,14,15,14,14,11,11,14,14,14,12,12,14,14,14,11,11,14,11,11,10,10,14,10,10,10,10,14,10,10,10,10,15,11,11,9,9,14,12,12,9,9,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,12,12,11,11,15,13,13,11,11,15,11,11,10,10,15,12,12,10,10,15,13,13,10,10,15,14,14,11,11,15,13,13,11,11,15,14,14,10,11,15,13,13,10,10,15,13,14,10,10,14,13,13,10,10,14,13,13,10,10,14,13,13,10,10,14,13,13,9,9,14,14,14,9,9,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,14,14,14,10,10,15,14,14,10,10,14,14,14,10,10,15,14,14,11,11,15,14,14,11,11,14,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,15,15,11,11,15,14,14,12,12,15,15,14,10,10,15,14,14,10,10,14,15,15,9,9,14,10,10,12,12,17,9,9,12,12,17,10,10,13,13,17,11,11,12,12,18,14,14,12,12,17,10,10,13,13,17,14,14,12,12,17,9,9,12,12,17,11,11,12,12,17,14,14,12,12,18,10,10,13,13,18,14,14,13,13,18,9,9,12,12,18,10,10,13,13,18,14,14,12,12,18,11,11,13,13,18,14,14,13,13,18,10,10,12,12,17,11,11,12,12,17,14,14,12,12,18,15,15,13,13,18,14,14,14,14,18,15,15,12,12,18,14,14,12,12,18,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,15,15,15,11,11,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,14,15,15,12,12,14,15,14,12,12,14,15,15,11,11,15,14,14,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,15,15,15,12,12,15,15,15,12,12,13,13,13,11,10,14,14,15,11,11,14,14,14,12,12,15,14,14,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,14,15,15,12,12,14,14,14,12,12,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,15,15,15,12,12,15,14,14,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,10,10,15,15,16,12,12,15,15,15,14,14,15,15,15,11,11,15,15,15,12,12,15,15,15,11,11,14,11,11,10,10,15,9,9,12,12,15,10,10,12,12,15,11,11,11,11,15,14,14,12,12,15,10,10,13,13,15,14,14,12,12,15,9,9,12,12,15,10,10,13,13,15,13,13,12,11,15,10,10,12,12,15,14,14,12,12,15,9,9,11,11,15,11,11,12,12,15,13,13,11,11,15,11,11,13,13,15,13,14,13,14,15,11,11,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,20,20,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,14,13,13,10,10,14,13,13,12,12,14,14,13,12,12,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,13,13,15,14,14,12,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,15,14,14,12,11,15,14,14,12,12,15,14,14,13,13,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,15,15,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,15,12,12,15,15,15,13,13,14,10,10,12,13,17,9,9,12,12,17,10,10,13,13,17,11,11,12,12,18,14,14,12,12,18,10,10,13,13,18,14,14,12,12,17,9,9,12,12,18,10,11,13,13,18,14,14,12,12,17,10,10,12,12,17,14,14,12,12,17,9,9,12,12,17,11,11,12,12,17,14,14,12,12,18,11,11,12,12,18,14,14,13,13,18,11,11,12,12,18,11,11,12,12,18,14,14,12,12,18,15,15,12,12,18,14,14,13,13,18,15,15,12,12,17,14,14,12,12,17,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,11,11,14,15,14,12,12,15,15,15,12,11,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,13,13,14,15,15,11,11,14,15,15,13,12,14,15,15,11,11,14,15,15,11,11,15,15,15,13,13,14,15,15,12,12,15,15,15,12,12,15,15,15,11,11,15,15,15,11,11,15,15,15,12,12,15,15,15,13,13,15,16,16,12,12,15,15,15,12,13,15,15,15,12,12,15,15,15,12,12,13,13,13,11,11,14,14,14,11,11,14,14,14,12,12,14,14,14,10,10,15,14,14,11,11,14,15,15,12,12,14,14,14,12,12,14,15,15,11,11,14,15,14,12,12,15,14,14,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,12,12,15,15,14,11,11,15,15,15,12,12,15,14,14,12,12,14,15,15,11,11,14,15,14,11,11,15,15,15,10,10,15,15,15,12,12,15,14,14,14,13,15,15,15,11,11,15,15,15,11,11,15,15,15,10,10,14,11,11,10,10,15,9,9,12,12,15,10,10,12,12,15,11,11,11,11,15,14,14,12,12,15,10,10,13,13,15,13,13,12,12,15,9,9,12,12,15,11,11,13,13,15,14,14,12,12,15,10,10,13,13,15,13,14,12,12,15,9,9,12,12,15,10,10,13,13,15,13,13,11,11,15,11,11,13,13,15,14,14,13,13,15,10,10,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,21,20,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,13,13,10,10,14,13,13,11,11,15,14,14,12,12,15,14,14,12,12,14,14,14,12,12,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,14,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,14,14,14,13,13,15,15,15,13,13,16,14,14,12,13,15,15,15,13,13,15,14,14,12,12,15,15,15,13,13,15,11,11,13,12,18,10,10,12,12,17,11,11,12,12,18,12,12,11,11,18,14,14,12,12,18,11,11,13,13,17,14,14,12,12,18,10,10,12,12,18,12,12,12,12,18,14,15,12,12,18,11,11,13,13,18,14,14,12,12,17,10,10,12,12,18,11,11,12,12,18,15,14,12,12,17,12,12,12,12,17,14,14,12,12,17,11,11,11,11,17,12,12,12,11,17,15,15,11,11,18,15,15,12,12,18,14,15,13,13,18,15,15,11,11,17,15,15,12,12,18,15,15,11,11,14,9,9,11,11,14,15,15,11,11,15,15,15,11,11,15,15,15,12,11,15,15,15,12,12,15,15,15,11,11,15,15,15,13,13,14,15,15,11,11,15,15,15,11,11,15,15,15,13,13,15,15,15,11,11,15,15,15,13,13,15,15,15,11,11,15,15,15,11,11,15,15,15,13,13,15,15,15,12,12,15,15,15,13,13,15,15,14,11,11,15,15,15,12,12,15,15,15,12,12,16,15,15,13,13,15,16,16,13,13,16,15,15,12,12,15,15,15,13,12,15,15,15,12,12,13,12,12,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,15,15,12,12,15,14,14,12,12,15,15,15,11,11,15,14,14,11,11,15,14,15,11,11,15,15,15,12,12,15,14,14,13,13,16,15,15,11,11,15,14,14,12,12,15,15,15,11,11,14,11,11,9,9,15,10,10,12,12,14,11,11,12,12,15,12,12,12,12,15,14,14,13,13,15,11,11,13,13,15,14,14,13,13,15,10,10,12,12,15,12,12,13,13,15,14,14,13,13,15,11,11,12,12,15,14,14,13,13,14,10,10,12,12,15,12,12,13,13,15,14,14,12,12,15,12,12,13,13,15,14,14,15,15,15,11,11,12,12,15,12,12,12,13,15,14,14,12,12,15,15,15,14,14,15,14,14,20,20,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,13,13,10,10,14,13,13,11,11,14,13,13,12,12,14,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,14,14,14,14,14,14,14,11,11,15,14,14,12,12,15,14,14,14,14,15,14,14,12,12,14,14,14,14,14,14,14,14,11,11,15,14,14,12,12,14,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,14,14,14,14,13,15,15,15,14,14,15,14,14,13,13,15,15,15,14,14,15,14,14,13,13,15,15,15,13,13,14,13,13,13,13,18,15,15,12,12,18,15,15,13,12,18,15,16,11,11,18,16,17,12,12,18,15,15,13,13,18,17,17,12,12,18,15,15,12,12,17,15,15,12,12,18,17,17,12,12,18,15,15,13,13,18,16,17,12,12,17,15,15,12,12,18,15,15,12,12,18,16,17,11,12,18,16,16,12,12,17,16,17,12,12,18,15,15,11,11,18,15,15,12,12,18,17,17,11,11,17,17,17,12,12,18,16,16,13,13,18,17,17,11,11,18,16,16,12,12,18,17,17,11,11,15,14,14,11,11,16,15,15,11,11,16,15,15,12,12,16,15,15,12,12,17,15,15,14,13,16,15,15,12,12,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,17,15,15,13,13,16,15,15,12,12,17,16,15,14,14,16,14,15,12,12,16,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,15,12,13,11,11,15,14,14,12,12,16,14,14,12,12,16,14,14,12,12,16,14,14,12,12,16,14,14,13,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,14,14,12,12,16,14,14,12,12,17,14,14,13,13,15,15,15,12,12,16,14,14,12,12,17,14,14,12,12,17,15,15,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,15,15,12,12,18,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,15,15,9,9,15,15,15,12,12,15,15,15,13,13,15,15,15,14,14,15,15,15,19,19,15,15,16,13,13,15,15,16,19,20,15,15,15,13,12,15,16,16,14,14,15,15,15,19,19,15,15,15,13,13,15,16,15,20,19,14,15,15,13,13,15,15,15,14,14,15,15,15,19,19,15,15,15,14,14,15,16,16,19,20,15,15,15,14,14,15,15,15,14,14,15,15,15,19,19,15,15,15,20,19,15,16,16,20,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,20,14,13,13,10,10,14,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,14,14,19,20,15,14,14,12,12,14,14,14,20,19,14,14,14,11,11,15,14,14,12,12,15,14,14,20,20,15,14,14,12,12,14,14,14,20,19,14,14,14,11,11,15,14,14,12,12,15,14,14,19,20,15,14,14,13,13,15,14,14,22,19,15,15,14,12,12,15,14,14,13,13,14,15,15,22,20,15,15,15,20,20,15,14,14,21,20,15,15,15,20,21,15,14,14,20,20,14,15,15,20,20,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,7,7,7,7,7,7,7,8,8,10,11,11,9,8,8,8,8,8,11,11,11,10,8,8,5,7,7,9,11,11,10,11,11,10,11,11,12,13,14,11,12,12,10,11,11,13,14,14,12,12,12,5,6,6,8,6,6,8,7,7,8,7,7,11,10,10,10,7,7,9,7,7,12,11,11,11,7,7,7,7,7,11,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,7,7,7,11,11,11,12,11,11,12,11,11,14,14,14,14,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,11,11,0,11,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,8,8,8,12,10,10,12,10,10,13,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,13,0,14,15,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,4,4,0,8,8,0,8,8,0,9,9,0,10,10,0,8,8,0,9,9,0,10,10,0,8,8,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,7,7,0,6,6,0,7,7,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,6,5,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,6,6,0,9,10,0,10,10,0,10,10,0,11,11,0,9,9,0,10,10,0,11,11,0,9,9,0,8,8,0,8,8,0,8,8,0,9,9,0,9,9,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,7,7,0,9,9,0,6,6,0,6,6,0,10,10,0,10,10,0,10,10,0,12,12,0,9,9,0,10,10,0,12,12,0,9,9,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,5,8,8,0,8,8,6,9,9,8,10,10,0,8,8,0,9,9,0,12,12,0,8,8,4,7,7,6,10,10,0,12,12,7,11,11,9,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,7,7,0,7,7,0,8,8,0,8,8,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,5,7,7,9,9,9,0,11,10,9,9,9,11,12,12,0,10,10,0,11,11,0,13,13,0,11,11,6,7,7,9,10,10,0,12,12,10,11,11,11,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,10,10,0,11,11,0,11,11,0,12,12,0,13,13,0,11,11,0,12,12,0,15,15,0,11,11,0,8,8,0,10,10,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,7,7,0,10,10,0,12,12,0,10,10,0,12,13,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,7,7,0,0,0,8,8,0,0,0,8,8,0,0,0,11,11,0,0,0,0,0,0,0,0,10,9,0,0,0,0,0,0,0,0,9,9,0,0,0,10,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,5,5,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,6,0,0,0,7,7,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,9,9,0,0,0,10,10,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,7,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,11,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,5,16,9,9,12,17,18,4,2,18,6,5,9,13,15,10,7,7,6,7,9,13,13,8,5,6,5,5,7,11,12,8,4,7,4,3,6,10,12,11,8,9,7,6,8,11,12,15,13,13,11,9,7,10,12,16,12,16,12,6,5,8,11,2,0,0,0,64,0,0,0,160,232,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,185,7,0,0,0,0,0,0,0,0,0,144,185,7,0,0,0,0,0,0,0,0,0,184,185,7,0,224,185,7,0,0,0,0,0,0,0,0,0,8,186,7,0,48,186,7,0,0,0,0,0,0,0,0,0,88,186,7,0,128,186,7,0,0,0,0,0,0,0,0,0,168,186,7,0,208,186,7,0,128,186,7,0,0,0,0,0,248,186,7,0,32,187,7,0,128,182,7,0,168,182,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,40,185,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,32,185,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,182,7,0,48,182,7,0,0,0,0,0,0,0,0,0,88,182,7,0,128,182,7,0,168,182,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,56,184,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,232,184,7,0,0,0,0,0,2,0,0,0,25,0,0,0,0,184,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,184,7,0,0,0,0,0,2,0,0,0,9,0,0,0,224,183,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,240,183,7,0,0,0,0,0,1,0,0,0,25,0,0,0,88,183,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,120,183,7,0,0,0,0,0,1,0,0,0,25,0,0,0,208,182,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,240,182,7,0,0,0,0,0,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,5,6,6,6,5,6,5,6,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,7,8,8,9,9,10,10,11,11,4,6,5,8,7,9,8,10,9,11,10,11,11,4,5,6,7,8,8,9,9,10,10,10,10,11,8,9,8,10,8,10,9,11,10,11,11,11,11,8,8,9,8,10,9,10,10,11,11,11,11,11,9,10,10,11,11,11,11,11,11,12,11,12,11,9,10,10,10,11,11,11,11,11,11,12,11,12,10,11,11,12,11,12,12,12,12,12,12,12,12,10,11,11,11,11,12,12,12,13,12,12,12,12,11,12,12,12,12,13,13,12,12,12,12,12,12,11,12,12,12,12,13,13,12,13,12,12,12,12,12,13,13,13,13,13,13,12,13,12,13,12,12,12,13,13,13,13,13,13,13,12,13,12,12,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,3,4,9,8,8,10,13,16,4,2,9,5,7,10,14,18,9,7,6,5,7,9,12,16,7,5,5,3,5,8,11,13,8,7,7,5,5,7,9,11,10,10,9,8,6,6,8,10,13,14,13,11,9,8,9,10,17,18,16,14,11,10,10,10,5,0,0,0,243,0,0,0,152,231,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,144,232,7,0,0,0,0,0,5,0,0,0,53,12,0,0,72,219,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,128,231,7,0,0,0,0,0,5,0,0,0,243,0,0,0,64,218,7,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,56,219,7,0,0,0,0,0,5,0,0,0,243,0,0,0,56,217,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,218,7,0,0,0,0,0,5,0,0,0,243,0,0,0,48,216,7,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,40,217,7,0,0,0,0,0,5,0,0,0,53,12,0,0,224,203,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,24,216,7,0,0,0,0,0,5,0,0,0,53,12,0,0,144,191,7,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,200,203,7,0,0,0,0,0,1,0,0,0,7,0,0,0,104,191,7,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,112,191,7,0,0,0,0,0,5,0,0,0,243,0,0,0,96,190,7,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,88,191,7,0,0,0,0,0,5,0,0,0,243,0,0,0,88,189,7,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,80,190,7,0,0,0,0,0,5,0,0,0,243,0,0,0,80,188,7,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,72,189,7,0,0,0,0,0,5,0,0,0,243,0,0,0,72,187,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,64,188,7,0,0,0,0,0,1,9,9,6,9,9,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,6,7,7,7,7,7,7,7,8,8,9,9,9,8,7,7,8,8,8,9,9,9,9,8,8,6,7,7,9,8,8,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,9,10,8,8,7,6,6,8,6,6,9,6,6,9,7,7,10,8,8,9,6,6,9,7,7,10,9,8,9,7,7,7,7,7,11,8,8,11,9,9,10,9,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,10,9,9,11,10,11,11,9,9,11,9,9,11,11,11,11,9,9,10,8,8,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,12,10,10,11,9,9,8,8,8,11,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,10,12,8,8,9,7,7,11,9,9,11,10,10,11,9,9,11,11,11,11,9,9,11,10,10,12,11,11,11,9,10,10,9,9,11,9,9,11,10,10,11,10,10,11,11,11,11,9,9,11,9,10,11,11,11,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,7,7,7,8,8,7,8,8,7,9,9,10,11,11,9,8,8,7,8,9,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,14,14,12,11,11,10,11,11,15,14,14,13,11,11,6,6,6,8,5,5,8,7,7,8,7,7,11,10,10,9,7,7,9,7,7,12,10,10,10,7,7,6,8,7,12,10,10,12,10,10,11,10,10,15,14,13,13,10,10,11,10,10,16,14,14,14,10,10,7,7,7,12,11,11,12,11,11,11,11,11,16,14,14,13,12,12,11,11,11,17,15,15,14,12,12,10,9,9,13,11,11,13,11,11,12,11,11,16,14,13,14,11,11,12,11,11,17,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,13,14,13,10,10,11,10,10,17,14,14,14,10,10,7,7,7,12,11,11,12,11,11,12,11,11,15,14,15,14,12,12,12,11,11,17,15,15,14,12,12,10,10,9,13,11,11,13,11,11,13,11,11,16,14,14,14,11,11,13,11,11,16,15,15,15,11,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,6,6,14,14,6,7,7,14,14,7,7,7,15,15,0,13,13,16,16,0,13,13,15,15,7,8,8,15,15,9,10,10,17,16,9,8,8,15,15,0,13,13,18,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,17,9,8,8,14,14,0,13,13,18,17,0,13,13,16,15,0,14,14,18,17,0,20,22,18,20,0,12,12,16,16,0,16,16,22,20,0,14,14,16,16,0,14,14,17,17,0,22,22,22,19,0,12,13,16,16,0,17,17,0,0,0,15,15,16,16,5,7,7,13,13,9,9,9,15,14,10,10,10,14,14,0,21,21,18,17,0,21,22,18,17,9,10,10,14,14,12,12,12,17,17,12,10,10,14,14,0,19,21,18,17,0,20,22,18,18,11,10,10,14,14,14,13,13,18,17,12,11,11,14,14,0,22,19,17,18,0,20,0,18,17,0,22,21,17,17,0,0,0,0,0,0,20,22,17,17,0,22,0,21,19,0,22,0,18,18,0,0,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+497772);
/* memory initializer */ allocate([18,19,0,0,0,0,0,0,19,21,17,17,0,0,0,20,20,0,0,0,18,18,6,6,6,13,12,8,6,6,11,11,8,6,6,13,13,0,9,9,11,11,0,11,11,14,14,9,7,7,13,13,11,9,9,13,13,10,6,6,13,13,0,10,10,14,14,0,10,10,13,13,9,7,7,13,14,13,9,9,13,13,10,6,6,13,12,0,11,11,15,15,0,10,10,13,13,0,12,12,15,15,0,19,0,17,17,0,9,9,13,13,0,13,14,19,20,0,11,11,13,13,0,11,11,14,14,0,19,20,17,18,0,10,10,13,13,0,15,15,21,19,0,12,12,13,13,0,10,10,12,13,0,11,11,15,15,0,11,11,15,15,0,15,15,22,0,0,16,17,22,0,0,11,11,15,15,0,14,14,18,17,0,11,11,15,16,0,15,15,22,21,0,16,16,0,20,0,12,12,16,15,0,15,14,19,19,0,11,11,16,16,0,15,15,21,0,0,16,15,0,0,0,16,16,22,21,0,0,0,0,0,0,15,15,20,20,0,18,18,0,0,0,16,17,0,0,0,17,17,0,22,0,0,0,0,0,0,15,15,21,22,0,20,18,0,0,0,18,17,22,0,0,10,10,12,11,0,10,10,10,10,0,11,11,12,12,0,11,11,9,9,0,13,13,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,13,14,0,12,12,12,12,0,13,14,14,14,0,20,21,15,15,0,12,11,12,12,0,15,16,20,22,0,13,12,11,11,0,13,13,14,13,0,20,0,16,15,0,12,12,12,12,0,16,16,22,21,0,13,13,12,12,6,7,7,16,16,11,9,9,15,15,12,9,9,16,16,0,13,13,14,14,0,14,14,16,17,10,9,9,16,16,14,12,12,16,16,12,9,9,15,15,0,13,13,18,18,0,13,13,15,16,12,10,10,17,18,15,12,12,17,17,13,9,9,16,16,0,13,13,17,18,0,14,14,16,16,0,15,15,18,18,0,22,0,20,20,0,12,12,16,16,0,16,16,20,22,0,14,14,16,16,0,15,14,18,18,0,0,22,19,21,0,13,13,16,17,0,17,17,22,22,0,15,15,16,16,7,7,7,14,14,11,10,10,15,15,12,10,10,15,14,0,22,0,18,18,0,0,21,17,18,11,10,10,15,15,14,12,12,17,17,14,11,11,15,15,0,22,20,18,18,0,0,20,18,17,12,10,10,16,16,17,14,14,19,18,14,11,11,15,15,0,21,22,19,19,0,21,22,18,18,0,22,0,19,21,0,0,0,0,0,0,22,22,18,17,0,0,0,21,20,0,22,22,20,19,0,0,22,20,20,0,0,0,0,0,0,20,21,17,17,0,0,22,21,21,0,0,0,18,18,10,9,9,14,14,13,10,10,13,13,13,10,11,14,14,0,13,13,12,12,0,15,15,16,16,13,10,10,15,15,15,12,12,14,14,15,10,10,14,15,0,14,14,16,15,0,14,14,15,15,13,10,10,15,15,18,13,13,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,15,15,0,15,15,16,16,0,22,0,18,18,0,12,13,14,14,0,17,17,22,0,0,14,14,14,14,0,15,15,16,16,0,22,0,18,17,0,13,13,14,14,0,19,18,21,22,0,15,15,14,14,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,16,21,0,0,16,17,0,22,0,12,12,16,16,0,14,14,17,18,0,11,11,16,16,0,15,15,21,22,0,16,16,0,0,0,12,12,16,16,0,15,15,0,19,0,12,12,16,17,0,16,16,22,0,0,16,16,0,22,0,17,17,0,22,0,0,0,0,0,0,15,15,20,19,0,18,18,0,0,0,17,18,0,0,0,17,17,0,0,0,0,0,0,0,0,15,15,0,22,0,20,18,0,0,0,18,18,22,22,0,11,11,14,14,0,12,12,14,14,0,12,12,15,15,0,13,13,14,14,0,14,14,17,16,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,13,13,16,16,0,13,13,15,15,0,12,12,15,15,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,15,15,0,15,15,17,17,0,0,0,19,18,0,13,12,15,15,0,16,16,0,0,0,14,14,15,15,0,14,14,16,17,0,22,0,18,18,0,13,13,15,15,0,17,17,0,0,0,14,14,15,15,8,8,8,16,16,12,10,10,16,16,13,9,9,16,16,0,14,14,17,17,0,14,14,17,16,12,10,10,18,17,14,11,11,18,18,14,9,10,16,16,0,13,13,18,19,0,14,13,16,16,12,9,9,16,16,17,13,13,17,17,14,9,9,15,15,0,14,14,19,20,0,13,13,15,15,0,15,15,18,19,0,0,22,22,22,0,13,13,17,17,0,16,16,19,21,0,14,14,16,16,0,14,14,18,18,0,0,0,0,0,0,13,13,16,16,0,18,18,0,0,0,15,15,16,16,8,7,7,14,14,12,10,10,15,15,13,10,10,15,14,0,22,0,18,18,0,22,0,18,18,12,10,10,16,15,15,12,12,17,17,14,11,11,15,15,0,20,21,19,18,0,0,0,17,18,13,11,11,15,15,16,13,13,18,18,15,11,11,14,14,0,22,21,19,19,0,21,22,18,18,0,22,22,20,18,0,0,0,0,0,0,22,19,17,17,0,0,0,22,21,0,0,22,19,17,0,0,22,19,19,0,0,0,0,0,0,22,21,18,17,0,0,0,22,0,0,0,0,19,19,0,10,10,14,14,0,11,11,15,14,0,11,11,15,15,0,14,14,15,14,0,15,15,16,16,0,11,11,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,17,16,0,14,14,15,15,0,11,11,16,16,0,14,13,15,15,0,11,11,15,15,0,15,15,17,17,0,14,14,15,14,0,16,16,17,17,0,0,22,18,18,0,13,13,15,15,0,17,17,22,0,0,15,15,15,14,0,15,16,16,17,0,0,22,18,19,0,13,13,15,15,0,20,18,21,0,0,15,15,14,14,0,11,11,13,13,0,12,12,16,16,0,12,12,16,15,0,15,16,22,22,0,17,17,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,16,0,15,16,22,20,0,16,16,0,22,0,12,12,16,16,0,15,15,18,20,0,11,11,16,16,0,15,15,0,0,0,16,16,0,0,0,17,17,22,0,0,0,0,0,0,0,15,15,0,21,0,18,18,0,0,0,17,16,0,0,0,17,17,22,22,0,0,0,0,0,0,15,15,21,0,0,20,22,0,0,0,18,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,12,16,16,0,14,14,16,16,0,12,11,16,16,0,14,14,17,17,0,14,14,16,16,0,12,12,16,16,0,15,15,17,16,0,11,11,15,16,0,14,14,17,17,0,14,14,16,16,0,15,15,18,18,0,0,0,22,19,0,13,13,15,16,0,16,17,0,0,0,14,14,16,16,0,15,15,18,17,0,0,0,20,20,0,13,13,16,15,0,17,17,22,22,0,14,14,15,15,0,11,11,16,16,0,13,13,16,17,0,13,13,17,18,0,16,16,17,17,0,17,17,18,18,0,12,12,17,17,0,16,15,18,18,0,12,12,16,16,0,16,16,18,18,0,15,15,17,17,0,12,12,17,17,0,16,16,19,18,0,12,12,16,17,0,16,16,19,19,0,15,16,16,17,0,16,16,19,17,0,0,0,20,22,0,13,13,16,16,0,19,18,21,0,0,15,15,16,16,0,16,16,18,18,0,0,0,22,21,0,14,14,16,16,0,21,19,21,22,0,16,16,16,16,0,9,9,14,14,0,13,13,15,15,0,14,14,15,15,0,0,20,18,19,0,0,22,18,18,0,12,12,15,15,0,15,15,17,18,0,14,13,14,14,0,20,0,18,18,0,21,0,18,17,0,13,13,15,16,0,17,17,18,18,0,14,14,15,15,0,22,22,20,19,0,20,21,18,18,0,20,22,19,19,0,0,0,0,0,0,20,20,17,17,0,0,22,22,21,0,22,0,18,18,0,20,22,19,19,0,0,0,0,0,0,21,21,17,18,0,0,0,21,20,0,0,22,19,18,0,18,18,15,15,0,22,21,17,16,0,0,22,17,17,0,20,22,18,18,0,0,22,20,20,0,21,19,16,16,0,21,21,18,18,0,19,19,17,17,0,0,22,19,19,0,22,20,17,17,0,21,19,16,16,0,22,22,19,18,0,19,20,16,16,0,22,21,19,21,0,21,22,17,18,0,21,20,18,18,0,0,0,19,20,0,20,19,16,16,0,22,22,0,0,0,21,21,17,16,0,22,20,19,18,0,0,0,20,20,0,20,19,16,16,0,0,0,0,0,0,21,22,17,17,0,11,11,13,13,0,13,13,15,16,0,13,13,16,16,0,17,18,21,0,0,17,18,0,0,0,12,12,15,16,0,15,15,19,18,0,12,12,16,16,0,17,17,22,0,0,17,17,0,22,0,12,12,17,16,0,16,16,19,20,0,12,12,16,16,0,17,17,0,0,0,17,17,0,21,0,17,16,22,0,0,0,0,0,0,0,15,15,20,22,0,20,18,0,0,0,18,18,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,21,22,0,19,20,22,0,0,19,18,0,0,0,14,14,18,18,0,16,16,22,20,0,16,16,22,19,0,17,17,20,22,0,19,19,0,0,0,15,15,20,0,0,18,21,0,20,0,15,15,21,20,0,18,17,0,0,0,17,17,0,22,0,15,15,19,19,0,19,18,0,0,0,15,15,20,0,0,18,18,22,22,0,17,17,0,20,0,18,18,0,0,0,0,22,0,0,0,15,15,19,20,0,20,19,0,0,0,17,17,20,21,0,17,18,20,22,0,0,0,0,22,0,15,15,20,20,0,22,20,0,0,0,17,18,20,0,0,12,12,17,16,0,14,14,17,17,0,13,13,17,17,0,16,16,18,18,0,17,16,17,17,0,13,13,17,17,0,15,16,18,18,0,13,13,16,16,0,16,16,18,18,0,16,16,17,16,0,13,13,16,16,0,17,17,18,17,0,12,12,15,16,0,17,17,19,19,0,16,16,16,16,0,16,17,19,18,0,0,0,21,22,0,14,14,16,16,0,18,18,0,22,0,16,16,16,16,0,16,16,18,17,0,0,0,21,20,0,14,14,16,16,0,21,22,22,0,0,16,16,16,16,0,9,9,14,13,0,13,14,15,16,0,14,13,15,14,0,22,0,18,18,0,21,0,17,18,0,13,13,15,15,0,15,16,18,17,0,14,14,15,14,0,20,22,18,18,0,22,21,17,17,0,13,13,15,15,0,17,17,19,19,0,14,14,14,14,0,0,22,18,18,0,0,22,17,17,0,0,22,19,20,0,0,0,0,0,0,21,20,17,16,0,0,0,21,22,0,0,0,18,19,0,0,0,18,18,0,0,0,0,0,0,22,0,17,17,0,0,0,20,22,0,0,0,18,19,0,18,19,16,16,0,22,20,17,17,0,22,22,17,18,0,22,22,18,17,0,0,22,18,19,0,20,20,17,18,0,0,22,19,18,0,22,22,17,17,0,22,0,19,19,0,0,22,18,18,0,20,22,17,17,0,0,22,18,18,0,19,20,17,17,0,22,0,20,19,0,22,21,17,17,0,0,0,18,18,0,0,0,22,19,0,20,0,17,17,0,22,0,0,22,0,0,20,17,18,0,22,0,19,19,0,0,0,0,19,0,19,21,17,17,0,0,0,0,0,0,20,21,17,16,0,11,11,13,13,0,13,13,16,16,0,13,13,15,16,0,17,17,21,22,0,17,18,0,0,0,12,12,16,16,0,15,15,18,18,0,13,13,16,16,0,17,16,21,21,0,17,17,0,0,0,13,13,16,16,0,16,16,19,18,0,13,13,16,16,0,17,17,0,22,0,17,18,20,22,0,17,18,0,0,0,0,0,0,0,0,15,15,20,0,0,18,19,0,0,0,17,17,0,0,0,18,17,22,0,0,0,0,0,0,0,15,16,21,20,0,20,20,0,0,0,18,19,0,0,0,15,15,22,22,0,17,16,20,22,0,17,17,20,22,0,18,18,0,21,0,19,18,0,0,0,16,16,20,20,0,19,19,22,0,0,15,16,21,22,0,18,19,22,0,0,17,18,0,0,0,16,16,22,0,0,19,19,0,21,0,15,16,20,0,0,18,18,0,22,0,18,17,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,22,21,0,20,21,0,0,0,17,18,22,0,0,18,18,0,0,0,0,0,0,0,0,16,16,20,19,0,22,21,0,0,0,18,18,22,22,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,4,4,8,8,11,9,9,12,12,11,10,10,12,12,12,10,10,11,11,12,12,12,12,12,12,11,11,13,13,12,12,12,13,13,12,10,10,12,12,12,11,11,13,13,12,13,13,13,13,12,11,11,13,13,12,12,12,13,13,12,10,10,12,12,12,11,11,13,13,12,13,13,12,12,12,11,11,13,13,12,13,13,13,13,12,11,11,12,12,12,11,11,12,12,12,13,13,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,12,12,12,13,13,13,13,12,13,13,12,12,11,8,8,10,10,12,11,11,11,11,12,10,10,10,10,13,11,11,10,10,13,11,11,10,10,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,12,12,12,11,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,11,12,11,11,13,12,12,11,11,14,12,12,11,11,13,11,11,11,11,14,12,12,11,11,13,11,12,10,10,14,12,12,11,11,14,12,12,11,11,14,11,11,11,11,14,12,12,11,11,13,12,12,11,11,14,12,12,11,11,11,8,8,10,10,12,7,7,10,10,12,9,9,11,11,13,9,9,9,9,13,13,13,10,10,13,9,9,12,12,13,13,13,12,12,13,9,8,11,11,13,10,10,12,12,14,13,13,11,11,13,9,9,11,11,13,13,13,12,12,13,9,9,10,10,13,10,10,11,11,13,13,13,10,10,14,10,10,11,11,14,14,14,12,12,13,9,9,10,10,13,10,10,11,11,14,13,14,10,10,14,14,14,11,12,14,14,14,14,14,14,13,13,10,10,13,14,14,11,11,14,14,14,10,10,14,9,9,9,9,14,9,9,9,9,14,10,10,9,9,14,10,10,8,8,14,11,11,8,8,15,11,11,10,10,15,12,12,10,10,15,10,10,10,10,15,11,11,10,10,15,13,13,10,10,15,11,11,10,10,15,12,12,10,10,15,10,10,10,10,15,11,11,10,10,15,13,13,10,10,15,11,11,10,10,15,12,12,10,10,15,11,11,9,9,15,11,11,9,9,15,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,12,9,9,15,13,13,9,9,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,14,13,13,7,7,14,13,13,8,8,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,9,9,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,14,14,14,9,9,14,14,14,8,8,15,14,14,10,10,15,14,14,11,11,15,14,14,9,9,15,14,14,9,9,14,14,14,8,8,13,9,9,12,12,17,11,11,12,12,17,12,12,12,12,17,12,12,11,11,18,15,15,12,12,17,12,12,12,12,17,14,15,13,13,17,12,12,12,12,17,13,13,12,13,17,15,15,12,12,18,13,13,13,13,18,15,15,13,13,18,12,12,12,12,18,13,13,13,13,18,15,15,12,12,18,13,13,12,12,18,15,15,13,13,18,13,13,12,12,17,13,13,12,12,17,15,15,12,12,18,15,15,13,13,18,15,15,13,14,18,15,16,12,12,18,15,15,12,12,18,16,16,12,12,13,8,8,10,10,14,15,14,11,11,14,15,15,12,12,15,14,14,12,11,15,15,15,12,12,15,15,15,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,16,13,13,15,15,15,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,14,12,12,15,15,15,12,12,16,15,14,12,12,16,15,15,13,13,16,16,16,13,13,16,15,15,12,12,15,15,15,13,13,15,15,15,12,12,13,12,12,10,10,14,14,14,11,11,15,14,14,12,12,15,14,14,11,11,15,14,14,11,11,15,15,15,13,13,15,14,14,13,13,15,15,15,12,12,15,14,15,13,13,16,15,15,12,12,15,15,15,13,13,16,14,14,13,13,15,15,15,12,12,15,15,15,13,13,16,15,15,12,12,16,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,15,15,12,12,16,15,15,11,11,16,15,15,13,13,16,14,15,14,14,16,15,15,12,12,16,15,14,12,12,16,15,15,12,12,14,10,10,9,9,14,11,11,12,12,14,12,12,13,13,14,12,12,12,12,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,13,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,13,13,12,12,15,13,13,13,13,15,14,14,13,12,15,15,15,14,15,15,15,14,20,20,15,14,14,13,13,15,14,14,13,13,15,14,14,13,13,14,12,12,9,9,14,14,14,12,12,14,13,13,12,13,14,14,14,12,12,15,14,14,12,12,15,14,14,14,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,14,14,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,15,14,15,15,15,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,14,14,15,15,15,14,14,15,14,14,14,14,15,15,15,14,14,15,14,14,13,14,15,15,15,14,14,13,10,10,12,12,17,11,11,12,12,17,12,12,12,12,17,12,12,11,11,17,15,15,12,11,18,13,13,13,13,18,15,15,13,13,17,12,12,12,12,18,13,13,13,13,17,15,15,12,12,17,12,12,12,12,17,15,15,13,13,17,12,12,12,12,17,13,13,12,12,17,15,15,12,12,18,14,13,12,12,18,15,15,13,13,18,13,13,12,12,18,13,13,12,12,18,16,16,12,12,18,16,16,12,12,18,15,15,13,13,18,16,16,12,12,17,15,15,12,12,17,16,16,12,12,13,8,8,10,10,14,14,15,12,12,14,15,15,12,12,15,14,14,12,12,15,15,14,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,12,12,16,15,15,13,13,16,15,15,13,13,15,15,15,12,12,15,15,15,14,14,15,15,15,12,12,15,15,15,13,13,16,15,15,13,13,15,15,15,13,13,16,15,15,13,13,15,15,14,12,12,15,15,15,12,12,16,14,15,13,13,16,15,15,13,13,15,16,15,13,13,16,15,14,13,13,16,15,15,13,13,16,15,15,13,13,13,12,12,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,16,14,14,11,11,15,15,15,12,13,16,14,14,13,13,15,15,15,12,12,15,14,14,13,13,16,15,15,12,12,15,15,15,12,12,15,14,14,13,13,15,15,15,12,12,15,14,14,12,12,16,15,15,12,12,16,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,15,14,12,12,16,15,15,11,11,16,15,15,12,12,16,14,14,13,13,16,15,15,11,11,16,14,14,12,12,16,15,15,11,11,14,10,10,9,9,14,11,11,12,12,14,12,12,13,14,14,12,12,12,12,14,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,15,15,14,14,15,13,13,14,14,15,15,15,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,13,13,14,14,14,13,13,15,15,15,14,15,15,15,15,21,19,15,14,14,13,13,15,14,14,14,14,14,14,14,13,13,14,12,12,9,9,14,14,14,12,12,14,14,13,13,13,14,14,14,12,12,14,14,14,12,12,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,15,15,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,15,15,15,14,15,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,14,14,15,15,15,14,14,15,14,14,14,14,15,15,15,15,15,15,14,14,14,13,14,15,15,14,14,13,10,10,12,12,18,12,12,12,12,17,12,12,12,12,18,13,13,11,11,18,15,14,11,11,17,13,13,13,13,18,15,15,12,12,18,12,12,12,12,17,13,13,12,12,18,15,15,12,12,18,13,13,13,12,18,15,15,13,13,18,13,13,12,12,18,13,13,12,12,18,15,15,12,12,17,13,13,12,12,17,15,15,12,12,17,12,12,11,11,17,13,13,11,11,17,15,15,11,11,18,16,16,12,12,18,15,15,13,13,18,15,15,11,11,17,15,15,12,12,18,15,15,11,11,13,8,8,10,10,14,14,14,11,11,15,15,15,12,12,15,14,14,11,11,16,14,14,12,12,15,15,15,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,12,12,16,15,15,13,13,15,15,15,12,12,15,15,15,13,13,16,15,15,12,12,15,15,15,12,12,16,15,15,13,13,16,15,15,12,12,15,15,15,13,13,15,14,14,12,12,15,15,15,12,12,16,15,14,12,12,16,15,15,13,13,16,16,16,13,13,16,14,15,13,13,15,15,15,13,13,16,15,15,12,12,13,12,12,10,10,14,14,14,11,11,15,14,14,12,12,15,14,14,11,11,16,14,14,11,11,15,14,15,12,12,15,14,14,13,13,15,15,15,12,12,15,14,14,12,12,15,14,15,12,12,15,15,15,12,12,16,14,14,13,13,15,15,15,11,12,16,14,14,12,12,16,15,15,12,12,15,15,15,12,12,16,14,14,12,12,15,15,15,11,11,15,14,14,11,12,15,15,14,11,11,16,15,15,12,12,16,14,14,13,13,16,15,15,11,11,16,14,14,12,12,16,15,15,11,11,13,10,10,8,8,14,12,12,12,12,14,12,12,13,13,14,12,12,12,12,14,14,14,13,13,15,13,13,14,14,15,15,14,15,15,15,13,13,13,13,15,13,13,14,14,15,14,15,14,14,15,13,13,13,13,15,15,15,15,15,15,12,12,13,12,15,13,13,14,14,15,14,14,13,13,15,13,13,14,13,15,15,15,16,16,15,13,13,12,12,15,13,13,13,13,14,14,14,12,12,15,15,15,14,14,15,15,15,20,20,15,14,14,13,13,15,15,14,14,14,15,14,14,13,13,13,12,12,9,9,14,13,13,12,12,14,13,13,12,12,14,14,14,12,12,14,14,14,13,13,15,14,14,13,13,15,14,14,14,14,15,15,14,12,12,15,14,14,13,13,15,14,15,14,15,15,14,14,13,13,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,14,15,14,15,14,15,14,14,13,13,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,15,15,14,14,15,15,15,14,14,16,14,14,14,14,15,15,15,14,14,15,14,14,14,14,14,15,15,14,14,13,13,13,12,13,17,15,15,12,12,17,15,15,12,12,18,15,15,11,11,17,16,16,11,11,18,16,16,13,13,18,17,16,13,13,18,16,16,12,12,18,16,16,12,12,18,17,17,12,12,17,16,16,12,13,17,16,16,12,13,17,16,16,12,12,17,16,16,12,12,18,17,16,12,12,18,16,16,12,12,17,16,17,12,12,18,15,15,11,11,18,15,15,12,12,17,17,17,11,11,17,17,17,12,12,17,16,16,13,13,18,16,16,11,11,18,16,16,12,12,18,17,16,11,11,14,14,14,10,10,16,15,14,11,11,16,15,15,12,12,16,14,14,12,12,17,14,14,13,13,17,15,15,13,13,17,15,15,14,14,16,15,15,12,12,16,15,15,13,13,18,15,15,14,14,16,15,15,12,12,16,15,15,14,14,16,15,15,12,12,16,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,15,15,14,14,16,14,14,12,12,17,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,14,13,13,17,15,15,14,14,17,15,15,13,13,14,12,12,11,11,15,14,14,12,12,16,14,14,12,12,16,14,14,11,11,17,14,14,12,12,16,15,14,13,13,16,14,14,13,13,16,15,15,12,12,16,14,14,13,13,17,15,15,13,13,16,15,15,13,13,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,15,15,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,14,14,8,8,14,14,14,13,13,14,15,15,14,14,14,14,14,14,14,15,15,15,19,19,15,15,15,14,14,15,15,16,20,19,15,15,15,14,14,15,16,16,15,15,15,15,15,19,19,15,15,15,14,14,15,16,16,19,20,15,15,15,14,14,15,15,15,15,15,15,15,15,19,19,15,15,15,15,15,15,15,16,19,20,15,14,15,14,14,15,15,15,15,15,15,15,15,20,19,15,15,15,21,19,15,16,16,20,20,15,15,14,19,19,15,15,16,20,21,15,15,15,20,19,13,12,12,9,9,14,14,14,12,12,14,13,13,13,13,14,14,14,13,13,15,14,14,20,19,15,14,14,14,13,15,14,14,19,19,15,15,14,13,13,15,14,14,14,14,15,15,15,19,20,15,14,14,13,13,15,14,14,20,19,14,15,14,13,13,15,14,14,14,13,15,15,15,19,20,15,15,14,14,14,15,14,14,21,19,15,15,15,13,13,15,14,14,14,14,14,15,15,20,20,15,15,15,21,20,15,14,14,19,20,15,15,15,20,20,15,14,14,19,20,15,15,15,21,19,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,9,11,11,9,11,11,10,11,11,12,13,13,11,12,12,10,11,11,13,14,14,12,12,12,6,6,6,8,6,6,8,7,7,9,7,7,11,10,10,10,6,6,9,7,7,12,10,10,11,6,7,7,7,7,11,10,10,12,10,10,11,10,10,14,13,13,13,10,10,12,11,11,15,13,13,14,10,10,8,7,7,12,11,11,12,11,11,11,11,11,14,14,14,13,12,12,12,11,11,15,15,15,13,12,12,0,10,10,0,11,11,0,11,11,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,12,10,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,16,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,12,12,0,14,14,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,0,8,8,0,8,8,0,9,9,0,9,9,0,9,9,0,9,9,0,9,9,0,8,8,0,6,6,0,7,7,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,6,6,0,6,6,0,6,6,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,6,6,0,8,8,0,9,9,0,9,9,0,10,10,0,10,10,0,10,10,0,10,10,0,11,11,0,9,9,0,7,7,0,10,10,0,10,10,0,12,11,0,12,12,0,11,11,0,11,11,0,12,12,0,10,10,0,7,7,0,10,10,0,10,10,0,12,12,0,11,12,0,11,11,0,11,11,0,11,11,0,10,10,0,8,8,0,9,9,0,9,9,0,10,10,0,10,10,0,10,9,0,10,10,0,10,10,0,9,9,0,6,6,0,10,10,0,10,10,0,11,11,0,12,12,0,11,11,0,11,11,0,12,12,0,11,11,0,7,7,0,9,9,0,9,9,0,11,11,0,11,11,0,10,10,0,10,10,0,11,11,0,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,6,7,7,0,8,8,6,9,9,8,11,11,0,8,8,0,9,9,0,12,12,0,8,8,5,7,7,7,10,10,0,12,12,8,11,11,9,12,12,0,11,12,0,12,12,0,15,15,0,12,12,0,6,6,0,6,6,0,7,7,0,7,7,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,6,7,7,10,9,9,0,11,10,10,9,9,12,12,12,0,10,10,0,11,11,0,13,13,0,11,11,7,6,6,10,10,10,0,11,11,11,11,11,12,12,12,0,11,11,0,12,12,0,15,15,0,11,11,0,11,11,0,11,11,0,12,12,0,12,12,0,14,14,0,12,12,0,12,12,0,15,15,0,11,11,0,8,8,0,10,10,0,11,11,0,11,11,0,12,12,0,12,12,0,11,11,0,15,15,0,11,11,0,6,6,0,10,10,0,12,12,0,10,10,0,13,13,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,0,0,0,8,8,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,6,6,0,0,0,7,7,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,11,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,13,13,0,0,0,0,0,0,0,0,14,13,0,0,0,0,0,0,0,0,13,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,14,14,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,12,13,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,14,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,14,14,0,0,0,0,0,0,0,0,14,14,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,2,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+508012);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,4,12,9,8,12,15,17,4,2,11,6,5,9,13,15,11,7,8,7,7,10,14,13,8,5,7,5,5,8,12,12,8,4,7,4,3,6,11,12,11,8,9,7,6,8,11,12,15,13,14,12,9,7,10,13,16,12,17,12,7,5,8,11,0,0,0,0,255,255,255,255,255,255,255,255,7,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+518280);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,216,26,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,249,7,0,0,0,0,0,0,0,0,0,112,249,7,0,152,249,7,0,0,0,0,0,0,0,0,0,192,249,7,0,232,249,7,0,0,0,0,0,0,0,0,0,16,250,7,0,56,250,7,0,0,0,0,0,0,0,0,0,96,250,7,0,136,250,7,0,56,250,7,0,0,0,0,0,176,250,7,0,104,246,7,0,144,246,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,16,249,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,8,249,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,245,7,0,24,246,7,0,0,0,0,0,0,0,0,0,64,246,7,0,104,246,7,0,144,246,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,32,248,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,208,248,7,0,0,0,0,0,2,0,0,0,25,0,0,0,232,247,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,8,248,7,0,0,0,0,0,2,0,0,0,9,0,0,0,200,247,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,216,247,7,0,0,0,0,0,1,0,0,0,25,0,0,0,64,247,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,96,247,7,0,0,0,0,0,1,0,0,0,25,0,0,0,184,246,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,216,246,7,0,0,0,0,0,3,4,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,13,14,16,16,16,16,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,6,6,5,5,5,6,6,5,6,5,6,6,6,6,7,7,7,6,7,6,7,7,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,4,4,7,7,8,8,9,9,10,10,11,11,4,6,5,8,6,9,8,10,9,10,10,11,10,5,5,6,6,8,8,9,9,10,10,10,10,11,7,8,8,9,8,10,9,10,9,11,10,11,10,7,8,8,8,10,9,10,10,10,10,11,10,11,9,10,10,11,11,11,11,12,11,12,11,12,11,9,10,10,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,12,12,12,12,12,12,12,11,11,12,11,12,12,12,12,12,12,12,12,11,12,12,12,12,12,13,12,13,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,12,12,12,12,13,13,12,13,12,13,12,13,12,12,12,12,13,13,13,13,13,13,12,12,12,12,12,11,12,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,3,3,7,7,9,13,16,3,2,4,6,10,13,17,7,4,4,6,9,12,14,7,6,6,5,7,9,12,10,10,9,6,6,9,12,14,14,13,9,8,10,11,18,18,15,13,11,10,11,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,208,25,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,200,26,8,0,0,0,0,0,5,0,0,0,243,0,0,0,200,24,8,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,192,25,8,0,0,0,0,0,5,0,0,0,243,0,0,0,192,23,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,24,8,0,0,0,0,0,5,0,0,0,243,0,0,0,184,22,8,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,176,23,8,0,0,0,0,0,5,0,0,0,53,12,0,0,104,10,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,160,22,8,0,0,0,0,0,5,0,0,0,53,12,0,0,24,254,7,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,80,10,8,0,0,0,0,0,1,0,0,0,7,0,0,0,240,253,7,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,248,253,7,0,0,0,0,0,5,0,0,0,243,0,0,0,232,252,7,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,224,253,7,0,0,0,0,0,5,0,0,0,243,0,0,0,224,251,7,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,216,252,7,0,0,0,0,0,5,0,0,0,243,0,0,0,216,250,7,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,208,251,7,0,0,0,0,0,1,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,7,7,7,7,7,7,7,7,7,8,8,9,8,8,8,7,7,8,8,8,9,8,8,9,7,7,6,6,6,9,8,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,8,10,8,8,7,6,6,9,6,6,9,7,7,9,7,7,10,8,8,9,6,6,9,7,7,10,8,8,9,7,7,7,8,8,11,9,9,11,9,9,11,8,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,10,9,10,9,9,11,10,10,11,9,9,11,9,9,11,10,11,11,9,9,10,8,8,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,9,8,8,11,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,9,7,7,11,9,9,11,10,10,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,10,10,11,9,9,11,9,10,11,10,10,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,6,6,7,8,8,7,8,8,7,9,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,13,13,12,11,11,10,10,10,14,14,13,12,11,11,6,6,6,8,5,5,8,7,7,9,7,7,11,10,10,9,7,7,9,7,7,12,10,10,10,7,7,7,8,8,12,11,10,12,10,10,11,10,10,15,13,13,13,10,10,11,10,10,17,14,13,13,10,10,7,7,7,12,11,12,12,11,11,12,11,11,16,14,14,13,12,12,12,11,11,17,15,14,14,12,12,10,9,9,13,11,11,13,11,11,13,11,11,17,14,13,14,11,11,12,11,11,16,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,15,13,13,14,11,10,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,17,14,14,14,12,12,12,11,11,16,15,15,14,12,12,10,10,10,13,11,11,13,11,11,13,11,12,16,14,14,14,11,11,13,12,11,16,15,15,14,11,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,6,6,14,14,6,7,7,14,14,7,7,7,14,14,0,13,13,16,16,0,13,13,15,14,7,8,8,15,15,9,10,10,16,16,9,8,8,15,15,0,13,13,17,16,0,13,13,15,16,8,8,8,15,15,12,11,11,16,16,9,8,8,14,14,0,13,13,17,18,0,13,13,15,15,0,14,14,16,16,0,0,0,19,18,0,12,12,16,15,0,15,16,0,20,0,14,14,16,16,0,14,14,17,17,0,0,0,19,18,0,12,12,15,15,0,17,17,0,20,0,14,14,16,16,5,6,7,12,12,9,9,9,14,14,10,10,10,14,14,0,21,21,18,17,0,20,20,18,17,9,10,10,14,14,12,12,12,16,16,12,10,10,14,14,0,20,19,18,17,0,0,20,17,18,11,10,10,14,14,14,13,13,18,18,13,11,11,14,14,0,20,20,17,18,0,21,21,17,17,0,21,0,18,18,0,0,0,0,0,0,20,19,16,17,0,0,0,19,19,0,0,0,18,18,0,21,21,18,18,0,0,0,0,0,0,20,20,16,17,0,0,0,21,21,0,0,0,18,19,6,6,6,13,12,8,6,6,11,11,8,6,6,13,13,0,9,9,11,11,0,11,10,14,14,9,7,7,13,13,11,9,9,13,13,10,6,6,13,13,0,10,10,14,15,0,10,10,13,13,9,7,7,13,13,13,10,9,13,13,10,6,6,13,13,0,10,10,15,14,0,10,10,13,13,0,11,11,15,15,0,19,20,17,17,0,9,9,13,13,0,13,13,20,20,0,11,11,13,13,0,11,11,15,15,0,19,19,17,17,0,10,10,13,13,0,15,15,20,20,0,12,12,13,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,20,0,0,16,16,0,21,0,11,11,15,15,0,14,14,18,17,0,11,11,15,15,0,15,16,19,20,0,16,16,21,21,0,12,12,15,15,0,15,14,18,18,0,11,11,16,16,0,15,15,21,21,0,16,15,0,0,0,16,16,21,0,0,0,0,0,0,0,14,14,20,20,0,18,18,0,0,0,16,17,21,0,0,16,16,21,21,0,0,0,0,0,0,15,15,21,21,0,20,19,0,21,0,17,17,0,0,0,10,10,12,11,0,10,10,10,11,0,11,11,12,12,0,11,11,9,9,0,13,13,11,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,12,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,14,14,0,12,12,12,12,0,14,14,14,13,0,19,20,15,15,0,12,11,12,12,0,15,15,21,20,0,13,13,11,11,0,13,13,13,13,0,19,0,15,15,0,12,12,12,12,0,17,16,19,0,0,13,13,12,12,7,7,7,16,16,11,9,9,15,15,12,9,9,16,16,0,13,13,15,14,0,14,14,17,16,10,9,9,16,16,14,11,11,17,16,12,9,8,15,15,0,13,13,18,18,0,13,13,15,15,12,10,10,18,17,15,12,12,17,17,14,9,9,16,16,0,13,13,18,19,0,14,13,17,16,0,14,14,18,18,0,0,0,20,21,0,12,12,16,16,0,16,16,20,21,0,14,14,17,16,0,14,14,18,19,0,0,0,19,21,0,13,13,17,17,0,17,17,0,21,0,15,15,16,16,8,7,7,14,14,11,10,10,15,15,12,10,10,15,15,0,20,20,18,18,0,0,0,17,17,11,10,10,16,16,14,12,12,18,17,14,11,11,15,15,0,20,21,18,18,0,0,19,18,17,12,10,10,16,16,17,14,14,19,19,14,11,11,15,15,0,21,21,19,19,0,21,20,19,18,0,21,0,18,19,0,0,0,0,0,0,20,20,18,17,0,21,0,0,0,0,0,0,19,18,0,0,0,18,19,0,0,0,0,0,0,0,21,17,18,0,0,0,0,21,0,0,21,18,19,11,9,9,14,14,13,10,10,13,13,13,11,11,15,15,0,13,13,12,12,0,15,15,16,16,13,10,10,15,15,16,12,12,15,15,15,10,10,15,15,0,14,13,16,15,0,14,13,15,15,13,10,10,15,15,18,14,14,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,16,15,0,15,15,17,16,0,21,0,18,18,0,12,13,15,15,0,16,16,0,0,0,14,14,15,15,0,15,15,16,16,0,21,20,18,18,0,13,13,15,15,0,19,18,0,0,0,15,15,15,15,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,16,20,0,0,16,17,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,17,0,15,15,20,0,0,16,16,0,0,0,12,12,16,16,0,15,15,19,19,0,11,11,17,17,0,16,16,21,0,0,16,16,0,0,0,17,17,20,20,0,0,0,0,0,0,15,15,20,0,0,17,18,0,0,0,17,17,0,0,0,16,16,0,21,0,0,0,0,0,0,15,15,21,0,0,19,18,0,0,0,18,17,0,0,0,11,11,14,14,0,11,11,15,15,0,12,12,16,16,0,13,13,14,14,0,14,14,17,17,0,12,12,16,16,0,14,14,16,16,0,11,11,16,15,0,13,13,16,17,0,13,13,16,16,0,12,12,15,16,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,16,16,0,15,14,18,18,0,21,0,19,19,0,13,13,15,15,0,16,16,20,20,0,14,14,16,15,0,14,14,17,17,0,21,0,20,18,0,13,13,15,15,0,17,17,0,0,0,14,14,16,15,8,8,8,16,16,12,9,9,16,16,13,9,9,16,16,0,14,14,18,17,0,14,14,16,17,12,10,10,18,17,14,11,11,18,18,14,9,9,16,16,0,13,13,18,18,0,13,13,17,16,12,9,9,16,17,17,13,13,16,16,14,9,9,15,15,0,14,14,20,20,0,13,13,15,15,0,15,14,18,18,0,0,0,20,21,0,12,13,16,17,0,16,16,20,21,0,14,14,16,17,0,14,14,18,17,0,0,0,20,21,0,13,13,16,16,0,19,17,0,21,0,14,15,16,16,8,7,7,14,13,12,10,10,15,15,13,10,10,15,15,0,21,21,18,19,0,20,21,18,18,12,10,10,16,15,15,12,12,17,17,14,11,11,15,15,0,21,21,19,18,0,0,21,17,18,13,11,11,15,15,16,13,13,18,19,15,11,11,15,14,0,21,0,19,19,0,0,21,18,18,0,0,21,19,19,0,0,0,0,0,0,20,19,17,17,0,0,0,21,0,0,21,0,18,19,0,0,20,20,19,0,0,0,0,0,0,21,20,18,17,0,0,0,0,20,0,0,0,18,19,0,10,10,15,14,0,11,11,14,14,0,11,11,15,16,0,14,14,15,15,0,15,15,16,16,0,11,11,16,16,0,14,13,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,11,11,15,15,0,13,13,15,15,0,11,11,15,15,0,15,15,18,17,0,14,14,15,15,0,15,16,18,18,0,0,0,20,20,0,14,13,16,15,0,17,17,21,0,0,15,15,15,15,0,16,15,17,17,0,0,0,19,19,0,13,13,15,15,0,20,19,0,0,0,15,15,15,15,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,15,21,21,0,17,16,0,0,0,12,12,16,16,0,14,14,17,17,0,11,11,16,16,0,15,15,0,0,0,16,16,21,0,0,12,12,17,16,0,14,15,20,20,0,11,11,16,16,0,15,15,0,20,0,16,16,0,21,0,16,17,21,0,0,0,0,0,0,0,15,15,0,21,0,18,18,0,0,0,17,16,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,0,20,0,19,20,21,0,0,17,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,12,17,16,0,14,14,17,16,0,11,11,16,16,0,14,14,17,17,0,14,14,17,17,0,12,12,16,16,0,15,15,17,17,0,11,11,16,16,0,14,14,17,17,0,14,14,16,16,0,15,15,18,17,0,0,0,19,0,0,13,13,16,16,0,16,16,0,21,0,14,14,16,16,0,15,15,18,17,0,0,0,19,19,0,13,13,16,16,0,18,17,0,21,0,14,15,16,16,0,11,11,16,16,0,13,13,17,17,0,13,13,17,17,0,16,16,16,17,0,16,16,18,18,0,12,12,17,17,0,16,15,18,17,0,12,12,16,16,0,16,15,19,19,0,16,15,17,17,0,12,12,17,18,0,16,16,18,18,0,12,12,16,16,0,16,16,19,19,0,15,16,17,17,0,15,16,18,18,0,0,0,20,20,0,13,13,16,16,0,18,18,21,20,0,15,15,16,16,0,16,16,19,18,0,0,0,19,20,0,14,14,17,17,0,19,19,0,21,0,15,16,16,16,0,9,9,14,14,0,13,13,15,15,0,14,14,15,15,0,0,21,19,19,0,0,21,18,18,0,12,12,15,15,0,15,15,18,18,0,14,13,15,15,0,21,21,18,19,0,21,20,18,18,0,13,13,16,16,0,17,17,18,19,0,14,14,15,15,0,0,21,19,19,0,21,20,18,19,0,20,20,19,19,0,0,0,0,0,0,19,20,17,17,0,0,0,21,21,0,21,0,18,20,0,21,0,18,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,0,19,19,0,18,18,15,15,0,18,20,17,16,0,20,0,17,17,0,21,0,17,17,0,21,20,19,20,0,19,19,16,16,0,21,21,17,18,0,19,19,17,17,0,20,21,21,21,0,20,20,18,18,0,19,19,16,16,0,0,21,18,19,0,18,19,16,17,0,21,21,19,20,0,21,19,18,18,0,21,20,19,21,0,0,0,20,21,0,19,19,17,16,0,0,0,0,0,0,21,20,17,17,0,20,21,19,18,0,0,0,0,21,0,19,18,16,17,0,0,0,0,0,0,20,20,17,17,0,11,11,14,14,0,13,13,16,16,0,13,13,16,16,0,17,17,21,0,0,17,18,0,0,0,12,12,16,16,0,15,15,17,18,0,12,12,16,16,0,16,16,0,20,0,17,17,0,21,0,12,12,17,17,0,16,16,19,20,0,12,12,17,17,0,17,17,0,20,0,17,17,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,0,20,0,19,19,0,0,0,18,18,0,0,0,17,17,0,0,0,0,0,0,0,0,15,15,0,0,0,20,19,0,0,0,19,18,0,0,0,14,14,21,19,0,16,16,20,21,0,16,16,20,20,0,17,17,20,0,0,17,17,20,20,0,15,15,20,20,0,19,18,20,0,0,15,15,20,20,0,17,18,21,20,0,17,17,20,21,0,15,15,19,19,0,19,18,21,21,0,15,15,19,20,0,17,18,0,0,0,17,17,20,20,0,17,18,20,21,0,0,0,0,0,0,15,15,20,20,0,19,19,0,0,0,17,17,19,21,0,17,17,0,21,0,0,0,0,21,0,15,15,20,19,0,0,20,0,0,0,17,17,21,20,0,12,12,16,16,0,14,14,17,17,0,13,13,17,17,0,16,16,17,18,0,17,16,18,18,0,13,13,18,17,0,15,16,19,18,0,13,13,16,16,0,16,16,19,19,0,16,16,17,17,0,13,12,17,17,0,16,16,18,17,0,12,12,16,16,0,17,17,19,18,0,16,15,16,16,0,16,17,18,19,0,0,0,20,20,0,14,14,17,16,0,18,18,21,0,0,16,16,16,16,0,16,16,18,17,0,0,21,21,21,0,14,14,16,16,0,21,20,21,0,0,16,16,16,16,0,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,0,21,18,18,0,0,21,18,19,0,13,13,16,16,0,16,16,18,17,0,14,14,15,15,0,20,0,18,18,0,21,0,18,17,0,13,13,16,15,0,17,17,19,19,0,14,14,15,15,0,20,20,18,19,0,0,0,18,17,0,0,21,18,18,0,0,0,0,0,0,20,21,18,17,0,0,0,0,0,0,0,0,19,19,0,0,21,18,18,0,0,0,0,0,0,21,0,18,17,0,0,0,0,21,0,0,0,19,20,0,19,19,16,16,0,0,21,18,17,0,21,0,18,18,0,20,0,19,18,0,21,20,19,19,0,21,19,17,18,0,0,21,19,19,0,21,19,18,18,0,21,0,20,18,0,0,21,18,18,0,20,21,17,17,0,21,0,18,18,0,21,19,17,17,0,21,0,0,20,0,0,20,17,18,0,0,0,19,20,0,0,0,20,19,0,19,21,17,18,0,21,0,0,0,0,21,21,18,17,0,0,21,18,18,0,0,0,0,21,0,20,19,16,17,0,0,0,0,0,0,21,20,17,17,0,11,11,13,13,0,13,13,16,16,0,13,13,16,16,0,17,17,0,21,0,18,19,21,0,0,12,12,16,16,0,15,15,19,18,0,13,13,16,16,0,16,17,21,19,0,17,17,21,21,0,13,13,16,16,0,16,16,20,18,0,13,13,16,16,0,17,17,0,0,0,18,18,0,0,0,18,17,0,20,0,0,0,0,0,0,15,15,21,21,0,19,18,0,0,0,17,17,21,21,0,17,17,0,0,0,0,0,0,0,0,15,15,20,21,0,20,20,0,0,0,19,19,0,0,0,14,15,21,19,0,16,16,0,21,0,17,16,21,21,0,17,18,21,20,0,18,18,0,21,0,16,16,0,20,0,19,19,0,0,0,16,15,0,20,0,18,18,0,0,0,17,17,0,21,0,16,16,20,20,0,20,19,0,0,0,15,16,21,22,0,18,18,0,0,0,18,17,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,21,20,0,19,20,0,0,0,18,17,21,0,0,17,18,0,0,0,0,0,0,0,0,16,16,0,20,0,0,20,0,0,0,18,18,22,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,3,4,7,7,10,12,12,12,12,10,11,11,13,13,11,12,12,11,11,12,12,12,12,12,11,13,13,13,13,12,12,12,13,14,12,13,13,13,13,12,13,13,13,13,12,13,13,13,13,11,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,13,13,13,13,12,13,13,12,12,12,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,13,13,13,13,12,13,13,12,12,10,10,11,10,10,11,11,11,11,11,11,9,9,10,10,12,11,11,10,10,12,10,10,10,10,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,11,11,11,10,10,11,11,11,9,9,11,12,12,11,11,12,12,12,9,9,13,13,13,10,10,13,13,13,11,11,13,13,13,14,14,13,13,13,11,10,13,13,14,12,12,13,13,13,11,11,13,13,13,11,11,13,13,13,14,14,13,13,13,10,10,13,13,13,11,11,13,13,13,10,10,13,14,13,11,11,13,14,14,14,14,13,13,13,10,10,13,14,14,11,11,13,13,13,10,10,13,14,14,11,11,13,13,13,14,14,14,13,13,10,10,13,14,14,11,11,13,13,13,10,10,14,12,12,9,9,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,11,11,7,7,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,12,12,9,9,14,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,12,12,9,9,15,13,13,9,9,13,12,12,9,9,13,13,13,8,8,13,13,13,9,9,13,13,13,7,7,14,13,13,8,8,14,14,14,10,10,15,14,14,11,11,14,14,14,9,9,15,14,14,10,10,15,14,14,9,9,14,14,14,10,10,15,14,14,11,11,15,14,14,9,9,14,14,14,10,10,14,14,14,9,9,15,14,15,10,10,15,14,14,11,11,14,14,14,9,9,14,14,14,9,9,14,14,14,8,8,15,14,14,10,10,15,14,14,11,11,14,14,14,9,9,15,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,16,16,11,11,17,16,16,12,12,17,16,16,11,11,17,16,16,11,11,17,17,16,13,13,17,16,16,13,13,18,17,16,12,12,17,16,16,13,13,17,16,17,12,12,18,17,17,13,13,17,16,16,14,14,18,17,17,12,12,18,16,16,13,13,17,17,17,13,12,17,17,17,13,13,17,16,16,13,13,18,17,17,12,12,17,16,16,13,12,17,17,17,12,12,18,17,17,13,13,18,16,16,14,14,18,17,17,12,12,17,17,17,13,13,18,17,18,12,12,13,14,14,10,10,16,14,14,13,13,17,15,15,14,14,17,14,14,12,13,16,14,14,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,14,14,17,16,16,14,15,17,15,15,14,14,17,15,16,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,14,17,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,13,12,16,14,14,13,13,16,15,14,12,12,16,14,14,12,12,16,15,15,14,14,16,14,14,14,14,17,15,15,13,13,16,15,15,14,14,17,15,15,13,14,17,15,15,14,14,17,15,14,14,14,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,15,15,14,14,17,15,15,14,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,14,14,15,8,8,14,14,14,19,19,14,15,15,18,19,14,14,14,19,18,14,14,14,19,19,15,15,15,19,18,15,16,16,19,19,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,15,15,19,19,16,16,16,20,19,15,15,15,19,18,15,16,16,20,19,15,15,15,18,18,15,15,15,19,20,15,16,16,19,19,15,15,15,20,19,15,15,15,20,19,15,15,15,19,18,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,15,19,20,15,15,15,19,19,14,12,12,9,9,14,14,14,19,19,14,14,14,19,19,14,14,15,20,19,15,14,14,18,19,15,15,15,19,19,15,15,14,20,19,15,15,15,20,19,15,15,14,20,19,15,15,15,20,19,15,15,15,19,20,15,14,14,19,20,15,15,15,20,20,15,14,14,20,19,15,15,15,19,19,15,15,15,19,19,15,14,14,19,19,15,15,15,19,20,15,15,15,20,20,15,15,15,19,19,15,15,15,20,19,16,14,14,19,19,15,15,15,20,19,15,14,15,20,19,14,15,15,20,19,12,12,12,13,13,16,16,16,11,11,16,16,16,12,12,17,16,16,11,11,17,15,16,11,11,17,17,17,13,13,18,16,17,13,13,18,17,17,13,12,17,16,17,13,13,17,17,17,13,13,16,16,16,12,12,17,16,16,13,13,17,16,16,12,12,17,16,16,12,13,17,17,17,12,12,17,17,17,13,13,18,16,16,13,13,18,17,17,12,12,18,17,17,12,12,17,17,17,12,12,17,17,17,12,12,17,16,16,13,13,17,17,17,12,12,17,16,16,12,12,17,17,17,12,12,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,15,15,15,15,16,16,16,15,15,17,15,15,14,14,17,15,15,15,15,17,15,15,14,14,17,15,15,14,14,16,16,16,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,16,16,16,15,15,18,15,15,14,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,14,13,17,15,15,14,14,17,15,15,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,13,13,16,15,14,12,12,17,14,14,12,12,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,15,14,13,17,15,15,13,13,16,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,12,12,17,15,15,13,13,17,15,15,12,12,16,15,15,13,13,17,14,14,13,14,17,15,15,12,12,17,14,14,13,13,17,15,15,12,12,14,14,14,8,8,14,14,14,18,18,14,15,15,19,19,14,14,14,19,19,14,15,14,18,19,15,15,15,18,19,15,16,16,20,20,15,15,15,19,20,15,16,16,19,20,15,15,15,19,20,15,15,16,19,19,15,16,16,20,20,15,15,15,20,19,15,16,16,20,19,15,15,15,19,20,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,16,15,20,19,15,15,15,19,19,15,15,15,19,20,15,16,16,20,20,15,15,15,19,19,15,15,15,20,20,15,15,15,19,19,14,12,12,9,9,14,14,14,18,18,14,14,14,19,20,14,14,14,18,18,14,14,14,18,19,15,15,15,19,20,15,14,14,19,19,15,15,15,19,19,15,14,15,19,19,15,15,15,18,20,15,15,15,19,19,15,14,14,19,19,15,15,15,20,19,15,15,14,20,20,15,15,15,19,19,15,15,15,19,19,15,14,14,19,19,15,15,15,19,19,15,14,14,19,20,14,15,15,19,19,15,15,15,19,19,15,14,14,20,19,15,15,15,19,19,15,14,14,20,19,15,15,15,19,19,13,12,12,13,13,17,17,16,11,11,16,16,16,12,12,17,17,16,11,11,17,16,16,11,11,17,17,17,13,13,17,16,16,13,13,18,17,17,12,12,17,16,16,13,13,18,17,17,12,12,18,17,17,13,13,18,16,17,13,13,17,17,17,12,12,18,17,17,13,13,18,17,17,12,12,17,16,17,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,17,17,11,11,17,17,17,12,12,18,16,16,13,13,18,17,17,12,11,17,16,16,12,12,18,17,17,11,11,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,12,12,16,14,14,13,13,17,15,15,14,14,17,16,16,15,16,18,15,15,14,14,17,15,15,14,14,17,15,15,14,14,18,15,15,14,14,16,16,16,15,16,18,15,15,14,14,17,16,15,14,14,18,15,15,14,14,17,15,15,14,14,17,16,16,15,15,18,14,15,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,17,16,15,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,12,12,16,14,14,12,12,17,14,15,11,11,17,14,14,11,11,17,15,15,13,13,17,14,14,14,13,17,15,15,13,13,16,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,15,13,13,16,15,15,13,13,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,16,14,14,12,12,17,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,13,15,14,8,8,14,14,14,19,19,14,15,15,18,19,14,14,14,18,19,14,15,14,19,19,15,16,15,19,19,15,16,16,19,20,15,15,15,19,19,15,16,16,19,19,15,16,16,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,16,15,19,19,15,16,16,21,19,15,15,15,20,20,15,15,15,20,21,15,15,15,19,20,14,12,12,8,8,14,14,14,19,19,14,13,13,19,19,14,14,14,19,19,14,13,14,19,19,15,15,15,20,20,15,14,14,20,19,15,15,15,19,20,15,14,14,19,20,15,15,15,20,19,15,15,15,19,20,15,14,14,20,20,15,15,15,20,19,15,14,14,19,19,15,15,15,19,19,15,15,15,20,19,15,14,14,21,19,15,15,15,20,21,15,14,14,21,19,15,15,15,19,19,15,15,15,20,20,15,14,14,19,21,15,15,15,19,19,15,14,14,19,20,15,15,15,19,19,13,12,12,13,13,17,16,16,11,11,17,16,15,12,12,18,16,16,11,11,17,16,16,11,11,18,17,17,13,13,18,16,16,13,13,17,17,17,12,13,18,17,16,13,13,18,17,17,13,13,17,17,17,13,13,17,16,16,13,13,18,16,17,12,12,17,16,16,13,12,17,17,17,12,12,18,17,17,13,12,18,16,16,13,13,18,17,17,12,12,17,16,16,12,12,17,17,17,11,11,17,16,16,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,17,17,11,11,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,12,12,16,14,14,13,13,17,15,15,14,14,17,15,16,15,15,17,15,15,14,14,17,15,16,14,15,18,15,15,14,14,17,15,15,14,14,16,16,16,15,15,18,15,15,13,14,17,15,15,14,14,18,15,15,14,14,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,12,12,16,14,14,13,13,17,14,14,11,11,17,14,14,12,12,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,14,14,14,8,8,14,14,14,18,18,14,15,15,19,18,14,14,14,18,18,14,14,14,18,19,15,16,15,19,19,15,17,16,20,20,15,15,15,19,19,15,16,16,19,19,15,15,15,19,19,15,16,15,18,19,15,16,16,20,20,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,16,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,20,15,15,15,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,20,15,16,16,20,20,15,15,15,19,19,13,12,12,8,8,14,14,14,19,20,14,14,14,19,19,14,14,14,18,19,14,14,14,19,20,15,15,15,19,20,15,14,14,21,20,15,15,15,20,20,15,15,14,19,19,15,15,15,19,19,15,15,15,19,19,15,14,14,19,20,15,15,15,19,20,15,14,14,19,19,15,15,15,19,19,15,15,15,19,19,16,14,14,19,19,15,15,15,20,20,15,14,14,21,19,15,15,15,19,19,15,15,15,19,20,16,14,14,19,20,15,15,15,19,19,15,14,14,19,19,15,15,15,20,19,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,7,9,9,11,12,12,9,8,8,6,7,7,9,11,11,10,11,11,10,11,11,13,13,13,11,12,12,10,11,11,13,14,14,12,12,12,6,6,6,8,6,6,8,6,6,9,7,7,12,10,10,10,6,6,9,7,7,12,10,10,11,7,6,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,8,7,7,12,11,11,12,11,11,11,11,11,14,14,14,13,12,12,12,11,11,16,15,15,14,12,12,0,10,10,0,11,11,0,12,12,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,13,10,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,12,12,0,15,14,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,0,8,8,0,8,8,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,7,7,0,7,7,0,7,7,0,8,8,0,8,8,0,8,8,0,9,9,0,8,8,0,8,8,0,7,7,0,8,8,0,8,8,0,10,10,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,8,8,0,11,11,0,11,11,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,12,12,0,8,8,0,11,11,0,11,11,0,13,12,0,12,12,0,13,12,0,13,13,0,12,12,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,11,11,0,11,11,0,13,12,0,12,12,0,12,12,0,12,12,0,11,11,0,12,12,0,8,8,0,12,12,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,12,12,0,8,8,0,6,6,0,11,11,0,11,11,0,12,12,0,14,14,0,11,11,0,12,12,0,14,14,0,11,11,0,6,6,0,6,5,0,7,6,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,7,7,0,7,7,0,10,10,0,11,11,0,11,11,0,14,14,0,10,10,0,12,12,0,14,14,0,12,12,0,6,6,0,11,11,0,11,11,0,12,12,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,11,11,0,11,11,0,12,12,0,15,15,0,12,12,0,11,11,0,15,15,0,11,11,0,6,6,0,11,11,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+520692);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,5,7,8,10,13,14,4,2,4,6,8,11,12,7,4,3,5,8,12,14,8,5,4,4,8,12,12,9,7,7,7,9,10,11,13,11,11,9,7,8,10,13,11,10,6,5,7,9,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,240,65,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,32,8,0,0,0,0,0,0,0,0,0,136,32,8,0,176,32,8,0,0,0,0,0,0,0,0,0,216,32,8,0,0,33,8,0,0,0,0,0,0,0,0,0,40,33,8,0,80,33,8,0,0,0,0,0,0,0,0,0,120,33,8,0,160,33,8,0,80,33,8,0,0,0,0,0,200,33,8,0,128,29,8,0,168,29,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,40,32,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,32,32,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,29,8,0,48,29,8,0,0,0,0,0,0,0,0,0,88,29,8,0,128,29,8,0,168,29,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,56,31,8,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,232,31,8,0,0,0,0,0,2,0,0,0,25,0,0,0,0,31,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,31,8,0,0,0,0,0,2,0,0,0,9,0,0,0,224,30,8,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,240,30,8,0,0,0,0,0,1,0,0,0,25,0,0,0,88,30,8,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,120,30,8,0,0,0,0,0,1,0,0,0,25,0,0,0,208,29,8,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,240,29,8,0,0,0,0,0,3,4,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,12,14,14,14,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,6,6,5,5,5,7,5,5,5,5,6,7,7,6,7,7,7,6,7,7,7,7,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,3,4,7,7,8,8,9,9,9,10,10,10,5,6,5,8,7,9,8,9,9,10,9,11,10,5,5,7,7,8,8,9,9,9,9,10,10,11,8,9,8,10,9,10,9,10,9,11,10,11,10,8,8,9,9,10,9,10,9,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,10,12,12,12,12,12,12,12,11,12,12,12,11,11,11,12,12,12,12,12,12,12,11,12,11,12,11,11,13,12,12,12,13,12,12,12,12,11,12,11,11,13,13,13,12,12,12,12,12,12,11,11,11,10,13,13,13,12,13,12,13,11,13,10,12,11,11,13,13,12,13,12,12,12,12,11,12,11,11,11,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,2,3,6,7,10,14,16,3,2,5,7,11,14,17,6,5,5,7,10,12,14,7,7,6,6,7,9,13,10,11,9,6,6,9,11,15,15,13,10,9,10,12,18,18,16,14,12,13,16,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,232,64,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,224,65,8,0,0,0,0,0,5,0,0,0,243,0,0,0,224,63,8,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,216,64,8,0,0,0,0,0,5,0,0,0,243,0,0,0,216,62,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,208,63,8,0,0,0,0,0,5,0,0,0,243,0,0,0,208,61,8,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,200,62,8,0,0,0,0,0,5,0,0,0,53,12,0,0,128,49,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,184,61,8,0,0,0,0,0,5,0,0,0,53,12,0,0,48,37,8,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,104,49,8,0,0,0,0,0,1,0,0,0,7,0,0,0,8,37,8,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,16,37,8,0,0,0,0,0,5,0,0,0,243,0,0,0,0,36,8,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,248,36,8,0,0,0,0,0,5,0,0,0,243,0,0,0,248,34,8,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,240,35,8,0,0,0,0,0,5,0,0,0,243,0,0,0,240,33,8,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,232,34,8,0,0,0,0,0,1,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,7,7,7,8,8,7,7,7,7,8,8,8,8,9,8,7,7,8,8,8,9,9,9,9,7,7,6,6,6,9,7,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,8,10,8,8,7,6,6,9,6,6,9,6,6,9,7,7,10,8,8,9,6,6,9,7,7,10,8,8,9,7,7,7,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,10,9,12,8,8,8,7,7,10,9,9,11,9,9,11,9,9,11,11,10,11,9,9,11,10,9,11,10,11,11,9,9,10,8,8,11,9,9,11,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,9,8,8,12,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,9,7,7,11,9,10,11,10,9,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,10,10,11,10,9,11,10,10,11,9,9,11,10,10,11,10,11,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,6,6,6,8,8,7,8,8,7,9,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,13,13,12,11,11,10,10,10,14,14,13,13,11,11,6,6,6,8,5,5,8,7,7,8,7,7,11,9,9,9,7,7,8,7,7,12,10,10,10,7,7,7,8,8,12,11,11,12,10,10,11,10,10,14,13,13,13,10,10,11,10,11,16,14,14,13,10,10,7,8,7,12,12,12,12,11,11,12,11,11,16,14,15,13,12,12,11,11,11,17,15,14,14,13,13,10,9,9,13,11,11,13,11,11,12,11,11,16,14,13,14,11,11,12,11,11,16,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,14,13,13,11,11,12,10,10,16,14,14,13,10,10,8,8,8,12,12,12,12,11,11,12,11,11,16,14,15,14,12,12,12,11,11,16,15,15,14,12,12,10,10,10,13,11,11,13,11,11,12,12,12,16,14,14,14,11,11,12,11,11,17,14,15,14,11,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,6,6,14,14,6,8,8,14,14,7,7,7,14,14,0,13,13,15,16,0,13,13,15,15,7,8,8,15,15,9,10,10,16,16,9,8,8,14,15,0,13,13,17,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,16,9,8,8,14,14,0,13,13,17,17,0,13,13,15,15,0,14,14,16,16,0,0,0,18,19,0,12,12,16,15,0,16,16,0,20,0,14,14,16,16,0,14,14,17,17,0,0,0,19,19,0,12,12,15,15,0,18,17,21,21,0,14,14,16,16,5,7,7,12,13,9,10,9,14,14,11,10,10,14,14,0,0,0,18,17,0,20,21,18,18,9,10,10,14,14,12,12,12,17,16,12,10,10,14,14,0,20,20,18,17,0,21,21,17,17,11,10,10,14,14,15,13,13,18,18,13,11,11,14,14,0,20,0,18,18,0,20,21,18,17,0,21,0,18,19,0,0,0,0,21,0,21,20,16,17,0,0,0,21,21,0,0,0,20,18,0,20,0,17,18,0,0,0,0,0,0,0,20,16,17,0,0,0,20,0,0,0,0,18,18,6,6,6,13,13,8,5,5,11,11,9,6,6,13,13,0,9,9,12,12,0,10,10,14,14,9,7,7,13,13,12,9,9,13,13,10,6,6,13,13,0,10,10,14,14,0,10,10,13,13,9,7,7,13,13,13,10,10,13,13,11,6,6,13,13,0,10,10,15,15,0,10,10,13,13,0,12,11,15,15,0,20,19,17,16,0,9,9,13,13,0,13,13,20,19,0,11,11,13,13,0,11,11,15,15,0,20,19,17,17,0,10,10,13,13,0,14,15,0,21,0,12,12,13,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,20,20,0,16,16,0,0,0,11,11,15,15,0,14,14,17,17,0,11,11,15,15,0,15,15,20,21,0,16,16,21,21,0,12,12,15,15,0,15,15,18,20,0,11,11,16,15,0,15,15,21,21,0,16,16,0,21,0,16,16,0,0,0,0,0,0,0,0,14,14,21,21,0,17,18,0,0,0,16,17,20,0,0,16,16,0,0,0,0,0,0,0,0,15,15,20,20,0,19,18,0,21,0,18,17,0,0,0,10,10,11,11,0,10,10,10,10,0,11,11,12,12,0,11,11,9,9,0,13,13,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,12,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,13,13,0,12,12,12,12,0,14,13,13,13,0,19,21,15,15,0,12,11,12,12,0,16,15,19,19,0,13,13,11,11,0,13,13,13,13,0,0,21,15,16,0,12,12,12,12,0,16,16,19,21,0,13,13,12,12,7,7,7,16,16,11,9,9,16,16,12,9,9,16,16,0,13,13,16,16,0,14,14,17,16,11,9,9,16,16,14,12,11,17,17,13,8,9,15,15,0,13,13,19,19,0,13,13,16,15,12,10,10,17,17,15,12,12,19,18,14,9,9,17,16,0,14,14,18,0,0,14,13,16,16,0,14,15,18,17,0,21,0,19,21,0,12,12,16,16,0,16,16,0,0,0,14,14,16,16,0,14,14,18,18,0,0,21,20,0,0,13,13,16,17,0,18,18,0,0,0,15,14,17,16,8,7,7,14,14,11,10,10,15,15,13,10,10,15,15,0,21,20,19,19,0,21,0,17,18,11,10,10,15,16,14,12,12,18,18,14,11,11,15,14,0,21,20,18,19,0,0,21,18,18,12,11,11,16,16,16,14,14,18,20,14,11,11,16,15,0,20,20,19,19,0,0,20,18,18,0,21,0,18,19,0,0,0,0,0,0,20,20,17,18,0,0,0,20,20,0,0,0,19,19,0,0,0,20,18,0,0,0,0,0,0,0,21,18,18,0,21,21,0,21,0,0,0,19,20,11,9,9,14,14,13,10,10,14,14,13,11,11,15,15,0,13,13,13,13,0,14,14,16,16,13,11,11,15,15,16,12,12,15,15,14,10,10,14,14,0,14,14,16,16,0,14,14,15,15,13,10,10,15,15,17,13,14,15,16,15,10,10,15,15,0,14,14,17,16,0,14,14,15,15,0,15,15,17,17,0,0,21,18,18,0,13,13,15,15,0,16,16,21,20,0,14,14,15,14,0,15,14,16,17,0,0,20,20,19,0,13,13,15,15,0,19,18,0,0,0,15,15,15,15,0,11,11,14,14,0,12,12,16,16,0,12,12,16,16,0,15,16,21,21,0,16,17,21,0,0,12,12,17,16,0,14,14,18,19,0,11,11,16,16,0,15,15,20,21,0,16,16,21,0,0,12,12,17,16,0,15,15,19,19,0,12,12,16,17,0,16,15,0,0,0,16,16,0,0,0,17,17,0,21,0,0,0,0,0,0,14,15,20,0,0,17,17,0,0,0,17,17,0,0,0,17,16,0,0,0,0,0,0,0,0,15,15,0,0,0,18,18,0,0,0,18,17,0,0,0,11,11,14,14,0,12,12,15,15,0,12,12,15,15,0,13,13,14,14,0,14,14,17,17,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,13,13,16,17,0,13,13,16,16,0,12,12,15,15,0,14,14,17,16,0,11,11,15,15,0,14,14,17,17,0,13,13,16,16,0,15,15,17,18,0,21,20,20,21,0,12,12,15,15,0,16,16,20,21,0,14,14,15,15,0,14,14,17,17,0,0,0,18,19,0,12,13,15,15,0,18,17,21,0,0,14,15,15,15,8,8,8,16,16,12,10,10,16,16,13,9,9,16,16,0,14,14,18,17,0,14,14,16,17,12,10,10,18,17,14,12,11,18,18,14,9,9,16,16,0,13,13,18,18,0,13,13,17,16,12,9,9,16,17,17,13,13,17,17,14,9,9,15,15,0,14,14,20,19,0,13,13,16,16,0,15,15,19,18,0,0,0,20,19,0,12,13,17,17,0,16,16,20,0,0,14,14,16,17,0,14,14,19,18,0,0,0,20,20,0,13,13,16,16,0,18,17,0,0,0,15,15,16,16,9,7,7,14,14,12,10,10,15,15,13,10,10,15,15,0,21,0,18,19,0,20,21,19,18,12,10,10,16,15,15,13,13,18,18,14,11,11,15,15,0,0,0,19,18,0,0,21,18,18,13,11,11,15,15,16,14,14,17,19,15,11,11,15,15,0,21,21,20,18,0,0,21,18,18,0,0,21,21,19,0,0,0,0,0,0,19,20,18,17,0,0,0,21,21,0,21,0,20,18,0,0,21,19,19,0,0,0,0,0,0,20,21,17,17,0,0,0,0,0,0,21,0,18,20,0,10,10,14,14,0,11,11,15,15,0,11,11,15,15,0,14,14,15,15,0,15,15,16,16,0,11,12,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,17,17,0,14,14,15,15,0,11,11,16,15,0,14,14,15,15,0,11,11,15,15,0,15,15,17,17,0,14,14,15,15,0,16,16,18,18,0,0,0,20,19,0,14,13,16,15,0,17,17,21,0,0,15,15,15,15,0,16,15,17,16,0,20,0,20,18,0,13,14,15,15,0,19,18,0,21,0,15,15,15,15,0,11,11,14,14,0,12,12,16,16,0,12,12,16,16,0,16,15,20,21,0,17,16,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,16,0,15,15,21,20,0,16,16,0,0,0,12,12,16,17,0,15,14,19,19,0,11,12,16,16,0,15,15,21,0,0,16,16,0,0,0,16,17,0,0,0,0,0,0,0,0,15,15,21,0,0,17,17,0,0,0,17,17,0,0,0,17,16,0,0,0,0,0,0,0,0,15,15,0,20,0,19,20,0,0,0,17,17,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,13,17,16,0,14,14,17,17,0,11,11,16,16,0,14,14,17,17,0,13,13,16,16,0,12,12,16,16,0,15,15,16,17,0,11,11,15,16,0,14,14,17,17,0,13,14,16,16,0,15,15,18,18,0,21,20,20,19,0,13,13,16,17,0,16,16,0,0,0,14,14,16,16,0,15,15,18,18,0,0,0,20,19,0,13,13,16,16,0,17,17,0,0,0,14,14,16,16,0,11,11,16,16,0,13,13,18,17,0,13,13,17,17,0,16,16,17,17,0,16,16,17,18,0,12,12,17,17,0,15,15,18,18,0,12,12,16,16,0,16,16,19,19,0,15,15,16,17,0,12,12,17,17,0,17,17,18,18,0,12,12,17,17,0,16,16,19,19,0,15,16,17,17,0,16,16,18,17,0,0,0,21,21,0,13,13,16,16,0,17,17,0,20,0,15,15,16,17,0,16,16,19,18,0,0,21,20,21,0,14,14,17,16,0,20,0,0,0,0,15,16,16,17,0,9,9,14,14,0,13,13,16,16,0,14,14,15,15,0,0,20,19,19,0,0,0,19,19,0,12,12,15,15,0,15,16,19,18,0,14,14,15,15,0,21,0,18,18,0,20,0,17,18,0,13,13,16,16,0,17,17,17,19,0,14,14,16,15,0,21,20,20,19,0,0,0,19,19,0,0,0,19,18,0,0,0,0,0,0,20,20,17,18,0,0,0,21,21,0,0,0,18,18,0,21,0,18,19,0,0,0,0,0,0,20,21,18,18,0,0,0,20,21,0,0,0,19,19,0,18,18,15,15,0,20,21,17,17,0,19,21,17,17,0,0,0,17,18,0,0,0,20,19,0,19,19,17,17,0,0,0,18,18,0,19,20,16,17,0,0,21,20,20,0,19,20,19,18,0,19,20,16,16,0,0,0,18,19,0,19,20,17,17,0,0,21,0,20,0,21,21,17,19,0,20,0,19,20,0,0,0,20,0,0,19,18,17,16,0,0,0,0,0,0,0,20,17,17,0,20,21,18,20,0,0,0,0,21,0,19,20,17,17,0,0,0,0,0,0,20,21,17,17,0,11,11,14,14,0,13,13,16,17,0,13,13,16,16,0,17,17,0,21,0,18,17,21,0,0,13,13,16,16,0,15,15,18,18,0,12,12,16,16,0,17,16,21,0,0,17,17,0,0,0,12,12,17,17,0,17,17,19,21,0,13,12,16,16,0,17,17,0,0,0,17,17,0,0,0,18,17,0,21,0,0,0,0,0,0,15,15,20,0,0,20,18,0,0,0,17,18,0,0,0,16,17,0,0,0,0,0,0,0,0,15,15,0,0,0,19,19,0,0,0,18,18,0,0,0,14,14,18,18,0,16,16,0,21,0,16,16,21,21,0,17,17,0,20,0,17,17,20,0,0,16,15,0,0,0,20,20,0,0,0,15,15,20,20,0,17,17,21,0,0,17,18,20,20,0,15,15,20,20,0,18,18,0,0,0,15,15,19,20,0,17,18,0,0,0,17,17,20,20,0,18,17,21,0,0,0,0,0,21,0,15,15,20,20,0,19,19,0,0,0,17,17,21,0,0,17,17,0,0,0,0,0,21,0,0,15,15,19,19,0,20,21,0,0,0,18,17,21,21,0,12,12,16,16,0,14,14,17,17,0,13,13,17,18,0,16,16,18,17,0,16,16,18,18,0,13,13,18,18,0,15,16,19,18,0,13,13,16,16,0,16,16,20,18,0,16,16,17,17,0,12,13,17,17,0,17,16,18,18,0,12,12,16,16,0,17,16,20,19,0,16,16,16,16,0,16,17,18,20,0,0,0,21,20,0,14,14,17,16,0,19,18,0,20,0,16,16,17,16,0,16,16,17,18,0,0,21,21,21,0,14,14,16,16,0,20,20,21,0,0,16,16,16,16,0,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,0,21,18,18,0,0,21,18,19,0,13,13,16,16,0,16,16,18,18,0,14,14,15,15,0,21,0,18,18,0,21,0,18,18,0,13,13,16,16,0,17,17,19,20,0,14,14,15,15,0,0,0,18,20,0,0,21,18,18,0,0,21,19,18,0,0,0,0,0,0,20,21,18,17,0,0,0,21,21,0,0,0,19,19,0,21,0,18,19,0,0,0,0,0,0,21,20,17,17,0,0,21,20,0,0,0,0,19,19,0,19,20,15,16,0,0,20,18,17,0,20,21,17,18,0,21,0,18,18,0,0,0,19,19,0,20,20,17,18,0,0,0,18,19,0,20,20,18,17,0,0,0,0,20,0,0,21,17,18,0,20,21,17,17,0,0,0,18,18,0,19,19,17,17,0,0,0,21,21,0,20,20,17,17,0,0,0,21,19,0,0,0,20,19,0,21,20,17,18,0,0,0,0,0,0,0,20,18,17,0,21,20,18,18,0,0,0,20,21,0,20,20,17,17,0,0,0,0,0,0,20,0,17,17,0,11,11,13,14,0,13,13,16,16,0,13,13,16,16,0,17,17,0,0,0,17,18,0,0,0,13,13,16,16,0,15,16,18,18,0,13,13,16,17,0,16,17,20,0,0,17,18,20,0,0,13,13,17,17,0,16,16,20,21,0,13,13,16,16,0,17,17,21,0,0,17,18,0,0,0,17,18,0,21,0,0,0,0,0,0,15,15,20,0,0,19,19,0,0,0,17,17,0,0,0,18,17,21,20,0,0,0,0,0,0,16,16,20,21,0,21,20,0,21,0,19,21,0,0,0,15,15,0,0,0,16,17,0,19,0,16,16,0,0,0,17,17,0,0,0,19,18,0,0,0,16,16,20,20,0,20,18,21,0,0,15,15,21,21,0,18,18,0,0,0,18,19,0,0,0,16,15,0,21,0,20,19,0,0,0,16,16,0,0,0,20,18,0,21,0,17,18,21,0,0,18,19,0,0,0,0,0,0,0,0,16,16,20,20,0,19,20,0,0,0,17,17,0,0,0,18,17,20,21,0,0,0,0,0,0,16,16,0,20,0,20,22,0,0,0,18,18,0,22,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,4,4,8,8,10,12,12,11,11,9,11,11,12,13,11,12,12,11,11,11,12,12,12,12,10,13,12,13,13,11,12,12,13,13,11,12,12,13,13,11,12,13,13,13,11,13,13,13,13,10,13,13,12,13,11,12,12,14,14,11,13,12,12,12,11,12,12,13,13,11,13,13,12,12,11,13,13,13,13,11,12,12,13,13,11,13,13,12,12,11,12,12,13,13,11,13,13,12,12,11,13,13,13,13,11,12,12,14,14,11,13,13,12,12,11,12,12,13,13,11,13,13,12,12,11,10,10,10,10,12,10,10,11,11,11,8,8,11,11,13,10,10,10,10,12,10,10,10,10,13,11,11,11,11,13,10,10,11,11,13,11,11,12,12,13,11,11,11,11,13,11,11,12,12,13,11,11,12,12,13,10,10,11,11,13,11,11,11,11,13,11,10,11,11,13,11,11,11,11,13,11,11,11,11,13,10,10,11,11,13,11,11,11,11,12,10,11,11,11,13,11,11,11,11,13,11,11,11,11,13,10,10,11,11,13,11,11,11,11,13,11,11,11,11,13,11,11,11,11,11,10,10,10,10,12,10,10,9,9,12,12,12,11,11,13,12,12,9,9,13,12,12,10,10,12,12,12,12,12,13,13,13,14,14,13,12,12,11,11,13,13,13,12,12,13,12,12,11,11,13,12,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,12,12,10,10,13,13,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,12,13,10,10,13,13,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,13,12,10,10,14,12,12,8,8,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,11,11,7,7,14,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,15,12,12,9,9,15,13,13,9,9,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,15,12,12,9,9,14,13,13,9,9,14,12,12,9,9,14,13,13,9,9,13,12,12,8,8,13,13,13,8,8,14,13,13,9,9,13,13,13,7,7,14,13,13,8,8,14,14,14,10,10,14,14,14,11,11,14,14,14,9,9,14,14,14,10,10,14,14,14,9,9,14,14,14,10,9,15,14,14,11,11,14,14,14,9,9,14,14,14,10,10,14,14,14,9,9,14,14,14,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,14,14,14,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,15,15,11,11,16,15,16,12,12,17,16,16,11,11,17,15,15,12,11,16,16,16,12,13,16,15,15,13,13,16,16,16,12,12,16,16,15,13,13,16,16,16,12,12,16,16,16,13,13,17,16,16,14,14,17,17,16,12,12,17,16,16,13,13,17,17,16,12,13,16,16,17,13,12,17,16,16,14,13,17,16,16,12,12,17,16,16,12,12,17,16,17,12,12,17,17,17,13,13,16,16,16,13,14,17,17,16,12,12,16,16,16,13,13,17,17,17,12,12,13,14,14,10,10,16,14,14,12,12,16,15,15,14,14,16,14,14,12,12,15,14,14,13,13,17,15,15,14,13,16,16,15,15,15,16,15,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,16,15,15,15,17,15,15,13,13,16,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,15,15,15,15,16,14,14,13,13,16,15,15,14,14,16,14,14,13,13,17,15,15,14,14,16,16,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,13,11,11,10,10,16,14,14,13,13,15,14,14,13,13,16,14,14,12,12,16,14,14,12,12,15,15,15,14,14,16,14,14,14,14,16,15,14,14,14,16,14,14,14,14,16,15,15,14,13,16,15,15,14,14,16,14,14,14,14,17,15,15,14,14,16,14,14,14,14,16,15,15,13,14,16,15,15,14,14,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,14,14,16,14,14,14,14,17,15,15,13,13,16,15,14,13,13,17,15,15,13,13,14,14,14,9,9,14,14,14,17,17,14,15,15,18,18,14,14,14,18,19,14,14,14,18,18,15,15,15,19,18,15,16,15,18,20,15,15,15,18,19,15,15,15,19,19,15,15,15,18,20,15,15,15,18,19,15,15,16,20,18,15,15,15,18,18,15,15,15,19,19,15,15,15,18,19,15,15,15,18,19,15,15,15,19,19,14,15,14,19,19,15,15,15,20,19,15,14,14,19,18,14,15,15,18,19,15,15,16,20,20,14,14,14,18,19,15,15,15,19,18,14,14,14,18,18,14,12,12,9,9,13,14,14,18,18,14,13,13,18,19,14,14,14,18,18,14,14,14,18,18,15,15,15,19,19,15,14,14,19,18,14,15,15,19,18,15,14,14,18,18,15,15,15,19,18,14,15,15,19,19,15,14,14,19,18,14,15,15,19,18,15,14,14,19,18,14,15,15,19,18,15,15,15,21,18,15,14,14,19,18,14,15,15,18,19,14,15,14,20,19,14,15,15,18,19,14,15,15,19,19,15,14,14,19,20,14,15,15,18,18,14,14,14,19,19,14,15,15,19,18,12,12,12,13,13,16,15,15,11,11,16,15,15,12,12,16,16,16,11,11,16,15,15,11,11,16,16,16,13,13,17,16,16,13,13,17,17,17,12,12,16,16,16,13,13,17,16,17,13,12,15,16,16,12,12,16,15,15,13,13,17,16,16,12,12,16,16,15,12,12,16,16,16,12,12,17,17,16,13,12,16,16,16,13,13,17,16,16,12,12,17,16,16,12,12,17,17,16,12,12,16,17,16,12,12,17,15,15,13,13,17,16,16,12,12,16,16,16,12,12,16,16,16,12,12,13,13,13,9,9,15,14,14,13,13,16,15,14,14,14,16,14,14,13,13,15,14,14,13,13,17,15,15,14,14,16,15,15,15,15,16,15,15,14,14,16,15,15,15,15,17,15,15,14,14,16,15,15,14,14,16,15,15,15,15,17,14,15,14,14,16,15,15,14,14,17,15,15,13,14,17,15,15,14,14,16,15,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,17,15,15,14,14,16,15,16,15,15,17,14,14,13,13,16,15,15,14,14,18,14,14,13,13,13,11,11,11,11,15,14,14,12,12,15,14,14,13,13,16,14,14,12,12,16,13,14,12,12,16,15,15,13,13,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,14,15,13,13,15,15,15,13,13,16,14,14,14,13,16,14,14,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,14,14,16,15,15,12,12,16,14,14,13,13,16,15,15,12,12,16,15,15,13,13,16,14,14,14,14,17,15,14,12,12,16,14,14,13,13,16,15,15,12,12,14,14,14,8,8,14,14,14,17,18,14,15,15,17,18,14,14,14,17,18,14,14,14,18,18,14,15,15,18,18,14,16,15,19,19,15,15,15,18,19,15,16,15,20,19,15,15,15,18,18,14,15,15,18,19,15,16,16,20,19,15,15,15,19,17,14,15,15,20,18,14,15,15,18,18,14,15,15,18,19,14,15,15,19,20,14,14,14,18,18,14,15,15,18,19,14,14,14,18,19,14,15,15,19,18,15,16,16,20,21,14,14,15,19,19,14,15,15,19,19,14,14,14,19,18,13,12,12,9,9,13,14,14,18,19,14,14,14,18,19,14,14,14,18,18,14,14,14,18,18,14,15,15,19,19,15,14,14,19,18,15,15,15,19,19,15,14,14,19,20,14,15,15,18,19,14,15,15,20,18,15,14,14,18,18,14,15,15,18,18,14,14,14,19,19,14,15,15,18,18,14,15,15,19,18,15,14,14,19,19,14,15,15,19,18,15,14,14,19,18,14,14,15,18,19,14,15,15,19,18,15,14,14,18,19,14,15,14,19,20,14,14,14,19,19,14,15,15,19,19,12,12,12,13,13,16,16,16,11,11,16,16,16,12,12,17,16,16,11,11,17,15,15,11,11,16,16,16,13,13,17,15,16,13,13,16,16,16,12,12,17,16,16,13,13,17,17,16,12,12,17,17,16,13,13,17,16,16,13,13,17,17,17,12,12,17,16,16,13,13,17,17,17,12,12,16,16,16,12,12,17,15,15,13,13,17,16,16,11,11,17,16,16,12,12,16,16,16,11,11,16,17,16,12,12,17,16,16,13,13,17,17,16,12,12,17,17,16,12,12,17,16,16,11,11,13,14,14,9,9,16,14,14,13,13,16,14,15,14,14,16,14,14,12,12,16,14,14,13,13,17,15,15,14,14,16,15,15,15,15,17,15,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,15,15,15,16,17,14,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,15,15,15,15,17,14,14,13,13,16,15,15,14,14,16,14,14,13,13,17,15,15,14,14,16,16,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,13,11,11,10,10,16,14,14,12,12,15,13,13,13,12,16,14,14,11,11,16,14,14,11,11,16,14,15,13,14,16,14,14,13,13,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,16,14,15,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,13,14,14,8,8,13,14,14,18,18,13,15,15,17,18,14,14,14,18,19,14,14,14,19,18,14,15,15,19,18,15,15,16,21,18,15,15,15,19,19,14,16,16,19,19,14,15,15,18,19,14,15,15,19,20,14,16,16,19,18,15,15,15,18,19,14,15,15,19,18,15,15,15,18,18,15,15,15,20,18,15,16,16,20,19,14,15,14,18,19,14,15,16,19,20,14,15,15,19,18,15,15,15,19,18,15,16,16,20,19,15,14,14,18,18,14,15,15,19,19,14,15,15,18,18,13,12,12,8,8,13,14,14,19,18,14,13,13,20,18,14,14,14,19,18,14,13,13,18,19,14,15,15,20,19,15,14,14,19,19,14,15,15,19,18,15,14,14,20,20,15,15,15,19,18,14,15,15,19,18,15,14,14,19,18,14,15,15,20,19,14,14,14,20,19,14,15,15,19,18,15,15,15,18,18,15,14,14,18,18,14,15,15,19,19,14,14,14,19,19,14,15,15,19,19,15,15,15,19,18,15,14,14,20,19,15,15,15,19,19,14,14,14,20,19,14,15,15,20,20,12,12,12,13,13,17,16,16,11,11,16,16,15,12,12,17,16,16,11,11,17,15,15,11,11,17,17,17,13,13,17,16,16,13,13,17,17,17,12,12,17,16,16,13,13,17,17,16,12,13,16,17,16,13,13,17,16,15,13,13,17,16,16,12,12,17,16,16,12,13,17,16,17,12,12,17,17,17,12,12,17,16,15,13,13,17,16,16,12,12,17,16,16,12,12,17,16,16,11,11,16,16,16,12,12,17,15,15,13,13,17,16,15,11,11,16,16,16,12,12,17,16,16,11,11,13,14,14,9,9,16,14,14,13,13,16,14,15,14,14,16,14,14,12,12,16,14,14,13,13,17,15,15,14,15,16,15,15,15,15,17,15,15,14,14,16,15,15,15,14,16,15,15,14,14,16,15,15,14,14,16,15,16,15,15,17,15,14,14,14,16,15,15,14,14,17,15,15,13,13,16,15,15,14,14,16,16,16,15,15,17,14,14,13,13,16,15,15,14,14,18,14,15,13,13,16,15,15,14,14,16,16,15,15,15,16,14,14,13,13,16,15,15,14,14,17,14,15,13,13,13,11,11,10,10,15,14,14,12,12,15,14,14,13,13,16,14,14,12,12,16,13,14,12,12,16,14,15,14,13,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,15,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,14,15,12,12,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,14,14,14,8,8,14,14,14,17,17,14,15,15,18,18,14,14,14,18,17,14,14,14,18,18,14,15,15,18,20,15,16,15,19,18,15,15,15,19,18,15,15,16,19,18,15,15,15,18,18,14,15,15,18,18,15,16,16,18,19,15,15,15,18,18,15,15,15,19,20,15,15,15,18,18,15,15,15,18,18,15,16,16,19,19,15,14,15,19,19,15,15,15,19,20,14,14,15,18,18,15,15,15,19,19,15,16,16,19,19,15,15,14,18,19,15,15,15,20,20,15,15,14,18,18,13,12,12,8,8,13,14,14,18,18,14,14,14,18,18,14,14,14,18,20,14,14,14,18,18,14,15,15,19,18,15,14,14,18,19,15,15,15,18,19,15,14,14,18,19,15,15,15,18,18,14,15,14,18,19,15,14,14,21,19,15,15,15,19,18,14,14,14,19,18,14,15,15,19,18,15,15,15,20,19,15,14,14,20,18,14,15,15,18,19,14,14,14,19,18,14,15,15,18,19,15,15,15,18,19,15,14,14,19,19,15,15,15,19,19,14,14,14,19,20,14,15,15,18,19,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,7,8,8,7,8,8,7,9,9,10,12,11,9,8,8,7,9,9,11,12,12,9,9,9,6,7,7,10,11,11,10,11,11,10,11,11,13,13,14,12,12,12,11,11,11,14,14,14,12,12,12,6,5,5,9,6,5,9,6,6,9,7,7,12,10,10,11,6,6,10,7,7,13,10,10,12,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,9,9,12,11,11,16,13,13,15,11,11,8,7,7,12,12,12,12,11,11,12,11,11,14,14,14,14,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,12,12,0,12,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,8,8,8,13,11,11,13,10,10,13,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,9,7,7,13,11,11,13,11,11,12,11,11,16,14,14,14,12,12,13,12,12,15,14,14,15,13,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,12,0,14,15,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,7,7,0,7,7,0,6,6,0,8,8,0,7,7,0,8,8,0,8,9,0,8,8,0,8,8,0,7,7,0,9,9,0,8,8,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,9,9,0,11,11,0,11,11,0,12,12,0,11,11,0,12,12,0,13,13,0,12,12,0,13,12,0,8,8,0,12,12,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,12,0,12,12,0,8,8,0,12,12,0,12,12,0,13,13,0,13,13,0,13,14,0,14,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,12,12,0,8,8,0,6,6,0,11,11,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,15,15,0,12,12,0,5,5,0,5,5,0,6,6,0,7,7,0,11,11,0,6,6,0,7,7,0,10,11,0,6,6,0,7,7,0,11,11,0,12,12,0,11,11,0,15,15,0,10,10,0,12,12,0,15,15,0,12,12,0,6,6,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,15,15,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,11,12,0,15,16,0,11,11,0,6,6,0,11,12,0,12,12,0,12,12,0,16,15,0,12,12,0,13,12,0,15,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,3,7,8,10,13,16,3,2,5,7,9,13,16,6,4,4,6,10,14,15,7,5,5,7,10,13,14,9,8,9,9,9,11,13,12,11,12,9,7,8,11,14,12,10,6,5,7,10,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,8,105,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,71,8,0,0,0,0,0,0,0,0,0,160,71,8,0,200,71,8,0,0,0,0,0,0,0,0,0,240,71,8,0,24,72,8,0,0,0,0,0,0,0,0,0,64,72,8,0,104,72,8,0,0,0,0,0,0,0,0,0,144,72,8,0,184,72,8,0,104,72,8,0,0,0,0,0,224,72,8,0,152,68,8,0,192,68,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+531136);
/* memory initializer */ allocate([2,0,0,0,49,0,0,0,64,71,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,56,71,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,68,8,0,72,68,8,0,0,0,0,0,0,0,0,0,112,68,8,0,152,68,8,0,192,68,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,80,70,8,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,0,71,8,0,0,0,0,0,2,0,0,0,25,0,0,0,24,70,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,70,8,0,0,0,0,0,2,0,0,0,9,0,0,0,248,69,8,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,8,70,8,0,0,0,0,0,1,0,0,0,25,0,0,0,112,69,8,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,144,69,8,0,0,0,0,0,1,0,0,0,25,0,0,0,232,68,8,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,8,69,8,0,0,0,0,0,3,5,4,5,4,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,0,0,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,4,4,7,7,4,5,6,7,7,4,6,5,7,7,7,6,7,6,7,7,7,6,7,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,3,3,8,8,10,10,10,10,10,10,10,10,5,7,5,9,8,10,10,10,10,11,10,11,10,5,5,7,8,9,10,10,11,10,10,11,10,11,10,10,10,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,11,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,12,11,13,11,11,11,11,11,11,11,11,11,11,11,12,11,13,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,2,3,6,7,9,13,17,3,2,5,7,9,13,17,6,5,5,6,9,12,16,7,7,6,6,7,10,13,10,10,9,7,6,10,13,13,13,12,10,10,11,15,17,17,17,14,14,15,17,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,0,104,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,248,104,8,0,0,0,0,0,5,0,0,0,243,0,0,0,248,102,8,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,240,103,8,0,0,0,0,0,5,0,0,0,243,0,0,0,240,101,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,232,102,8,0,0,0,0,0,5,0,0,0,243,0,0,0,232,100,8,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,224,101,8,0,0,0,0,0,5,0,0,0,53,12,0,0,152,88,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,208,100,8,0,0,0,0,0,5,0,0,0,53,12,0,0,72,76,8,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,128,88,8,0,0,0,0,0,1,0,0,0,7,0,0,0,32,76,8,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,40,76,8,0,0,0,0,0,5,0,0,0,243,0,0,0,24,75,8,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,16,76,8,0,0,0,0,0,5,0,0,0,243,0,0,0,16,74,8,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,8,75,8,0,0,0,0,0,5,0,0,0,243,0,0,0,8,73,8,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,0,74,8,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,6,7,6,8,8,7,7,8,7,8,8,9,9,9,8,7,7,8,8,8,9,9,9,9,8,8,6,6,6,9,7,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,9,8,10,8,8,7,6,6,9,6,6,9,6,6,9,7,7,10,8,8,10,6,6,9,7,7,10,8,8,10,6,6,7,7,7,11,9,9,11,9,9,10,9,9,12,10,10,12,8,8,11,9,9,13,9,10,12,8,8,8,7,7,11,9,10,11,10,10,10,9,9,11,11,11,11,9,9,11,10,9,12,11,11,11,9,10,10,8,8,11,9,10,11,9,9,11,9,9,12,10,10,11,9,9,11,9,9,12,10,11,11,9,9,8,8,8,12,9,9,12,9,9,11,9,9,13,9,9,13,8,8,12,9,9,13,10,10,12,8,8,9,7,7,11,10,10,11,10,10,11,10,10,12,11,11,11,10,9,11,10,10,11,11,11,11,9,9,11,9,9,12,10,10,11,10,10,12,10,10,11,11,11,11,9,9,11,10,10,12,11,11,11,9,9,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,7,7,6,8,8,7,8,8,7,9,9,11,11,11,9,8,8,7,9,9,11,12,11,9,9,9,6,7,7,10,11,11,10,10,10,10,11,11,15,14,14,12,12,12,11,11,11,14,14,14,12,12,12,5,6,6,8,5,5,8,7,7,8,8,8,12,10,10,10,7,7,8,7,7,12,10,10,10,7,7,6,7,7,12,11,11,12,10,10,11,10,10,14,14,13,13,10,10,11,10,10,16,14,14,14,11,10,7,7,7,13,12,12,12,12,11,11,11,11,15,14,17,13,12,12,12,11,11,15,15,15,14,13,13,10,9,9,14,12,11,13,11,11,12,11,11,16,15,14,14,11,11,12,11,11,17,14,14,15,11,11,7,8,8,12,11,11,13,10,10,11,10,10,17,14,13,14,10,10,12,10,10,18,15,15,14,10,10,8,7,7,13,12,12,13,11,11,12,11,11,16,14,15,14,12,12,12,11,11,18,16,16,14,12,12,11,10,10,13,12,11,13,11,11,13,12,12,0,15,14,14,11,11,13,11,11,16,15,15,15,11,11,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,3,3,3,3,3,3,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,7,7,14,14,6,8,8,15,16,7,8,8,16,15,0,14,14,17,17,0,14,14,16,16,7,9,9,16,16,10,11,11,17,18,9,8,8,16,16,0,14,14,19,19,0,14,14,17,16,8,9,9,16,16,12,12,12,17,17,10,9,9,16,16,0,15,14,18,20,0,14,14,17,17,0,15,15,18,17,0,21,0,0,21,0,13,13,17,17,0,17,17,0,0,0,15,15,17,17,0,15,15,17,18,0,0,0,0,21,0,13,13,17,17,0,18,18,0,21,0,16,15,17,18,6,7,7,14,14,9,10,10,16,16,11,10,10,15,15,0,21,0,20,21,0,0,0,18,20,10,10,10,15,16,12,13,13,18,18,12,11,11,15,15,0,0,0,20,20,0,0,21,19,19,12,11,11,15,15,15,14,14,18,18,13,11,11,15,16,0,0,0,20,19,0,0,0,20,21,0,0,20,19,19,0,0,0,0,0,0,20,0,17,18,0,0,21,0,0,0,0,0,21,0,0,21,0,20,19,0,0,0,0,0,0,21,0,18,18,0,0,0,21,0,0,0,0,0,20,7,6,6,13,13,9,6,6,12,12,9,7,7,14,14,0,10,10,12,12,0,11,11,15,15,9,7,7,14,14,12,9,9,14,14,10,7,7,14,13,0,11,11,16,15,0,11,11,14,14,9,7,7,14,14,13,10,10,14,14,11,7,7,14,13,0,11,11,16,16,0,11,11,14,14,0,12,12,16,16,0,19,0,17,18,0,10,10,14,14,0,15,14,0,0,0,12,12,14,14,0,12,12,15,15,0,20,0,18,19,0,10,10,14,14,0,16,15,0,20,0,13,13,14,14,0,11,11,13,13,0,12,13,16,16,0,12,12,16,16,0,16,16,0,21,0,17,18,0,0,0,12,12,16,16,0,15,15,18,0,0,12,12,16,16,0,17,16,21,21,0,16,17,0,0,0,13,13,17,16,0,16,16,20,21,0,12,12,17,16,0,17,17,0,21,0,17,17,21,21,0,17,18,0,0,0,0,0,0,0,0,15,15,0,0,0,18,21,0,0,0,18,19,0,0,0,18,17,21,21,0,0,0,0,0,0,16,16,0,0,0,0,0,0,0,0,19,19,0,0,0,11,11,12,12,0,11,11,10,10,0,12,12,13,13,0,12,12,9,9,0,14,14,13,13,0,12,12,13,13,0,14,14,12,13,0,11,11,12,12,0,13,13,13,13,0,13,13,13,13,0,12,12,13,13,0,14,14,12,12,0,11,11,12,12,0,14,13,14,14,0,13,13,13,13,0,15,15,14,15,0,0,0,16,16,0,12,12,13,13,0,16,17,20,21,0,14,13,12,12,0,14,14,14,14,0,21,0,16,16,0,12,12,13,13,0,18,17,21,0,0,14,14,13,13,7,8,8,17,17,11,10,10,18,18,12,10,10,17,17,0,15,15,20,18,0,15,15,17,17,11,9,9,17,17,14,12,12,19,19,13,9,9,16,16,0,15,14,0,19,0,14,14,16,16,12,10,10,20,18,16,13,13,21,20,14,10,10,17,17,0,15,15,21,20,0,15,14,17,17,0,15,15,21,21,0,0,21,0,0,0,13,13,18,18,0,19,16,0,0,0,15,15,17,16,0,16,16,0,21,0,0,0,0,21,0,13,14,18,17,0,20,19,0,0,0,15,15,18,18,8,7,7,15,15,12,11,11,17,16,13,11,11,16,16,0,0,0,21,20,0,0,0,0,20,11,10,10,17,17,14,13,13,19,18,14,11,11,16,16,0,20,0,21,19,0,0,21,0,20,12,11,11,17,17,16,15,15,0,19,14,11,11,17,16,0,21,0,0,19,0,0,0,21,20,0,0,21,20,0,0,0,0,0,0,0,0,0,19,21,0,0,0,0,0,0,0,0,19,20,0,0,0,20,21,0,0,0,0,0,0,20,0,19,21,0,0,0,0,0,0,0,0,21,20,11,10,9,15,15,14,11,11,15,15,14,11,11,16,16,0,14,14,14,14,0,16,15,17,16,13,11,11,16,16,16,13,13,16,16,15,10,10,15,15,0,14,15,17,17,0,14,14,16,15,13,11,11,16,16,17,15,14,16,16,15,10,10,15,15,0,15,15,17,18,0,15,15,16,16,0,16,16,17,17,0,21,0,21,20,0,13,13,15,15,0,18,18,0,21,0,15,15,15,15,0,16,16,17,17,0,0,0,0,18,0,13,13,15,15,0,19,18,0,0,0,15,15,16,16,0,12,12,15,15,0,13,13,17,17,0,13,13,17,18,0,16,17,21,0,0,20,18,0,0,0,13,13,17,17,0,15,15,0,18,0,12,12,17,18,0,16,16,0,0,0,17,17,21,0,0,13,13,18,18,0,16,16,21,21,0,12,12,17,18,0,16,17,21,0,0,17,17,0,21,0,17,18,0,0,0,0,0,0,0,0,16,15,0,21,0,21,19,0,0,0,18,18,0,0,0,18,19,0,0,0,0,0,0,0,0,16,16,21,21,0,20,19,0,0,0,19,21,0,21,0,12,12,15,15,0,12,12,15,16,0,13,13,16,16,0,14,14,15,15,0,16,15,17,17,0,13,13,17,17,0,15,15,16,18,0,12,12,16,16,0,14,14,17,17,0,15,14,16,16,0,13,13,16,16,0,16,15,17,17,0,12,12,16,16,0,15,15,18,18,0,14,14,17,16,0,16,16,17,18,0,0,0,20,21,0,13,13,16,17,0,17,17,0,0,0,15,15,16,16,0,15,16,17,17,0,0,0,19,0,0,13,13,15,16,0,19,18,0,0,0,16,15,16,17,8,8,8,17,17,13,11,10,17,18,13,10,10,17,17,0,15,15,20,19,0,15,15,17,17,12,10,10,19,18,15,12,12,20,18,14,10,10,17,16,0,15,15,20,20,0,14,15,16,16,13,10,10,17,17,17,14,14,0,18,15,10,10,17,17,0,16,15,20,20,0,14,14,17,17,0,15,16,20,20,0,0,21,0,0,0,13,13,17,17,0,18,17,0,0,0,15,16,17,18,0,15,15,18,21,0,0,0,21,0,0,13,13,18,18,0,19,19,0,0,0,16,16,18,17,9,8,8,15,15,12,11,11,16,16,13,11,11,16,15,0,0,0,0,21,0,21,0,19,19,12,11,11,17,18,15,13,13,18,19,14,11,11,16,16,0,0,21,21,19,0,0,0,21,20,13,11,11,18,17,17,14,15,20,21,15,11,12,16,16,0,0,0,20,0,0,0,21,0,19,0,0,0,0,19,0,0,0,0,0,0,21,21,19,19,0,0,0,21,0,0,0,0,19,21,0,0,0,19,20,0,0,0,21,0,0,0,21,19,19,0,0,0,0,0,0,0,0,21,20,0,11,11,15,15,0,12,12,15,16,0,12,12,16,16,0,15,15,16,15,0,16,16,17,17,0,12,12,17,17,0,14,14,17,17,0,11,11,16,16,0,15,15,19,18,0,15,15,16,16,0,12,12,17,16,0,14,15,16,16,0,11,11,15,15,0,16,16,18,19,0,15,15,15,16,0,17,17,18,20,0,21,0,21,19,0,14,14,16,16,0,18,18,0,0,0,16,16,15,15,0,16,16,18,17,0,0,0,19,20,0,14,14,16,16,0,19,19,0,0,0,16,17,15,15,0,12,12,14,15,0,13,13,16,17,0,12,12,17,17,0,17,16,0,0,0,18,17,21,0,0,13,13,19,17,0,15,15,20,21,0,12,12,17,17,0,17,17,0,0,0,17,17,0,0,0,13,13,17,18,0,16,16,21,0,0,12,12,17,17,0,17,17,0,0,0,17,17,0,0,0,18,21,0,0,0,0,0,0,0,0,15,15,21,0,0,20,21,0,0,0,18,19,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,21,0,0,21,21,0,0,0,18,19,0,0,0,12,12,16,16,0,13,13,16,17,0,13,13,17,16,0,14,14,16,16,0,16,15,19,18,0,13,13,17,17,0,15,15,18,18,0,12,12,16,16,0,15,15,18,19,0,15,15,17,16,0,13,13,17,17,0,16,16,18,17,0,12,12,17,16,0,15,15,18,18,0,15,15,17,17,0,16,16,0,19,0,0,0,0,0,0,14,14,16,17,0,18,18,0,0,0,15,15,17,17,0,16,16,21,19,0,21,0,21,21,0,13,14,16,16,0,19,19,0,0,0,15,16,16,16,0,11,11,17,16,0,15,14,19,18,0,14,14,19,19,0,18,17,18,20,0,17,17,18,19,0,13,13,17,17,0,16,17,21,18,0,13,13,17,16,0,18,17,19,0,0,16,17,18,18,0,12,12,19,18,0,18,18,20,20,0,13,13,17,17,0,17,17,21,0,0,16,17,17,18,0,18,17,19,18,0,0,0,0,0,0,14,14,17,17,0,19,19,21,0,0,16,16,16,17,0,17,17,19,20,0,0,0,0,21,0,15,15,17,18,0,21,21,0,0,0,17,17,17,18,0,10,10,15,15,0,15,14,17,18,0,14,14,16,16,0,0,0,18,0,0,21,0,19,0,0,13,13,17,16,0,17,17,18,0,0,14,14,16,15,0,0,0,21,0,0,21,0,19,18,0,13,13,17,17,0,18,18,20,20,0,15,15,16,16,0,0,0,21,21,0,0,0,20,20,0,0,0,19,0,0,0,0,0,0,0,21,20,18,18,0,0,0,0,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,0,0,0,19,18,0,0,0,0,21,0,0,0,18,20,0,18,19,16,17,0,21,19,17,17,0,0,21,18,18,0,0,21,20,19,0,0,0,20,20,0,0,21,17,17,0,0,0,19,19,0,20,20,17,17,0,0,0,0,20,0,0,20,18,18,0,21,20,17,17,0,0,0,20,21,0,19,0,17,17,0,0,21,0,0,0,20,0,18,19,0,0,0,21,21,0,0,0,0,21,0,20,20,17,17,0,0,0,0,0,0,21,0,18,17,0,0,0,20,19,0,0,0,0,21,0,20,20,17,17,0,0,0,0,0,0,21,21,18,18,0,12,12,15,14,0,14,14,17,17,0,14,14,17,16,0,18,18,21,0,0,19,20,0,0,0,13,13,18,17,0,16,16,19,18,0,13,13,17,17,0,17,17,0,0,0,17,17,21,0,0,13,13,17,17,0,17,17,21,20,0,13,13,18,17,0,18,19,21,21,0,19,18,0,0,0,18,17,0,0,0,0,0,0,0,0,15,16,0,0,0,21,21,0,0,0,20,18,21,0,0,17,18,0,0,0,0,0,0,0,0,15,16,0,0,0,0,20,0,0,0,0,19,0,0,0,15,15,18,19,0,18,17,21,0,0,16,18,0,20,0,17,18,21,0,0,18,20,0,0,0,16,16,21,21,0,19,20,21,0,0,16,15,0,21,0,18,20,0,0,0,18,19,0,0,0,16,15,21,21,0,21,0,0,0,0,16,15,21,0,0,20,19,0,0,0,18,21,21,0,0,20,18,0,0,0,0,0,0,0,0,16,16,0,20,0,21,0,0,0,0,17,18,20,21,0,18,18,21,21,0,0,0,0,0,0,16,16,20,0,0,0,21,0,0,0,21,18,0,0,0,12,12,20,17,0,15,15,19,18,0,14,14,19,18,0,18,17,21,19,0,17,17,21,17,0,13,13,21,19,0,16,17,20,19,0,13,13,16,16,0,17,17,20,21,0,16,16,19,17,0,13,13,18,18,0,17,19,19,19,0,13,13,17,17,0,18,18,0,19,0,16,17,18,18,0,16,17,19,21,0,0,0,0,0,0,15,15,16,17,0,20,19,21,0,0,17,17,17,17,0,17,17,21,19,0,0,0,0,0,0,15,15,17,17,0,21,0,0,0,0,18,18,17,17,0,10,10,15,15,0,15,15,17,17,0,15,14,16,16,0,0,0,21,19,0,21,21,19,21,0,13,13,17,16,0,17,17,18,19,0,14,15,16,15,0,0,0,21,19,0,21,21,18,19,0,14,14,16,17,0,18,18,18,19,0,15,15,15,16,0,0,21,0,21,0,0,0,19,20,0,0,0,21,19,0,0,0,0,0,0,21,21,19,17,0,0,0,0,0,0,0,0,21,21,0,21,0,0,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,0,0,19,0,21,18,18,17,0,21,0,20,20,0,0,0,18,20,0,0,21,18,21,0,0,0,21,18,0,0,0,0,19,0,0,0,21,21,0,20,21,17,19,0,21,0,21,0,0,21,0,18,18,0,20,21,17,18,0,0,0,21,19,0,20,21,17,18,0,0,0,21,21,0,0,0,20,19,0,0,0,21,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,21,19,18,0,21,21,19,0,0,0,0,21,0,0,21,21,18,17,0,0,0,0,0,0,21,0,21,18,0,12,12,14,14,0,15,14,17,17,0,14,14,17,16,0,19,17,0,0,0,19,19,0,0,0,13,13,17,17,0,17,17,20,20,0,13,13,18,18,0,18,17,0,0,0,18,21,0,0,0,13,13,17,17,0,18,18,21,20,0,14,14,18,19,0,19,18,21,0,0,19,19,0,0,0,20,18,20,0,0,0,0,0,0,0,15,16,0,0,0,21,21,0,0,0,19,19,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,0,21,0,0,0,0,0,0,19,20,0,0,0,15,15,20,21,0,17,17,21,21,0,17,17,0,0,0,19,18,0,0,0,18,19,0,0,0,17,16,0,21,0,0,20,0,0,0,16,16,0,20,0,19,19,0,21,0,19,18,0,21,0,16,16,0,0,0,21,21,0,0,0,16,16,0,0,0,21,21,0,0,0,19,19,0,0,0,20,0,0,0,0,0,0,0,0,0,17,17,0,21,0,0,20,0,0,0,20,18,21,21,0,19,18,0,20,0,0,0,0,0,0,16,17,21,0,0,0,21,0,0,0,19,20,21,20,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,3,4,9,9,10,12,12,12,11,10,12,12,13,12,11,13,12,11,11,11,12,12,12,11,11,13,13,13,13,11,12,12,14,14,12,13,13,13,13,11,13,13,13,13,11,13,13,13,13,11,13,13,13,13,11,12,12,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,13,13,13,13,12,12,13,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,13,13,13,13,12,13,13,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,10,10,10,10,12,10,10,11,11,12,9,9,11,11,13,11,11,10,10,13,10,10,10,10,13,11,11,12,12,13,10,10,12,12,14,12,11,12,12,13,11,11,11,12,13,12,12,12,12,13,11,11,12,12,13,10,10,12,12,14,11,11,12,12,13,11,11,12,12,13,11,11,12,12,14,12,12,12,12,14,10,10,11,11,14,12,11,11,11,13,11,11,11,11,13,12,12,11,11,14,12,12,12,11,14,10,10,11,11,14,12,11,11,11,13,11,11,11,11,13,12,12,11,11,11,11,11,10,10,12,10,11,9,9,12,12,12,11,11,13,12,12,9,9,13,13,13,10,10,13,13,13,12,12,13,13,13,14,14,13,12,12,11,11,14,13,13,12,12,14,13,13,11,11,13,13,13,12,11,13,13,13,14,14,13,12,12,10,10,14,13,13,11,11,13,13,13,10,10,13,13,13,11,11,14,13,13,14,14,14,12,12,10,10,13,13,13,11,11,13,13,13,10,10,13,13,13,11,11,14,13,13,14,14,14,13,13,10,10,13,13,13,11,11,13,13,13,10,10,14,12,12,8,8,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,12,12,7,7,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,13,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,14,13,12,9,9,14,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,13,13,9,9,14,13,13,9,9,14,12,12,8,8,13,13,13,8,8,14,14,13,9,9,14,14,13,7,7,14,14,14,8,8,14,14,14,10,10,15,14,14,12,12,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,14,14,14,10,9,15,14,14,12,12,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,15,14,15,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,14,15,14,10,10,15,14,14,11,11,14,14,14,8,8,15,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,16,15,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,16,17,13,13,17,16,16,14,14,17,17,16,12,12,18,16,16,13,13,17,16,17,12,12,17,17,17,13,13,18,16,16,14,14,18,17,17,12,12,17,17,17,13,13,18,17,17,13,13,17,17,17,13,13,17,16,16,14,14,17,17,17,12,12,16,16,17,13,13,17,17,16,12,12,18,17,17,13,13,18,16,16,14,14,18,17,17,12,12,19,16,17,13,13,17,16,17,12,12,13,14,14,10,10,16,14,14,13,13,17,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,16,15,14,14,16,16,16,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,16,15,14,14,16,16,16,15,15,18,15,15,13,13,16,16,15,14,14,17,15,15,14,13,17,15,15,14,14,16,16,16,15,15,18,15,14,13,13,17,15,15,14,14,18,14,15,13,13,18,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,13,11,11,10,10,16,14,14,13,13,17,14,15,14,14,17,15,15,12,12,17,14,14,12,12,16,15,15,14,14,16,14,14,14,14,16,15,15,14,14,16,15,15,14,14,16,15,15,14,14,16,15,15,14,14,16,15,14,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,15,16,14,14,16,14,14,14,14,17,15,15,13,13,17,15,15,13,13,16,15,15,13,13,17,16,16,14,14,17,15,14,15,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,14,14,14,9,9,14,14,14,18,19,14,15,15,19,18,14,14,14,19,19,15,14,14,19,19,15,16,16,19,19,15,16,16,19,19,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,18,19,15,15,16,19,20,15,15,15,19,18,15,15,15,18,18,15,16,16,21,20,15,15,15,19,19,15,15,15,19,19,15,15,14,19,20,15,15,15,20,19,15,16,16,19,20,15,15,15,19,19,15,15,15,20,21,15,14,15,19,19,14,12,12,9,9,14,14,15,21,19,14,14,14,18,19,14,15,15,19,20,14,14,14,19,19,15,15,15,19,20,15,15,14,21,19,15,15,15,20,19,15,14,15,20,21,15,15,15,18,18,15,15,15,20,21,16,14,14,18,19,15,15,15,20,19,15,15,15,18,21,15,15,15,19,19,15,15,15,19,20,16,15,14,20,19,15,16,15,19,19,15,15,15,19,0,14,15,15,19,19,15,15,15,19,19,15,15,14,20,19,15,15,15,20,19,15,15,15,19,19,15,15,15,20,19,12,12,12,13,13,16,15,16,11,11,16,16,16,12,12,17,16,16,11,11,17,16,16,12,11,17,17,17,13,13,18,16,16,14,14,18,18,17,13,13,17,16,16,13,13,17,17,17,13,13,17,16,17,12,12,17,15,16,13,13,17,16,17,12,12,17,16,16,13,12,17,16,16,12,12,18,17,17,13,13,18,16,16,13,14,18,17,17,12,12,17,16,16,12,12,17,17,17,12,12,18,17,17,13,13,17,16,16,14,14,17,17,17,12,12,17,16,16,12,12,18,17,17,12,12,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,16,14,14,13,13,16,14,14,13,13,17,16,15,15,15,16,15,16,16,15,17,15,15,14,14,17,15,15,15,15,17,15,15,14,14,17,15,15,14,14,16,15,16,16,16,17,15,15,14,14,16,15,15,14,15,16,15,15,14,14,17,15,15,15,15,16,16,16,15,16,18,15,14,13,14,17,15,15,14,14,17,14,14,13,13,17,15,15,14,14,16,15,15,15,15,17,15,14,14,14,17,15,15,14,14,17,14,14,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,13,13,16,14,14,12,12,16,14,14,12,12,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,16,15,15,14,13,16,15,15,13,13,16,15,15,13,13,16,14,14,14,14,16,15,15,13,13,16,14,15,13,13,17,15,15,13,13,17,15,15,13,13,16,14,14,14,14,17,15,15,12,12,17,14,15,13,13,17,15,15,12,12,16,15,15,13,13,17,14,14,14,14,17,15,15,12,12,17,15,15,13,13,16,15,15,12,12,14,15,15,8,8,14,14,14,19,18,14,15,15,19,20,14,14,14,19,19,14,14,15,19,20,15,16,15,19,21,15,16,16,21,19,15,15,15,20,19,15,16,16,19,20,15,15,15,19,18,15,16,15,20,19,15,16,16,19,20,15,15,15,19,19,15,16,15,20,20,14,15,15,19,19,15,15,15,21,19,15,17,16,19,20,15,14,15,0,21,15,15,15,19,20,14,14,14,19,19,15,15,15,20,19,15,16,16,19,19,15,15,15,19,18,15,15,15,20,19,14,14,15,18,18,14,12,12,9,9,14,14,14,18,18,14,14,14,18,18,14,15,14,19,18,14,14,14,19,18,15,15,15,19,20,15,14,14,18,18,15,15,15,20,19,15,15,15,18,20,15,15,15,19,18,15,15,15,19,19,15,14,14,19,21,15,15,15,20,20,15,15,15,18,19,14,15,15,19,20,15,15,15,20,19,15,14,14,19,21,15,15,15,18,19,15,14,15,20,19,14,15,15,21,21,14,15,15,19,20,15,14,14,19,20,15,15,15,19,20,15,15,14,20,20,14,15,15,20,19,13,12,12,13,13,17,16,16,11,11,17,16,16,12,12,18,17,16,11,11,18,16,16,11,11,17,17,17,13,13,18,16,16,13,13,18,17,17,12,12,18,16,16,13,13,18,17,17,12,12,18,17,17,13,13,18,16,16,14,14,18,16,17,12,12,18,17,17,13,13,17,17,17,12,12,17,17,17,12,12,17,16,15,13,13,18,16,16,11,11,17,16,16,12,12,17,16,17,11,11,18,17,17,13,12,17,16,16,13,13,17,17,17,12,12,17,16,17,12,12,18,17,17,11,11,14,14,14,9,9,16,14,14,13,13,17,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,15,15,14,14,16,16,16,16,15,18,15,15,14,14,17,16,15,15,15,17,15,15,14,14,17,15,15,14,15,16,16,16,15,16,18,15,15,14,14,17,15,15,14,15,17,15,15,14,14,17,15,15,14,14,16,16,16,15,16,17,14,14,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,14,14,13,13,17,15,15,14,14,17,14,14,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,12,13,17,15,14,11,11,17,14,14,11,11,17,15,15,13,14,17,14,14,14,14,17,15,15,13,13,17,14,14,13,13,17,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,18,14,15,13,13,17,15,15,13,13,16,15,15,13,13,17,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,16,15,13,13,17,14,14,13,13,17,15,15,12,12,16,15,15,12,12,16,15,15,12,12,13,15,15,8,8,14,14,14,18,19,14,15,15,19,20,14,14,14,18,18,14,15,15,18,18,15,16,16,19,19,15,16,17,20,20,15,15,15,19,19,15,16,16,18,20,15,15,15,19,19,15,15,16,18,18,15,17,16,19,19,15,15,15,18,21,15,16,16,21,20,15,15,15,19,21,15,16,15,20,19,15,16,17,20,20,15,15,15,19,19,15,16,16,21,20,15,15,15,19,20,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,16,15,20,21,15,15,15,21,19,14,12,12,8,8,14,14,14,20,18,14,13,13,19,19,14,14,14,19,18,15,14,14,19,20,14,15,15,20,20,15,14,14,21,20,15,15,15,20,20,15,15,14,21,19,15,15,15,19,19,15,15,15,19,20,15,14,14,20,20,15,15,15,19,20,15,14,14,19,20,15,15,15,20,20,15,15,15,20,19,15,14,14,20,21,15,15,15,20,21,15,14,14,20,0,15,16,15,20,21,15,15,15,19,20,15,14,14,19,19,15,15,15,19,20,15,15,15,19,19,15,15,15,18,20,13,12,12,13,13,18,16,17,12,12,17,16,16,12,12,17,17,16,11,11,18,16,16,11,11,17,17,18,13,13,18,16,16,14,14,18,17,17,13,13,18,16,16,13,13,18,17,17,12,12,17,17,16,13,13,17,16,16,13,14,18,17,17,12,12,18,16,16,12,13,17,16,17,12,12,17,18,17,13,13,18,16,16,13,13,18,17,17,12,12,17,16,16,12,12,17,17,17,11,11,17,16,17,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,18,16,17,11,11,14,14,14,9,9,16,14,15,13,13,17,15,15,14,14,17,14,14,12,12,16,14,14,13,13,18,15,15,15,15,17,15,16,15,16,18,15,15,14,14,17,15,16,15,15,17,15,15,14,14,18,15,15,14,14,16,16,16,16,15,17,15,15,14,14,16,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,16,16,15,15,17,15,14,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,18,15,14,14,14,17,15,15,14,14,18,15,15,13,13,13,12,12,11,11,16,14,14,12,12,16,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,14,13,13,17,15,15,13,13,17,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,17,15,16,13,13,17,14,14,14,13,17,15,15,12,12,16,15,14,12,12,17,15,15,12,12,16,15,16,13,13,16,14,14,14,13,17,15,15,12,12,16,14,14,12,12,17,15,15,12,12,14,15,15,8,8,14,14,14,18,18,14,15,15,19,18,14,14,14,18,18,14,15,15,19,20,15,16,15,21,18,15,16,16,18,0,15,15,15,19,20,15,16,16,20,0,15,16,15,19,18,15,15,15,19,19,15,16,16,21,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,18,15,16,16,20,20,15,14,15,20,19,15,15,15,19,20,15,15,15,19,19,15,16,15,19,20,15,16,16,19,20,15,15,15,19,19,15,16,15,20,20,15,15,15,20,18,13,12,12,8,8,14,14,14,19,20,14,14,14,19,19,14,15,15,20,20,14,14,14,18,19,15,15,15,20,0,15,14,14,18,20,15,15,15,19,19,15,15,15,21,19,15,15,15,19,20,15,15,15,20,21,15,14,14,20,19,15,15,15,20,19,15,15,14,21,19,15,15,15,19,18,15,15,15,20,19,15,14,14,19,19,15,15,16,20,19,15,15,15,20,0,15,15,15,19,21,15,15,15,22,20,15,14,14,22,19,15,15,15,19,20,15,14,14,20,19,14,15,15,19,21,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,6,6,6,8,8,6,8,8,7,9,9,10,11,11,8,8,8,7,9,9,11,12,12,9,9,9,6,7,7,10,11,11,10,11,11,10,11,11,13,13,13,12,12,12,10,12,11,14,14,14,12,12,12,6,5,5,9,6,6,9,6,6,9,7,7,12,10,10,11,7,6,9,7,7,13,11,11,12,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,9,9,12,11,11,15,14,14,15,11,11,8,7,7,12,11,11,12,11,11,11,11,11,14,13,14,14,12,12,12,11,11,16,15,15,14,12,12,0,10,10,0,12,12,0,12,12,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,13,11,11,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,15,10,10,9,7,7,13,11,12,13,12,11,12,11,11,15,14,14,14,12,12,13,12,12,16,15,15,15,12,12,0,11,11,0,12,12,0,12,13,0,12,12,0,15,15,0,12,12,0,12,12,0,16,15,0,12,12,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,3,3,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,10,10,0,10,10,0,10,10,0,7,7,0,7,7,0,6,6,0,8,8,0,7,7,0,8,8,0,8,8,0,7,7,0,8,8,0,7,7,0,9,9,0,8,9,0,10,10,0,9,9,0,10,10,0,10,11,0,9,9,0,10,10,0,9,9,0,11,11,0,12,12,0,12,12,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,8,8,0,12,12,0,12,12,0,13,13,0,13,13,0,13,13,0,13,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,12,0,12,12,0,9,9,0,12,12,0,13,13,0,14,14,0,13,13,0,14,14,0,14,14,0,13,13,0,14,14,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,5,5,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,13,13,0,8,8,0,6,6,0,11,11,0,12,12,0,12,12,0,14,14,0,11,12,0,12,12,0,15,15,0,12,12,0,5,5,0,5,5,0,6,6,0,7,7,0,10,10,0,6,6,0,7,7,0,11,11,0,6,6,0,7,7,0,11,11,0,12,11,0,11,11,0,14,14,0,10,10,0,12,12,0,15,15,0,12,12,0,6,6,0,12,12,0,12,12,0,12,12,0,14,14,0,11,11,0,12,12,0,16,16,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,11,11,0,16,16,0,11,11,0,6,6,0,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,13,13,0,15,15,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,3,7,9,12,16,16,3,2,5,7,11,14,15,7,4,5,6,9,12,15,8,5,5,5,8,10,14,9,7,6,6,8,10,12,12,10,10,7,6,8,10,15,12,10,6,4,7,9,0,0,0,0,0,0,0,0,0,0,0,0,249,213,64,0,0,0,0,0,64,223,64,0,0,0,0,0,136,227,64,0,0,0,0,0,112,231,64,0,0,0,0,0,88,235,64,0,0,0,0,0,64,239,64,0,0,0,0,0,136,243,64,0,0,0,0,0,112,247,64,0,0,0,0,0,88,251,64,0,0,0,0,0,64,255,64,0,0,0,0,0,136,3,65,0,0,0,0,136,132,14,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,0,0,12,195,0,0,12,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,128,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+541448);
/* memory initializer */ allocate([128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,66,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,183,29,193,4,110,59,130,9,217,38,67,13,220,118,4,19,107,107,197,23,178,77,134,26,5,80,71,30,184,237,8,38,15,240,201,34,214,214,138,47,97,203,75,43,100,155,12,53,211,134,205,49,10,160,142,60,189,189,79,56,112,219,17,76,199,198,208,72,30,224,147,69,169,253,82,65,172,173,21,95,27,176,212,91,194,150,151,86,117,139,86,82,200,54,25,106,127,43,216,110,166,13,155,99,17,16,90,103,20,64,29,121,163,93,220,125,122,123,159,112,205,102,94,116,224,182,35,152,87,171,226,156,142,141,161,145,57,144,96,149,60,192,39,139,139,221,230,143,82,251,165,130,229,230,100,134,88,91,43,190,239,70,234,186,54,96,169,183,129,125,104,179,132,45,47,173,51,48,238,169,234,22,173,164,93,11,108,160,144,109,50,212,39,112,243,208,254,86,176,221,73,75,113,217,76,27,54,199,251,6,247,195,34,32,180,206,149,61,117,202,40,128,58,242,159,157,251,246,70,187,184,251,241,166,121,255,244,246,62,225,67,235,255,229,154,205,188,232,45,208,125,236,119,112,134,52,192,109,71,48,25,75,4,61,174,86,197,57,171,6,130,39,28,27,67,35,197,61,0,46,114,32,193,42,207,157,142,18,120,128,79,22,161,166,12,27,22,187,205,31,19,235,138,1,164,246,75,5,125,208,8,8,202,205,201,12,7,171,151,120,176,182,86,124,105,144,21,113,222,141,212,117,219,221,147,107,108,192,82,111,181,230,17,98,2,251,208,102,191,70,159,94,8,91,94,90,209,125,29,87,102,96,220,83,99,48,155,77,212,45,90,73,13,11,25,68,186,22,216,64,151,198,165,172,32,219,100,168,249,253,39,165,78,224,230,161,75,176,161,191,252,173,96,187,37,139,35,182,146,150,226,178,47,43,173,138,152,54,108,142,65,16,47,131,246,13,238,135,243,93,169,153,68,64,104,157,157,102,43,144,42,123,234,148,231,29,180,224,80,0,117,228,137,38,54,233,62,59,247,237,59,107,176,243,140,118,113,247,85,80,50,250,226,77,243,254,95,240,188,198,232,237,125,194,49,203,62,207,134,214,255,203,131,134,184,213,52,155,121,209,237,189,58,220,90,160,251,216,238,224,12,105,89,253,205,109,128,219,142,96,55,198,79,100,50,150,8,122,133,139,201,126,92,173,138,115,235,176,75,119,86,13,4,79,225,16,197,75,56,54,134,70,143,43,71,66,138,123,0,92,61,102,193,88,228,64,130,85,83,93,67,81,158,59,29,37,41,38,220,33,240,0,159,44,71,29,94,40,66,77,25,54,245,80,216,50,44,118,155,63,155,107,90,59,38,214,21,3,145,203,212,7,72,237,151,10,255,240,86,14,250,160,17,16,77,189,208,20,148,155,147,25,35,134,82,29,14,86,47,241,185,75,238,245,96,109,173,248,215,112,108,252,210,32,43,226,101,61,234,230,188,27,169,235,11,6,104,239,182,187,39,215,1,166,230,211,216,128,165,222,111,157,100,218,106,205,35,196,221,208,226,192,4,246,161,205,179,235,96,201,126,141,62,189,201,144,255,185,16,182,188,180,167,171,125,176,162,251,58,174,21,230,251,170,204,192,184,167,123,221,121,163,198,96,54,155,113,125,247,159,168,91,180,146,31,70,117,150,26,22,50,136,173,11,243,140,116,45,176,129,195,48,113,133,153,144,138,93,46,141,75,89,247,171,8,84,64,182,201,80,69,230,142,78,242,251,79,74,43,221,12,71,156,192,205,67,33,125,130,123,150,96,67,127,79,70,0,114,248,91,193,118,253,11,134,104,74,22,71,108,147,48,4,97,36,45,197,101,233,75,155,17,94,86,90,21,135,112,25,24,48,109,216,28,53,61,159,2,130,32,94,6,91,6,29,11,236,27,220,15,81,166,147,55,230,187,82,51,63,157,17,62,136,128,208,58,141,208,151,36,58,205,86,32,227,235,21,45,84,246,212,41,121,38,169,197,206,59,104,193,23,29,43,204,160,0,234,200,165,80,173,214,18,77,108,210,203,107,47,223,124,118,238,219,193,203,161,227,118,214,96,231,175,240,35,234,24,237,226,238,29,189,165,240,170,160,100,244,115,134,39,249,196,155,230,253,9,253,184,137,190,224,121,141,103,198,58,128,208,219,251,132,213,139,188,154,98,150,125,158,187,176,62,147,12,173,255,151,177,16,176,175,6,13,113,171,223,43,50,166,104,54,243,162,109,102,180,188,218,123,117,184,3,93,54,181,180,64,247,177,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0,255,255,255,1,255,255,255,3,255,255,255,7,255,255,255,15,255,255,255,31,255,255,255,63,255,255,255,127,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,108,101,120,121,95,101,110,99,111,100,101,114,95,115,116,97,114,116,40,41,59,32,105,110,105,116,105,97,108,105,122,105,110,103,32,118,111,114,98,105,115,32,101,110,99,111,100,101,114,32,119,105,116,104,32,115,97,109,112,108,101,95,114,97,116,101,32,61,32,37,105,32,72,122,32,97,110,100,32,118,98,114,32,113,117,97,108,105,116,121,32,61,32,37,51,46,50,102,10,0,0,0,0,0,108,101,120,121,45,99,111,100,101,114,0,0,0,0,0,0,123,32,112,111,115,116,77,101,115,115,97,103,101,40,123,32,39,109,101,115,115,97,103,101,39,32,58,32,39,98,117,102,102,101,114,39,44,32,39,100,97,116,97,39,32,58,32,72,69,65,80,85,56,46,115,117,98,97,114,114,97,121,40,36,48,44,36,49,41,32,125,41,59,32,125,0,0,0,0,0,123,32,112,111,115,116,77,101,115,115,97,103,101,40,123,32,39,109,101,115,115,97,103,101,39,32,58,32,39,105,110,105,116,105,97,108,105,122,101,100,39,32,125,41,59,32,125,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,96,116,8,0,80,114,8,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,96,116,8,0,120,114,8,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,96,116,8,0,216,114,8,0,16,118,8,0,152,114,8,0,0,0,0,0,1,0,0,0,0,115,8,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,16,118,8,0,32,115,8,0,0,0,0,0,1,0,0,0,0,115,8,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,16,118,8,0,120,115,8,0,0,0,0,0,1,0,0,0,0,115,8,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,96,116,8,0,208,115,8,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,176,117,8,0,232,115,8,0,224,115,8,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,176,117,8,0,32,116,8,0,16,116,8,0,0,0,0,0,0,0,0,0,72,116,8,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,200,116,8,0,52,0,0,0,60,0,0,0,54,0,0,0,55,0,0,0,61,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,176,117,8,0,160,116,8,0,16,116,8,0,0,0,0,0,118,0,0,0,0,0,0,0,136,116,8,0,216,116,8,0,98,0,0,0,0,0,0,0,136,116,8,0,232,116,8,0,99,0,0,0,0,0,0,0,136,116,8,0,248,116,8,0,104,0,0,0,0,0,0,0,136,116,8,0,8,117,8,0,97,0,0,0,0,0,0,0,136,116,8,0,24,117,8,0,115,0,0,0,0,0,0,0,136,116,8,0,40,117,8,0,116,0,0,0,0,0,0,0,136,116,8,0,56,117,8,0,105,0,0,0,0,0,0,0,136,116,8,0,72,117,8,0,106,0,0,0,0,0,0,0,136,116,8,0,88,117,8,0,108,0,0,0,0,0,0,0,136,116,8,0,104,117,8,0,109,0,0,0,0,0,0,0,136,116,8,0,120,117,8,0,102,0,0,0,0,0,0,0,136,116,8,0,136,117,8,0,100,0,0,0,0,0,0,0,136,116,8,0,152,117,8,0,0,0,0,0,248,117,8,0,52,0,0,0,62,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,176,117,8,0,208,117,8,0,72,116,8,0,0,0,0,0,0,0,0,0,88,118,8,0,52,0,0,0,66,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,176,117,8,0,48,118,8,0,72,116,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,120,8,0,70,0,0,0,71,0,0,0,72,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,176,117,8,0,136,120,8,0,0,0,0,0,0,0,0,0,108,101,120,121,95,101,110,99,111,100,101,114,95,115,116,97,114,116,40,41,59,32,101,114,114,111,114,32,105,110,105,116,105,97,108,105,122,105,110,103,32,118,111,114,98,105,115,32,101,110,99,111,100,101,114,0,108,101,120,121,95,101,110,99,111,100,101,114,95,102,105,110,105,115,104,40,41,59,32,101,110,100,105,110,103,32,115,116,114,101,97,109,0,0,0,0,108,101,120,121,95,101,110,99,111,100,101,114,95,102,105,110,105,115,104,40,41,59,32,99,108,101,97,110,105,110,103,32,117,112,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+551690);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  
  function _rint(x) {
      if (Math.abs(x % 1) !== 0.5) return Math.round(x);
      return x + x % 2 + ((x < 0) ? 1 : -1);
    }var _rintf=_rint;

  var _fabsf=Math_abs;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function __embind_register_void() {
  Module['printErr']('missing function: _embind_register_void'); abort(-1);
  }


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _srand(seed) {
      HEAP32[((___rand_seed)>>2)]=seed
    }

  function __embind_register_bool() {
  Module['printErr']('missing function: _embind_register_bool'); abort(-1);
  }

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function __embind_register_std_string() {
  Module['printErr']('missing function: _embind_register_std_string'); abort(-1);
  }

  
  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  function _emscripten_asm_const_int(code) {
      var args = Array.prototype.slice.call(arguments, 1);
      return Runtime.getAsmConst(code, args.length).apply(null, args) | 0;
    }

  function _emscripten_asm_const(code) {
      Runtime.getAsmConst(code, 0)();
    }

  var _log=Math_log;

  var _emscripten_postinvoke=true;

  var _floor=Math_floor;

  var _sqrt=Math_sqrt;

  function __embind_register_integer() {
  Module['printErr']('missing function: _embind_register_integer'); abort(-1);
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _sin=Math_sin;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _exp=Math_exp;

  var _atan=Math_atan;

  function __embind_register_float() {
  Module['printErr']('missing function: _embind_register_float'); abort(-1);
  }

  var _emscripten_resume=true;

  function __embind_register_emval() {
  Module['printErr']('missing function: _embind_register_emval'); abort(-1);
  }

  var _ceil=Math_ceil;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  var _cos=Math_cos;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function __ZNSt9exceptionD2Ev() {}

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring() {
  Module['printErr']('missing function: _embind_register_std_wstring'); abort(-1);
  }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

   
  Module["_strcpy"] = _strcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function __embind_register_memory_view() {
  Module['printErr']('missing function: _embind_register_memory_view'); abort(-1);
  }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __reallyNegative=env.__reallyNegative;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __embind_register_integer=env.__embind_register_integer;
  var _emscripten_asm_const_int=env._emscripten_asm_const_int;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _atan=env._atan;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var ___setErrNo=env.___setErrNo;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _emscripten_asm_const=env._emscripten_asm_const;
  var __embind_register_void=env.__embind_register_void;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _srand=env._srand;
  var __embind_register_std_string=env.__embind_register_std_string;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var ___cxa_throw=env.___cxa_throw;
  var __embind_register_emval=env.__embind_register_emval;
  var _cos=env._cos;
  var _fputs=env._fputs;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var __embind_register_float=env.__embind_register_float;
  var _log=env._log;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var _printf=env._printf;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __exit=env.__exit;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _rint=env._rint;
  var _sqrt=env._sqrt;
  var _exit=env._exit;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _mdct_init($lookup,$n) {
 $lookup = $lookup|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $9 = 0.0, $acc$02 = 0, $acc$1 = 0, $i$07 = 0, $i$15 = 0, $i1$03 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n|0) / 4)&-1;
 $1 = $0 << 2;
 $2 = (_malloc($1)|0);
 $3 = (($0) + ($n))|0;
 $4 = $3 << 2;
 $5 = (_malloc($4)|0);
 $6 = $n >> 1;
 $7 = (+($n|0));
 $8 = $7;
 $9 = (+Math_log((+$8)));
 $10 = $9 * 1.442695040888963387;
 $11 = (+_rint((+$10)));
 $12 = (~~(($11)));
 $13 = (($lookup) + 4|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$lookup>>2] = $n;
 $14 = (($lookup) + 8|0);
 HEAP32[$14>>2] = $5;
 $15 = (($lookup) + 12|0);
 HEAP32[$15>>2] = $2;
 $16 = ($n|0)>(3);
 if (!($16)) {
  $87 = 4.0 / $7;
  $88 = (($lookup) + 16|0);
  HEAPF32[$88>>2] = $87;
  STACKTOP = sp;return;
 }
 $17 = (+($n|0));
 $18 = 3.141592653589793116 / $17;
 $19 = $n << 1;
 $20 = (+($19|0));
 $21 = 3.141592653589793116 / $20;
 $i$07 = 0;
 while(1) {
  $24 = $i$07 << 2;
  $25 = (+($24|0));
  $26 = $25 * $18;
  $27 = (+Math_cos((+$26)));
  $28 = $27;
  $29 = $i$07 << 1;
  $30 = (($5) + ($29<<2)|0);
  HEAPF32[$30>>2] = $28;
  $31 = (+Math_sin((+$26)));
  $32 = $31;
  $33 = -$32;
  $34 = $29 | 1;
  $35 = (($5) + ($34<<2)|0);
  HEAPF32[$35>>2] = $33;
  $36 = (+($34|0));
  $37 = $36 * $21;
  $38 = (+Math_cos((+$37)));
  $39 = $38;
  $40 = (($29) + ($6))|0;
  $41 = (($5) + ($40<<2)|0);
  HEAPF32[$41>>2] = $39;
  $42 = (+Math_sin((+$37)));
  $43 = $42;
  $44 = (($40) + 1)|0;
  $45 = (($5) + ($44<<2)|0);
  HEAPF32[$45>>2] = $43;
  $46 = (($i$07) + 1)|0;
  $47 = ($46|0)<($0|0);
  if ($47) {
   $i$07 = $46;
  } else {
   break;
  }
 }
 $22 = (($n|0) / 8)&-1;
 $23 = ($n|0)>(7);
 if ($23) {
  $i$15 = 0;
 } else {
  $87 = 4.0 / $7;
  $88 = (($lookup) + 16|0);
  HEAPF32[$88>>2] = $87;
  STACKTOP = sp;return;
 }
 while(1) {
  $48 = $i$15 << 2;
  $49 = $48 | 2;
  $50 = (+($49|0));
  $51 = $50 * $18;
  $52 = (+Math_cos((+$51)));
  $53 = $52 * 0.5;
  $54 = $53;
  $55 = $i$15 << 1;
  $56 = (($55) + ($n))|0;
  $57 = (($5) + ($56<<2)|0);
  HEAPF32[$57>>2] = $54;
  $58 = (+Math_sin((+$51)));
  $59 = $58 * -0.5;
  $60 = $59;
  $61 = (($56) + 1)|0;
  $62 = (($5) + ($61<<2)|0);
  HEAPF32[$62>>2] = $60;
  $63 = (($i$15) + 1)|0;
  $64 = ($63|0)<($22|0);
  if ($64) {
   $i$15 = $63;
  } else {
   break;
  }
 }
 $65 = (($12) + -1)|0;
 $66 = 1 << $65;
 $67 = (($66) + -1)|0;
 $68 = (($12) + -2)|0;
 $69 = 1 << $68;
 $i1$03 = 0;
 while(1) {
  $71 = $69;$acc$02 = 0;$j$01 = 0;
  while(1) {
   $70 = $71 & $i1$03;
   $72 = ($70|0)==(0);
   if ($72) {
    $acc$1 = $acc$02;
   } else {
    $73 = 1 << $j$01;
    $74 = $acc$02 | $73;
    $acc$1 = $74;
   }
   $75 = (($j$01) + 1)|0;
   $76 = $69 >> $75;
   $77 = ($76|0)==(0);
   if ($77) {
    break;
   } else {
    $71 = $76;$acc$02 = $acc$1;$j$01 = $75;
   }
  }
  $78 = $acc$1 ^ -1;
  $79 = $67 & $78;
  $80 = (($79) + -1)|0;
  $81 = $i1$03 << 1;
  $82 = (($2) + ($81<<2)|0);
  HEAP32[$82>>2] = $80;
  $83 = $81 | 1;
  $84 = (($2) + ($83<<2)|0);
  HEAP32[$84>>2] = $acc$1;
  $85 = (($i1$03) + 1)|0;
  $86 = ($85|0)<($22|0);
  if ($86) {
   $i1$03 = $85;
  } else {
   break;
  }
 }
 $87 = 4.0 / $7;
 $88 = (($lookup) + 16|0);
 HEAPF32[$88>>2] = $87;
 STACKTOP = sp;return;
}
function _mdct_butterflies($init$0$1$val,$init$0$2$val,$x,$points) {
 $init$0$1$val = $init$0$1$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $x = $x|0;
 $points = $points|0;
 var $$0$i = 0, $$0$i5 = 0, $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i2 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2$i = 0;
 var $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum3$i = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum4 = 0, $$sum45$i = 0, $$sum5 = 0, $$sum6 = 0, $$sum6$i = 0;
 var $$sum7 = 0, $$sum7$i = 0, $$sum8 = 0, $$sum8$i = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0;
 var $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0;
 var $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0;
 var $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0;
 var $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0;
 var $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0;
 var $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0;
 var $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0;
 var $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0;
 var $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0;
 var $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0;
 var $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0;
 var $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0;
 var $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0;
 var $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0;
 var $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0;
 var $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond39 = 0, $i$038 = 0, $j$035 = 0, $j$133 = 0, $x1$0$i = 0, $x1$0$i4 = 0, $x2$0$i = 0, $x2$0$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($init$0$1$val) + -6)|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $$sum$i = (($points) + -8)|0;
  $2 = (($x) + ($$sum$i<<2)|0);
  $3 = $points >> 1;
  $$sum1$i = (($3) + -8)|0;
  $4 = (($x) + ($$sum1$i<<2)|0);
  $$0$i = $init$0$2$val;$x1$0$i = $2;$x2$0$i = $4;
  while(1) {
   $5 = (($x1$0$i) + 24|0);
   $6 = +HEAPF32[$5>>2];
   $7 = (($x2$0$i) + 24|0);
   $8 = +HEAPF32[$7>>2];
   $9 = $6 - $8;
   $10 = (($x1$0$i) + 28|0);
   $11 = +HEAPF32[$10>>2];
   $12 = (($x2$0$i) + 28|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $11 - $13;
   $15 = $6 + $8;
   HEAPF32[$5>>2] = $15;
   $16 = +HEAPF32[$12>>2];
   $17 = $11 + $16;
   HEAPF32[$10>>2] = $17;
   $18 = (($$0$i) + 4|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $14 * $19;
   $21 = +HEAPF32[$$0$i>>2];
   $22 = $9 * $21;
   $23 = $20 + $22;
   HEAPF32[$7>>2] = $23;
   $24 = +HEAPF32[$$0$i>>2];
   $25 = $14 * $24;
   $26 = +HEAPF32[$18>>2];
   $27 = $9 * $26;
   $28 = $25 - $27;
   HEAPF32[$12>>2] = $28;
   $29 = (($x1$0$i) + 16|0);
   $30 = +HEAPF32[$29>>2];
   $31 = (($x2$0$i) + 16|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $30 - $32;
   $34 = (($x1$0$i) + 20|0);
   $35 = +HEAPF32[$34>>2];
   $36 = (($x2$0$i) + 20|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $35 - $37;
   $39 = $30 + $32;
   HEAPF32[$29>>2] = $39;
   $40 = +HEAPF32[$36>>2];
   $41 = $35 + $40;
   HEAPF32[$34>>2] = $41;
   $42 = (($$0$i) + 20|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $38 * $43;
   $45 = (($$0$i) + 16|0);
   $46 = +HEAPF32[$45>>2];
   $47 = $33 * $46;
   $48 = $44 + $47;
   HEAPF32[$31>>2] = $48;
   $49 = +HEAPF32[$45>>2];
   $50 = $38 * $49;
   $51 = +HEAPF32[$42>>2];
   $52 = $33 * $51;
   $53 = $50 - $52;
   HEAPF32[$36>>2] = $53;
   $54 = (($x1$0$i) + 8|0);
   $55 = +HEAPF32[$54>>2];
   $56 = (($x2$0$i) + 8|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $55 - $57;
   $59 = (($x1$0$i) + 12|0);
   $60 = +HEAPF32[$59>>2];
   $61 = (($x2$0$i) + 12|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $60 - $62;
   $64 = $55 + $57;
   HEAPF32[$54>>2] = $64;
   $65 = +HEAPF32[$61>>2];
   $66 = $60 + $65;
   HEAPF32[$59>>2] = $66;
   $67 = (($$0$i) + 36|0);
   $68 = +HEAPF32[$67>>2];
   $69 = $63 * $68;
   $70 = (($$0$i) + 32|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $58 * $71;
   $73 = $69 + $72;
   HEAPF32[$56>>2] = $73;
   $74 = +HEAPF32[$70>>2];
   $75 = $63 * $74;
   $76 = +HEAPF32[$67>>2];
   $77 = $58 * $76;
   $78 = $75 - $77;
   HEAPF32[$61>>2] = $78;
   $79 = +HEAPF32[$x1$0$i>>2];
   $80 = +HEAPF32[$x2$0$i>>2];
   $81 = $79 - $80;
   $82 = (($x1$0$i) + 4|0);
   $83 = +HEAPF32[$82>>2];
   $84 = (($x2$0$i) + 4|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $83 - $85;
   $87 = $79 + $80;
   HEAPF32[$x1$0$i>>2] = $87;
   $88 = +HEAPF32[$84>>2];
   $89 = $83 + $88;
   HEAPF32[$82>>2] = $89;
   $90 = (($$0$i) + 52|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $86 * $91;
   $93 = (($$0$i) + 48|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $81 * $94;
   $96 = $92 + $95;
   HEAPF32[$x2$0$i>>2] = $96;
   $97 = +HEAPF32[$93>>2];
   $98 = $86 * $97;
   $99 = +HEAPF32[$90>>2];
   $100 = $81 * $99;
   $101 = $98 - $100;
   HEAPF32[$84>>2] = $101;
   $102 = (($x1$0$i) + -32|0);
   $103 = (($x2$0$i) + -32|0);
   $104 = (($$0$i) + 64|0);
   $105 = ($103>>>0)<($x>>>0);
   if ($105) {
    break;
   } else {
    $$0$i = $104;$x1$0$i = $102;$x2$0$i = $103;
   }
  }
 }
 $106 = (($init$0$1$val) + -7)|0;
 $107 = ($106|0)>(0);
 if ($107) {
  $i$038 = 1;
  while(1) {
   $108 = 1 << $i$038;
   $109 = ($108|0)>(0);
   if ($109) {
    $110 = $points >> $i$038;
    $111 = 4 << $i$038;
    $$sum$i1 = (($110) + -8)|0;
    $112 = $110 >> 1;
    $$sum1$i2 = (($112) + -8)|0;
    $$sum2$i = (($111) + 1)|0;
    $$sum3$i = $111 << 1;
    $$sum45$i = $$sum3$i | 1;
    $$sum6$i = (($$sum3$i) + ($111))|0;
    $$sum7$i = (($$sum6$i) + 1)|0;
    $$sum8$i = (($$sum6$i) + ($111))|0;
    $j$035 = 0;
    while(1) {
     $114 = Math_imul($j$035, $110)|0;
     $115 = (($x) + ($114<<2)|0);
     $$sum = (($$sum$i1) + ($114))|0;
     $116 = (($x) + ($$sum<<2)|0);
     $$sum32 = (($$sum1$i2) + ($114))|0;
     $117 = (($x) + ($$sum32<<2)|0);
     $$0$i5 = $init$0$2$val;$x1$0$i4 = $116;$x2$0$i3 = $117;
     while(1) {
      $118 = (($x1$0$i4) + 24|0);
      $119 = +HEAPF32[$118>>2];
      $120 = (($x2$0$i3) + 24|0);
      $121 = +HEAPF32[$120>>2];
      $122 = $119 - $121;
      $123 = (($x1$0$i4) + 28|0);
      $124 = +HEAPF32[$123>>2];
      $125 = (($x2$0$i3) + 28|0);
      $126 = +HEAPF32[$125>>2];
      $127 = $124 - $126;
      $128 = $119 + $121;
      HEAPF32[$118>>2] = $128;
      $129 = +HEAPF32[$125>>2];
      $130 = $124 + $129;
      HEAPF32[$123>>2] = $130;
      $131 = (($$0$i5) + 4|0);
      $132 = +HEAPF32[$131>>2];
      $133 = $127 * $132;
      $134 = +HEAPF32[$$0$i5>>2];
      $135 = $122 * $134;
      $136 = $133 + $135;
      HEAPF32[$120>>2] = $136;
      $137 = +HEAPF32[$$0$i5>>2];
      $138 = $127 * $137;
      $139 = +HEAPF32[$131>>2];
      $140 = $122 * $139;
      $141 = $138 - $140;
      HEAPF32[$125>>2] = $141;
      $142 = (($$0$i5) + ($111<<2)|0);
      $143 = (($x1$0$i4) + 16|0);
      $144 = +HEAPF32[$143>>2];
      $145 = (($x2$0$i3) + 16|0);
      $146 = +HEAPF32[$145>>2];
      $147 = $144 - $146;
      $148 = (($x1$0$i4) + 20|0);
      $149 = +HEAPF32[$148>>2];
      $150 = (($x2$0$i3) + 20|0);
      $151 = +HEAPF32[$150>>2];
      $152 = $149 - $151;
      $153 = $144 + $146;
      HEAPF32[$143>>2] = $153;
      $154 = +HEAPF32[$150>>2];
      $155 = $149 + $154;
      HEAPF32[$148>>2] = $155;
      $156 = (($$0$i5) + ($$sum2$i<<2)|0);
      $157 = +HEAPF32[$156>>2];
      $158 = $152 * $157;
      $159 = +HEAPF32[$142>>2];
      $160 = $147 * $159;
      $161 = $158 + $160;
      HEAPF32[$145>>2] = $161;
      $162 = +HEAPF32[$142>>2];
      $163 = $152 * $162;
      $164 = +HEAPF32[$156>>2];
      $165 = $147 * $164;
      $166 = $163 - $165;
      HEAPF32[$150>>2] = $166;
      $167 = (($$0$i5) + ($$sum3$i<<2)|0);
      $168 = (($x1$0$i4) + 8|0);
      $169 = +HEAPF32[$168>>2];
      $170 = (($x2$0$i3) + 8|0);
      $171 = +HEAPF32[$170>>2];
      $172 = $169 - $171;
      $173 = (($x1$0$i4) + 12|0);
      $174 = +HEAPF32[$173>>2];
      $175 = (($x2$0$i3) + 12|0);
      $176 = +HEAPF32[$175>>2];
      $177 = $174 - $176;
      $178 = $169 + $171;
      HEAPF32[$168>>2] = $178;
      $179 = +HEAPF32[$175>>2];
      $180 = $174 + $179;
      HEAPF32[$173>>2] = $180;
      $181 = (($$0$i5) + ($$sum45$i<<2)|0);
      $182 = +HEAPF32[$181>>2];
      $183 = $177 * $182;
      $184 = +HEAPF32[$167>>2];
      $185 = $172 * $184;
      $186 = $183 + $185;
      HEAPF32[$170>>2] = $186;
      $187 = +HEAPF32[$167>>2];
      $188 = $177 * $187;
      $189 = +HEAPF32[$181>>2];
      $190 = $172 * $189;
      $191 = $188 - $190;
      HEAPF32[$175>>2] = $191;
      $192 = (($$0$i5) + ($$sum6$i<<2)|0);
      $193 = +HEAPF32[$x1$0$i4>>2];
      $194 = +HEAPF32[$x2$0$i3>>2];
      $195 = $193 - $194;
      $196 = (($x1$0$i4) + 4|0);
      $197 = +HEAPF32[$196>>2];
      $198 = (($x2$0$i3) + 4|0);
      $199 = +HEAPF32[$198>>2];
      $200 = $197 - $199;
      $201 = $193 + $194;
      HEAPF32[$x1$0$i4>>2] = $201;
      $202 = +HEAPF32[$198>>2];
      $203 = $197 + $202;
      HEAPF32[$196>>2] = $203;
      $204 = (($$0$i5) + ($$sum7$i<<2)|0);
      $205 = +HEAPF32[$204>>2];
      $206 = $200 * $205;
      $207 = +HEAPF32[$192>>2];
      $208 = $195 * $207;
      $209 = $206 + $208;
      HEAPF32[$x2$0$i3>>2] = $209;
      $210 = +HEAPF32[$192>>2];
      $211 = $200 * $210;
      $212 = +HEAPF32[$204>>2];
      $213 = $195 * $212;
      $214 = $211 - $213;
      HEAPF32[$198>>2] = $214;
      $215 = (($$0$i5) + ($$sum8$i<<2)|0);
      $216 = (($x1$0$i4) + -32|0);
      $217 = (($x2$0$i3) + -32|0);
      $218 = ($217>>>0)<($115>>>0);
      if ($218) {
       break;
      } else {
       $$0$i5 = $215;$x1$0$i4 = $216;$x2$0$i3 = $217;
      }
     }
     $219 = (($j$035) + 1)|0;
     $exitcond = ($219|0)==($108|0);
     if ($exitcond) {
      break;
     } else {
      $j$035 = $219;
     }
    }
   }
   $220 = (($i$038) + 1)|0;
   $exitcond39 = ($220|0)==($0|0);
   if ($exitcond39) {
    break;
   } else {
    $i$038 = $220;
   }
  }
 }
 $113 = ($points|0)>(0);
 if ($113) {
  $j$133 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $221 = (($x) + ($j$133<<2)|0);
  $$sum1 = $j$133 | 30;
  $222 = (($x) + ($$sum1<<2)|0);
  $223 = +HEAPF32[$222>>2];
  $$sum2 = $j$133 | 14;
  $224 = (($x) + ($$sum2<<2)|0);
  $225 = +HEAPF32[$224>>2];
  $226 = $223 - $225;
  $$sum3 = $j$133 | 31;
  $227 = (($x) + ($$sum3<<2)|0);
  $228 = +HEAPF32[$227>>2];
  $$sum4 = $j$133 | 15;
  $229 = (($x) + ($$sum4<<2)|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $228 - $230;
  $232 = $223 + $225;
  HEAPF32[$222>>2] = $232;
  $233 = $228 + $230;
  HEAPF32[$227>>2] = $233;
  HEAPF32[$224>>2] = $226;
  HEAPF32[$229>>2] = $231;
  $$sum5 = $j$133 | 28;
  $234 = (($x) + ($$sum5<<2)|0);
  $235 = +HEAPF32[$234>>2];
  $$sum6 = $j$133 | 12;
  $236 = (($x) + ($$sum6<<2)|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $235 - $237;
  $$sum7 = $j$133 | 29;
  $239 = (($x) + ($$sum7<<2)|0);
  $240 = +HEAPF32[$239>>2];
  $$sum8 = $j$133 | 13;
  $241 = (($x) + ($$sum8<<2)|0);
  $242 = +HEAPF32[$241>>2];
  $243 = $240 - $242;
  $244 = $235 + $237;
  HEAPF32[$234>>2] = $244;
  $245 = $240 + $242;
  HEAPF32[$239>>2] = $245;
  $246 = $238 * 0.923879504203796386718;
  $247 = $243 * 0.382683426141738891602;
  $248 = $246 - $247;
  HEAPF32[$236>>2] = $248;
  $249 = $238 * 0.382683426141738891602;
  $250 = $243 * 0.923879504203796386718;
  $251 = $249 + $250;
  HEAPF32[$241>>2] = $251;
  $$sum9 = $j$133 | 26;
  $252 = (($x) + ($$sum9<<2)|0);
  $253 = +HEAPF32[$252>>2];
  $$sum10 = $j$133 | 10;
  $254 = (($x) + ($$sum10<<2)|0);
  $255 = +HEAPF32[$254>>2];
  $256 = $253 - $255;
  $$sum11 = $j$133 | 27;
  $257 = (($x) + ($$sum11<<2)|0);
  $258 = +HEAPF32[$257>>2];
  $$sum12 = $j$133 | 11;
  $259 = (($x) + ($$sum12<<2)|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $258 - $260;
  $262 = $253 + $255;
  HEAPF32[$252>>2] = $262;
  $263 = $258 + $260;
  HEAPF32[$257>>2] = $263;
  $264 = $256 - $261;
  $265 = $264 * 0.707106769084930419921;
  HEAPF32[$254>>2] = $265;
  $266 = $256 + $261;
  $267 = $266 * 0.707106769084930419921;
  HEAPF32[$259>>2] = $267;
  $$sum13 = $j$133 | 24;
  $268 = (($x) + ($$sum13<<2)|0);
  $269 = +HEAPF32[$268>>2];
  $$sum14 = $j$133 | 8;
  $270 = (($x) + ($$sum14<<2)|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $269 - $271;
  $$sum15 = $j$133 | 25;
  $273 = (($x) + ($$sum15<<2)|0);
  $274 = +HEAPF32[$273>>2];
  $$sum16 = $j$133 | 9;
  $275 = (($x) + ($$sum16<<2)|0);
  $276 = +HEAPF32[$275>>2];
  $277 = $274 - $276;
  $278 = $269 + $271;
  HEAPF32[$268>>2] = $278;
  $279 = $274 + $276;
  HEAPF32[$273>>2] = $279;
  $280 = $272 * 0.382683426141738891602;
  $281 = $277 * 0.923879504203796386718;
  $282 = $280 - $281;
  $283 = $277 * 0.382683426141738891602;
  $284 = $272 * 0.923879504203796386718;
  $285 = $284 + $283;
  $$sum17 = $j$133 | 22;
  $286 = (($x) + ($$sum17<<2)|0);
  $287 = +HEAPF32[$286>>2];
  $$sum18 = $j$133 | 6;
  $288 = (($x) + ($$sum18<<2)|0);
  $289 = +HEAPF32[$288>>2];
  $290 = $287 - $289;
  $$sum19 = $j$133 | 7;
  $291 = (($x) + ($$sum19<<2)|0);
  $292 = +HEAPF32[$291>>2];
  $$sum20 = $j$133 | 23;
  $293 = (($x) + ($$sum20<<2)|0);
  $294 = +HEAPF32[$293>>2];
  $295 = $292 - $294;
  $296 = $287 + $289;
  HEAPF32[$286>>2] = $296;
  $297 = $292 + $294;
  HEAPF32[$293>>2] = $297;
  HEAPF32[$288>>2] = $295;
  HEAPF32[$291>>2] = $290;
  $$sum21 = $j$133 | 4;
  $298 = (($x) + ($$sum21<<2)|0);
  $299 = +HEAPF32[$298>>2];
  $$sum22 = $j$133 | 20;
  $300 = (($x) + ($$sum22<<2)|0);
  $301 = +HEAPF32[$300>>2];
  $302 = $299 - $301;
  $$sum23 = $j$133 | 5;
  $303 = (($x) + ($$sum23<<2)|0);
  $304 = +HEAPF32[$303>>2];
  $$sum24 = $j$133 | 21;
  $305 = (($x) + ($$sum24<<2)|0);
  $306 = +HEAPF32[$305>>2];
  $307 = $304 - $306;
  $308 = $299 + $301;
  HEAPF32[$300>>2] = $308;
  $309 = $304 + $306;
  HEAPF32[$305>>2] = $309;
  $310 = $307 * 0.923879504203796386718;
  $311 = $302 * 0.382683426141738891602;
  $312 = $311 + $310;
  $313 = $307 * 0.382683426141738891602;
  $314 = $302 * 0.923879504203796386718;
  $315 = $313 - $314;
  $$sum25 = $j$133 | 2;
  $316 = (($x) + ($$sum25<<2)|0);
  $317 = +HEAPF32[$316>>2];
  $$sum26 = $j$133 | 18;
  $318 = (($x) + ($$sum26<<2)|0);
  $319 = +HEAPF32[$318>>2];
  $320 = $317 - $319;
  $$sum27 = $j$133 | 3;
  $321 = (($x) + ($$sum27<<2)|0);
  $322 = +HEAPF32[$321>>2];
  $$sum28 = $j$133 | 19;
  $323 = (($x) + ($$sum28<<2)|0);
  $324 = +HEAPF32[$323>>2];
  $325 = $322 - $324;
  $326 = $317 + $319;
  HEAPF32[$318>>2] = $326;
  $327 = $322 + $324;
  HEAPF32[$323>>2] = $327;
  $328 = $320 + $325;
  $329 = $328 * 0.707106769084930419921;
  $330 = $325 - $320;
  $331 = $330 * 0.707106769084930419921;
  $332 = +HEAPF32[$221>>2];
  $$sum29 = $j$133 | 16;
  $333 = (($x) + ($$sum29<<2)|0);
  $334 = +HEAPF32[$333>>2];
  $335 = $332 - $334;
  $$sum30 = $j$133 | 1;
  $336 = (($x) + ($$sum30<<2)|0);
  $337 = +HEAPF32[$336>>2];
  $$sum31 = $j$133 | 17;
  $338 = (($x) + ($$sum31<<2)|0);
  $339 = +HEAPF32[$338>>2];
  $340 = $337 - $339;
  $341 = $332 + $334;
  HEAPF32[$333>>2] = $341;
  $342 = $337 + $339;
  HEAPF32[$338>>2] = $342;
  $343 = $340 * 0.382683426141738891602;
  $344 = $335 * 0.923879504203796386718;
  $345 = $344 + $343;
  $346 = $340 * 0.923879504203796386718;
  $347 = $335 * 0.382683426141738891602;
  $348 = $346 - $347;
  $349 = $348 - $285;
  $350 = $345 - $282;
  $351 = $282 + $345;
  $352 = $285 + $348;
  $353 = $349 + $350;
  $354 = $349 - $350;
  $355 = +HEAPF32[$259>>2];
  $356 = $331 - $355;
  $357 = +HEAPF32[$254>>2];
  $358 = $357 - $329;
  $359 = $329 + $357;
  $360 = $331 + $355;
  $361 = +HEAPF32[$236>>2];
  $362 = $361 - $312;
  $363 = +HEAPF32[$241>>2];
  $364 = $363 - $315;
  $365 = $312 + $361;
  $366 = $315 + $363;
  $367 = $362 - $364;
  $368 = $362 + $364;
  $369 = +HEAPF32[$224>>2];
  $370 = $369 - $295;
  $371 = +HEAPF32[$229>>2];
  $372 = $371 - $290;
  $373 = $369 + $295;
  $374 = $371 + $290;
  $375 = $356 + $370;
  $376 = $370 - $356;
  $377 = $353 + $367;
  $378 = $377 * 0.707106769084930419921;
  $379 = $367 - $353;
  $380 = $379 * 0.707106769084930419921;
  $381 = $375 + $378;
  HEAPF32[$288>>2] = $381;
  $382 = $375 - $378;
  HEAPF32[$298>>2] = $382;
  $383 = $368 - $354;
  $384 = $383 * 0.707106769084930419921;
  $385 = $372 - $358;
  $386 = $376 + $384;
  HEAPF32[$221>>2] = $386;
  $387 = $376 - $384;
  HEAPF32[$316>>2] = $387;
  $388 = $354 + $368;
  $389 = $388 * 0.707106769084930419921;
  $390 = $358 + $372;
  $391 = $380 + $385;
  HEAPF32[$321>>2] = $391;
  $392 = $385 - $380;
  HEAPF32[$336>>2] = $392;
  $393 = $389 + $390;
  HEAPF32[$291>>2] = $393;
  $394 = $390 - $389;
  HEAPF32[$303>>2] = $394;
  $395 = $359 + $373;
  $396 = $373 - $359;
  $397 = $365 + $351;
  $398 = $365 - $351;
  $399 = $397 + $395;
  HEAPF32[$224>>2] = $399;
  $400 = $395 - $397;
  HEAPF32[$236>>2] = $400;
  $401 = $366 - $352;
  $402 = $374 - $360;
  $403 = $401 + $396;
  HEAPF32[$270>>2] = $403;
  $404 = $396 - $401;
  HEAPF32[$254>>2] = $404;
  $405 = $352 + $366;
  $406 = $360 + $374;
  $407 = $398 + $402;
  HEAPF32[$259>>2] = $407;
  $408 = $402 - $398;
  HEAPF32[$275>>2] = $408;
  $409 = $405 + $406;
  HEAPF32[$229>>2] = $409;
  $410 = $406 - $405;
  HEAPF32[$241>>2] = $410;
  $411 = +HEAPF32[$273>>2];
  $412 = $342 - $411;
  $413 = +HEAPF32[$268>>2];
  $414 = $341 - $413;
  $415 = $341 + $413;
  $416 = $342 + $411;
  $417 = $412 + $414;
  $418 = $412 - $414;
  $419 = +HEAPF32[$323>>2];
  $420 = +HEAPF32[$257>>2];
  $421 = $419 - $420;
  $422 = +HEAPF32[$252>>2];
  $423 = +HEAPF32[$318>>2];
  $424 = $422 - $423;
  $425 = $422 + $423;
  $426 = $419 + $420;
  $427 = +HEAPF32[$234>>2];
  $428 = +HEAPF32[$300>>2];
  $429 = $427 - $428;
  $430 = +HEAPF32[$239>>2];
  $431 = +HEAPF32[$305>>2];
  $432 = $430 - $431;
  $433 = $427 + $428;
  $434 = $430 + $431;
  $435 = $429 - $432;
  $436 = $429 + $432;
  $437 = +HEAPF32[$222>>2];
  $438 = +HEAPF32[$286>>2];
  $439 = $437 - $438;
  $440 = +HEAPF32[$227>>2];
  $441 = +HEAPF32[$293>>2];
  $442 = $440 - $441;
  $443 = $437 + $438;
  $444 = $440 + $441;
  $445 = $421 + $439;
  $446 = $439 - $421;
  $447 = $417 + $435;
  $448 = $447 * 0.707106769084930419921;
  $449 = $435 - $417;
  $450 = $449 * 0.707106769084930419921;
  $451 = $445 + $448;
  HEAPF32[$286>>2] = $451;
  $452 = $445 - $448;
  HEAPF32[$300>>2] = $452;
  $453 = $436 - $418;
  $454 = $453 * 0.707106769084930419921;
  $455 = $442 - $424;
  $456 = $446 + $454;
  HEAPF32[$333>>2] = $456;
  $457 = $446 - $454;
  HEAPF32[$318>>2] = $457;
  $458 = $418 + $436;
  $459 = $458 * 0.707106769084930419921;
  $460 = $424 + $442;
  $461 = $450 + $455;
  HEAPF32[$323>>2] = $461;
  $462 = $455 - $450;
  HEAPF32[$338>>2] = $462;
  $463 = $459 + $460;
  HEAPF32[$293>>2] = $463;
  $464 = $460 - $459;
  HEAPF32[$305>>2] = $464;
  $465 = $425 + $443;
  $466 = $443 - $425;
  $467 = $415 + $433;
  $468 = $433 - $415;
  $469 = $467 + $465;
  HEAPF32[$222>>2] = $469;
  $470 = $465 - $467;
  HEAPF32[$234>>2] = $470;
  $471 = $434 - $416;
  $472 = $444 - $426;
  $473 = $471 + $466;
  HEAPF32[$268>>2] = $473;
  $474 = $466 - $471;
  HEAPF32[$252>>2] = $474;
  $475 = $416 + $434;
  $476 = $426 + $444;
  $477 = $468 + $472;
  HEAPF32[$257>>2] = $477;
  $478 = $472 - $468;
  HEAPF32[$273>>2] = $478;
  $479 = $475 + $476;
  HEAPF32[$227>>2] = $479;
  $480 = $476 - $475;
  HEAPF32[$239>>2] = $480;
  $481 = (($j$133) + 32)|0;
  $482 = ($481|0)<($points|0);
  if ($482) {
   $j$133 = $481;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _mdct_bitreverse($init$0$0$val,$init$0$2$val,$init$0$3$val,$x) {
 $init$0$0$val = $init$0$0$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $init$0$3$val = $init$0$3$val|0;
 $x = $x|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $8 = 0, $9 = 0.0, $T$0 = 0, $bit$0 = 0, $w0$0 = 0, $w1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $init$0$0$val >> 1;
 $1 = (($x) + ($0<<2)|0);
 $2 = (($init$0$2$val) + ($init$0$0$val<<2)|0);
 $T$0 = $2;$bit$0 = $init$0$3$val;$w0$0 = $x;$w1$0 = $1;
 while(1) {
  $3 = HEAP32[$bit$0>>2]|0;
  $$sum = (($3) + ($0))|0;
  $4 = (($x) + ($$sum<<2)|0);
  $5 = (($bit$0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $$sum1 = (($6) + ($0))|0;
  $7 = (($x) + ($$sum1<<2)|0);
  $$sum2 = (($$sum) + 1)|0;
  $8 = (($x) + ($$sum2<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $$sum3 = (($$sum1) + 1)|0;
  $10 = (($x) + ($$sum3<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $9 - $11;
  $13 = +HEAPF32[$4>>2];
  $14 = +HEAPF32[$7>>2];
  $15 = $13 + $14;
  $16 = +HEAPF32[$T$0>>2];
  $17 = $15 * $16;
  $18 = (($T$0) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $12 * $19;
  $21 = $17 + $20;
  $22 = $15 * $19;
  $23 = $12 * $16;
  $24 = $22 - $23;
  $25 = (($w1$0) + -16|0);
  $26 = $9 + $11;
  $27 = $26 * 0.5;
  $28 = $13 - $14;
  $29 = $28 * 0.5;
  $30 = $27 + $21;
  HEAPF32[$w0$0>>2] = $30;
  $31 = $27 - $21;
  $32 = (($w1$0) + -8|0);
  HEAPF32[$32>>2] = $31;
  $33 = $29 + $24;
  $34 = (($w0$0) + 4|0);
  HEAPF32[$34>>2] = $33;
  $35 = $24 - $29;
  $36 = (($w1$0) + -4|0);
  HEAPF32[$36>>2] = $35;
  $37 = (($bit$0) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $$sum4 = (($38) + ($0))|0;
  $39 = (($x) + ($$sum4<<2)|0);
  $40 = (($bit$0) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $$sum5 = (($41) + ($0))|0;
  $42 = (($x) + ($$sum5<<2)|0);
  $$sum6 = (($$sum4) + 1)|0;
  $43 = (($x) + ($$sum6<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $$sum7 = (($$sum5) + 1)|0;
  $45 = (($x) + ($$sum7<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 - $46;
  $48 = +HEAPF32[$39>>2];
  $49 = +HEAPF32[$42>>2];
  $50 = $48 + $49;
  $51 = (($T$0) + 8|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $50 * $52;
  $54 = (($T$0) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $47 * $55;
  $57 = $53 + $56;
  $58 = $50 * $55;
  $59 = $47 * $52;
  $60 = $58 - $59;
  $61 = $44 + $46;
  $62 = $61 * 0.5;
  $63 = $48 - $49;
  $64 = $63 * 0.5;
  $65 = $62 + $57;
  $66 = (($w0$0) + 8|0);
  HEAPF32[$66>>2] = $65;
  $67 = $62 - $57;
  HEAPF32[$25>>2] = $67;
  $68 = $64 + $60;
  $69 = (($w0$0) + 12|0);
  HEAPF32[$69>>2] = $68;
  $70 = $60 - $64;
  $71 = (($w1$0) + -12|0);
  HEAPF32[$71>>2] = $70;
  $72 = (($T$0) + 16|0);
  $73 = (($bit$0) + 16|0);
  $74 = (($w0$0) + 16|0);
  $75 = ($74>>>0)<($25>>>0);
  if ($75) {
   $T$0 = $72;$bit$0 = $73;$w0$0 = $74;$w1$0 = $25;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _mdct_forward($init,$in,$out) {
 $init = $init|0;
 $in = $in|0;
 $out = $out|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0;
 var $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $T$0$lcssa = 0, $T$034 = 0, $T$1$lcssa = 0, $T$125 = 0, $T$218 = 0, $T$314 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$035 = 0, $i$1$lcssa = 0, $i$126 = 0, $i$219 = 0;
 var $i$315 = 0, $init$idx = 0, $init$idx$val = 0, $init$idx10$val = 0, $init$idx11 = 0, $init$idx11$val = 0, $init$idx9$val = 0, $scevgep = 0, $scevgep47 = 0, $w$012 = 0, $x0$0$lcssa = 0, $x0$032 = 0, $x0$123 = 0, $x0$216 = 0, $x0$313 = 0, $x1$033 = 0, $x1$1$lcssa = 0, $x1$124 = 0, $x1$217 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$init>>2]|0;
 $1 = $0 >> 1;
 $2 = $0 >> 2;
 $3 = $0 >> 3;
 $4 = $0 << 2;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$4)|0)+15)&-16)|0;
 $6 = (($5) + ($1<<2)|0);
 $$sum = (($1) + ($2))|0;
 $7 = (($in) + ($$sum<<2)|0);
 $8 = (($init) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1<<2)|0);
 $11 = ($3|0)>(0);
 if ($11) {
  $$sum1 = (($$sum) + 1)|0;
  $12 = (($in) + ($$sum1<<2)|0);
  $13 = (($3) + -1)|0;
  $14 = $13 >>> 1;
  $15 = $14 << 1;
  $16 = (($1) + -2)|0;
  $17 = (($16) - ($15))|0;
  $18 = (($$sum) + -4)|0;
  $19 = $14 << 2;
  $20 = (($18) - ($19))|0;
  $T$034 = $10;$i$035 = 0;$x0$032 = $7;$x1$033 = $12;
  while(1) {
   $21 = (($x0$032) + -16|0);
   $22 = (($T$034) + -8|0);
   $23 = (($x0$032) + -8|0);
   $24 = +HEAPF32[$23>>2];
   $25 = +HEAPF32[$x1$033>>2];
   $26 = $24 + $25;
   $27 = +HEAPF32[$21>>2];
   $28 = (($x1$033) + 8|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $27 + $29;
   $31 = (($T$034) + -4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $30 * $32;
   $34 = +HEAPF32[$22>>2];
   $35 = $26 * $34;
   $36 = $33 + $35;
   $$sum6 = (($i$035) + ($1))|0;
   $37 = (($5) + ($$sum6<<2)|0);
   HEAPF32[$37>>2] = $36;
   $38 = +HEAPF32[$22>>2];
   $39 = $30 * $38;
   $40 = +HEAPF32[$31>>2];
   $41 = $26 * $40;
   $42 = $39 - $41;
   $43 = $i$035 | 1;
   $$sum7 = (($43) + ($1))|0;
   $44 = (($5) + ($$sum7<<2)|0);
   HEAPF32[$44>>2] = $42;
   $45 = (($x1$033) + 16|0);
   $46 = (($i$035) + 2)|0;
   $47 = ($46|0)<($3|0);
   if ($47) {
    $T$034 = $22;$i$035 = $46;$x0$032 = $21;$x1$033 = $45;
   } else {
    break;
   }
  }
  $48 = (($15) + 2)|0;
  $scevgep = (($9) + ($17<<2)|0);
  $scevgep47 = (($in) + ($20<<2)|0);
  $T$0$lcssa = $scevgep;$i$0$lcssa = $48;$x0$0$lcssa = $scevgep47;
 } else {
  $T$0$lcssa = $10;$i$0$lcssa = 0;$x0$0$lcssa = $7;
 }
 $49 = (($in) + 4|0);
 $50 = (($1) - ($3))|0;
 $51 = ($i$0$lcssa|0)<($50|0);
 if ($51) {
  $T$125 = $T$0$lcssa;$i$126 = $i$0$lcssa;$x0$123 = $x0$0$lcssa;$x1$124 = $49;
  while(1) {
   $52 = (($T$125) + -8|0);
   $53 = (($x0$123) + -16|0);
   $54 = (($x0$123) + -8|0);
   $55 = +HEAPF32[$54>>2];
   $56 = +HEAPF32[$x1$124>>2];
   $57 = $55 - $56;
   $58 = +HEAPF32[$53>>2];
   $59 = (($x1$124) + 8|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $58 - $60;
   $62 = (($T$125) + -4|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $61 * $63;
   $65 = +HEAPF32[$52>>2];
   $66 = $57 * $65;
   $67 = $64 + $66;
   $$sum4 = (($i$126) + ($1))|0;
   $68 = (($5) + ($$sum4<<2)|0);
   HEAPF32[$68>>2] = $67;
   $69 = +HEAPF32[$52>>2];
   $70 = $61 * $69;
   $71 = +HEAPF32[$62>>2];
   $72 = $57 * $71;
   $73 = $70 - $72;
   $74 = $i$126 | 1;
   $$sum5 = (($74) + ($1))|0;
   $75 = (($5) + ($$sum5<<2)|0);
   HEAPF32[$75>>2] = $73;
   $76 = (($x1$124) + 16|0);
   $77 = (($i$126) + 2)|0;
   $78 = ($77|0)<($50|0);
   if ($78) {
    $T$125 = $52;$i$126 = $77;$x0$123 = $53;$x1$124 = $76;
   } else {
    $T$1$lcssa = $52;$i$1$lcssa = $77;$x1$1$lcssa = $76;
    break;
   }
  }
 } else {
  $T$1$lcssa = $T$0$lcssa;$i$1$lcssa = $i$0$lcssa;$x1$1$lcssa = $49;
 }
 $79 = ($i$1$lcssa|0)<($1|0);
 if ($79) {
  $80 = (($in) + ($0<<2)|0);
  $T$218 = $T$1$lcssa;$i$219 = $i$1$lcssa;$x0$216 = $80;$x1$217 = $x1$1$lcssa;
  while(1) {
   $81 = (($T$218) + -8|0);
   $82 = (($x0$216) + -16|0);
   $83 = (($x0$216) + -8|0);
   $84 = +HEAPF32[$83>>2];
   $85 = -$84;
   $86 = +HEAPF32[$x1$217>>2];
   $87 = $85 - $86;
   $88 = +HEAPF32[$82>>2];
   $89 = -$88;
   $90 = (($x1$217) + 8|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $89 - $91;
   $93 = (($T$218) + -4|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $92 * $94;
   $96 = +HEAPF32[$81>>2];
   $97 = $87 * $96;
   $98 = $95 + $97;
   $$sum2 = (($i$219) + ($1))|0;
   $99 = (($5) + ($$sum2<<2)|0);
   HEAPF32[$99>>2] = $98;
   $100 = +HEAPF32[$81>>2];
   $101 = $92 * $100;
   $102 = +HEAPF32[$93>>2];
   $103 = $87 * $102;
   $104 = $101 - $103;
   $105 = $i$219 | 1;
   $$sum3 = (($105) + ($1))|0;
   $106 = (($5) + ($$sum3<<2)|0);
   HEAPF32[$106>>2] = $104;
   $107 = (($x1$217) + 16|0);
   $108 = (($i$219) + 2)|0;
   $109 = ($108|0)<($1|0);
   if ($109) {
    $T$218 = $81;$i$219 = $108;$x0$216 = $82;$x1$217 = $107;
   } else {
    break;
   }
  }
 }
 $init$idx = (($init) + 4|0);
 $init$idx$val = HEAP32[$init$idx>>2]|0;
 _mdct_butterflies($init$idx$val,$9,$6,$1);
 $init$idx9$val = HEAP32[$init>>2]|0;
 $init$idx10$val = HEAP32[$8>>2]|0;
 $init$idx11 = (($init) + 12|0);
 $init$idx11$val = HEAP32[$init$idx11>>2]|0;
 _mdct_bitreverse($init$idx9$val,$init$idx10$val,$init$idx11$val,$5);
 $110 = ($2|0)>(0);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 $111 = HEAP32[$8>>2]|0;
 $112 = (($out) + ($1<<2)|0);
 $113 = (($111) + ($1<<2)|0);
 $114 = (($init) + 16|0);
 $T$314 = $113;$i$315 = 0;$w$012 = $5;$x0$313 = $112;
 while(1) {
  $115 = (($x0$313) + -4|0);
  $116 = +HEAPF32[$w$012>>2];
  $117 = +HEAPF32[$T$314>>2];
  $118 = $116 * $117;
  $119 = (($w$012) + 4|0);
  $120 = +HEAPF32[$119>>2];
  $121 = (($T$314) + 4|0);
  $122 = +HEAPF32[$121>>2];
  $123 = $120 * $122;
  $124 = $118 + $123;
  $125 = +HEAPF32[$114>>2];
  $126 = $125 * $124;
  $127 = (($out) + ($i$315<<2)|0);
  HEAPF32[$127>>2] = $126;
  $128 = +HEAPF32[$w$012>>2];
  $129 = +HEAPF32[$121>>2];
  $130 = $128 * $129;
  $131 = +HEAPF32[$119>>2];
  $132 = +HEAPF32[$T$314>>2];
  $133 = $131 * $132;
  $134 = $130 - $133;
  $135 = +HEAPF32[$114>>2];
  $136 = $135 * $134;
  HEAPF32[$115>>2] = $136;
  $137 = (($w$012) + 8|0);
  $138 = (($T$314) + 8|0);
  $139 = (($i$315) + 1)|0;
  $exitcond = ($139|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $T$314 = $138;$i$315 = $139;$w$012 = $137;$x0$313 = $115;
  }
 }
 STACKTOP = sp;return;
}
function _drft_init($l,$n) {
 $l = $l|0;
 $n = $n|0;
 var $$$i = 0, $$not$i$i = 0, $$sum$i = 0, $$sum1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $exitcond$i$i = 0, $exitcond23$i$i = 0, $fi$03$i$i = 0.0, $i$015$i$i = 0, $i$12$i$i = 0, $ii$01$i$i = 0, $indvars$iv$i$i = 0, $indvars$iv$next$i$i = 0, $is$011$i$i = 0, $is$1$lcssa$i$i = 0, $is$15$i$i = 0, $j$0$i$i = 0, $j$16$i$i = 0, $k1$012$i$i = 0, $l1$010$i$i = 0, $ld$04$i$i = 0, $nf$0$i$i = 0, $nl$0$i$i = 0, $nl$1$i$i = 0, $ntry$0$i$i = 0;
 var $ntry$1$ph$i$i = 0, $or$cond$i$i = 0, $or$cond29$i$i = 0, $phitmp$i$i = 0, $req$0$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$l>>2] = $n;
 $0 = ($n*3)|0;
 $1 = ($n|0)==(0);
 if ($1) {
  $req$0$i = 0;
 } else {
  $2 = ($n*12)|0;
  $3 = ($0>>>0)>(65535);
  if ($3) {
   $4 = (($2>>>0) / ($0>>>0))&-1;
   $5 = ($4|0)==(4);
   $$$i = $5 ? $2 : -1;
   $req$0$i = $$$i;
  } else {
   $req$0$i = $2;
  }
 }
 $6 = (_malloc($req$0$i)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (($6) + -4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 3;
  $11 = ($10|0)==(0);
  if (!($11)) {
   _memset(($6|0),0,($req$0$i|0))|0;
  }
 }
 $12 = (($l) + 4|0);
 HEAP32[$12>>2] = $6;
 $13 = (_malloc(128)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = (($13) + -4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 3;
  $18 = ($17|0)==(0);
  if (!($18)) {
   dest=$13+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $19 = (($l) + 8|0);
 HEAP32[$19>>2] = $13;
 $20 = ($n|0)==(1);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = (($13) + 8|0);
 $j$0$i$i = 0;$nf$0$i$i = 0;$nl$0$i$i = $n;$ntry$0$i$i = 0;
 L16: while(1) {
  $22 = ($j$0$i$i|0)<(4);
  if ($22) {
   $23 = (8 + ($j$0$i$i<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $ntry$1$ph$i$i = $24;
  } else {
   $25 = (($ntry$0$i$i) + 2)|0;
   $ntry$1$ph$i$i = $25;
  }
  $26 = ($ntry$1$ph$i$i|0)!=(2);
  $indvars$iv$i$i = $nf$0$i$i;$nl$1$i$i = $nl$0$i$i;
  while(1) {
   $27 = (($nl$1$i$i|0) / ($ntry$1$ph$i$i|0))&-1;
   $28 = Math_imul($27, $ntry$1$ph$i$i)|0;
   $29 = ($nl$1$i$i|0)==($28|0);
   if (!($29)) {
    break;
   }
   $indvars$iv$next$i$i = (($indvars$iv$i$i) + 1)|0;
   $30 = (($indvars$iv$i$i) + 2)|0;
   $31 = (($13) + ($30<<2)|0);
   HEAP32[$31>>2] = $ntry$1$ph$i$i;
   $32 = ($indvars$iv$i$i|0)==(0);
   $or$cond$i$i = $26 | $32;
   if (!($or$cond$i$i)) {
    $33 = ($indvars$iv$i$i|0)>(0);
    if ($33) {
     $i$015$i$i = 1;
     while(1) {
      $34 = (($indvars$iv$next$i$i) - ($i$015$i$i))|0;
      $35 = (($34) + 1)|0;
      $36 = (($13) + ($35<<2)|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($34) + 2)|0;
      $39 = (($13) + ($38<<2)|0);
      HEAP32[$39>>2] = $37;
      $40 = (($i$015$i$i) + 1)|0;
      $41 = ($40|0)<($indvars$iv$next$i$i|0);
      if ($41) {
       $i$015$i$i = $40;
      } else {
       break;
      }
     }
    }
    HEAP32[$21>>2] = 2;
   }
   $42 = ($27|0)==(1);
   if ($42) {
    break L16;
   } else {
    $indvars$iv$i$i = $indvars$iv$next$i$i;$nl$1$i$i = $27;
   }
  }
  $phitmp$i$i = (($j$0$i$i) + 1)|0;
  $j$0$i$i = $phitmp$i$i;$nf$0$i$i = $indvars$iv$i$i;$nl$0$i$i = $nl$1$i$i;$ntry$0$i$i = $ntry$1$ph$i$i;
 }
 HEAP32[$13>>2] = $n;
 $43 = (($13) + 4|0);
 HEAP32[$43>>2] = $indvars$iv$next$i$i;
 $44 = (+($n|0));
 $45 = 6.28318548202514648438 / $44;
 $$not$i$i = $32 ^ 1;
 $46 = ($indvars$iv$i$i|0)>(0);
 $or$cond29$i$i = $46 & $$not$i$i;
 if (!($or$cond29$i$i)) {
  STACKTOP = sp;return;
 }
 $47 = (($n) + 1)|0;
 $is$011$i$i = 0;$k1$012$i$i = 0;$l1$010$i$i = 1;
 while(1) {
  $48 = (($k1$012$i$i) + 2)|0;
  $49 = (($13) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($50, $l1$010$i$i)|0;
  $52 = (($n|0) / ($51|0))&-1;
  $53 = (($50) + -1)|0;
  $54 = ($53|0)>(0);
  if ($54) {
   $55 = ($52|0)>(2);
   $is$15$i$i = $is$011$i$i;$j$16$i$i = 0;$ld$04$i$i = 0;
   while(1) {
    $56 = (($ld$04$i$i) + ($l1$010$i$i))|0;
    $57 = (+($56|0));
    $58 = $45 * $57;
    if ($55) {
     $fi$03$i$i = 0.0;$i$12$i$i = $is$15$i$i;$ii$01$i$i = 2;
     while(1) {
      $59 = $fi$03$i$i + 1.0;
      $60 = $58 * $59;
      $61 = $60;
      $62 = (+Math_cos((+$61)));
      $63 = $62;
      $$sum$i = (($i$12$i$i) + ($n))|0;
      $64 = (($6) + ($$sum$i<<2)|0);
      HEAPF32[$64>>2] = $63;
      $65 = (+Math_sin((+$61)));
      $66 = $65;
      $67 = (($i$12$i$i) + 2)|0;
      $$sum1$i = (($47) + ($i$12$i$i))|0;
      $68 = (($6) + ($$sum1$i<<2)|0);
      HEAPF32[$68>>2] = $66;
      $69 = (($ii$01$i$i) + 2)|0;
      $70 = ($69|0)<($52|0);
      if ($70) {
       $fi$03$i$i = $59;$i$12$i$i = $67;$ii$01$i$i = $69;
      } else {
       break;
      }
     }
    }
    $71 = (($is$15$i$i) + ($52))|0;
    $72 = (($j$16$i$i) + 1)|0;
    $exitcond$i$i = ($72|0)==($53|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $is$15$i$i = $71;$j$16$i$i = $72;$ld$04$i$i = $56;
    }
   }
   $73 = Math_imul($52, $53)|0;
   $74 = (($73) + ($is$011$i$i))|0;
   $is$1$lcssa$i$i = $74;
  } else {
   $is$1$lcssa$i$i = $is$011$i$i;
  }
  $75 = (($k1$012$i$i) + 1)|0;
  $exitcond23$i$i = ($75|0)==($indvars$iv$i$i|0);
  if ($exitcond23$i$i) {
   break;
  } else {
   $is$011$i$i = $is$1$lcssa$i$i;$k1$012$i$i = $75;$l1$010$i$i = $51;
  }
 }
 STACKTOP = sp;return;
}
function _dradf4($ido,$l1,$cc,$ch,$wa1,$wa2,$wa3) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 $wa2 = $wa2|0;
 $wa3 = $wa3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $i$09$us = 0, $k$019 = 0;
 var $k$112$us = 0, $k$25 = 0, $t1$018 = 0, $t1$111$us = 0, $t1$24 = 0, $t2$017 = 0, $t2$18$us = 0, $t2$23 = 0, $t3$016 = 0, $t4$015 = 0, $t4$17$us = 0, $t4$22 = 0, $t5$06$us = 0, $t6$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $0 << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = (($1) + ($0))|0;
  $4 = $ido << 2;
  $5 = (($4) + -1)|0;
  $6 = $ido << 1;
  $k$019 = 0;$t1$018 = $0;$t2$017 = $3;$t3$016 = 0;$t4$015 = $1;
  while(1) {
   $7 = (($cc) + ($t1$018<<2)|0);
   $8 = +HEAPF32[$7>>2];
   $9 = (($cc) + ($t2$017<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = $8 + $10;
   $12 = (($cc) + ($t3$016<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($cc) + ($t4$015<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $13 + $15;
   $17 = $11 + $16;
   $18 = $t3$016 << 2;
   $19 = (($ch) + ($18<<2)|0);
   HEAPF32[$19>>2] = $17;
   $20 = $16 - $11;
   $21 = (($5) + ($18))|0;
   $22 = (($ch) + ($21<<2)|0);
   HEAPF32[$22>>2] = $20;
   $23 = +HEAPF32[$12>>2];
   $24 = +HEAPF32[$14>>2];
   $25 = $23 - $24;
   $26 = (($18) + ($6))|0;
   $27 = (($26) + -1)|0;
   $28 = (($ch) + ($27<<2)|0);
   HEAPF32[$28>>2] = $25;
   $29 = +HEAPF32[$9>>2];
   $30 = +HEAPF32[$7>>2];
   $31 = $29 - $30;
   $32 = (($ch) + ($26<<2)|0);
   HEAPF32[$32>>2] = $31;
   $33 = (($t1$018) + ($ido))|0;
   $34 = (($t2$017) + ($ido))|0;
   $35 = (($t3$016) + ($ido))|0;
   $36 = (($t4$015) + ($ido))|0;
   $37 = (($k$019) + 1)|0;
   $exitcond24 = ($37|0)==($l1|0);
   if ($exitcond24) {
    break;
   } else {
    $k$019 = $37;$t1$018 = $33;$t2$017 = $34;$t3$016 = $35;$t4$015 = $36;
   }
  }
 }
 $38 = ($ido|0)<(2);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = ($ido|0)==(2);
 if (!($39)) {
  if ($2) {
   $40 = $ido << 1;
   $41 = ($ido|0)>(2);
   if ($41) {
    $k$112$us = 0;$t1$111$us = 0;
    while(1) {
     $134 = $t1$111$us << 2;
     $135 = (($134) + ($40))|0;
     $i$09$us = 2;$t2$18$us = $t1$111$us;$t4$17$us = $134;$t5$06$us = $135;
     while(1) {
      $44 = (($t2$18$us) + 2)|0;
      $45 = (($t4$17$us) + 2)|0;
      $46 = (($t5$06$us) + -2)|0;
      $47 = (($44) + ($0))|0;
      $48 = (($i$09$us) + -2)|0;
      $49 = (($wa1) + ($48<<2)|0);
      $50 = +HEAPF32[$49>>2];
      $51 = (($47) + -1)|0;
      $52 = (($cc) + ($51<<2)|0);
      $53 = +HEAPF32[$52>>2];
      $54 = $50 * $53;
      $55 = (($i$09$us) + -1)|0;
      $56 = (($wa1) + ($55<<2)|0);
      $57 = +HEAPF32[$56>>2];
      $58 = (($cc) + ($47<<2)|0);
      $59 = +HEAPF32[$58>>2];
      $60 = $57 * $59;
      $61 = $54 + $60;
      $62 = $50 * $59;
      $63 = $53 * $57;
      $64 = $62 - $63;
      $65 = (($47) + ($0))|0;
      $66 = (($wa2) + ($48<<2)|0);
      $67 = +HEAPF32[$66>>2];
      $68 = (($65) + -1)|0;
      $69 = (($cc) + ($68<<2)|0);
      $70 = +HEAPF32[$69>>2];
      $71 = $67 * $70;
      $72 = (($wa2) + ($55<<2)|0);
      $73 = +HEAPF32[$72>>2];
      $74 = (($cc) + ($65<<2)|0);
      $75 = +HEAPF32[$74>>2];
      $76 = $73 * $75;
      $77 = $71 + $76;
      $78 = $67 * $75;
      $79 = $70 * $73;
      $80 = $78 - $79;
      $81 = (($65) + ($0))|0;
      $82 = (($wa3) + ($48<<2)|0);
      $83 = +HEAPF32[$82>>2];
      $84 = (($81) + -1)|0;
      $85 = (($cc) + ($84<<2)|0);
      $86 = +HEAPF32[$85>>2];
      $87 = $83 * $86;
      $88 = (($wa3) + ($55<<2)|0);
      $89 = +HEAPF32[$88>>2];
      $90 = (($cc) + ($81<<2)|0);
      $91 = +HEAPF32[$90>>2];
      $92 = $89 * $91;
      $93 = $87 + $92;
      $94 = $83 * $91;
      $95 = $86 * $89;
      $96 = $94 - $95;
      $97 = $61 + $93;
      $98 = $93 - $61;
      $99 = $64 + $96;
      $100 = $64 - $96;
      $101 = (($cc) + ($44<<2)|0);
      $102 = +HEAPF32[$101>>2];
      $103 = $80 + $102;
      $104 = $102 - $80;
      $105 = (($t2$18$us) + 1)|0;
      $106 = (($cc) + ($105<<2)|0);
      $107 = +HEAPF32[$106>>2];
      $108 = $77 + $107;
      $109 = $107 - $77;
      $110 = $97 + $108;
      $111 = $t4$17$us | 1;
      $112 = (($ch) + ($111<<2)|0);
      HEAPF32[$112>>2] = $110;
      $113 = $103 + $99;
      $114 = (($ch) + ($45<<2)|0);
      HEAPF32[$114>>2] = $113;
      $115 = $109 - $100;
      $116 = (($t5$06$us) + -3)|0;
      $117 = (($ch) + ($116<<2)|0);
      HEAPF32[$117>>2] = $115;
      $118 = $98 - $104;
      $119 = (($ch) + ($46<<2)|0);
      HEAPF32[$119>>2] = $118;
      $120 = $100 + $109;
      $121 = (($45) + ($40))|0;
      $122 = (($121) + -1)|0;
      $123 = (($ch) + ($122<<2)|0);
      HEAPF32[$123>>2] = $120;
      $124 = $104 + $98;
      $125 = (($ch) + ($121<<2)|0);
      HEAPF32[$125>>2] = $124;
      $126 = $108 - $97;
      $127 = (($46) + ($40))|0;
      $128 = (($127) + -1)|0;
      $129 = (($ch) + ($128<<2)|0);
      HEAPF32[$129>>2] = $126;
      $130 = $99 - $103;
      $131 = (($ch) + ($127<<2)|0);
      HEAPF32[$131>>2] = $130;
      $132 = (($i$09$us) + 2)|0;
      $133 = ($132|0)<($ido|0);
      if ($133) {
       $i$09$us = $132;$t2$18$us = $44;$t4$17$us = $45;$t5$06$us = $46;
      } else {
       break;
      }
     }
     $42 = (($t1$111$us) + ($ido))|0;
     $43 = (($k$112$us) + 1)|0;
     $exitcond25 = ($43|0)==($l1|0);
     if ($exitcond25) {
      break;
     } else {
      $k$112$us = $43;$t1$111$us = $42;
     }
    }
   }
  }
  $136 = $ido & 1;
  $137 = ($136|0)==(0);
  if (!($137)) {
   STACKTOP = sp;return;
  }
 }
 $138 = (($ido) + -1)|0;
 $139 = (($138) + ($0))|0;
 $140 = $ido << 2;
 $141 = $ido << 1;
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $142 = (($139) + ($1))|0;
 $k$25 = 0;$t1$24 = $139;$t2$23 = $142;$t4$22 = $ido;$t6$01 = $ido;
 while(1) {
  $143 = (($cc) + ($t1$24<<2)|0);
  $144 = +HEAPF32[$143>>2];
  $145 = (($cc) + ($t2$23<<2)|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $144 + $146;
  $148 = $147 * -0.707106769084930419921;
  $149 = $144 - $146;
  $150 = $149 * 0.707106769084930419921;
  $151 = (($t6$01) + -1)|0;
  $152 = (($cc) + ($151<<2)|0);
  $153 = +HEAPF32[$152>>2];
  $154 = $153 + $150;
  $155 = (($t4$22) + -1)|0;
  $156 = (($ch) + ($155<<2)|0);
  HEAPF32[$156>>2] = $154;
  $157 = +HEAPF32[$152>>2];
  $158 = $157 - $150;
  $159 = (($t4$22) + ($141))|0;
  $160 = (($159) + -1)|0;
  $161 = (($ch) + ($160<<2)|0);
  HEAPF32[$161>>2] = $158;
  $162 = (($t1$24) + ($0))|0;
  $163 = (($cc) + ($162<<2)|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $148 - $164;
  $166 = (($ch) + ($t4$22<<2)|0);
  HEAPF32[$166>>2] = $165;
  $167 = +HEAPF32[$163>>2];
  $168 = $148 + $167;
  $169 = (($ch) + ($159<<2)|0);
  HEAPF32[$169>>2] = $168;
  $170 = (($t1$24) + ($ido))|0;
  $171 = (($t2$23) + ($ido))|0;
  $172 = (($t4$22) + ($140))|0;
  $173 = (($t6$01) + ($ido))|0;
  $174 = (($k$25) + 1)|0;
  $exitcond = ($174|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$25 = $174;$t1$24 = $170;$t2$23 = $171;$t4$22 = $172;$t6$01 = $173;
  }
 }
 STACKTOP = sp;return;
}
function _dradf2($ido,$l1,$cc,$ch,$wa1) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $exitcond23 = 0, $exitcond24 = 0, $i$05$us = 0, $k$016 = 0, $k$111$us = 0, $k$21 = 0, $or$cond = 0, $t1$017 = 0, $t1$112$us = 0, $t1$22 = 0, $t2$018 = 0, $t2$113$us = 0, $t2$23 = 0, $t3$06$us = 0, $t3$14 = 0, $t4$07$us = 0;
 var $t5$08$us = 0, $t6$09$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $ido << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $k$016 = 0;$t1$017 = 0;$t2$018 = $0;
  while(1) {
   $4 = (($cc) + ($t1$017<<2)|0);
   $5 = +HEAPF32[$4>>2];
   $6 = (($cc) + ($t2$018<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = $5 + $7;
   $9 = $t1$017 << 1;
   $10 = (($ch) + ($9<<2)|0);
   HEAPF32[$10>>2] = $8;
   $11 = +HEAPF32[$4>>2];
   $12 = +HEAPF32[$6>>2];
   $13 = $11 - $12;
   $14 = (($3) + ($9))|0;
   $15 = (($ch) + ($14<<2)|0);
   HEAPF32[$15>>2] = $13;
   $16 = (($t1$017) + ($ido))|0;
   $17 = (($t2$018) + ($ido))|0;
   $18 = (($k$016) + 1)|0;
   $exitcond23 = ($18|0)==($l1|0);
   if ($exitcond23) {
    break;
   } else {
    $k$016 = $18;$t1$017 = $16;$t2$018 = $17;
   }
  }
 }
 $19 = ($ido|0)<(2);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = ($ido|0)==(2);
 if (!($20)) {
  $21 = ($ido|0)>(2);
  $or$cond = $2 & $21;
  if ($or$cond) {
   $k$111$us = 0;$t1$112$us = 0;$t2$113$us = $0;
   while(1) {
    $65 = $t1$112$us << 1;
    $66 = (($65) + ($1))|0;
    $i$05$us = 2;$t3$06$us = $t2$113$us;$t4$07$us = $66;$t5$08$us = $t1$112$us;$t6$09$us = $65;
    while(1) {
     $25 = (($t3$06$us) + 2)|0;
     $26 = (($t4$07$us) + -2)|0;
     $27 = (($t5$08$us) + 2)|0;
     $28 = (($t6$09$us) + 2)|0;
     $29 = (($i$05$us) + -2)|0;
     $30 = (($wa1) + ($29<<2)|0);
     $31 = +HEAPF32[$30>>2];
     $32 = (($t3$06$us) + 1)|0;
     $33 = (($cc) + ($32<<2)|0);
     $34 = +HEAPF32[$33>>2];
     $35 = $31 * $34;
     $36 = (($i$05$us) + -1)|0;
     $37 = (($wa1) + ($36<<2)|0);
     $38 = +HEAPF32[$37>>2];
     $39 = (($cc) + ($25<<2)|0);
     $40 = +HEAPF32[$39>>2];
     $41 = $38 * $40;
     $42 = $35 + $41;
     $43 = $31 * $40;
     $44 = $34 * $38;
     $45 = $43 - $44;
     $46 = (($cc) + ($27<<2)|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $47 + $45;
     $49 = (($ch) + ($28<<2)|0);
     HEAPF32[$49>>2] = $48;
     $50 = +HEAPF32[$46>>2];
     $51 = $45 - $50;
     $52 = (($ch) + ($26<<2)|0);
     HEAPF32[$52>>2] = $51;
     $53 = (($t5$08$us) + 1)|0;
     $54 = (($cc) + ($53<<2)|0);
     $55 = +HEAPF32[$54>>2];
     $56 = $42 + $55;
     $57 = $t6$09$us | 1;
     $58 = (($ch) + ($57<<2)|0);
     HEAPF32[$58>>2] = $56;
     $59 = +HEAPF32[$54>>2];
     $60 = $59 - $42;
     $61 = (($t4$07$us) + -3)|0;
     $62 = (($ch) + ($61<<2)|0);
     HEAPF32[$62>>2] = $60;
     $63 = (($i$05$us) + 2)|0;
     $64 = ($63|0)<($ido|0);
     if ($64) {
      $i$05$us = $63;$t3$06$us = $25;$t4$07$us = $26;$t5$08$us = $27;$t6$09$us = $28;
     } else {
      break;
     }
    }
    $22 = (($t1$112$us) + ($ido))|0;
    $23 = (($t2$113$us) + ($ido))|0;
    $24 = (($k$111$us) + 1)|0;
    $exitcond24 = ($24|0)==($l1|0);
    if ($exitcond24) {
     break;
    } else {
     $k$111$us = $24;$t1$112$us = $22;$t2$113$us = $23;
    }
   }
  }
  $67 = (($ido|0) % 2)&-1;
  $68 = ($67|0)==(1);
  if ($68) {
   STACKTOP = sp;return;
  }
 }
 $69 = (($ido) + -1)|0;
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $70 = (($0) + ($69))|0;
 $k$21 = 0;$t1$22 = $ido;$t2$23 = $70;$t3$14 = $69;
 while(1) {
  $71 = (($cc) + ($t2$23<<2)|0);
  $72 = +HEAPF32[$71>>2];
  $73 = -$72;
  $74 = (($ch) + ($t1$22<<2)|0);
  HEAPF32[$74>>2] = $73;
  $75 = (($cc) + ($t3$14<<2)|0);
  $76 = +HEAPF32[$75>>2];
  $77 = (($t1$22) + -1)|0;
  $78 = (($ch) + ($77<<2)|0);
  HEAPF32[$78>>2] = $76;
  $79 = (($t1$22) + ($1))|0;
  $80 = (($t2$23) + ($ido))|0;
  $81 = (($t3$14) + ($ido))|0;
  $82 = (($k$21) + 1)|0;
  $exitcond = ($82|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$21 = $82;$t1$22 = $79;$t2$23 = $80;$t3$14 = $81;
  }
 }
 STACKTOP = sp;return;
}
function _dradfg($ido,$ip,$l1,$idl1,$cc,$c1,$c2,$ch,$ch2,$wa) {
 $ido = $ido|0;
 $ip = $ip|0;
 $l1 = $l1|0;
 $idl1 = $idl1|0;
 $cc = $cc|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 $ch = $ch|0;
 $ch2 = $ch2|0;
 $wa = $wa|0;
 var $$not = 0, $$not237 = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0.0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ai1$0101 = 0.0, $ai2$096 = 0.0, $ar1$0102 = 0.0, $ar2$097 = 0.0, $brmerge = 0, $exitcond = 0, $exitcond204 = 0, $exitcond206 = 0, $exitcond207 = 0, $exitcond208 = 0;
 var $exitcond209 = 0, $exitcond210 = 0, $exitcond211 = 0, $exitcond212 = 0, $exitcond214 = 0, $exitcond215 = 0, $exitcond216 = 0, $exitcond217 = 0, $exitcond218 = 0, $exitcond219 = 0, $exitcond220 = 0, $exitcond221 = 0, $exitcond222 = 0, $exitcond223 = 0, $exitcond225 = 0, $exitcond226 = 0, $exitcond227 = 0, $exitcond228 = 0, $exitcond229 = 0, $exitcond230 = 0;
 var $exitcond231 = 0, $exitcond232 = 0, $exitcond233 = 0, $exitcond234 = 0, $exitcond235 = 0, $i$0158 = 0, $i$1180 = 0, $i$2132 = 0, $i$3144 = 0, $i$460 = 0, $i$556 = 0, $i$617$us = 0, $i$76 = 0, $i$76$us = 0, $idij$0159 = 0, $idij$1181 = 0, $ik$0202 = 0, $ik$1121 = 0, $ik$283 = 0, $ik$390 = 0;
 var $ik$469 = 0, $is$0171 = 0, $is$1188 = 0, $j$0198 = 0, $j$1014 = 0, $j$1172 = 0, $j$2189 = 0, $j$3139 = 0, $j$4155 = 0, $j$5116 = 0, $j$698 = 0, $j$775 = 0, $j$844 = 0, $j$932 = 0, $k$0192 = 0, $k$105$us = 0, $k$1164 = 0, $k$2175 = 0, $k$3126 = 0, $k$4149 = 0;
 var $k$5110 = 0, $k$667 = 0, $k$751 = 0, $k$837 = 0, $k$924$us = 0, $l$0105 = 0, $t1$0197 = 0, $t1$1043 = 0, $t1$1131 = 0, $t1$1170 = 0, $t1$1213 = 0, $t1$2187 = 0, $t1$3138 = 0, $t1$4154 = 0, $t1$5115 = 0, $t1$6104 = 0, $t1$774 = 0, $t1$866 = 0, $t1$950 = 0, $t2$0191 = 0;
 var $t2$1163 = 0, $t2$2179 = 0, $t2$3137 = 0, $t2$4153 = 0, $t2$5114 = 0, $t2$6103 = 0, $t2$768 = 0, $t2$865 = 0, $t2$949 = 0, $t3$0157 = 0, $t3$1174 = 0, $t3$2131 = 0, $t3$3148 = 0, $t3$4109 = 0, $t3$559 = 0, $t3$642 = 0, $t3$730 = 0, $t3$812 = 0, $t4$0130 = 0, $t4$1147 = 0;
 var $t4$2108 = 0, $t4$382 = 0, $t4$495 = 0, $t4$558 = 0, $t4$641 = 0, $t4$729 = 0, $t4$811 = 0, $t5$0124 = 0, $t5$1142 = 0, $t5$279 = 0, $t5$394 = 0, $t5$434 = 0, $t5$528 = 0, $t5$610 = 0, $t6$0125 = 0, $t6$1143 = 0, $t6$280 = 0, $t6$386 = 0, $t6$435 = 0, $t6$520$us = 0;
 var $t6$61$us = 0, $t7$081 = 0, $t7$187 = 0, $t7$236 = 0, $t7$321$us = 0, $t7$42$us = 0, $t8$088 = 0, $t8$122$us = 0, $t8$23$us = 0, $t9$089 = 0, $t9$123$us = 0, $t9$24$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($ip|0));
 $1 = 6.28318548202514648438 / $0;
 $2 = $1;
 $3 = (+Math_cos((+$2)));
 $4 = $3;
 $5 = (+Math_sin((+$2)));
 $6 = $5;
 $7 = (($ip) + 1)|0;
 $8 = $7 >> 1;
 $9 = (($ido) + -1)|0;
 $10 = $9 >> 1;
 $11 = Math_imul($l1, $ido)|0;
 $12 = Math_imul($ip, $ido)|0;
 $13 = ($ido|0)==(1);
 L1: do {
  if (!($13)) {
   $14 = ($idl1|0)>(0);
   if ($14) {
    $ik$0202 = 0;
    while(1) {
     $18 = (($c2) + ($ik$0202<<2)|0);
     $19 = +HEAPF32[$18>>2];
     $20 = (($ch2) + ($ik$0202<<2)|0);
     HEAPF32[$20>>2] = $19;
     $21 = (($ik$0202) + 1)|0;
     $exitcond235 = ($21|0)==($idl1|0);
     if ($exitcond235) {
      break;
     } else {
      $ik$0202 = $21;
     }
    }
   }
   $16 = ($ip|0)>(1);
   if ($16) {
    $17 = ($l1|0)>(0);
    $j$0198 = 1;$t1$0197 = 0;
    while(1) {
     $22 = (($t1$0197) + ($11))|0;
     if ($17) {
      $k$0192 = 0;$t2$0191 = $22;
      while(1) {
       $23 = (($c1) + ($t2$0191<<2)|0);
       $24 = +HEAPF32[$23>>2];
       $25 = (($ch) + ($t2$0191<<2)|0);
       HEAPF32[$25>>2] = $24;
       $26 = (($t2$0191) + ($ido))|0;
       $27 = (($k$0192) + 1)|0;
       $exitcond233 = ($27|0)==($l1|0);
       if ($exitcond233) {
        break;
       } else {
        $k$0192 = $27;$t2$0191 = $26;
       }
      }
     }
     $28 = (($j$0198) + 1)|0;
     $exitcond234 = ($28|0)==($ip|0);
     if ($exitcond234) {
      break;
     } else {
      $j$0198 = $28;$t1$0197 = $22;
     }
    }
   }
   $29 = (0 - ($ido))|0;
   $30 = ($10|0)>($l1|0);
   if ($30) {
    if ($16) {
     $33 = ($l1|0)>(0);
     $34 = ($ido|0)>(2);
     $is$0171 = $29;$j$1172 = 1;$t1$1170 = 0;
     while(1) {
      $35 = (($t1$1170) + ($11))|0;
      $36 = (($is$0171) + ($ido))|0;
      if ($33) {
       $37 = (($35) - ($ido))|0;
       $38 = (($36) + -1)|0;
       $k$1164 = 0;$t2$1163 = $37;
       while(1) {
        $39 = (($t2$1163) + ($ido))|0;
        if ($34) {
         $i$0158 = 2;$idij$0159 = $38;$t3$0157 = $39;
         while(1) {
          $40 = (($idij$0159) + 2)|0;
          $41 = (($t3$0157) + 2)|0;
          $42 = (($idij$0159) + 1)|0;
          $43 = (($wa) + ($42<<2)|0);
          $44 = +HEAPF32[$43>>2];
          $45 = (($t3$0157) + 1)|0;
          $46 = (($c1) + ($45<<2)|0);
          $47 = +HEAPF32[$46>>2];
          $48 = $44 * $47;
          $49 = (($wa) + ($40<<2)|0);
          $50 = +HEAPF32[$49>>2];
          $51 = (($c1) + ($41<<2)|0);
          $52 = +HEAPF32[$51>>2];
          $53 = $50 * $52;
          $54 = $48 + $53;
          $55 = (($ch) + ($45<<2)|0);
          HEAPF32[$55>>2] = $54;
          $56 = +HEAPF32[$43>>2];
          $57 = +HEAPF32[$51>>2];
          $58 = $56 * $57;
          $59 = +HEAPF32[$49>>2];
          $60 = +HEAPF32[$46>>2];
          $61 = $59 * $60;
          $62 = $58 - $61;
          $63 = (($ch) + ($41<<2)|0);
          HEAPF32[$63>>2] = $62;
          $64 = (($i$0158) + 2)|0;
          $65 = ($64|0)<($ido|0);
          if ($65) {
           $i$0158 = $64;$idij$0159 = $40;$t3$0157 = $41;
          } else {
           break;
          }
         }
        }
        $66 = (($k$1164) + 1)|0;
        $exitcond229 = ($66|0)==($l1|0);
        if ($exitcond229) {
         break;
        } else {
         $k$1164 = $66;$t2$1163 = $39;
        }
       }
      }
      $67 = (($j$1172) + 1)|0;
      $exitcond230 = ($67|0)==($ip|0);
      if ($exitcond230) {
       break;
      } else {
       $is$0171 = $36;$j$1172 = $67;$t1$1170 = $35;
      }
     }
    }
   } else {
    if ($16) {
     $31 = ($ido|0)>(2);
     $32 = ($l1|0)>(0);
     $is$1188 = $29;$j$2189 = 1;$t1$2187 = 0;
     while(1) {
      $68 = (($is$1188) + ($ido))|0;
      $69 = (($t1$2187) + ($11))|0;
      if ($31) {
       $70 = (($68) + -1)|0;
       $i$1180 = 2;$idij$1181 = $70;$t2$2179 = $69;
       while(1) {
        $71 = (($idij$1181) + 2)|0;
        $72 = (($t2$2179) + 2)|0;
        if ($32) {
         $73 = (($idij$1181) + 1)|0;
         $74 = (($wa) + ($73<<2)|0);
         $75 = (($wa) + ($71<<2)|0);
         $k$2175 = 0;$t3$1174 = $72;
         while(1) {
          $76 = +HEAPF32[$74>>2];
          $77 = (($t3$1174) + -1)|0;
          $78 = (($c1) + ($77<<2)|0);
          $79 = +HEAPF32[$78>>2];
          $80 = $76 * $79;
          $81 = +HEAPF32[$75>>2];
          $82 = (($c1) + ($t3$1174<<2)|0);
          $83 = +HEAPF32[$82>>2];
          $84 = $81 * $83;
          $85 = $80 + $84;
          $86 = (($ch) + ($77<<2)|0);
          HEAPF32[$86>>2] = $85;
          $87 = +HEAPF32[$74>>2];
          $88 = +HEAPF32[$82>>2];
          $89 = $87 * $88;
          $90 = +HEAPF32[$75>>2];
          $91 = +HEAPF32[$78>>2];
          $92 = $90 * $91;
          $93 = $89 - $92;
          $94 = (($ch) + ($t3$1174<<2)|0);
          HEAPF32[$94>>2] = $93;
          $95 = (($t3$1174) + ($ido))|0;
          $96 = (($k$2175) + 1)|0;
          $exitcond231 = ($96|0)==($l1|0);
          if ($exitcond231) {
           break;
          } else {
           $k$2175 = $96;$t3$1174 = $95;
          }
         }
        }
        $97 = (($i$1180) + 2)|0;
        $98 = ($97|0)<($ido|0);
        if ($98) {
         $i$1180 = $97;$idij$1181 = $71;$t2$2179 = $72;
        } else {
         break;
        }
       }
      }
      $99 = (($j$2189) + 1)|0;
      $exitcond232 = ($99|0)==($ip|0);
      if ($exitcond232) {
       break;
      } else {
       $is$1188 = $68;$j$2189 = $99;$t1$2187 = $69;
      }
     }
    }
   }
   $100 = Math_imul($11, $ip)|0;
   $101 = ($10|0)<($l1|0);
   $102 = ($8|0)>(1);
   if (!($101)) {
    if (!($102)) {
     break;
    }
    $103 = ($l1|0)>(0);
    $104 = ($ido|0)>(2);
    $j$4155 = 1;$t1$4154 = 0;$t2$4153 = $100;
    while(1) {
     $141 = (($t1$4154) + ($11))|0;
     $142 = (($t2$4153) - ($11))|0;
     if ($103) {
      $k$4149 = 0;$t3$3148 = $141;$t4$1147 = $142;
      while(1) {
       if ($104) {
        $i$3144 = 2;$t5$1142 = $t3$3148;$t6$1143 = $t4$1147;
        while(1) {
         $143 = (($t5$1142) + 2)|0;
         $144 = (($t6$1143) + 2)|0;
         $145 = (($t5$1142) + 1)|0;
         $146 = (($ch) + ($145<<2)|0);
         $147 = +HEAPF32[$146>>2];
         $148 = (($t6$1143) + 1)|0;
         $149 = (($ch) + ($148<<2)|0);
         $150 = +HEAPF32[$149>>2];
         $151 = $147 + $150;
         $152 = (($c1) + ($145<<2)|0);
         HEAPF32[$152>>2] = $151;
         $153 = (($ch) + ($143<<2)|0);
         $154 = +HEAPF32[$153>>2];
         $155 = (($ch) + ($144<<2)|0);
         $156 = +HEAPF32[$155>>2];
         $157 = $154 - $156;
         $158 = (($c1) + ($148<<2)|0);
         HEAPF32[$158>>2] = $157;
         $159 = +HEAPF32[$153>>2];
         $160 = +HEAPF32[$155>>2];
         $161 = $159 + $160;
         $162 = (($c1) + ($143<<2)|0);
         HEAPF32[$162>>2] = $161;
         $163 = +HEAPF32[$149>>2];
         $164 = +HEAPF32[$146>>2];
         $165 = $163 - $164;
         $166 = (($c1) + ($144<<2)|0);
         HEAPF32[$166>>2] = $165;
         $167 = (($i$3144) + 2)|0;
         $168 = ($167|0)<($ido|0);
         if ($168) {
          $i$3144 = $167;$t5$1142 = $143;$t6$1143 = $144;
         } else {
          break;
         }
        }
       }
       $169 = (($t3$3148) + ($ido))|0;
       $170 = (($t4$1147) + ($ido))|0;
       $171 = (($k$4149) + 1)|0;
       $exitcond227 = ($171|0)==($l1|0);
       if ($exitcond227) {
        break;
       } else {
        $k$4149 = $171;$t3$3148 = $169;$t4$1147 = $170;
       }
      }
     }
     $172 = (($j$4155) + 1)|0;
     $exitcond228 = ($172|0)==($8|0);
     if ($exitcond228) {
      break L1;
     } else {
      $j$4155 = $172;$t1$4154 = $141;$t2$4153 = $142;
     }
    }
   }
   if ($102) {
    $105 = ($ido|0)>(2);
    $106 = ($l1|0)>(0);
    $j$3139 = 1;$t1$3138 = 0;$t2$3137 = $100;
    while(1) {
     $107 = (($t1$3138) + ($11))|0;
     $108 = (($t2$3137) - ($11))|0;
     if ($105) {
      $i$2132 = 2;$t3$2131 = $107;$t4$0130 = $108;
      while(1) {
       $109 = (($t3$2131) + 2)|0;
       $110 = (($t4$0130) + 2)|0;
       if ($106) {
        $111 = (($110) - ($ido))|0;
        $112 = (($109) - ($ido))|0;
        $k$3126 = 0;$t5$0124 = $112;$t6$0125 = $111;
        while(1) {
         $113 = (($t5$0124) + ($ido))|0;
         $114 = (($t6$0125) + ($ido))|0;
         $115 = (($113) + -1)|0;
         $116 = (($ch) + ($115<<2)|0);
         $117 = +HEAPF32[$116>>2];
         $118 = (($114) + -1)|0;
         $119 = (($ch) + ($118<<2)|0);
         $120 = +HEAPF32[$119>>2];
         $121 = $117 + $120;
         $122 = (($c1) + ($115<<2)|0);
         HEAPF32[$122>>2] = $121;
         $123 = (($ch) + ($113<<2)|0);
         $124 = +HEAPF32[$123>>2];
         $125 = (($ch) + ($114<<2)|0);
         $126 = +HEAPF32[$125>>2];
         $127 = $124 - $126;
         $128 = (($c1) + ($118<<2)|0);
         HEAPF32[$128>>2] = $127;
         $129 = +HEAPF32[$123>>2];
         $130 = +HEAPF32[$125>>2];
         $131 = $129 + $130;
         $132 = (($c1) + ($113<<2)|0);
         HEAPF32[$132>>2] = $131;
         $133 = +HEAPF32[$119>>2];
         $134 = +HEAPF32[$116>>2];
         $135 = $133 - $134;
         $136 = (($c1) + ($114<<2)|0);
         HEAPF32[$136>>2] = $135;
         $137 = (($k$3126) + 1)|0;
         $exitcond225 = ($137|0)==($l1|0);
         if ($exitcond225) {
          break;
         } else {
          $k$3126 = $137;$t5$0124 = $113;$t6$0125 = $114;
         }
        }
       }
       $138 = (($i$2132) + 2)|0;
       $139 = ($138|0)<($ido|0);
       if ($139) {
        $i$2132 = $138;$t3$2131 = $109;$t4$0130 = $110;
       } else {
        break;
       }
      }
     }
     $140 = (($j$3139) + 1)|0;
     $exitcond226 = ($140|0)==($8|0);
     if ($exitcond226) {
      break;
     } else {
      $j$3139 = $140;$t1$3138 = $107;$t2$3137 = $108;
     }
    }
   }
  }
 } while(0);
 $15 = ($idl1|0)>(0);
 if ($15) {
  $ik$1121 = 0;
  while(1) {
   $173 = (($ch2) + ($ik$1121<<2)|0);
   $174 = +HEAPF32[$173>>2];
   $175 = (($c2) + ($ik$1121<<2)|0);
   HEAPF32[$175>>2] = $174;
   $176 = (($ik$1121) + 1)|0;
   $exitcond223 = ($176|0)==($idl1|0);
   if ($exitcond223) {
    break;
   } else {
    $ik$1121 = $176;
   }
  }
 }
 $177 = Math_imul($idl1, $ip)|0;
 $178 = ($8|0)>(1);
 if ($178) {
  $179 = ($l1|0)>(0);
  $j$5116 = 1;$t1$5115 = 0;$t2$5114 = $177;
  while(1) {
   $180 = (($t1$5115) + ($11))|0;
   $181 = (($t2$5114) - ($11))|0;
   if ($179) {
    $182 = (($181) - ($ido))|0;
    $183 = (($180) - ($ido))|0;
    $k$5110 = 0;$t3$4109 = $183;$t4$2108 = $182;
    while(1) {
     $184 = (($t3$4109) + ($ido))|0;
     $185 = (($t4$2108) + ($ido))|0;
     $186 = (($ch) + ($184<<2)|0);
     $187 = +HEAPF32[$186>>2];
     $188 = (($ch) + ($185<<2)|0);
     $189 = +HEAPF32[$188>>2];
     $190 = $187 + $189;
     $191 = (($c1) + ($184<<2)|0);
     HEAPF32[$191>>2] = $190;
     $192 = +HEAPF32[$188>>2];
     $193 = +HEAPF32[$186>>2];
     $194 = $192 - $193;
     $195 = (($c1) + ($185<<2)|0);
     HEAPF32[$195>>2] = $194;
     $196 = (($k$5110) + 1)|0;
     $exitcond221 = ($196|0)==($l1|0);
     if ($exitcond221) {
      break;
     } else {
      $k$5110 = $196;$t3$4109 = $184;$t4$2108 = $185;
     }
    }
   }
   $197 = (($j$5116) + 1)|0;
   $exitcond222 = ($197|0)==($8|0);
   if ($exitcond222) {
    break;
   } else {
    $j$5116 = $197;$t1$5115 = $180;$t2$5114 = $181;
   }
  }
  $198 = (($ip) + -1)|0;
  $199 = Math_imul($198, $idl1)|0;
  $200 = ($8|0)>(2);
  $ai1$0101 = 0.0;$ar1$0102 = 1.0;$l$0105 = 1;$t1$6104 = 0;$t2$6103 = $177;
  while(1) {
   $201 = (($t1$6104) + ($idl1))|0;
   $202 = (($t2$6103) - ($idl1))|0;
   $203 = $4 * $ar1$0102;
   $204 = $6 * $ai1$0101;
   $205 = $203 - $204;
   $206 = $4 * $ai1$0101;
   $207 = $6 * $ar1$0102;
   $208 = $206 + $207;
   if ($15) {
    $ik$283 = 0;$t4$382 = $201;$t5$279 = $202;$t6$280 = $199;$t7$081 = $idl1;
    while(1) {
     $209 = (($c2) + ($ik$283<<2)|0);
     $210 = +HEAPF32[$209>>2];
     $211 = (($t7$081) + 1)|0;
     $212 = (($c2) + ($t7$081<<2)|0);
     $213 = +HEAPF32[$212>>2];
     $214 = $205 * $213;
     $215 = $210 + $214;
     $216 = (($t4$382) + 1)|0;
     $217 = (($ch2) + ($t4$382<<2)|0);
     HEAPF32[$217>>2] = $215;
     $218 = (($t6$280) + 1)|0;
     $219 = (($c2) + ($t6$280<<2)|0);
     $220 = +HEAPF32[$219>>2];
     $221 = $208 * $220;
     $222 = (($t5$279) + 1)|0;
     $223 = (($ch2) + ($t5$279<<2)|0);
     HEAPF32[$223>>2] = $221;
     $224 = (($ik$283) + 1)|0;
     $exitcond217 = ($224|0)==($idl1|0);
     if ($exitcond217) {
      break;
     } else {
      $ik$283 = $224;$t4$382 = $216;$t5$279 = $222;$t6$280 = $218;$t7$081 = $211;
     }
    }
   }
   if ($200) {
    $ai2$096 = $208;$ar2$097 = $205;$j$698 = 2;$t4$495 = $idl1;$t5$394 = $199;
    while(1) {
     $225 = (($t4$495) + ($idl1))|0;
     $226 = (($t5$394) - ($idl1))|0;
     $227 = $205 * $ar2$097;
     $228 = $208 * $ai2$096;
     $229 = $227 - $228;
     $230 = $205 * $ai2$096;
     $231 = $208 * $ar2$097;
     $232 = $230 + $231;
     if ($15) {
      $ik$390 = 0;$t6$386 = $201;$t7$187 = $202;$t8$088 = $225;$t9$089 = $226;
      while(1) {
       $233 = (($t8$088) + 1)|0;
       $234 = (($c2) + ($t8$088<<2)|0);
       $235 = +HEAPF32[$234>>2];
       $236 = $229 * $235;
       $237 = (($t6$386) + 1)|0;
       $238 = (($ch2) + ($t6$386<<2)|0);
       $239 = +HEAPF32[$238>>2];
       $240 = $239 + $236;
       HEAPF32[$238>>2] = $240;
       $241 = (($t9$089) + 1)|0;
       $242 = (($c2) + ($t9$089<<2)|0);
       $243 = +HEAPF32[$242>>2];
       $244 = $232 * $243;
       $245 = (($t7$187) + 1)|0;
       $246 = (($ch2) + ($t7$187<<2)|0);
       $247 = +HEAPF32[$246>>2];
       $248 = $247 + $244;
       HEAPF32[$246>>2] = $248;
       $249 = (($ik$390) + 1)|0;
       $exitcond218 = ($249|0)==($idl1|0);
       if ($exitcond218) {
        break;
       } else {
        $ik$390 = $249;$t6$386 = $237;$t7$187 = $245;$t8$088 = $233;$t9$089 = $241;
       }
      }
     }
     $250 = (($j$698) + 1)|0;
     $exitcond219 = ($250|0)==($8|0);
     if ($exitcond219) {
      break;
     } else {
      $ai2$096 = $232;$ar2$097 = $229;$j$698 = $250;$t4$495 = $225;$t5$394 = $226;
     }
    }
   }
   $251 = (($l$0105) + 1)|0;
   $exitcond220 = ($251|0)==($8|0);
   if ($exitcond220) {
    $j$775 = 1;$t1$774 = 0;
    break;
   } else {
    $ai1$0101 = $208;$ar1$0102 = $205;$l$0105 = $251;$t1$6104 = $201;$t2$6103 = $202;
   }
  }
  while(1) {
   $252 = (($t1$774) + ($idl1))|0;
   if ($15) {
    $ik$469 = 0;$t2$768 = $252;
    while(1) {
     $253 = (($t2$768) + 1)|0;
     $254 = (($c2) + ($t2$768<<2)|0);
     $255 = +HEAPF32[$254>>2];
     $256 = (($ch2) + ($ik$469<<2)|0);
     $257 = +HEAPF32[$256>>2];
     $258 = $255 + $257;
     HEAPF32[$256>>2] = $258;
     $259 = (($ik$469) + 1)|0;
     $exitcond215 = ($259|0)==($idl1|0);
     if ($exitcond215) {
      break;
     } else {
      $ik$469 = $259;$t2$768 = $253;
     }
    }
   }
   $260 = (($j$775) + 1)|0;
   $exitcond216 = ($260|0)==($8|0);
   if ($exitcond216) {
    break;
   } else {
    $j$775 = $260;$t1$774 = $252;
   }
  }
 }
 $261 = ($ido|0)<($l1|0);
 if ($261) {
  $264 = ($ido|0)>(0);
  if ($264) {
   $265 = ($l1|0)>(0);
   $i$556 = 0;
   while(1) {
    if ($265) {
     $k$751 = 0;$t1$950 = $i$556;$t2$949 = $i$556;
     while(1) {
      $275 = (($ch) + ($t1$950<<2)|0);
      $276 = +HEAPF32[$275>>2];
      $277 = (($cc) + ($t2$949<<2)|0);
      HEAPF32[$277>>2] = $276;
      $278 = (($t1$950) + ($ido))|0;
      $279 = (($t2$949) + ($12))|0;
      $280 = (($k$751) + 1)|0;
      $exitcond210 = ($280|0)==($l1|0);
      if ($exitcond210) {
       break;
      } else {
       $k$751 = $280;$t1$950 = $278;$t2$949 = $279;
      }
     }
    }
    $281 = (($i$556) + 1)|0;
    $exitcond211 = ($281|0)==($ido|0);
    if ($exitcond211) {
     break;
    } else {
     $i$556 = $281;
    }
   }
  }
 } else {
  $262 = ($l1|0)>(0);
  if ($262) {
   $263 = ($ido|0)>(0);
   $k$667 = 0;$t1$866 = 0;$t2$865 = 0;
   while(1) {
    if ($263) {
     $i$460 = 0;$t3$559 = $t1$866;$t4$558 = $t2$865;
     while(1) {
      $266 = (($t3$559) + 1)|0;
      $267 = (($ch) + ($t3$559<<2)|0);
      $268 = +HEAPF32[$267>>2];
      $269 = (($t4$558) + 1)|0;
      $270 = (($cc) + ($t4$558<<2)|0);
      HEAPF32[$270>>2] = $268;
      $271 = (($i$460) + 1)|0;
      $exitcond212 = ($271|0)==($ido|0);
      if ($exitcond212) {
       break;
      } else {
       $i$460 = $271;$t3$559 = $266;$t4$558 = $269;
      }
     }
    }
    $272 = (($t1$866) + ($ido))|0;
    $273 = (($t2$865) + ($12))|0;
    $274 = (($k$667) + 1)|0;
    $exitcond214 = ($274|0)==($l1|0);
    if ($exitcond214) {
     break;
    } else {
     $k$667 = $274;$t1$866 = $272;$t2$865 = $273;
    }
   }
  }
 }
 $282 = $ido << 1;
 $283 = Math_imul($11, $ip)|0;
 if ($178) {
  $284 = ($l1|0)>(0);
  $j$844 = 1;$t1$1043 = 0;$t3$642 = 0;$t4$641 = $283;
  while(1) {
   $285 = (($t1$1043) + ($282))|0;
   $286 = (($t3$642) + ($11))|0;
   $287 = (($t4$641) - ($11))|0;
   if ($284) {
    $k$837 = 0;$t5$434 = $285;$t6$435 = $286;$t7$236 = $287;
    while(1) {
     $288 = (($ch) + ($t6$435<<2)|0);
     $289 = +HEAPF32[$288>>2];
     $290 = (($t5$434) + -1)|0;
     $291 = (($cc) + ($290<<2)|0);
     HEAPF32[$291>>2] = $289;
     $292 = (($ch) + ($t7$236<<2)|0);
     $293 = +HEAPF32[$292>>2];
     $294 = (($cc) + ($t5$434<<2)|0);
     HEAPF32[$294>>2] = $293;
     $295 = (($t5$434) + ($12))|0;
     $296 = (($t6$435) + ($ido))|0;
     $297 = (($t7$236) + ($ido))|0;
     $298 = (($k$837) + 1)|0;
     $exitcond208 = ($298|0)==($l1|0);
     if ($exitcond208) {
      break;
     } else {
      $k$837 = $298;$t5$434 = $295;$t6$435 = $296;$t7$236 = $297;
     }
    }
   }
   $299 = (($j$844) + 1)|0;
   $exitcond209 = ($299|0)==($8|0);
   if ($exitcond209) {
    break;
   } else {
    $j$844 = $299;$t1$1043 = $285;$t3$642 = $286;$t4$641 = $287;
   }
  }
 }
 if ($13) {
  STACKTOP = sp;return;
 }
 $300 = ($10|0)<($l1|0);
 $301 = (0 - ($ido))|0;
 if (!($300)) {
  if (!($178)) {
   STACKTOP = sp;return;
  }
  $$not = ($l1|0)<(1);
  $$not237 = ($ido|0)<(3);
  $brmerge = $$not | $$not237;
  $j$932 = 1;$t1$1131 = $301;$t3$730 = 0;$t4$729 = 0;$t5$528 = $283;
  while(1) {
   $304 = (($t1$1131) + ($282))|0;
   $305 = (($t3$730) + ($282))|0;
   $306 = (($t4$729) + ($11))|0;
   $307 = (($t5$528) - ($11))|0;
   if (!($brmerge)) {
    $k$924$us = 0;$t6$520$us = $304;$t7$321$us = $305;$t8$122$us = $306;$t9$123$us = $307;
    while(1) {
     $i$617$us = 2;
     while(1) {
      $313 = (($ido) - ($i$617$us))|0;
      $314 = (($i$617$us) + ($t8$122$us))|0;
      $315 = (($314) + -1)|0;
      $316 = (($ch) + ($315<<2)|0);
      $317 = +HEAPF32[$316>>2];
      $318 = (($i$617$us) + ($t9$123$us))|0;
      $319 = (($318) + -1)|0;
      $320 = (($ch) + ($319<<2)|0);
      $321 = +HEAPF32[$320>>2];
      $322 = $317 + $321;
      $323 = (($i$617$us) + ($t7$321$us))|0;
      $324 = (($323) + -1)|0;
      $325 = (($cc) + ($324<<2)|0);
      HEAPF32[$325>>2] = $322;
      $326 = +HEAPF32[$316>>2];
      $327 = +HEAPF32[$320>>2];
      $328 = $326 - $327;
      $329 = (($313) + ($t6$520$us))|0;
      $330 = (($329) + -1)|0;
      $331 = (($cc) + ($330<<2)|0);
      HEAPF32[$331>>2] = $328;
      $332 = (($ch) + ($314<<2)|0);
      $333 = +HEAPF32[$332>>2];
      $334 = (($ch) + ($318<<2)|0);
      $335 = +HEAPF32[$334>>2];
      $336 = $333 + $335;
      $337 = (($cc) + ($323<<2)|0);
      HEAPF32[$337>>2] = $336;
      $338 = +HEAPF32[$334>>2];
      $339 = +HEAPF32[$332>>2];
      $340 = $338 - $339;
      $341 = (($cc) + ($329<<2)|0);
      HEAPF32[$341>>2] = $340;
      $342 = (($i$617$us) + 2)|0;
      $343 = ($342|0)<($ido|0);
      if ($343) {
       $i$617$us = $342;
      } else {
       break;
      }
     }
     $308 = (($t6$520$us) + ($12))|0;
     $309 = (($t7$321$us) + ($12))|0;
     $310 = (($t8$122$us) + ($ido))|0;
     $311 = (($t9$123$us) + ($ido))|0;
     $312 = (($k$924$us) + 1)|0;
     $exitcond206 = ($312|0)==($l1|0);
     if ($exitcond206) {
      break;
     } else {
      $k$924$us = $312;$t6$520$us = $308;$t7$321$us = $309;$t8$122$us = $310;$t9$123$us = $311;
     }
    }
   }
   $344 = (($j$932) + 1)|0;
   $exitcond207 = ($344|0)==($8|0);
   if ($exitcond207) {
    break;
   } else {
    $j$932 = $344;$t1$1131 = $304;$t3$730 = $305;$t4$729 = $306;$t5$528 = $307;
   }
  }
  STACKTOP = sp;return;
 }
 if (!($178)) {
  STACKTOP = sp;return;
 }
 $302 = ($ido|0)>(2);
 $303 = ($l1|0)>(0);
 $j$1014 = 1;$t1$1213 = $301;$t3$812 = 0;$t4$811 = 0;$t5$610 = $283;
 while(1) {
  $345 = (($t1$1213) + ($282))|0;
  $346 = (($t3$812) + ($282))|0;
  $347 = (($t4$811) + ($11))|0;
  $348 = (($t5$610) - ($11))|0;
  L158: do {
   if ($302) {
    $349 = (($345) + ($ido))|0;
    if ($303) {
     $i$76$us = 2;
    } else {
     $i$76 = 2;
     while(1) {
      $385 = (($i$76) + 2)|0;
      $386 = ($385|0)<($ido|0);
      if ($386) {
       $i$76 = $385;
      } else {
       break L158;
      }
     }
    }
    while(1) {
     $381 = (($i$76$us) + ($348))|0;
     $382 = (($i$76$us) + ($347))|0;
     $383 = (($i$76$us) + ($346))|0;
     $384 = (($349) - ($i$76$us))|0;
     $k$105$us = 0;$t6$61$us = $384;$t7$42$us = $383;$t8$23$us = $382;$t9$24$us = $381;
     while(1) {
      $352 = (($t8$23$us) + -1)|0;
      $353 = (($ch) + ($352<<2)|0);
      $354 = +HEAPF32[$353>>2];
      $355 = (($t9$24$us) + -1)|0;
      $356 = (($ch) + ($355<<2)|0);
      $357 = +HEAPF32[$356>>2];
      $358 = $354 + $357;
      $359 = (($t7$42$us) + -1)|0;
      $360 = (($cc) + ($359<<2)|0);
      HEAPF32[$360>>2] = $358;
      $361 = +HEAPF32[$353>>2];
      $362 = +HEAPF32[$356>>2];
      $363 = $361 - $362;
      $364 = (($t6$61$us) + -1)|0;
      $365 = (($cc) + ($364<<2)|0);
      HEAPF32[$365>>2] = $363;
      $366 = (($ch) + ($t8$23$us<<2)|0);
      $367 = +HEAPF32[$366>>2];
      $368 = (($ch) + ($t9$24$us<<2)|0);
      $369 = +HEAPF32[$368>>2];
      $370 = $367 + $369;
      $371 = (($cc) + ($t7$42$us<<2)|0);
      HEAPF32[$371>>2] = $370;
      $372 = +HEAPF32[$368>>2];
      $373 = +HEAPF32[$366>>2];
      $374 = $372 - $373;
      $375 = (($cc) + ($t6$61$us<<2)|0);
      HEAPF32[$375>>2] = $374;
      $376 = (($t6$61$us) + ($12))|0;
      $377 = (($t7$42$us) + ($12))|0;
      $378 = (($t8$23$us) + ($ido))|0;
      $379 = (($t9$24$us) + ($ido))|0;
      $380 = (($k$105$us) + 1)|0;
      $exitcond = ($380|0)==($l1|0);
      if ($exitcond) {
       break;
      } else {
       $k$105$us = $380;$t6$61$us = $376;$t7$42$us = $377;$t8$23$us = $378;$t9$24$us = $379;
      }
     }
     $350 = (($i$76$us) + 2)|0;
     $351 = ($350|0)<($ido|0);
     if ($351) {
      $i$76$us = $350;
     } else {
      break;
     }
    }
   }
  } while(0);
  $387 = (($j$1014) + 1)|0;
  $exitcond204 = ($387|0)==($8|0);
  if ($exitcond204) {
   break;
  } else {
   $j$1014 = $387;$t1$1213 = $345;$t3$812 = $346;$t4$811 = $347;$t5$610 = $348;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_analysis_buffer($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($v) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 HEAP32[$4>>2] = 0;
 $7 = (($3) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 HEAP32[$7>>2] = 0;
 $10 = (($3) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 HEAP32[$10>>2] = 0;
 $13 = (($v) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($vals))|0;
 $16 = (($v) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)<($17|0);
 L10: do {
  if ($18) {
   $$phi$trans$insert = (($1) + 4|0);
   $$pre6 = HEAP32[$$phi$trans$insert>>2]|0;
   $25 = $$pre6;
   label = 11;
  } else {
   $19 = $vals << 1;
   $20 = (($14) + ($19))|0;
   HEAP32[$16>>2] = $20;
   $21 = (($1) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>(0);
   if ($23) {
    $24 = (($v) + 8|0);
    $34 = $20;$i$02 = 0;
    while(1) {
     $30 = HEAP32[$24>>2]|0;
     $31 = (($30) + ($i$02<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $34 << 2;
     $35 = (_realloc($32,$33)|0);
     $36 = HEAP32[$24>>2]|0;
     $37 = (($36) + ($i$02<<2)|0);
     HEAP32[$37>>2] = $35;
     $38 = (($i$02) + 1)|0;
     $39 = HEAP32[$21>>2]|0;
     $40 = ($38|0)<($39|0);
     if (!($40)) {
      $25 = $39;
      label = 11;
      break L10;
     }
     $$pre = HEAP32[$16>>2]|0;
     $34 = $$pre;$i$02 = $38;
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $26 = ($25|0)>(0);
  if ($26) {
   $27 = (($v) + 8|0);
   $28 = HEAP32[$13>>2]|0;
   $29 = (($v) + 12|0);
   $i$11 = 0;
   while(1) {
    $41 = HEAP32[$27>>2]|0;
    $42 = (($41) + ($i$11<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($28<<2)|0);
    $45 = HEAP32[$29>>2]|0;
    $46 = (($45) + ($i$11<<2)|0);
    HEAP32[$46>>2] = $44;
    $47 = (($i$11) + 1)|0;
    $48 = ($47|0)<($25|0);
    if ($48) {
     $i$11 = $47;
    } else {
     $$pre$phiZ2D = $29;
     break;
    }
   }
   $49 = HEAP32[$$pre$phiZ2D>>2]|0;
   STACKTOP = sp;return ($49|0);
  }
 }
 $$pre7 = (($v) + 12|0);
 $$pre$phiZ2D = $$pre7;
 $49 = HEAP32[$$pre$phiZ2D>>2]|0;
 STACKTOP = sp;return ($49|0);
}
function _vorbis_analysis_wrote($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$ = 0, $$pre = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($vals|0)<(1);
 if (!($4)) {
  $48 = (($v) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($vals))|0;
  $51 = (($v) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)>($52|0);
  if ($53) {
   STACKTOP = sp;return;
  }
  HEAP32[$48>>2] = $50;
  $54 = (($v) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0);
  if (!($56)) {
   STACKTOP = sp;return;
  }
  $57 = (($v) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($50) - ($58))|0;
  $60 = (($3) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)>($61|0);
  if (!($62)) {
   STACKTOP = sp;return;
  }
  __preextrapolate_helper($v);
  STACKTOP = sp;return;
 }
 $5 = STACKTOP; STACKTOP = STACKTOP + 128|0;
 $6 = (($v) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  __preextrapolate_helper($v);
 }
 $9 = (($3) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10*3)|0;
 (_vorbis_analysis_buffer($v,$11)|0);
 $12 = (($v) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($v) + 32|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($15*3)|0;
 $17 = (($13) + ($16))|0;
 HEAP32[$12>>2] = $17;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = (($v) + 8|0);
 $22 = $13;$i$02 = 0;
 while(1) {
  $23 = ($22|0)>(64);
  if ($23) {
   $24 = HEAP32[$9>>2]|0;
   $25 = ($22|0)>($24|0);
   $$ = $25 ? $24 : $22;
   $26 = HEAP32[$21>>2]|0;
   $27 = (($26) + ($i$02<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $$sum = (($22) - ($$))|0;
   $29 = (($28) + ($$sum<<2)|0);
   _vorbis_lpc_from_data($29,$5,$$,32);
   $30 = HEAP32[$21>>2]|0;
   $31 = (($30) + ($i$02<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$14>>2]|0;
   $34 = (($32) + ($33<<2)|0);
   $$sum1 = (($33) + -32)|0;
   $35 = (($32) + ($$sum1<<2)|0);
   $36 = HEAP32[$12>>2]|0;
   $37 = (($36) - ($33))|0;
   _vorbis_lpc_predict($5,$35,32,$34,$37);
  } else {
   $38 = HEAP32[$21>>2]|0;
   $39 = (($38) + ($i$02<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($22<<2)|0);
   $42 = HEAP32[$12>>2]|0;
   $43 = (($42) - ($22))|0;
   $44 = $43 << 2;
   _memset(($41|0),0,($44|0))|0;
  }
  $45 = (($i$02) + 1)|0;
  $46 = HEAP32[$18>>2]|0;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $$pre = HEAP32[$14>>2]|0;
  $22 = $$pre;$i$02 = $45;
 }
 STACKTOP = sp;return;
}
function __preextrapolate_helper($v) {
 $v = $v|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $j$02 = 0, $j$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp;
 $1 = (($v) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$3)|0)+15)&-16)|0;
 $5 = (($v) + 28|0);
 HEAP32[$5>>2] = 1;
 $6 = (($v) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) - ($7))|0;
 $9 = ($8|0)>(32);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($v) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = (($v) + 8|0);
 $16 = $2;$i$08 = 0;
 while(1) {
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = HEAP32[$15>>2]|0;
   $19 = (($18) + ($i$08<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $j$02 = 0;
   while(1) {
    $21 = $j$02 ^ -1;
    $22 = (($16) + ($21))|0;
    $23 = (($20) + ($22<<2)|0);
    $24 = +HEAPF32[$23>>2];
    $25 = (($4) + ($j$02<<2)|0);
    HEAPF32[$25>>2] = $24;
    $26 = (($j$02) + 1)|0;
    $27 = ($26|0)<($16|0);
    if ($27) {
     $j$02 = $26;
    } else {
     break;
    }
   }
  }
  $28 = HEAP32[$6>>2]|0;
  $29 = (($16) - ($28))|0;
  _vorbis_lpc_from_data($4,$0,$29,16);
  $30 = HEAP32[$1>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $$sum = (($30) - ($31))|0;
  $32 = (($4) + ($$sum<<2)|0);
  $$sum1 = (($$sum) + -16)|0;
  $33 = (($4) + ($$sum1<<2)|0);
  _vorbis_lpc_predict($0,$33,16,$32,$31);
  $34 = HEAP32[$1>>2]|0;
  $35 = ($34|0)>(0);
  if ($35) {
   $36 = HEAP32[$15>>2]|0;
   $37 = (($36) + ($i$08<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $j$13 = 0;
   while(1) {
    $39 = (($4) + ($j$13<<2)|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $j$13 ^ -1;
    $42 = (($34) + ($41))|0;
    $43 = (($38) + ($42<<2)|0);
    HEAPF32[$43>>2] = $40;
    $44 = (($j$13) + 1)|0;
    $45 = ($44|0)<($34|0);
    if ($45) {
     $j$13 = $44;
    } else {
     break;
    }
   }
  }
  $46 = (($i$08) + 1)|0;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)<($49|0);
  if ($50) {
   $16 = $34;$i$08 = $46;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_analysis_blockout($v,$vb) {
 $v = $v|0;
 $vb = $vb|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i$ph = 0, $$0$i5 = 0.0, $$1$i = 0, $$pre = 0, $$pre10 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $beginW$0$i = 0, $endW$0$i = 0, $exitcond$i = 0, $i$02$i = 0, $i$06$i = 0, $i$07 = 0, $i$16 = 0, $j$09$i = 0, $j$14$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $reap$01$i = 0, $ret$05$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($v) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($v) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($v) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13|0) / 2)&-1;
 $15 = (($9) - ($14))|0;
 $16 = (($vb) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($v) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($v) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($3) + 2868|0);
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) + 168|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27|0) / ($29|0))&-1;
 $31 = (($v) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32|0) / ($29|0))&-1;
 $34 = (($33) + -4)|0;
 $35 = ($30|0)<(0);
 $$$i = $35 ? 0 : $30;
 $36 = (($33) + 2)|0;
 $37 = (($25) + 164|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)>($38|0);
 if ($39) {
  HEAP32[$37>>2] = $36;
  $40 = (($25) + 160|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $36 << 2;
  $43 = (_realloc($41,$42)|0);
  HEAP32[$40>>2] = $43;
 }
 $44 = ($$$i|0)<($34|0);
 if ($44) {
  $45 = (($25) + 156|0);
  $46 = (($25) + 160|0);
  $47 = (($v) + 8|0);
  $48 = (($25) + 40|0);
  $49 = (($25) + 152|0);
  $j$09$i = $$$i;
  while(1) {
   $50 = HEAP32[$45>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = ($50|0)>(23);
   $$1$i = $52 ? 24 : $51;
   HEAP32[$45>>2] = $$1$i;
   $53 = HEAP32[$25>>2]|0;
   $54 = ($53|0)>(0);
   if ($54) {
    $i$06$i = 0;$ret$05$i = 0;
    while(1) {
     $58 = HEAP32[$47>>2]|0;
     $59 = (($58) + ($i$06$i<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = HEAP32[$28>>2]|0;
     $62 = Math_imul($61, $j$09$i)|0;
     $63 = (($60) + ($62<<2)|0);
     $64 = HEAP32[$49>>2]|0;
     $65 = ($i$06$i*7)|0;
     $66 = (($64) + (($65*144)|0)|0);
     $67 = (__ve_amp($25,$24,$63,$48,$66)|0);
     $68 = $67 | $ret$05$i;
     $69 = (($i$06$i) + 1)|0;
     $70 = HEAP32[$25>>2]|0;
     $71 = ($69|0)<($70|0);
     if ($71) {
      $i$06$i = $69;$ret$05$i = $68;
     } else {
      break;
     }
    }
    $72 = (($j$09$i) + 2)|0;
    $73 = HEAP32[$46>>2]|0;
    $74 = (($73) + ($72<<2)|0);
    HEAP32[$74>>2] = 0;
    $75 = $68 & 1;
    $76 = ($75|0)==(0);
    if (!($76)) {
     $77 = (($73) + ($j$09$i<<2)|0);
     HEAP32[$77>>2] = 1;
     $78 = (($j$09$i) + 1)|0;
     $79 = (($73) + ($78<<2)|0);
     HEAP32[$79>>2] = 1;
    }
    $80 = $68 & 2;
    $81 = ($80|0)==(0);
    if (!($81)) {
     $82 = (($73) + ($j$09$i<<2)|0);
     HEAP32[$82>>2] = 1;
     $83 = ($j$09$i|0)>(0);
     if ($83) {
      $84 = (($j$09$i) + -1)|0;
      $85 = (($73) + ($84<<2)|0);
      HEAP32[$85>>2] = 1;
     }
    }
    $86 = $68 & 4;
    $87 = ($86|0)==(0);
    if (!($87)) {
     HEAP32[$45>>2] = -1;
    }
   } else {
    $55 = (($j$09$i) + 2)|0;
    $56 = HEAP32[$46>>2]|0;
    $57 = (($56) + ($55<<2)|0);
    HEAP32[$57>>2] = 0;
   }
   $88 = (($j$09$i) + 1)|0;
   $exitcond$i = ($88|0)==($34|0);
   if ($exitcond$i) {
    break;
   } else {
    $j$09$i = $88;
   }
  }
 }
 $89 = HEAP32[$28>>2]|0;
 $90 = Math_imul($89, $34)|0;
 HEAP32[$26>>2] = $90;
 $91 = HEAP32[$8>>2]|0;
 $92 = HEAP32[$10>>2]|0;
 $93 = (($3) + ($92<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94|0) / 4)&-1;
 $96 = (($95) + ($91))|0;
 $97 = (($3) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98|0) / 2)&-1;
 $100 = (($96) + ($99))|0;
 $101 = HEAP32[$3>>2]|0;
 $102 = (($101|0) / 4)&-1;
 $103 = (($100) + ($102))|0;
 $104 = (($25) + 176|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($90) - ($89))|0;
 $107 = ($105|0)<($106|0);
 L29: do {
  if ($107) {
   $108 = (($25) + 160|0);
   $j$14$i = $105;
   while(1) {
    $111 = ($j$14$i|0)<($103|0);
    if (!($111)) {
     $$0$i$ph = 1;
     break;
    }
    HEAP32[$104>>2] = $j$14$i;
    $112 = (($j$14$i|0) / ($89|0))&-1;
    $113 = HEAP32[$108>>2]|0;
    $114 = (($113) + ($112<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)!=(0);
    $117 = ($j$14$i|0)>($91|0);
    $or$cond$i = $116 & $117;
    $109 = (($89) + ($j$14$i))|0;
    if ($or$cond$i) {
     label = 23;
     break;
    }
    $110 = ($109|0)<($106|0);
    if ($110) {
     $j$14$i = $109;
    } else {
     label = 24;
     break L29;
    }
   }
   if ((label|0) == 23) {
    $118 = (($25) + 172|0);
    HEAP32[$118>>2] = $j$14$i;
    $$0$i$ph = 0;
   }
   $122 = HEAP32[$3>>2]|0;
   $123 = HEAP32[$97>>2]|0;
   $124 = ($122|0)==($123|0);
   $125 = (($v) + 44|0);
   if ($124) {
    HEAP32[$125>>2] = 0;
    $134 = 0;
    break;
   } else {
    HEAP32[$125>>2] = $$0$i$ph;
    $134 = $$0$i$ph;
    break;
   }
  } else {
   label = 24;
  }
 } while(0);
 do {
  if ((label|0) == 24) {
   $119 = HEAP32[$21>>2]|0;
   $120 = ($119|0)==(0);
   if ($120) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $121 = (($v) + 44|0);
    HEAP32[$121>>2] = 0;
    $134 = 0;
    break;
   }
  }
 } while(0);
 $126 = HEAP32[$8>>2]|0;
 $127 = HEAP32[$10>>2]|0;
 $128 = (($3) + ($127<<2)|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129|0) / 4)&-1;
 $131 = (($130) + ($126))|0;
 $132 = (($v) + 44|0);
 $133 = (($3) + ($134<<2)|0);
 $135 = HEAP32[$133>>2]|0;
 $136 = (($135|0) / 4)&-1;
 $137 = (($131) + ($136))|0;
 $138 = (($135|0) / 2)&-1;
 $139 = (($137) + ($138))|0;
 $140 = HEAP32[$31>>2]|0;
 $141 = ($140|0)<($139|0);
 if ($141) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $142 = (($vb) + 84|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)==(0|0);
 if (!($144)) {
  $reap$01$i = $143;
  while(1) {
   $145 = (($reap$01$i) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = HEAP32[$reap$01$i>>2]|0;
   _free($147);
   _free($reap$01$i);
   $148 = ($146|0)==(0|0);
   if ($148) {
    break;
   } else {
    $reap$01$i = $146;
   }
  }
 }
 $149 = (($vb) + 80|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)==(0);
 if (!($151)) {
  $152 = (($vb) + 68|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($vb) + 76|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + ($150))|0;
  $157 = (_realloc($153,$156)|0);
  HEAP32[$152>>2] = $157;
  $158 = HEAP32[$149>>2]|0;
  $159 = HEAP32[$154>>2]|0;
  $160 = (($159) + ($158))|0;
  HEAP32[$154>>2] = $160;
  HEAP32[$149>>2] = 0;
 }
 $161 = (($vb) + 72|0);
 HEAP32[$161>>2] = 0;
 HEAP32[$142>>2] = 0;
 $162 = (($v) + 36|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (($vb) + 24|0);
 HEAP32[$164>>2] = $163;
 $165 = HEAP32[$10>>2]|0;
 $166 = (($vb) + 28|0);
 HEAP32[$166>>2] = $165;
 $167 = HEAP32[$132>>2]|0;
 $168 = (($vb) + 32|0);
 HEAP32[$168>>2] = $167;
 $169 = HEAP32[$10>>2]|0;
 $170 = ($169|0)==(0);
 L57: do {
  if ($170) {
   $177 = HEAP32[$4>>2]|0;
   $178 = HEAP32[$177>>2]|0;
   $179 = HEAP32[$0>>2]|0;
   $180 = (($179) + 28|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = HEAP32[$8>>2]|0;
   $183 = HEAP32[$181>>2]|0;
   $184 = (($183|0) / 4)&-1;
   $185 = (($182) - ($184))|0;
   $186 = (($184) + ($182))|0;
   $187 = HEAP32[$181>>2]|0;
   $188 = (($187|0) / 4)&-1;
   $beginW$0$i = (($185) - ($188))|0;
   $endW$0$i = (($186) + ($188))|0;
   $189 = (($178) + 172|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($190|0)>=($beginW$0$i|0);
   $192 = ($190|0)<($endW$0$i|0);
   $or$cond$i2 = $191 & $192;
   L59: do {
    if (!($or$cond$i2)) {
     $193 = (($178) + 8|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($beginW$0$i|0) / ($194|0))&-1;
     $196 = (($endW$0$i|0) / ($194|0))&-1;
     $197 = ($195|0)<($196|0);
     if ($197) {
      $198 = (($178) + 160|0);
      $199 = HEAP32[$198>>2]|0;
      $i$02$i = $195;
      while(1) {
       $202 = (($199) + ($i$02$i<<2)|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($203|0)==(0);
       $200 = (($i$02$i) + 1)|0;
       if (!($204)) {
        break L59;
       }
       $201 = ($200|0)<($196|0);
       if ($201) {
        $i$02$i = $200;
       } else {
        break;
       }
      }
     }
     $206 = (($17) + 8|0);
     HEAP32[$206>>2] = 1;
     break L57;
    }
   } while(0);
   $205 = (($17) + 8|0);
   HEAP32[$205>>2] = 0;
  } else {
   $171 = HEAP32[$162>>2]|0;
   $172 = ($171|0)==(0);
   if (!($172)) {
    $173 = HEAP32[$132>>2]|0;
    $174 = ($173|0)==(0);
    if (!($174)) {
     $176 = (($17) + 8|0);
     HEAP32[$176>>2] = 1;
     break;
    }
   }
   $175 = (($17) + 8|0);
   HEAP32[$175>>2] = 0;
  }
 } while(0);
 $207 = (($vb) + 64|0);
 HEAP32[$207>>2] = $v;
 $208 = (($v) + 64|0);
 $209 = $208;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = (($209) + 4)|0;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (_i64Add(($211|0),($214|0),1,0)|0);
 $216 = tempRet0;
 $217 = $208;
 $218 = $217;
 HEAP32[$218>>2] = $215;
 $219 = (($217) + 4)|0;
 $220 = $219;
 HEAP32[$220>>2] = $216;
 $221 = (($vb) + 56|0);
 $222 = $221;
 $223 = $222;
 HEAP32[$223>>2] = $211;
 $224 = (($222) + 4)|0;
 $225 = $224;
 HEAP32[$225>>2] = $214;
 $226 = (($v) + 56|0);
 $227 = $226;
 $228 = $227;
 $229 = HEAP32[$228>>2]|0;
 $230 = (($227) + 4)|0;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($vb) + 48|0);
 $234 = $233;
 $235 = $234;
 HEAP32[$235>>2] = $229;
 $236 = (($234) + 4)|0;
 $237 = $236;
 HEAP32[$237>>2] = $232;
 $238 = (($3) + ($169<<2)|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = (($vb) + 36|0);
 HEAP32[$240>>2] = $239;
 $241 = (($17) + 4|0);
 $242 = +HEAPF32[$241>>2];
 $243 = +HEAPF32[$7>>2];
 $244 = $242 > $243;
 if ($244) {
  HEAPF32[$7>>2] = $242;
  $260 = $242;
 } else {
  $260 = $243;
 }
 $245 = HEAP32[$0>>2]|0;
 $246 = (($245) + 28|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = (($247) + ($169<<2)|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (($249|0) / 2)&-1;
 $251 = (+($250|0));
 $252 = (($245) + 8|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = (+($253|0));
 $255 = $251 / $254;
 $256 = (($247) + 2936|0);
 $257 = +HEAPF32[$256>>2];
 $258 = $255 * $257;
 $259 = $258 + $260;
 $261 = $259 < -9999.0;
 $$0$i5 = $261 ? -9999.0 : $259;
 HEAPF32[$7>>2] = $$0$i5;
 HEAPF32[$241>>2] = $$0$i5;
 $262 = (($1) + 4|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = $263 << 2;
 $265 = (($264) + 7)|0;
 $266 = $265 & -8;
 $267 = (($vb) + 76|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ($266|0)>($268|0);
 $270 = (($vb) + 68|0);
 $271 = HEAP32[$270>>2]|0;
 if ($269) {
  $272 = ($271|0)==(0|0);
  if (!($272)) {
   $273 = (_malloc(8)|0);
   $274 = HEAP32[$142>>2]|0;
   $275 = (($273) + 4|0);
   HEAP32[$275>>2] = $274;
   HEAP32[$273>>2] = $271;
   HEAP32[$142>>2] = $273;
  }
  HEAP32[$267>>2] = $266;
  $276 = (_malloc($266)|0);
  HEAP32[$270>>2] = $276;
  HEAP32[$161>>2] = 0;
  $$pre = HEAP32[$262>>2]|0;
  $277 = $276;$279 = $$pre;$284 = $266;
 } else {
  $277 = $271;$279 = $263;$284 = $268;
 }
 HEAP32[$161>>2] = $266;
 HEAP32[$vb>>2] = $277;
 $278 = $279 << 2;
 $280 = (($278) + 7)|0;
 $281 = $280 & -8;
 $282 = (($281) + ($266))|0;
 $283 = ($282|0)>($284|0);
 if ($283) {
  $285 = ($277|0)==(0|0);
  if (!($285)) {
   $286 = (_malloc(8)|0);
   $287 = HEAP32[$149>>2]|0;
   $288 = (($287) + ($266))|0;
   HEAP32[$149>>2] = $288;
   $289 = HEAP32[$142>>2]|0;
   $290 = (($286) + 4|0);
   HEAP32[$290>>2] = $289;
   HEAP32[$286>>2] = $277;
   HEAP32[$142>>2] = $286;
  }
  HEAP32[$267>>2] = $281;
  $291 = (_malloc($281)|0);
  HEAP32[$270>>2] = $291;
  HEAP32[$161>>2] = 0;
  $$pre10 = HEAP32[$262>>2]|0;
  $293 = $291;$294 = 0;$296 = $$pre10;$433 = $281;
 } else {
  $293 = $277;$294 = $266;$296 = $279;$433 = $284;
 }
 $292 = (($293) + ($294)|0);
 $295 = (($294) + ($281))|0;
 HEAP32[$161>>2] = $295;
 HEAP32[$17>>2] = $292;
 $297 = ($296|0)>(0);
 L89: do {
  if ($297) {
   $298 = (($v) + 8|0);
   $305 = $295;$307 = $433;$i$07 = 0;
   while(1) {
    $299 = HEAP32[$240>>2]|0;
    $300 = (($299) + ($15))|0;
    $301 = $300 << 2;
    $302 = (($301) + 7)|0;
    $303 = $302 & -8;
    $304 = (($303) + ($305))|0;
    $306 = ($304|0)>($307|0);
    $308 = HEAP32[$270>>2]|0;
    if ($306) {
     $309 = ($308|0)==(0|0);
     if (!($309)) {
      $310 = (_malloc(8)|0);
      $311 = HEAP32[$149>>2]|0;
      $312 = (($311) + ($305))|0;
      HEAP32[$149>>2] = $312;
      $313 = HEAP32[$142>>2]|0;
      $314 = (($310) + 4|0);
      HEAP32[$314>>2] = $313;
      HEAP32[$310>>2] = $308;
      HEAP32[$142>>2] = $310;
     }
     HEAP32[$267>>2] = $303;
     $315 = (_malloc($303)|0);
     HEAP32[$270>>2] = $315;
     HEAP32[$161>>2] = 0;
     $317 = $315;$318 = 0;
    } else {
     $317 = $308;$318 = $305;
    }
    $316 = (($317) + ($318)|0);
    $319 = (($318) + ($303))|0;
    HEAP32[$161>>2] = $319;
    $320 = HEAP32[$17>>2]|0;
    $321 = (($320) + ($i$07<<2)|0);
    HEAP32[$321>>2] = $316;
    $322 = HEAP32[$17>>2]|0;
    $323 = (($322) + ($i$07<<2)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = HEAP32[$298>>2]|0;
    $326 = (($325) + ($i$07<<2)|0);
    $327 = HEAP32[$326>>2]|0;
    _memcpy(($324|0),($327|0),($301|0))|0;
    $328 = HEAP32[$17>>2]|0;
    $329 = (($328) + ($i$07<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + ($15<<2)|0);
    $332 = HEAP32[$vb>>2]|0;
    $333 = (($332) + ($i$07<<2)|0);
    HEAP32[$333>>2] = $331;
    $334 = (($i$07) + 1)|0;
    $335 = HEAP32[$262>>2]|0;
    $336 = ($334|0)<($335|0);
    if (!($336)) {
     break L89;
    }
    $$pre13 = HEAP32[$161>>2]|0;
    $$pre14 = HEAP32[$267>>2]|0;
    $305 = $$pre13;$307 = $$pre14;$i$07 = $334;
   }
  }
 } while(0);
 $337 = HEAP32[$21>>2]|0;
 $338 = ($337|0)==(0);
 if (!($338)) {
  $339 = HEAP32[$8>>2]|0;
  $340 = ($339|0)<($337|0);
  if (!($340)) {
   HEAP32[$21>>2] = -1;
   $341 = (($vb) + 44|0);
   HEAP32[$341>>2] = 1;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $342 = HEAP32[$97>>2]|0;
 $343 = (($342|0) / 2)&-1;
 $344 = (($137) - ($343))|0;
 $345 = ($344|0)>(0);
 if (!($345)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $346 = HEAP32[$5>>2]|0;
 $347 = (($346) + 168|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = (($346) + 8|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = (($348|0) / ($350|0))&-1;
 $352 = (($351) + 2)|0;
 $353 = (($344|0) / ($350|0))&-1;
 $354 = (($346) + 160|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = (($355) + ($353<<2)|0);
 $357 = (($352) - ($353))|0;
 $358 = $357 << 2;
 _memmove(($355|0),($356|0),($358|0))|0;
 $359 = HEAP32[$347>>2]|0;
 $360 = (($359) - ($344))|0;
 HEAP32[$347>>2] = $360;
 $361 = (($346) + 172|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = ($362|0)>(-1);
 if ($363) {
  $364 = (($362) - ($344))|0;
  HEAP32[$361>>2] = $364;
 }
 $365 = (($346) + 176|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = (($366) - ($344))|0;
 HEAP32[$365>>2] = $367;
 $368 = HEAP32[$31>>2]|0;
 $369 = (($368) - ($344))|0;
 HEAP32[$31>>2] = $369;
 $370 = HEAP32[$262>>2]|0;
 $371 = ($370|0)>(0);
 L112: do {
  if ($371) {
   $372 = (($v) + 8|0);
   $378 = $369;$i$16 = 0;
   while(1) {
    $373 = HEAP32[$372>>2]|0;
    $374 = (($373) + ($i$16<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + ($344<<2)|0);
    $377 = $378 << 2;
    _memmove(($375|0),($376|0),($377|0))|0;
    $379 = (($i$16) + 1)|0;
    $380 = HEAP32[$262>>2]|0;
    $381 = ($379|0)<($380|0);
    if (!($381)) {
     break L112;
    }
    $$pre12 = HEAP32[$31>>2]|0;
    $378 = $$pre12;$i$16 = $379;
   }
  }
 } while(0);
 $382 = HEAP32[$10>>2]|0;
 HEAP32[$162>>2] = $382;
 $383 = HEAP32[$132>>2]|0;
 HEAP32[$10>>2] = $383;
 HEAP32[$8>>2] = $343;
 $384 = HEAP32[$21>>2]|0;
 $385 = ($384|0)==(0);
 if ($385) {
  $419 = ($344|0)<(0);
  $420 = $419 << 31 >> 31;
  $421 = $226;
  $422 = $421;
  $423 = HEAP32[$422>>2]|0;
  $424 = (($421) + 4)|0;
  $425 = $424;
  $426 = HEAP32[$425>>2]|0;
  $427 = (_i64Add(($423|0),($426|0),($344|0),($420|0))|0);
  $428 = tempRet0;
  $429 = $226;
  $430 = $429;
  HEAP32[$430>>2] = $427;
  $431 = (($429) + 4)|0;
  $432 = $431;
  HEAP32[$432>>2] = $428;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $386 = (($384) - ($344))|0;
 $387 = ($386|0)<(1);
 $$ = $387 ? -1 : $386;
 HEAP32[$21>>2] = $$;
 $388 = ($343|0)<($$|0);
 if ($388) {
  $405 = ($344|0)<(0);
  $406 = $405 << 31 >> 31;
  $407 = $226;
  $408 = $407;
  $409 = HEAP32[$408>>2]|0;
  $410 = (($407) + 4)|0;
  $411 = $410;
  $412 = HEAP32[$411>>2]|0;
  $413 = (_i64Add(($409|0),($412|0),($344|0),($406|0))|0);
  $414 = tempRet0;
  $415 = $226;
  $416 = $415;
  HEAP32[$416>>2] = $413;
  $417 = (($415) + 4)|0;
  $418 = $417;
  HEAP32[$418>>2] = $414;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $389 = (($$) + ($344))|0;
  $390 = (($389) - ($343))|0;
  $391 = ($390|0)<(0);
  $392 = $391 << 31 >> 31;
  $393 = $226;
  $394 = $393;
  $395 = HEAP32[$394>>2]|0;
  $396 = (($393) + 4)|0;
  $397 = $396;
  $398 = HEAP32[$397>>2]|0;
  $399 = (_i64Add(($395|0),($398|0),($390|0),($392|0))|0);
  $400 = tempRet0;
  $401 = $226;
  $402 = $401;
  HEAP32[$402>>2] = $399;
  $403 = (($401) + 4)|0;
  $404 = $403;
  HEAP32[$404>>2] = $400;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ve_amp($ve,$gi,$data,$bands,$filters) {
 $ve = $ve|0;
 $gi = $gi|0;
 $data = $data|0;
 $bands = $bands|0;
 $filters = $filters|0;
 var $$ = 0, $$2 = 0, $$2$us = 0, $$2$v = 0, $$2$v$us = 0, $$3 = 0.0, $$3$us = 0.0, $$36 = 0, $$4$us = 0, $$4$v$us = 0, $$5 = 0, $$5$us = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$premin$0$us = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0;
 var $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0;
 var $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $acc$0$lcssa = 0.0, $acc$0$lcssa$us = 0.0, $acc$06 = 0.0, $acc$06$us = 0.0, $exitcond = 0, $exitcond28 = 0, $exitcond31 = 0, $exitcond32 = 0, $i$024 = 0, $i$121 = 0;
 var $i$27 = 0, $i$27$us = 0, $i$39$us = 0, $j$018 = 0, $j$018$us = 0, $p$18$us = 0, $penalty$0 = 0.0, $penalty$1 = 0.0, $premax$010$us = 0.0, $premin$011$us = 0.0, $ret$0$lcssa = 0, $ret$020 = 0, $ret$020$us = 0, $ret$1 = 0, $ret$1$us = 0, $ret$2 = 0, $ret$2$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ve) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ve) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 << 2;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$4)|0)+15)&-16)|0;
 $6 = (($ve) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(5);
 $9 = (($7|0) / 2)&-1;
 $$36 = $8 ? $9 : 2;
 $10 = (($gi) + 60|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($9) + -2)|0;
 $13 = (+($12|0));
 $14 = $11 - $13;
 $15 = $14 < 0.0;
 $penalty$0 = $15 ? 0.0 : $14;
 $16 = $penalty$0 > $11;
 $penalty$1 = $16 ? $11 : $penalty$0;
 $17 = ($1|0)>(0);
 if ($17) {
  $18 = (($ve) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $i$024 = 0;
  while(1) {
   $20 = (($data) + ($i$024<<2)|0);
   $21 = +HEAPF32[$20>>2];
   $22 = (($19) + ($i$024<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $21 * $23;
   $25 = (($5) + ($i$024<<2)|0);
   HEAPF32[$25>>2] = $24;
   $26 = (($i$024) + 1)|0;
   $exitcond28 = ($26|0)==($1|0);
   if ($exitcond28) {
    break;
   } else {
    $i$024 = $26;
   }
  }
 }
 $27 = (($ve) + 16|0);
 _mdct_forward($27,$5,$5);
 $28 = +HEAPF32[$5>>2];
 $29 = $28 * $28;
 $30 = $29;
 $31 = (($5) + 4|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $32;
 $34 = $33 * $33;
 $35 = $34 * 0.699999999999999955591;
 $36 = $30 + $35;
 $37 = (($5) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $38;
 $40 = $39 * $39;
 $41 = $40 * 0.200000000000000011102;
 $42 = $36 + $41;
 $43 = $42;
 $44 = (($filters) + 140|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = (($filters) + 136|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $43 + $48;
  $50 = (($filters) + 132|0);
  HEAPF32[$50>>2] = $49;
  HEAPF32[$47>>2] = $43;
  $61 = $49;
 } else {
  $51 = (($filters) + 132|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $43 + $52;
  HEAPF32[$51>>2] = $53;
  $54 = (($filters) + 136|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $43 + $55;
  HEAPF32[$54>>2] = $56;
  $61 = $53;
 }
 $57 = ((($filters) + ($45<<2)|0) + 72|0);
 $58 = +HEAPF32[$57>>2];
 $59 = (($filters) + 132|0);
 $60 = $61 - $58;
 HEAPF32[$59>>2] = $60;
 HEAPF32[$57>>2] = $43;
 $62 = HEAP32[$44>>2]|0;
 $63 = (($62) + 1)|0;
 $64 = ($62|0)>(13);
 $$ = $64 ? 0 : $63;
 HEAP32[$44>>2] = $$;
 $65 = (($1|0) / 2)&-1;
 $66 = ($1|0)>(1);
 L10: do {
  if ($66) {
   $67 = $61 * 0.0625;
   $68 = (HEAPF32[tempDoublePtr>>2]=$67,HEAP32[tempDoublePtr>>2]|0);
   $69 = $68 & 2147483647;
   $70 = (+($69>>>0));
   $71 = $70 * 7.1771142984289326705E-7;
   $72 = $71 + -764.6162109375;
   $73 = $72;
   $74 = $73 * 0.5;
   $75 = $74 + -15.0;
   $76 = $75;
   $130 = $28;$142 = $76;$i$121 = 0;
   while(1) {
    $129 = $130 * $130;
    $131 = $i$121 | 1;
    $132 = (($5) + ($131<<2)|0);
    $133 = +HEAPF32[$132>>2];
    $134 = $133 * $133;
    $135 = $129 + $134;
    $136 = (HEAPF32[tempDoublePtr>>2]=$135,HEAP32[tempDoublePtr>>2]|0);
    $137 = $136 & 2147483647;
    $138 = (+($137>>>0));
    $139 = $138 * 3.58855714921446633525E-7;
    $140 = $139 + -382.30810546875;
    $141 = $140 < $142;
    $143 = $141 ? $142 : $140;
    $144 = $143 < $3;
    $145 = $144 ? $3 : $143;
    $146 = $i$121 >> 1;
    $147 = (($5) + ($146<<2)|0);
    HEAPF32[$147>>2] = $145;
    $148 = (($i$121) + 2)|0;
    $149 = ($148|0)<($65|0);
    if (!($149)) {
     break L10;
    }
    $150 = $142 + -8.0;
    $$phi$trans$insert = (($5) + ($148<<2)|0);
    $$pre = +HEAPF32[$$phi$trans$insert>>2];
    $130 = $$pre;$142 = $150;$i$121 = $148;
   }
  }
 } while(0);
 $77 = ($$36|0)>(0);
 if ($77) {
  $j$018$us = 0;$ret$020$us = 0;
 } else {
  $j$018 = 0;$ret$020 = 0;
  while(1) {
   $151 = ((($bands) + ($j$018<<4)|0) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)>(0);
   if ($153) {
    $154 = (($bands) + ($j$018<<4)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($bands) + ($j$018<<4)|0) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    $acc$06 = 0.0;$i$27 = 0;
    while(1) {
     $158 = (($155) + ($i$27))|0;
     $159 = (($5) + ($158<<2)|0);
     $160 = +HEAPF32[$159>>2];
     $161 = (($157) + ($i$27<<2)|0);
     $162 = +HEAPF32[$161>>2];
     $163 = $160 * $162;
     $164 = $acc$06 + $163;
     $165 = (($i$27) + 1)|0;
     $166 = ($165|0)<($152|0);
     if ($166) {
      $acc$06 = $164;$i$27 = $165;
     } else {
      $acc$0$lcssa = $164;
      break;
     }
    }
   } else {
    $acc$0$lcssa = 0.0;
   }
   $167 = ((($bands) + ($j$018<<4)|0) + 12|0);
   $168 = +HEAPF32[$167>>2];
   $169 = $acc$0$lcssa * $168;
   $170 = ((($filters) + (($j$018*144)|0)|0) + 68|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)<(1);
   $$2$v = $172 ? 16 : -1;
   $$2 = (($$2$v) + ($171))|0;
   $173 = ((($filters) + (($j$018*144)|0)|0) + ($$2<<2)|0);
   $174 = +HEAPF32[$173>>2];
   $175 = $169 < $174;
   $176 = $175 ? $174 : $169;
   $177 = $169 > $174;
   $$3 = $177 ? $174 : $169;
   $178 = $$3 + -99999.0;
   $179 = $176 + 99999.0;
   $180 = ((($filters) + (($j$018*144)|0)|0) + ($171<<2)|0);
   HEAPF32[$180>>2] = $169;
   $181 = HEAP32[$170>>2]|0;
   $182 = (($181) + 1)|0;
   $183 = ($181|0)>(15);
   $$5 = $183 ? 0 : $182;
   HEAP32[$170>>2] = $$5;
   $184 = ((($gi) + ($j$018<<2)|0) + 4|0);
   $185 = +HEAPF32[$184>>2];
   $186 = $penalty$1 + $185;
   $187 = $179 > $186;
   $188 = $ret$020 | 5;
   $ret$1 = $187 ? $188 : $ret$020;
   $189 = ((($gi) + ($j$018<<2)|0) + 32|0);
   $190 = +HEAPF32[$189>>2];
   $191 = $190 - $penalty$1;
   $192 = $178 < $191;
   $193 = $ret$1 | 2;
   $ret$2 = $192 ? $193 : $ret$1;
   $194 = (($j$018) + 1)|0;
   $exitcond = ($194|0)==(7);
   if ($exitcond) {
    $ret$0$lcssa = $ret$2;
    break;
   } else {
    $j$018 = $194;$ret$020 = $ret$2;
   }
  }
  STACKTOP = sp;return ($ret$0$lcssa|0);
 }
 while(1) {
  $78 = ((($bands) + ($j$018$us<<4)|0) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)>(0);
  if ($80) {
   $120 = (($bands) + ($j$018$us<<4)|0);
   $110 = HEAP32[$120>>2]|0;
   $121 = ((($bands) + ($j$018$us<<4)|0) + 8|0);
   $114 = HEAP32[$121>>2]|0;
   $acc$06$us = 0.0;$i$27$us = 0;
   while(1) {
    $109 = (($110) + ($i$27$us))|0;
    $111 = (($5) + ($109<<2)|0);
    $112 = +HEAPF32[$111>>2];
    $113 = (($114) + ($i$27$us<<2)|0);
    $115 = +HEAPF32[$113>>2];
    $116 = $112 * $115;
    $117 = $acc$06$us + $116;
    $118 = (($i$27$us) + 1)|0;
    $119 = ($118|0)<($79|0);
    if ($119) {
     $acc$06$us = $117;$i$27$us = $118;
    } else {
     $acc$0$lcssa$us = $117;
     break;
    }
   }
  } else {
   $acc$0$lcssa$us = 0.0;
  }
  $122 = ((($bands) + ($j$018$us<<4)|0) + 12|0);
  $123 = +HEAPF32[$122>>2];
  $87 = $acc$0$lcssa$us * $123;
  $89 = ((($filters) + (($j$018$us*144)|0)|0) + 68|0);
  $86 = HEAP32[$89>>2]|0;
  $124 = ($86|0)<(1);
  $$2$v$us = $124 ? 16 : -1;
  $$2$us = (($$2$v$us) + ($86))|0;
  $125 = ((($filters) + (($j$018$us*144)|0)|0) + ($$2$us<<2)|0);
  $126 = +HEAPF32[$125>>2];
  $127 = $87 < $126;
  $84 = $127 ? $126 : $87;
  $128 = $87 > $126;
  $$3$us = $128 ? $126 : $87;
  $i$39$us = 0;$p$18$us = $$2$us;$premax$010$us = -99999.0;$premin$011$us = 99999.0;
  while(1) {
   $103 = ($p$18$us|0)<(1);
   $$4$v$us = $103 ? 16 : -1;
   $$4$us = (($$4$v$us) + ($p$18$us))|0;
   $104 = ((($filters) + (($j$018$us*144)|0)|0) + ($$4$us<<2)|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $premax$010$us < $105;
   $83 = $106 ? $105 : $premax$010$us;
   $107 = $premin$011$us > $105;
   $$premin$0$us = $107 ? $105 : $premin$011$us;
   $108 = (($i$39$us) + 1)|0;
   $exitcond31 = ($108|0)==($$36|0);
   if ($exitcond31) {
    break;
   } else {
    $i$39$us = $108;$p$18$us = $$4$us;$premax$010$us = $83;$premin$011$us = $$premin$0$us;
   }
  }
  $81 = $$3$us - $$premin$0$us;
  $82 = $84 - $83;
  $85 = ((($filters) + (($j$018$us*144)|0)|0) + ($86<<2)|0);
  HEAPF32[$85>>2] = $87;
  $88 = HEAP32[$89>>2]|0;
  $90 = (($88) + 1)|0;
  $91 = ($88|0)>(15);
  $$5$us = $91 ? 0 : $90;
  HEAP32[$89>>2] = $$5$us;
  $92 = ((($gi) + ($j$018$us<<2)|0) + 4|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $penalty$1 + $93;
  $95 = $82 > $94;
  $96 = $ret$020$us | 5;
  $ret$1$us = $95 ? $96 : $ret$020$us;
  $97 = ((($gi) + ($j$018$us<<2)|0) + 32|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $98 - $penalty$1;
  $100 = $81 < $99;
  $101 = $ret$1$us | 2;
  $ret$2$us = $100 ? $101 : $ret$1$us;
  $102 = (($j$018$us) + 1)|0;
  $exitcond32 = ($102|0)==(7);
  if ($exitcond32) {
   $ret$0$lcssa = $ret$2$us;
   break;
  } else {
   $j$018$us = $102;$ret$020$us = $ret$2$us;
  }
 }
 STACKTOP = sp;return ($ret$0$lcssa|0);
}
function _vorbis_lpc_from_data($data,$lpci,$n,$m) {
 $data = $data|0;
 $lpci = $lpci|0;
 $n = $n|0;
 $m = $m|0;
 var $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $9 = 0.0, $d$0$lcssa = 0.0, $d$025 = 0.0, $damp$04 = 0.0, $error$020 = 0.0, $exitcond = 0, $exitcond31 = 0, $exitcond32 = 0, $exitcond38 = 0, $i$026 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$16 = 0, $j$2$lcssa = 0, $j$211 = 0, $j$33 = 0, $j$41 = 0;
 var $r$07 = 0.0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($m) + 1)|0;
 $1 = $0 << 3;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1)|0)+15)&-16)|0;
 $3 = $m << 3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$3)|0)+15)&-16)|0;
 $5 = ($0|0)==(0);
 if ($5) {
  $22 = 0.0;
 } else {
  $6 = $m;
  while(1) {
   $7 = ($6|0)<($n|0);
   if ($7) {
    $d$025 = 0.0;$i$026 = $6;
    while(1) {
     $8 = (($data) + ($i$026<<2)|0);
     $9 = +HEAPF32[$8>>2];
     $10 = $9;
     $11 = (($i$026) - ($6))|0;
     $12 = (($data) + ($11<<2)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = $13;
     $15 = $10 * $14;
     $16 = $d$025 + $15;
     $17 = (($i$026) + 1)|0;
     $exitcond38 = ($17|0)==($n|0);
     if ($exitcond38) {
      $d$0$lcssa = $16;
      break;
     } else {
      $d$025 = $16;$i$026 = $17;
     }
    }
   } else {
    $d$0$lcssa = 0.0;
   }
   $18 = (($2) + ($6<<3)|0);
   HEAPF64[$18>>3] = $d$0$lcssa;
   $19 = (($6) + -1)|0;
   $20 = ($6|0)==(0);
   if ($20) {
    break;
   } else {
    $6 = $19;
   }
  }
  $$pre = +HEAPF64[$2>>3];
  $22 = $$pre;
 }
 $21 = $22 * 1.00000000000000006228E-9;
 $23 = $21 + 1.00000000000000003643E-10;
 $24 = ($m|0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $22 * 1.00000000010000000827;
 $error$020 = $25;$indvars$iv = 0;
 while(1) {
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $26 = $error$020 < $23;
  if ($26) {
   label = 9;
   break;
  }
  $30 = (($2) + ($indvars$iv$next<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = -$31;
  $33 = ($indvars$iv|0)>(0);
  if ($33) {
   $j$16 = 0;$r$07 = $32;
   while(1) {
    $36 = (($4) + ($j$16<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (($indvars$iv) - ($j$16))|0;
    $39 = (($2) + ($38<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $41 = $37 * $40;
    $42 = $r$07 - $41;
    $43 = (($j$16) + 1)|0;
    $exitcond32 = ($43|0)==($indvars$iv|0);
    if ($exitcond32) {
     break;
    } else {
     $j$16 = $43;$r$07 = $42;
    }
   }
   $44 = $42 / $error$020;
   $45 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$45>>3] = $44;
   $46 = (($indvars$iv|0) / 2)&-1;
   $47 = ($indvars$iv|0)>(1);
   if ($47) {
    $48 = (($indvars$iv) + -1)|0;
    $49 = ($46|0)>(1);
    $j$211 = 0;
    while(1) {
     $50 = (($4) + ($j$211<<3)|0);
     $51 = +HEAPF64[$50>>3];
     $52 = (($48) - ($j$211))|0;
     $53 = (($4) + ($52<<3)|0);
     $54 = +HEAPF64[$53>>3];
     $55 = $44 * $54;
     $56 = $51 + $55;
     HEAPF64[$50>>3] = $56;
     $57 = $44 * $51;
     $58 = +HEAPF64[$53>>3];
     $59 = $57 + $58;
     HEAPF64[$53>>3] = $59;
     $60 = (($j$211) + 1)|0;
     $61 = ($60|0)<($46|0);
     if ($61) {
      $j$211 = $60;
     } else {
      break;
     }
    }
    $smax = $49 ? $46 : 1;
    $67 = $44;$j$2$lcssa = $smax;
   } else {
    $67 = $44;$j$2$lcssa = 0;
   }
  } else {
   $34 = $32 / $error$020;
   $35 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$35>>3] = $34;
   $67 = $34;$j$2$lcssa = 0;
  }
  $62 = $indvars$iv & 1;
  $63 = ($62|0)==(0);
  if (!($63)) {
   $64 = (($4) + ($j$2$lcssa<<3)|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $67 * $65;
   $68 = $65 + $66;
   HEAPF64[$64>>3] = $68;
  }
  $69 = $67 * $67;
  $70 = 1.0 - $69;
  $71 = $error$020 * $70;
  $72 = ($indvars$iv$next|0)<($m|0);
  if ($72) {
   $error$020 = $71;$indvars$iv = $indvars$iv$next;
  } else {
   $damp$04 = 0.989999999999999991118;$j$33 = 0;
   break;
  }
 }
 if ((label|0) == 9) {
  $27 = (($4) + ($indvars$iv<<3)|0);
  $28 = (($m) - ($indvars$iv))|0;
  $29 = $28 << 3;
  _memset(($27|0),0,($29|0))|0;
  $damp$04 = 0.989999999999999991118;$j$33 = 0;
 }
 while(1) {
  $73 = (($4) + ($j$33<<3)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $damp$04 * $74;
  HEAPF64[$73>>3] = $75;
  $76 = (($j$33) + 1)|0;
  $exitcond31 = ($76|0)==($m|0);
  if ($exitcond31) {
   $j$41 = 0;
   break;
  }
  $77 = $damp$04 * 0.989999999999999991118;
  $damp$04 = $77;$j$33 = $76;
 }
 while(1) {
  $78 = (($4) + ($j$41<<3)|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $79;
  $81 = (($lpci) + ($j$41<<2)|0);
  HEAPF32[$81>>2] = $80;
  $82 = (($j$41) + 1)|0;
  $exitcond = ($82|0)==($m|0);
  if ($exitcond) {
   break;
  } else {
   $j$41 = $82;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_lpc_predict($coeff,$prime,$m,$data,$n) {
 $coeff = $coeff|0;
 $prime = $prime|0;
 $m = $m|0;
 $data = $data|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond19 = 0, $i$27$us = 0, $indvars$iv = 0, $indvars$iv$next = 0, $o$02$us = 0, $p$03$us = 0, $y$04$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($m))|0;
 $1 = $0 << 2;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1)|0)+15)&-16)|0;
 $3 = ($prime|0)==(0|0);
 $4 = ($m|0)>(0);
 if ($3) {
  if ($4) {
   $6 = $m << 2;
   _memset(($2|0),0,($6|0))|0;
  }
 } else {
  if ($4) {
   $5 = $m << 2;
   _memcpy(($2|0),($prime|0),($5|0))|0;
  }
 }
 $7 = ($n|0)>(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 if ($4) {
  $i$27$us = 0;$indvars$iv = $m;
 } else {
  $8 = $n << 2;
  _memset(($2|0),0,($8|0))|0;
  _memset(($data|0),0,($8|0))|0;
  STACKTOP = sp;return;
 }
 while(1) {
  $o$02$us = $i$27$us;$p$03$us = $m;$y$04$us = 0.0;
  while(1) {
   $13 = (($o$02$us) + 1)|0;
   $14 = (($2) + ($o$02$us<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = (($p$03$us) + -1)|0;
   $17 = (($coeff) + ($16<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $15 * $18;
   $10 = $y$04$us - $19;
   $exitcond = ($13|0)==($indvars$iv|0);
   if ($exitcond) {
    break;
   } else {
    $o$02$us = $13;$p$03$us = $16;$y$04$us = $10;
   }
  }
  $9 = (($2) + ($indvars$iv<<2)|0);
  HEAPF32[$9>>2] = $10;
  $11 = (($data) + ($i$27$us<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($i$27$us) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond19 = ($12|0)==($n|0);
  if ($exitcond19) {
   break;
  } else {
   $i$27$us = $12;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_analysis($vb) {
 $vb = $vb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($vb) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 88|0);
 $3 = (($1) + 12|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (($4) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$5>>2] = $9;
  HEAP8[$9>>0] = 0;
  HEAP32[$4>>2] = 0;
  $10 = (($4) + 4|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = (($1) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = (($12) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$13>>2] = $17;
  HEAP8[$17>>0] = 0;
  HEAP32[$12>>2] = 0;
  $18 = (($12) + 4|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = (($1) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (($20) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$21>>2] = $25;
  HEAP8[$25>>0] = 0;
  HEAP32[$20>>2] = 0;
  $26 = (($20) + 4|0);
  HEAP32[$26>>2] = 0;
 }
 $27 = (($1) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = (($28) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$29>>2] = $33;
  HEAP8[$33>>0] = 0;
  HEAP32[$28>>2] = 0;
  $34 = (($28) + 4|0);
  HEAP32[$34>>2] = 0;
 }
 $35 = (($1) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  $40 = (($36) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$37>>2] = $41;
  HEAP8[$41>>0] = 0;
  HEAP32[$36>>2] = 0;
  $42 = (($36) + 4|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = (($1) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  $48 = (($44) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$45>>2] = $49;
  HEAP8[$49>>0] = 0;
  HEAP32[$44>>2] = 0;
  $50 = (($44) + 4|0);
  HEAP32[$50>>2] = 0;
 }
 $51 = (($1) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $56 = (($52) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$53>>2] = $57;
  HEAP8[$57>>0] = 0;
  HEAP32[$52>>2] = 0;
  $58 = (($52) + 4|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = (($1) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $64 = (($60) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$61>>2] = $65;
  HEAP8[$65>>0] = 0;
  HEAP32[$60>>2] = 0;
  $66 = (($60) + 4|0);
  HEAP32[$66>>2] = 0;
 }
 $67 = (($1) + 44|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = (($68) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$69>>2] = $73;
  HEAP8[$73>>0] = 0;
  HEAP32[$68>>2] = 0;
  $74 = (($68) + 4|0);
  HEAP32[$74>>2] = 0;
 }
 $75 = (($1) + 48|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)==(0|0);
 if (!($79)) {
  $80 = (($76) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$77>>2] = $81;
  HEAP8[$81>>0] = 0;
  HEAP32[$76>>2] = 0;
  $82 = (($76) + 4|0);
  HEAP32[$82>>2] = 0;
 }
 $83 = (($1) + 52|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  $88 = (($84) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$85>>2] = $89;
  HEAP8[$89>>0] = 0;
  HEAP32[$84>>2] = 0;
  $90 = (($84) + 4|0);
  HEAP32[$90>>2] = 0;
 }
 $91 = (($1) + 56|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  $96 = (($92) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$93>>2] = $97;
  HEAP8[$97>>0] = 0;
  HEAP32[$92>>2] = 0;
  $98 = (($92) + 4|0);
  HEAP32[$98>>2] = 0;
 }
 $99 = (($1) + 60|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0|0);
 if (!($103)) {
  $104 = (($100) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$101>>2] = $105;
  HEAP8[$105>>0] = 0;
  HEAP32[$100>>2] = 0;
  $106 = (($100) + 4|0);
  HEAP32[$106>>2] = 0;
 }
 $107 = (($1) + 64|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 12|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)==(0|0);
 if (!($111)) {
  $112 = (($108) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  HEAP32[$109>>2] = $113;
  HEAP8[$113>>0] = 0;
  HEAP32[$108>>2] = 0;
  $114 = (($108) + 4|0);
  HEAP32[$114>>2] = 0;
 }
 $115 = (($1) + 68|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 12|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0|0);
 if ($119) {
  (_mapping0_forward($vb)|0);
  STACKTOP = sp;return;
 }
 $120 = (($116) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$117>>2] = $121;
 HEAP8[$121>>0] = 0;
 HEAP32[$116>>2] = 0;
 $122 = (($116) + 4|0);
 HEAP32[$122>>2] = 0;
 (_mapping0_forward($vb)|0);
 STACKTOP = sp;return;
}
function _setup_tone_curves($curveatt_dB,$binHz,$n,$center_boost,$center_decay_rate) {
 $curveatt_dB = $curveatt_dB|0;
 $binHz = +$binHz;
 $n = $n|0;
 $center_boost = +$center_boost;
 $center_decay_rate = +$center_decay_rate;
 var $$ = 0, $$3 = 0, $$5 = 0, $$op = 0.0, $$op117 = 0, $$op118 = 0, $$op119 = 0, $$op120 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0;
 var $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0;
 var $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0;
 var $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0;
 var $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $adj$0$us$us$us = 0.0;
 var $adj$0$us$us76 = 0.0, $adj$1$us$us$us = 0.0, $adj$1$us62 = 0.0, $ath = 0, $athc = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i10 = 0, $exitcond$i13 = 0, $exitcond$i15 = 0, $exitcond$i8 = 0, $exitcond100 = 0, $exitcond101 = 0, $exitcond102 = 0, $exitcond103 = 0, $exitcond104 = 0, $exitcond106 = 0, $exitcond108 = 0, $exitcond109 = 0, $exitcond110 = 0;
 var $exitcond111 = 0, $exitcond112 = 0, $exitcond113 = 0, $exitcond114 = 0, $exitcond115 = 0, $exitcond116 = 0, $exitcond90 = 0, $exitcond91 = 0, $exitcond92 = 0, $exitcond99 = 0, $hi_bin$0 = 0, $hi_bin3$0 = 0, $i$01$i = 0, $i$01$i12 = 0, $i$01$i14 = 0, $i$01$i7 = 0, $i$01$i9 = 0, $i$084 = 0, $i$1$ = 0, $i$149 = 0;
 var $ispos = 0, $ispos$us$us$us = 0, $ispos$us$us74 = 0, $ispos$us59 = 0, $j$054 = 0, $j$10$lcssa = 0, $j$1044 = 0, $j$264 = 0, $j$264$us = 0, $j$382 = 0, $j$483 = 0, $j$517 = 0, $j$623 = 0, $j$736 = 0, $j$842 = 0, $j$9$lcssa = 0, $j$943 = 0, $k$157 = 0, $k$157$us$us$us = 0, $k$157$us$us73 = 0;
 var $k$157$us58 = 0, $k$226 = 0, $l$022 = 0, $l$2$lcssa = 0, $l$219 = 0, $l$324 = 0, $l1$035 = 0, $l1$2$lcssa = 0, $l1$229 = 0, $l1$338 = 0, $lo_bin$1 = 0, $lo_bin$1$l$0 = 0, $lo_bin2$1 = 0, $lo_bin2$1$l1$0 = 0, $lo_curve$1 = 0, $m$045 = 0, $min$1 = 0.0, $min$1$1 = 0.0, $min$1$2 = 0.0, $min$1$3 = 0.0;
 var $n$hi_bin$0 = 0, $n$hi_bin3$0 = 0, $neg = 0, $neg$us$us$us = 0, $neg$us$us75 = 0, $neg$us60 = 0, $or$cond418 = 0, $or$cond628 = 0, $smax = 0, $smax87 = 0, $smax89 = 0, $smax93 = 0, $smax95 = 0, $smax97 = 0, $umax = 0, $umax98 = 0, $workc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32480|0;
 $ath = sp + 32256|0;
 $workc = sp + 1792|0;
 $athc = sp;
 $0 = $n << 2;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $2 = (_malloc(68)|0);
 _memset(($workc|0),0,30464)|0;
 $3 = $center_boost > 0.0;
 $4 = $center_boost < 0.0;
 $i$084 = 0;
 while(1) {
  $8 = $i$084 << 2;
  $j$054 = 0;
  while(1) {
   $9 = (($j$054) + ($8))|0;
   $10 = ($9|0)<(88);
   if ($10) {
    $11 = (32696 + ($9<<2)|0);
    $12 = +HEAPF32[$11>>2];
    $min$1 = $12;
   } else {
    $min$1 = -30.0;
   }
   $13 = (($9) + 1)|0;
   $14 = ($13|0)<(88);
   if ($14) {
    $294 = (32696 + ($13<<2)|0);
    $295 = +HEAPF32[$294>>2];
    $296 = $min$1 > $295;
    if ($296) {
     $min$1$1 = $295;
    } else {
     $min$1$1 = $min$1;
    }
   } else {
    $293 = $min$1 > -30.0;
    if ($293) {
     $min$1$1 = -30.0;
    } else {
     $min$1$1 = $min$1;
    }
   }
   $297 = (($9) + 2)|0;
   $298 = ($297|0)<(88);
   if ($298) {
    $300 = (32696 + ($297<<2)|0);
    $301 = +HEAPF32[$300>>2];
    $302 = $min$1$1 > $301;
    if ($302) {
     $min$1$2 = $301;
    } else {
     $min$1$2 = $min$1$1;
    }
   } else {
    $299 = $min$1$1 > -30.0;
    if ($299) {
     $min$1$2 = -30.0;
    } else {
     $min$1$2 = $min$1$1;
    }
   }
   $303 = (($9) + 3)|0;
   $304 = ($303|0)<(88);
   if ($304) {
    $306 = (32696 + ($303<<2)|0);
    $307 = +HEAPF32[$306>>2];
    $308 = $min$1$2 > $307;
    if ($308) {
     $min$1$3 = $307;
    } else {
     $min$1$3 = $min$1$2;
    }
   } else {
    $305 = $min$1$2 > -30.0;
    if ($305) {
     $min$1$3 = -30.0;
    } else {
     $min$1$3 = $min$1$2;
    }
   }
   $309 = (($ath) + ($j$054<<2)|0);
   HEAPF32[$309>>2] = $min$1$3;
   $310 = (($j$054) + 1)|0;
   $exitcond106 = ($310|0)==(56);
   if ($exitcond106) {
    break;
   } else {
    $j$054 = $310;
   }
  }
  $15 = ((($workc) + (($i$084*1792)|0)|0) + 448|0);
  $16 = (33192 + (($i$084*1344)|0)|0);
  _memcpy(($15|0),($16|0),224)|0;
  $17 = ((($workc) + (($i$084*1792)|0)|0) + 672|0);
  $18 = ((33192 + (($i$084*1344)|0)|0) + 224|0);
  _memcpy(($17|0),($18|0),224)|0;
  $19 = ((($workc) + (($i$084*1792)|0)|0) + 896|0);
  $20 = ((33192 + (($i$084*1344)|0)|0) + 448|0);
  _memcpy(($19|0),($20|0),224)|0;
  $21 = ((($workc) + (($i$084*1792)|0)|0) + 1120|0);
  $22 = ((33192 + (($i$084*1344)|0)|0) + 672|0);
  _memcpy(($21|0),($22|0),224)|0;
  $23 = ((($workc) + (($i$084*1792)|0)|0) + 1344|0);
  $24 = ((33192 + (($i$084*1344)|0)|0) + 896|0);
  _memcpy(($23|0),($24|0),224)|0;
  $25 = ((($workc) + (($i$084*1792)|0)|0) + 1568|0);
  $26 = ((33192 + (($i$084*1344)|0)|0) + 1120|0);
  _memcpy(($25|0),($26|0),224)|0;
  $27 = (($workc) + (($i$084*1792)|0)|0);
  _memcpy(($27|0),($16|0),224)|0;
  $28 = ((($workc) + (($i$084*1792)|0)|0) + 224|0);
  _memcpy(($28|0),($16|0),224)|0;
  if ($3) {
   $j$264$us = 0;
   while(1) {
    if ($4) {
     $k$157$us$us$us = 0;
     while(1) {
      $40 = (16 - ($k$157$us$us$us))|0;
      $ispos$us$us$us = ($40|0)>(-1);
      $neg$us$us$us = (0 - ($40))|0;
      $41 = $ispos$us$us$us ? $40 : $neg$us$us$us;
      $42 = (+($41|0));
      $43 = $42 * $center_decay_rate;
      $44 = $43 + $center_boost;
      $45 = $44 < 0.0;
      $adj$0$us$us$us = $45 ? 0.0 : $44;
      $46 = $adj$0$us$us$us > 0.0;
      $adj$1$us$us$us = $46 ? 0.0 : $adj$0$us$us$us;
      $47 = (((($workc) + (($i$084*1792)|0)|0) + (($j$264$us*224)|0)|0) + ($k$157$us$us$us<<2)|0);
      $48 = +HEAPF32[$47>>2];
      $49 = $adj$1$us$us$us + $48;
      HEAPF32[$47>>2] = $49;
      $50 = (($k$157$us$us$us) + 1)|0;
      $exitcond114 = ($50|0)==(56);
      if ($exitcond114) {
       break;
      } else {
       $k$157$us$us$us = $50;
      }
     }
    } else {
     $k$157$us$us73 = 0;
     while(1) {
      $30 = (16 - ($k$157$us$us73))|0;
      $ispos$us$us74 = ($30|0)>(-1);
      $neg$us$us75 = (0 - ($30))|0;
      $31 = $ispos$us$us74 ? $30 : $neg$us$us75;
      $32 = (+($31|0));
      $33 = $32 * $center_decay_rate;
      $34 = $33 + $center_boost;
      $35 = $34 < 0.0;
      $adj$0$us$us76 = $35 ? 0.0 : $34;
      $36 = (((($workc) + (($i$084*1792)|0)|0) + (($j$264$us*224)|0)|0) + ($k$157$us$us73<<2)|0);
      $37 = +HEAPF32[$36>>2];
      $38 = $adj$0$us$us76 + $37;
      HEAPF32[$36>>2] = $38;
      $39 = (($k$157$us$us73) + 1)|0;
      $exitcond113 = ($39|0)==(56);
      if ($exitcond113) {
       break;
      } else {
       $k$157$us$us73 = $39;
      }
     }
    }
    $29 = (($j$264$us) + 1)|0;
    $exitcond115 = ($29|0)==(8);
    if ($exitcond115) {
     break;
    } else {
     $j$264$us = $29;
    }
   }
  } else {
   $j$264 = 0;
   while(1) {
    if ($4) {
     $k$157$us58 = 0;
     while(1) {
      $51 = (16 - ($k$157$us58))|0;
      $ispos$us59 = ($51|0)>(-1);
      $neg$us60 = (0 - ($51))|0;
      $52 = $ispos$us59 ? $51 : $neg$us60;
      $53 = (+($52|0));
      $54 = $53 * $center_decay_rate;
      $55 = $54 + $center_boost;
      $56 = $55 > 0.0;
      $adj$1$us62 = $56 ? 0.0 : $55;
      $57 = (((($workc) + (($i$084*1792)|0)|0) + (($j$264*224)|0)|0) + ($k$157$us58<<2)|0);
      $58 = +HEAPF32[$57>>2];
      $59 = $adj$1$us62 + $58;
      HEAPF32[$57>>2] = $59;
      $60 = (($k$157$us58) + 1)|0;
      $exitcond109 = ($60|0)==(56);
      if ($exitcond109) {
       break;
      } else {
       $k$157$us58 = $60;
      }
     }
    } else {
     $k$157 = 0;
     while(1) {
      $61 = (16 - ($k$157))|0;
      $ispos = ($61|0)>(-1);
      $neg = (0 - ($61))|0;
      $62 = $ispos ? $61 : $neg;
      $63 = (+($62|0));
      $64 = $63 * $center_decay_rate;
      $65 = $64 + $center_boost;
      $66 = (((($workc) + (($i$084*1792)|0)|0) + (($j$264*224)|0)|0) + ($k$157<<2)|0);
      $67 = +HEAPF32[$66>>2];
      $68 = $65 + $67;
      HEAPF32[$66>>2] = $68;
      $69 = (($k$157) + 1)|0;
      $exitcond108 = ($69|0)==(56);
      if ($exitcond108) {
       break;
      } else {
       $k$157 = $69;
      }
     }
    }
    $70 = (($j$264) + 1)|0;
    $exitcond110 = ($70|0)==(8);
    if ($exitcond110) {
     break;
    } else {
     $j$264 = $70;
    }
   }
  }
  $71 = (($curveatt_dB) + ($i$084<<2)|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $72;
  $74 = $73 + 100.0;
  $j$382 = 0;
  while(1) {
   $75 = ($j$382|0)<(2);
   $76 = (+($j$382|0));
   $$op = $76 * 10.0;
   $77 = $75 ? 20.0 : $$op;
   $78 = $74 - $77;
   $79 = $78 + -30.0;
   $80 = $79;
   $i$01$i = 0;
   while(1) {
    $81 = (((($workc) + (($i$084*1792)|0)|0) + (($j$382*224)|0)|0) + ($i$01$i<<2)|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $80 + $82;
    HEAPF32[$81>>2] = $83;
    $84 = (($i$01$i) + 1)|0;
    $exitcond$i = ($84|0)==(56);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $84;
    }
   }
   $85 = (($athc) + (($j$382*224)|0)|0);
   _memcpy(($85|0),($ath|0),224)|0;
   $86 = (+($j$382|0));
   $87 = $86 * 10.0;
   $88 = $87;
   $89 = 100.0 - $88;
   $90 = $89 + -30.0;
   $91 = $90;
   $i$01$i14 = 0;
   while(1) {
    $92 = ((($athc) + (($j$382*224)|0)|0) + ($i$01$i14<<2)|0);
    $93 = +HEAPF32[$92>>2];
    $94 = $91 + $93;
    HEAPF32[$92>>2] = $94;
    $95 = (($i$01$i14) + 1)|0;
    $exitcond$i15 = ($95|0)==(56);
    if ($exitcond$i15) {
     $i$01$i12 = 0;
     break;
    } else {
     $i$01$i14 = $95;
    }
   }
   while(1) {
    $96 = (((($workc) + (($i$084*1792)|0)|0) + (($j$382*224)|0)|0) + ($i$01$i12<<2)|0);
    $97 = +HEAPF32[$96>>2];
    $98 = ((($athc) + (($j$382*224)|0)|0) + ($i$01$i12<<2)|0);
    $99 = +HEAPF32[$98>>2];
    $100 = $97 > $99;
    if ($100) {
     HEAPF32[$98>>2] = $97;
    }
    $101 = (($i$01$i12) + 1)|0;
    $exitcond$i13 = ($101|0)==(56);
    if ($exitcond$i13) {
     break;
    } else {
     $i$01$i12 = $101;
    }
   }
   $102 = (($j$382) + 1)|0;
   $exitcond111 = ($102|0)==(8);
   if ($exitcond111) {
    $j$483 = 1;
    break;
   } else {
    $j$382 = $102;
   }
  }
  while(1) {
   $103 = (($j$483) + -1)|0;
   $i$01$i9 = 0;
   while(1) {
    $104 = ((($athc) + (($103*224)|0)|0) + ($i$01$i9<<2)|0);
    $105 = +HEAPF32[$104>>2];
    $106 = ((($athc) + (($j$483*224)|0)|0) + ($i$01$i9<<2)|0);
    $107 = +HEAPF32[$106>>2];
    $108 = $105 < $107;
    if ($108) {
     HEAPF32[$106>>2] = $105;
    }
    $109 = (($i$01$i9) + 1)|0;
    $exitcond$i10 = ($109|0)==(56);
    if ($exitcond$i10) {
     $i$01$i7 = 0;
     break;
    } else {
     $i$01$i9 = $109;
    }
   }
   while(1) {
    $110 = ((($athc) + (($j$483*224)|0)|0) + ($i$01$i7<<2)|0);
    $111 = +HEAPF32[$110>>2];
    $112 = (((($workc) + (($i$084*1792)|0)|0) + (($j$483*224)|0)|0) + ($i$01$i7<<2)|0);
    $113 = +HEAPF32[$112>>2];
    $114 = $111 < $113;
    if ($114) {
     HEAPF32[$112>>2] = $111;
    }
    $115 = (($i$01$i7) + 1)|0;
    $exitcond$i8 = ($115|0)==(56);
    if ($exitcond$i8) {
     break;
    } else {
     $i$01$i7 = $115;
    }
   }
   $116 = (($j$483) + 1)|0;
   $exitcond112 = ($116|0)==(8);
   if ($exitcond112) {
    break;
   } else {
    $j$483 = $116;
   }
  }
  $117 = (($i$084) + 1)|0;
  $exitcond116 = ($117|0)==(17);
  if ($exitcond116) {
   break;
  } else {
   $i$084 = $117;
  }
 }
 $5 = $binHz;
 $6 = ($n|0)>(0);
 $7 = $n ^ -1;
 $i$149 = 0;
 while(1) {
  $118 = (_malloc(32)|0);
  $119 = (($2) + ($i$149<<2)|0);
  HEAP32[$119>>2] = $118;
  $120 = (+($i$149|0));
  $121 = $120 * 0.5;
  $122 = $120 * 0.346573501825332641602;
  $123 = $122 + 4.1351653545408453283;
  $124 = (+Math_exp((+$123)));
  $125 = $124 / $5;
  $126 = (+Math_floor((+$125)));
  $127 = (~~(($126)));
  $128 = (+($127|0));
  $129 = $128 * $binHz;
  $130 = $129 + 1.0;
  $131 = $130;
  $132 = (+Math_log((+$131)));
  $133 = $132 * 2.88539004325866699219;
  $134 = $133 + -11.931568145751953125;
  $135 = (+Math_ceil((+$134)));
  $136 = (~~(($135)));
  $137 = (($127) + 1)|0;
  $138 = (+($137|0));
  $139 = $138 * $binHz;
  $140 = $139;
  $141 = (+Math_log((+$140)));
  $142 = $141 * 2.88539004325866699219;
  $143 = $142 + -11.931568145751953125;
  $144 = (+Math_floor((+$143)));
  $145 = (~~(($144)));
  $146 = ($136|0)>($i$149|0);
  $i$1$ = $146 ? $i$149 : $136;
  $147 = ($i$1$|0)<(0);
  $lo_curve$1 = $147 ? 0 : $i$1$;
  $148 = ($145|0)>(16);
  $$ = $148 ? 16 : $145;
  $149 = ($lo_curve$1|0)>($$|0);
  $150 = (($i$149) + 1)|0;
  $151 = ($150|0)<(17);
  $m$045 = 0;
  while(1) {
   $152 = (_malloc(232)|0);
   $153 = (($118) + ($m$045<<2)|0);
   HEAP32[$153>>2] = $152;
   if ($6) {
    $j$517 = 0;
    while(1) {
     $154 = (($1) + ($j$517<<2)|0);
     HEAPF32[$154>>2] = 999.0;
     $155 = (($j$517) + 1)|0;
     $exitcond = ($155|0)==($n|0);
     if ($exitcond) {
      break;
     } else {
      $j$517 = $155;
     }
    }
   }
   if (!($149)) {
    $k$226 = $lo_curve$1;
    while(1) {
     $156 = (+($k$226|0));
     $157 = $156 * 0.5;
     $j$623 = 0;$l$022 = 0;
     while(1) {
      $158 = (+($j$623|0));
      $159 = $158 * 0.125;
      $160 = $157 + $159;
      $161 = $160 + 3.9032840728759765625;
      $162 = $161 * 0.693147003650665283203;
      $163 = (+Math_exp((+$162)));
      $164 = $163 / $5;
      $165 = (~~(($164)));
      $166 = $160 + 4.0282840728759765625;
      $167 = $166 * 0.693147003650665283203;
      $168 = (+Math_exp((+$167)));
      $169 = $168 / $5;
      $170 = $169 + 1.0;
      $171 = (~~(($170)));
      $172 = ($165|0)<(0);
      $$3 = $172 ? 0 : $165;
      $173 = ($$3|0)>($n|0);
      $lo_bin$1 = $173 ? $n : $$3;
      $174 = ($lo_bin$1|0)<($l$022|0);
      $lo_bin$1$l$0 = $174 ? $lo_bin$1 : $l$022;
      $175 = ($171|0)<(0);
      $hi_bin$0 = $175 ? 0 : $171;
      $176 = ($hi_bin$0|0)>($n|0);
      $n$hi_bin$0 = $176 ? $n : $hi_bin$0;
      $177 = ($lo_bin$1$l$0|0)<($n$hi_bin$0|0);
      $178 = ($lo_bin$1$l$0|0)<($n|0);
      $or$cond418 = $177 & $178;
      if ($or$cond418) {
       $179 = (((($workc) + (($k$226*1792)|0)|0) + (($m$045*224)|0)|0) + ($j$623<<2)|0);
       $180 = +HEAPF32[$179>>2];
       $181 = $l$022 ^ -1;
       $182 = ($181|0)>($7|0);
       $smax = $182 ? $181 : $7;
       $183 = ($165|0)>(0);
       $$op119 = $165 ^ -1;
       $184 = $183 ? $$op119 : -1;
       $185 = ($smax|0)>($184|0);
       $smax87 = $185 ? $smax : $184;
       $186 = $smax87 ^ -1;
       $187 = ($171|0)>(0);
       $$op120 = $171 ^ -1;
       $188 = $187 ? $$op120 : -1;
       $189 = ($188|0)<($7|0);
       $smax89 = $189 ? $7 : $188;
       $190 = (($smax89) - ($smax87))|0;
       $191 = (($smax87) + ($n))|0;
       $192 = $191 ^ -1;
       $193 = ($190>>>0)>($192>>>0);
       $umax = $193 ? $190 : $192;
       $194 = (($186) - ($umax))|0;
       $l$219 = $lo_bin$1$l$0;
       while(1) {
        $195 = (($1) + ($l$219<<2)|0);
        $196 = +HEAPF32[$195>>2];
        $197 = $196 > $180;
        if ($197) {
         HEAPF32[$195>>2] = $180;
        }
        $198 = (($l$219) + 1)|0;
        $exitcond90 = ($198|0)==($194|0);
        if ($exitcond90) {
         $l$2$lcssa = $194;
         break;
        } else {
         $l$219 = $198;
        }
       }
      } else {
       $l$2$lcssa = $lo_bin$1$l$0;
      }
      $199 = (($j$623) + 1)|0;
      $exitcond91 = ($199|0)==(56);
      if ($exitcond91) {
       break;
      } else {
       $j$623 = $199;$l$022 = $l$2$lcssa;
      }
     }
     $200 = ($l$2$lcssa|0)<($n|0);
     if ($200) {
      $201 = (((($workc) + (($k$226*1792)|0)|0) + (($m$045*224)|0)|0) + 220|0);
      $202 = +HEAPF32[$201>>2];
      $l$324 = $l$2$lcssa;
      while(1) {
       $203 = (($1) + ($l$324<<2)|0);
       $204 = +HEAPF32[$203>>2];
       $205 = $204 > $202;
       if ($205) {
        HEAPF32[$203>>2] = $202;
       }
       $206 = (($l$324) + 1)|0;
       $exitcond92 = ($206|0)==($n|0);
       if ($exitcond92) {
        break;
       } else {
        $l$324 = $206;
       }
      }
     }
     $207 = (($k$226) + 1)|0;
     $208 = ($k$226|0)<($$|0);
     if ($208) {
      $k$226 = $207;
     } else {
      break;
     }
    }
   }
   if ($151) {
    $j$736 = 0;$l1$035 = 0;
    while(1) {
     $209 = (+($j$736|0));
     $210 = $209 * 0.125;
     $211 = $121 + $210;
     $212 = $211 + 3.9032840728759765625;
     $213 = $212 * 0.693147003650665283203;
     $214 = (+Math_exp((+$213)));
     $215 = $214 / $5;
     $216 = (~~(($215)));
     $217 = $211 + 4.0282840728759765625;
     $218 = $217 * 0.693147003650665283203;
     $219 = (+Math_exp((+$218)));
     $220 = $219 / $5;
     $221 = $220 + 1.0;
     $222 = (~~(($221)));
     $223 = ($216|0)<(0);
     $$5 = $223 ? 0 : $216;
     $224 = ($$5|0)>($n|0);
     $lo_bin2$1 = $224 ? $n : $$5;
     $225 = ($lo_bin2$1|0)<($l1$035|0);
     $lo_bin2$1$l1$0 = $225 ? $lo_bin2$1 : $l1$035;
     $226 = ($222|0)<(0);
     $hi_bin3$0 = $226 ? 0 : $222;
     $227 = ($hi_bin3$0|0)>($n|0);
     $n$hi_bin3$0 = $227 ? $n : $hi_bin3$0;
     $228 = ($lo_bin2$1$l1$0|0)<($n$hi_bin3$0|0);
     $229 = ($lo_bin2$1$l1$0|0)<($n|0);
     $or$cond628 = $228 & $229;
     if ($or$cond628) {
      $230 = (((($workc) + (($150*1792)|0)|0) + (($m$045*224)|0)|0) + ($j$736<<2)|0);
      $231 = +HEAPF32[$230>>2];
      $232 = $l1$035 ^ -1;
      $233 = ($232|0)>($7|0);
      $smax93 = $233 ? $232 : $7;
      $234 = ($216|0)>(0);
      $$op117 = $216 ^ -1;
      $235 = $234 ? $$op117 : -1;
      $236 = ($smax93|0)>($235|0);
      $smax95 = $236 ? $smax93 : $235;
      $237 = $smax95 ^ -1;
      $238 = ($222|0)>(0);
      $$op118 = $222 ^ -1;
      $239 = $238 ? $$op118 : -1;
      $240 = ($239|0)<($7|0);
      $smax97 = $240 ? $7 : $239;
      $241 = (($smax97) - ($smax95))|0;
      $242 = (($smax95) + ($n))|0;
      $243 = $242 ^ -1;
      $244 = ($241>>>0)>($243>>>0);
      $umax98 = $244 ? $241 : $243;
      $245 = (($237) - ($umax98))|0;
      $l1$229 = $lo_bin2$1$l1$0;
      while(1) {
       $246 = (($1) + ($l1$229<<2)|0);
       $247 = +HEAPF32[$246>>2];
       $248 = $247 > $231;
       if ($248) {
        HEAPF32[$246>>2] = $231;
       }
       $249 = (($l1$229) + 1)|0;
       $exitcond99 = ($249|0)==($245|0);
       if ($exitcond99) {
        $l1$2$lcssa = $245;
        break;
       } else {
        $l1$229 = $249;
       }
      }
     } else {
      $l1$2$lcssa = $lo_bin2$1$l1$0;
     }
     $250 = (($j$736) + 1)|0;
     $exitcond100 = ($250|0)==(56);
     if ($exitcond100) {
      break;
     } else {
      $j$736 = $250;$l1$035 = $l1$2$lcssa;
     }
    }
    $251 = ($l1$2$lcssa|0)<($n|0);
    if ($251) {
     $252 = (((($workc) + (($150*1792)|0)|0) + (($m$045*224)|0)|0) + 220|0);
     $253 = +HEAPF32[$252>>2];
     $l1$338 = $l1$2$lcssa;
     while(1) {
      $254 = (($1) + ($l1$338<<2)|0);
      $255 = +HEAPF32[$254>>2];
      $256 = $255 > $253;
      if ($256) {
       HEAPF32[$254>>2] = $253;
      }
      $257 = (($l1$338) + 1)|0;
      $exitcond101 = ($257|0)==($n|0);
      if ($exitcond101) {
       $j$842 = 0;
       break;
      } else {
       $l1$338 = $257;
      }
     }
    } else {
     $j$842 = 0;
    }
   } else {
    $j$842 = 0;
   }
   while(1) {
    $258 = (+($j$842|0));
    $259 = $258 * 0.125;
    $260 = $121 + $259;
    $261 = $260 + 3.9657840728759765625;
    $262 = $261 * 0.693147003650665283203;
    $263 = (+Math_exp((+$262)));
    $264 = $263 / $5;
    $265 = (~~(($264)));
    $266 = ($265|0)<(0);
    do {
     if ($266) {
      $267 = (($j$842) + 2)|0;
      $268 = (($152) + ($267<<2)|0);
      HEAPF32[$268>>2] = -999.0;
     } else {
      $269 = ($265|0)<($n|0);
      if ($269) {
       $272 = (($1) + ($265<<2)|0);
       $273 = +HEAPF32[$272>>2];
       $274 = (($j$842) + 2)|0;
       $275 = (($152) + ($274<<2)|0);
       HEAPF32[$275>>2] = $273;
       break;
      } else {
       $270 = (($j$842) + 2)|0;
       $271 = (($152) + ($270<<2)|0);
       HEAPF32[$271>>2] = -999.0;
       break;
      }
     }
    } while(0);
    $276 = (($j$842) + 1)|0;
    $exitcond102 = ($276|0)==(56);
    if ($exitcond102) {
     $j$943 = 0;
     break;
    } else {
     $j$842 = $276;
    }
   }
   while(1) {
    $279 = (($j$943) + 2)|0;
    $280 = (($152) + ($279<<2)|0);
    $281 = +HEAPF32[$280>>2];
    $282 = $281 > -200.0;
    $277 = (($j$943) + 1)|0;
    if ($282) {
     $j$9$lcssa = $j$943;
     break;
    }
    $278 = ($277|0)<(16);
    if ($278) {
     $j$943 = $277;
    } else {
     $j$9$lcssa = $277;
     break;
    }
   }
   $283 = (+($j$9$lcssa|0));
   HEAPF32[$152>>2] = $283;
   $j$1044 = 55;
   while(1) {
    $286 = (($j$1044) + 2)|0;
    $287 = (($152) + ($286<<2)|0);
    $288 = +HEAPF32[$287>>2];
    $289 = $288 > -200.0;
    $284 = (($j$1044) + -1)|0;
    if ($289) {
     $j$10$lcssa = $j$1044;
     break;
    }
    $285 = ($284|0)>(17);
    if ($285) {
     $j$1044 = $284;
    } else {
     $j$10$lcssa = $284;
     break;
    }
   }
   $290 = (+($j$10$lcssa|0));
   $291 = (($152) + 4|0);
   HEAPF32[$291>>2] = $290;
   $292 = (($m$045) + 1)|0;
   $exitcond103 = ($292|0)==(8);
   if ($exitcond103) {
    break;
   } else {
    $m$045 = $292;
   }
  }
  $exitcond104 = ($150|0)==(17);
  if ($exitcond104) {
   break;
  } else {
   $i$149 = $150;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function __vp_noisemask($p,$logmdct,$logmask) {
 $p = $p|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var $exitcond = 0, $exitcond10 = 0, $exitcond9 = 0, $i$05 = 0, $i$12 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = $0 << 2;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1)|0)+15)&-16)|0;
 $3 = (($p) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _bark_noise_hybridmp($0,$4,$logmdct,$logmask,140.0,-1);
 $5 = ($0|0)>(0);
 if ($5) {
  $i$05 = 0;
  while(1) {
   $6 = (($logmdct) + ($i$05<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = (($logmask) + ($i$05<<2)|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = (($2) + ($i$05<<2)|0);
   HEAPF32[$11>>2] = $10;
   $12 = (($i$05) + 1)|0;
   $exitcond10 = ($12|0)==($0|0);
   if ($exitcond10) {
    break;
   } else {
    $i$05 = $12;
   }
  }
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = (($p) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 _bark_noise_hybridmp($0,$13,$2,$logmask,0.0,$17);
 if ($5) {
  $i$12 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = (($logmdct) + ($i$12<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($2) + ($i$12<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $20 - $22;
  HEAPF32[$21>>2] = $23;
  $24 = (($i$12) + 1)|0;
  $exitcond9 = ($24|0)==($0|0);
  if ($exitcond9) {
   break;
  } else {
   $i$12 = $24;
  }
 }
 $18 = HEAP32[$14>>2]|0;
 $i$21 = 0;
 while(1) {
  $25 = (($logmask) + ($i$21<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $26;
  $28 = $27 + 0.5;
  $29 = (~~(($28)));
  $30 = ($29|0)>(39);
  $$ = $30 ? 39 : $29;
  $31 = ($$|0)<(0);
  $$$ = $31 ? 0 : $$;
  $32 = (($2) + ($i$21<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = ((($18) + ($$$<<2)|0) + 336|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $33 + $35;
  HEAPF32[$25>>2] = $36;
  $37 = (($i$21) + 1)|0;
  $exitcond = ($37|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $37;
  }
 }
 STACKTOP = sp;return;
}
function _bark_noise_hybridmp($n,$b,$f,$noise,$offset,$fixed) {
 $n = $n|0;
 $b = $b|0;
 $f = $f|0;
 $noise = $noise|0;
 $offset = +$offset;
 $fixed = $fixed|0;
 var $$in = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0;
 var $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0;
 var $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0;
 var $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0;
 var $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0;
 var $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var $A$0$lcssa = 0.0, $A$1$lcssa = 0.0, $A$2$lcssa = 0.0, $A$3$lcssa = 0.0, $B$0$lcssa = 0.0, $B$1$lcssa = 0.0, $B$2$lcssa = 0.0, $B$3$lcssa = 0.0, $D$0$lcssa = 0.0, $D$1$lcssa = 0.0, $D$2$lcssa = 0.0, $D$3$lcssa = 0.0, $R$0 = 0.0, $R$1 = 0.0, $R$2 = 0.0, $exitcond = 0, $exitcond56 = 0, $exitcond62 = 0, $exitcond63 = 0, $exitcond74 = 0;
 var $i$048 = 0, $i$1$lcssa = 0, $i$135 = 0, $i$2$lcssa = 0, $i$226 = 0, $i$322 = 0, $i$4$lcssa = 0, $i$412 = 0, $i$5$lcssa = 0, $i$54 = 0, $i$61 = 0, $tN$043 = 0.0, $tX$044 = 0.0, $tXX$045 = 0.0, $tXY$047 = 0.0, $tY$046 = 0.0, $x$049 = 0.0, $x$1$lcssa = 0.0, $x$136 = 0.0, $x$2$lcssa = 0.0;
 var $x$227 = 0.0, $x$323 = 0.0, $x$4$lcssa = 0.0, $x$413 = 0.0, $x$5$lcssa = 0.0, $x$55 = 0.0, $x$62 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $6 = +HEAPF32[$f>>2];
 $7 = $6 + $offset;
 $8 = $7 < 1.0;
 $y$0 = $8 ? 1.0 : $7;
 $9 = $y$0 * $y$0;
 $10 = $9 * 0.5;
 $11 = $y$0 * $10;
 HEAPF32[$1>>2] = $10;
 HEAPF32[$2>>2] = $10;
 HEAPF32[$3>>2] = 0.0;
 HEAPF32[$4>>2] = $11;
 HEAPF32[$5>>2] = 0.0;
 $12 = ($n|0)>(1);
 if ($12) {
  $i$048 = 1;$tN$043 = $10;$tX$044 = $10;$tXX$045 = 0.0;$tXY$047 = 0.0;$tY$046 = $11;$x$049 = 1.0;
  while(1) {
   $16 = (($f) + ($i$048<<2)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = $17 + $offset;
   $19 = $18 < 1.0;
   $y$1 = $19 ? 1.0 : $18;
   $20 = $y$1 * $y$1;
   $21 = $tN$043 + $20;
   $22 = $x$049 * $20;
   $23 = $tX$044 + $22;
   $24 = $x$049 * $22;
   $25 = $tXX$045 + $24;
   $26 = $y$1 * $20;
   $27 = $tY$046 + $26;
   $28 = $y$1 * $22;
   $29 = $tXY$047 + $28;
   $30 = (($1) + ($i$048<<2)|0);
   HEAPF32[$30>>2] = $21;
   $31 = (($2) + ($i$048<<2)|0);
   HEAPF32[$31>>2] = $23;
   $32 = (($3) + ($i$048<<2)|0);
   HEAPF32[$32>>2] = $25;
   $33 = (($4) + ($i$048<<2)|0);
   HEAPF32[$33>>2] = $27;
   $34 = (($5) + ($i$048<<2)|0);
   HEAPF32[$34>>2] = $29;
   $35 = (($i$048) + 1)|0;
   $36 = $x$049 + 1.0;
   $exitcond74 = ($35|0)==($n|0);
   if ($exitcond74) {
    break;
   } else {
    $i$048 = $35;$tN$043 = $21;$tX$044 = $23;$tXX$045 = $25;$tXY$047 = $29;$tY$046 = $27;$x$049 = $36;
   }
  }
 }
 $13 = HEAP32[$b>>2]|0;
 $14 = $13 >> 16;
 $15 = ($14|0)>(-1);
 if ($15) {
  $38 = $13;$A$0$lcssa = 0.0;$B$0$lcssa = 0.0;$D$0$lcssa = 1.0;$i$1$lcssa = 0;$x$1$lcssa = 0.0;
 } else {
  $41 = $13;$45 = $14;$i$135 = 0;$x$136 = 0.0;
  while(1) {
   $40 = $41 & 65535;
   $42 = (($1) + ($40<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = (0 - ($45))|0;
   $46 = (($1) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $43 + $47;
   $49 = (($2) + ($40<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (($2) + ($44<<2)|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $50 - $52;
   $54 = (($3) + ($40<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = (($3) + ($44<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $55 + $57;
   $59 = (($4) + ($40<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = (($4) + ($44<<2)|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $60 + $62;
   $64 = (($5) + ($40<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = (($5) + ($44<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $65 - $67;
   $69 = $58 * $63;
   $70 = $53 * $68;
   $71 = $69 - $70;
   $72 = $48 * $68;
   $73 = $53 * $63;
   $74 = $72 - $73;
   $75 = $48 * $58;
   $76 = $53 * $53;
   $77 = $75 - $76;
   $78 = $x$136 * $74;
   $79 = $71 + $78;
   $80 = $79 / $77;
   $81 = $80 < 0.0;
   $R$0 = $81 ? 0.0 : $80;
   $82 = $R$0 - $offset;
   $83 = (($noise) + ($i$135<<2)|0);
   HEAPF32[$83>>2] = $82;
   $84 = (($i$135) + 1)|0;
   $85 = $x$136 + 1.0;
   $86 = (($b) + ($84<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 >> 16;
   $89 = ($88|0)>(-1);
   if ($89) {
    $38 = $87;$A$0$lcssa = $71;$B$0$lcssa = $74;$D$0$lcssa = $77;$i$1$lcssa = $84;$x$1$lcssa = $85;
    break;
   } else {
    $41 = $87;$45 = $88;$i$135 = $84;$x$136 = $85;
   }
  }
 }
 $37 = $38 & 65535;
 $39 = ($37|0)<($n|0);
 if ($39) {
  $$in = $38;$93 = $37;$i$226 = $i$1$lcssa;$x$227 = $x$1$lcssa;
  while(1) {
   $91 = $$in >> 16;
   $92 = (($1) + ($93<<2)|0);
   $94 = +HEAPF32[$92>>2];
   $95 = (($1) + ($91<<2)|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $94 - $96;
   $98 = (($2) + ($93<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = (($2) + ($91<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $99 - $101;
   $103 = (($3) + ($93<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = (($3) + ($91<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $104 - $106;
   $108 = (($4) + ($93<<2)|0);
   $109 = +HEAPF32[$108>>2];
   $110 = (($4) + ($91<<2)|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $109 - $111;
   $113 = (($5) + ($93<<2)|0);
   $114 = +HEAPF32[$113>>2];
   $115 = (($5) + ($91<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $114 - $116;
   $118 = $107 * $112;
   $119 = $102 * $117;
   $120 = $118 - $119;
   $121 = $97 * $117;
   $122 = $102 * $112;
   $123 = $121 - $122;
   $124 = $97 * $107;
   $125 = $102 * $102;
   $126 = $124 - $125;
   $127 = $x$227 * $123;
   $128 = $120 + $127;
   $129 = $128 / $126;
   $130 = $129 < 0.0;
   $R$1 = $130 ? 0.0 : $129;
   $131 = $R$1 - $offset;
   $132 = (($noise) + ($i$226<<2)|0);
   HEAPF32[$132>>2] = $131;
   $133 = (($i$226) + 1)|0;
   $134 = $x$227 + 1.0;
   $135 = (($b) + ($133<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & 65535;
   $138 = ($137|0)<($n|0);
   if ($138) {
    $$in = $136;$93 = $137;$i$226 = $133;$x$227 = $134;
   } else {
    $A$1$lcssa = $120;$B$1$lcssa = $123;$D$1$lcssa = $126;$i$2$lcssa = $133;$x$2$lcssa = $134;
    break;
   }
  }
 } else {
  $A$1$lcssa = $A$0$lcssa;$B$1$lcssa = $B$0$lcssa;$D$1$lcssa = $D$0$lcssa;$i$2$lcssa = $i$1$lcssa;$x$2$lcssa = $x$1$lcssa;
 }
 $90 = ($i$2$lcssa|0)<($n|0);
 if ($90) {
  $i$322 = $i$2$lcssa;$x$323 = $x$2$lcssa;
  while(1) {
   $139 = $B$1$lcssa * $x$323;
   $140 = $A$1$lcssa + $139;
   $141 = $140 / $D$1$lcssa;
   $142 = $141 < 0.0;
   $R$2 = $142 ? 0.0 : $141;
   $143 = $R$2 - $offset;
   $144 = (($noise) + ($i$322<<2)|0);
   HEAPF32[$144>>2] = $143;
   $145 = (($i$322) + 1)|0;
   $146 = $x$323 + 1.0;
   $exitcond63 = ($145|0)==($n|0);
   if ($exitcond63) {
    break;
   } else {
    $i$322 = $145;$x$323 = $146;
   }
  }
 }
 $147 = ($fixed|0)<(1);
 if ($147) {
  STACKTOP = sp;return;
 }
 $148 = (($fixed|0) / 2)&-1;
 $149 = (($148) - ($fixed))|0;
 $150 = ($149|0)>(-1);
 if ($150) {
  $A$2$lcssa = $A$1$lcssa;$B$2$lcssa = $B$1$lcssa;$D$2$lcssa = $D$1$lcssa;$i$4$lcssa = 0;$x$4$lcssa = 0.0;
 } else {
  $151 = (($fixed) - ($148))|0;
  $156 = $148;$159 = $149;$i$412 = 0;$x$413 = 0.0;
  while(1) {
   $155 = (($1) + ($156<<2)|0);
   $157 = +HEAPF32[$155>>2];
   $158 = (0 - ($159))|0;
   $160 = (($1) + ($158<<2)|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $157 + $161;
   $163 = (($2) + ($156<<2)|0);
   $164 = +HEAPF32[$163>>2];
   $165 = (($2) + ($158<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $164 - $166;
   $168 = (($3) + ($156<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = (($3) + ($158<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $169 + $171;
   $173 = (($4) + ($156<<2)|0);
   $174 = +HEAPF32[$173>>2];
   $175 = (($4) + ($158<<2)|0);
   $176 = +HEAPF32[$175>>2];
   $177 = $174 + $176;
   $178 = (($5) + ($156<<2)|0);
   $179 = +HEAPF32[$178>>2];
   $180 = (($5) + ($158<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $179 - $181;
   $183 = $172 * $177;
   $184 = $167 * $182;
   $185 = $183 - $184;
   $186 = $162 * $182;
   $187 = $167 * $177;
   $188 = $186 - $187;
   $189 = $162 * $172;
   $190 = $167 * $167;
   $191 = $189 - $190;
   $192 = $x$413 * $188;
   $193 = $185 + $192;
   $194 = $193 / $191;
   $195 = $194 - $offset;
   $196 = (($noise) + ($i$412<<2)|0);
   $197 = +HEAPF32[$196>>2];
   $198 = $195 < $197;
   if ($198) {
    HEAPF32[$196>>2] = $195;
   }
   $199 = (($i$412) + 1)|0;
   $200 = $x$413 + 1.0;
   $201 = (($148) + ($199))|0;
   $202 = (($201) - ($fixed))|0;
   $exitcond62 = ($199|0)==($151|0);
   if ($exitcond62) {
    $A$2$lcssa = $185;$B$2$lcssa = $188;$D$2$lcssa = $191;$i$4$lcssa = $151;$x$4$lcssa = $200;
    break;
   } else {
    $156 = $201;$159 = $202;$i$412 = $199;$x$413 = $200;
   }
  }
 }
 $152 = (($i$4$lcssa) + ($148))|0;
 $153 = ($152|0)<($n|0);
 if ($153) {
  $154 = (($n) - ($148))|0;
  $$pn = $152;$i$54 = $i$4$lcssa;$x$55 = $x$4$lcssa;
  while(1) {
   $204 = (($$pn) - ($fixed))|0;
   $205 = (($1) + ($$pn<<2)|0);
   $206 = +HEAPF32[$205>>2];
   $207 = (($1) + ($204<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $209 = $206 - $208;
   $210 = (($2) + ($$pn<<2)|0);
   $211 = +HEAPF32[$210>>2];
   $212 = (($2) + ($204<<2)|0);
   $213 = +HEAPF32[$212>>2];
   $214 = $211 - $213;
   $215 = (($3) + ($$pn<<2)|0);
   $216 = +HEAPF32[$215>>2];
   $217 = (($3) + ($204<<2)|0);
   $218 = +HEAPF32[$217>>2];
   $219 = $216 - $218;
   $220 = (($4) + ($$pn<<2)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = (($4) + ($204<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = $221 - $223;
   $225 = (($5) + ($$pn<<2)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = (($5) + ($204<<2)|0);
   $228 = +HEAPF32[$227>>2];
   $229 = $226 - $228;
   $230 = $219 * $224;
   $231 = $214 * $229;
   $232 = $230 - $231;
   $233 = $209 * $229;
   $234 = $214 * $224;
   $235 = $233 - $234;
   $236 = $209 * $219;
   $237 = $214 * $214;
   $238 = $236 - $237;
   $239 = $x$55 * $235;
   $240 = $232 + $239;
   $241 = $240 / $238;
   $242 = $241 - $offset;
   $243 = (($noise) + ($i$54<<2)|0);
   $244 = +HEAPF32[$243>>2];
   $245 = $242 < $244;
   if ($245) {
    HEAPF32[$243>>2] = $242;
   }
   $246 = (($i$54) + 1)|0;
   $247 = $x$55 + 1.0;
   $248 = (($246) + ($148))|0;
   $exitcond56 = ($246|0)==($154|0);
   if ($exitcond56) {
    $A$3$lcssa = $232;$B$3$lcssa = $235;$D$3$lcssa = $238;$i$5$lcssa = $154;$x$5$lcssa = $247;
    break;
   } else {
    $$pn = $248;$i$54 = $246;$x$55 = $247;
   }
  }
 } else {
  $A$3$lcssa = $A$2$lcssa;$B$3$lcssa = $B$2$lcssa;$D$3$lcssa = $D$2$lcssa;$i$5$lcssa = $i$4$lcssa;$x$5$lcssa = $x$4$lcssa;
 }
 $203 = ($i$5$lcssa|0)<($n|0);
 if ($203) {
  $i$61 = $i$5$lcssa;$x$62 = $x$5$lcssa;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $249 = $B$3$lcssa * $x$62;
  $250 = $A$3$lcssa + $249;
  $251 = $250 / $D$3$lcssa;
  $252 = $251 - $offset;
  $253 = (($noise) + ($i$61<<2)|0);
  $254 = +HEAPF32[$253>>2];
  $255 = $252 < $254;
  if ($255) {
   HEAPF32[$253>>2] = $252;
  }
  $256 = (($i$61) + 1)|0;
  $257 = $x$62 + 1.0;
  $exitcond = ($256|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$61 = $256;$x$62 = $257;
  }
 }
 STACKTOP = sp;return;
}
function __vp_tonemask($p,$logfft,$logmask,$global_specmax,$local_specmax) {
 $p = $p|0;
 $logfft = $logfft|0;
 $logmask = $logmask|0;
 $global_specmax = +$global_specmax;
 $local_specmax = +$local_specmax;
 var $$$$i = 0, $$$i = 0, $$in$i = 0, $$in26$i = 0, $$lcssa31 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert35$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre36$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $att$0 = 0.0, $exitcond = 0, $exitcond34 = 0, $i$018 = 0, $i$02$i$i = 0, $i$04$i = 0, $i$1$i = 0, $i$1$ph$i = 0, $i$116 = 0, $linpos$0$lcssa$i = 0, $linpos$021$i = 0, $linpos$1$lcssa$i = 0, $linpos$19$i9 = 0, $linpos$23$i = 0, $max$0$ph$i = 0.0, $minV$0$ph$i = 0.0;
 var $minV$0$ph415$i = 0.0, $minV$0$ph416$i = 0.0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $pos$020$i = 0, $pos$1$lcssa$i = 0, $seedptr$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$3)|0)+15)&-16)|0;
 $5 = (($p) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $local_specmax;
 $10 = ($2|0)>(0);
 if ($10) {
  $i$018 = 0;
  while(1) {
   $11 = (($4) + ($i$018<<2)|0);
   HEAPF32[$11>>2] = -9999.0;
   $12 = (($i$018) + 1)|0;
   $13 = ($12|0)<($2|0);
   if ($13) {
    $i$018 = $12;
   } else {
    break;
   }
  }
 }
 $14 = (($6) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $9 < $15;
 $att$0 = $16 ? $15 : $9;
 $17 = ($0|0)>(0);
 if ($17) {
  $18 = (($p) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $i$116 = 0;
  while(1) {
   $20 = (($19) + ($i$116<<2)|0);
   $21 = +HEAPF32[$20>>2];
   $22 = $att$0 + $21;
   $23 = (($logmask) + ($i$116<<2)|0);
   HEAPF32[$23>>2] = $22;
   $24 = (($i$116) + 1)|0;
   $exitcond34 = ($24|0)==($0|0);
   if ($exitcond34) {
    break;
   } else {
    $i$116 = $24;
   }
  }
  $25 = (($p) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($6) + 496|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 - $global_specmax;
  $30 = (($p) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($p) + 32|0);
  $33 = (($p) + 36|0);
  $34 = (($p) + 28|0);
  $i$04$i = 0;
  while(1) {
   $35 = (($logfft) + ($i$04$i<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = (($31) + ($i$04$i<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $i$1$ph$i = $i$04$i;$max$0$ph$i = $36;
   L13: while(1) {
    $i$1$i = $i$1$ph$i;
    while(1) {
     $39 = (($i$1$i) + 1)|0;
     $40 = ($39|0)<($0|0);
     if (!($40)) {
      $$lcssa31 = 0;
      break L13;
     }
     $41 = (($31) + ($39<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($38|0);
     if (!($43)) {
      $$lcssa31 = 1;
      break L13;
     }
     $44 = (($logfft) + ($39<<2)|0);
     $45 = +HEAPF32[$44>>2];
     $46 = $45 > $max$0$ph$i;
     if ($46) {
      $i$1$ph$i = $39;$max$0$ph$i = $45;
      continue L13;
     } else {
      $i$1$i = $39;
     }
    }
   }
   $47 = $max$0$ph$i + 6.0;
   $48 = (($logmask) + ($i$1$i<<2)|0);
   $49 = +HEAPF32[$48>>2];
   $50 = $47 > $49;
   if ($50) {
    $51 = HEAP32[$32>>2]|0;
    $52 = $38 >> $51;
    $53 = ($52|0)>(16);
    $$$i = $53 ? 16 : $52;
    $54 = ($$$i|0)<(0);
    $$$$i = $54 ? 0 : $$$i;
    $55 = (($26) + ($$$$i<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$33>>2]|0;
    $58 = $29 + $max$0$ph$i;
    $59 = $58;
    $60 = $59 + -30.0;
    $61 = $60 * 0.100000001490116119385;
    $62 = (~~(($61)));
    $63 = ($62|0)<(0);
    $64 = $63 ? 0 : $62;
    $65 = ($64|0)>(7);
    $66 = $65 ? 7 : $64;
    $67 = (($56) + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 4|0);
    $70 = +HEAPF32[$69>>2];
    $71 = (~~(($70)));
    $72 = +HEAPF32[$68>>2];
    $73 = (~~(($72)));
    $74 = ($73|0)<($71|0);
    if ($74) {
     $75 = (($31) + ($i$1$i<<2)|0);
     $76 = HEAP32[$34>>2]|0;
     $77 = HEAP32[$75>>2]|0;
     $78 = (($77) - ($76))|0;
     $79 = (+($57|0));
     $80 = $72 + -16.0;
     $81 = $57 >> 1;
     $82 = $79 * $80;
     $83 = (+($78|0));
     $84 = (+($81|0));
     $85 = $82 + $83;
     $86 = $85 - $84;
     $87 = (~~(($86)));
     $i$02$i$i = $73;$seedptr$01$i$i = $87;
     while(1) {
      $88 = ($seedptr$01$i$i|0)>(0);
      if ($88) {
       $$sum$i$i = (($i$02$i$i) + 2)|0;
       $89 = (($68) + ($$sum$i$i<<2)|0);
       $90 = +HEAPF32[$89>>2];
       $91 = $max$0$ph$i + $90;
       $92 = (($4) + ($seedptr$01$i$i<<2)|0);
       $93 = +HEAPF32[$92>>2];
       $94 = $93 < $91;
       if ($94) {
        HEAPF32[$92>>2] = $91;
       }
      }
      $95 = (($seedptr$01$i$i) + ($57))|0;
      $96 = ($95|0)<($2|0);
      $97 = (($i$02$i$i) + 1)|0;
      $98 = ($97|0)<($71|0);
      $or$cond$i$i = $96 & $98;
      if ($or$cond$i$i) {
       $i$02$i$i = $97;$seedptr$01$i$i = $95;
      } else {
       break;
      }
     }
    }
   }
   if ($$lcssa31) {
    $i$04$i = $39;
   } else {
    $$pre$phiZ2D = $33;
    break;
   }
  }
 } else {
  $$pre = (($p) + 36|0);
  $$pre$phiZ2D = $$pre;
 }
 $99 = HEAP32[$$pre$phiZ2D>>2]|0;
 _seed_chase($4,$99,$2);
 $100 = HEAP32[$p>>2]|0;
 $101 = ($100|0)>(1);
 L31: do {
  if ($101) {
   $102 = (($p) + 20|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $99 >> 1;
   $105 = HEAP32[$103>>2]|0;
   $106 = (($p) + 28|0);
   $107 = (($105) - ($104))|0;
   $108 = HEAP32[$106>>2]|0;
   $109 = (($107) - ($108))|0;
   $110 = HEAP32[$5>>2]|0;
   $111 = (($110) + 32|0);
   $117 = 1;$120 = $105;$linpos$021$i = 0;$pos$020$i = $109;
   while(1) {
    $114 = (($4) + ($pos$020$i<<2)|0);
    $115 = +HEAPF32[$114>>2];
    $116 = (($103) + ($117<<2)|0);
    $118 = HEAP32[$116>>2]|0;
    $119 = (($118) + ($120))|0;
    $121 = $119 >> 1;
    $122 = (($121) - ($108))|0;
    $123 = +HEAPF32[$111>>2];
    $124 = $115 > $123;
    $minV$0$ph$i = $124 ? $123 : $115;
    $125 = ($pos$020$i|0)<($122|0);
    L35: do {
     if ($125) {
      $$in$i = $pos$020$i;$minV$0$ph416$i = $minV$0$ph$i;
      while(1) {
       $126 = $minV$0$ph416$i == -9999.0;
       $$in26$i = $$in$i;
       while(1) {
        $127 = (($$in26$i) + 1)|0;
        $128 = (($4) + ($127<<2)|0);
        $129 = +HEAPF32[$128>>2];
        $130 = $129 > -9999.0;
        if ($130) {
         $131 = $129 < $minV$0$ph416$i;
         $or$cond$i = $131 | $126;
         if ($or$cond$i) {
          break;
         }
        } else {
         if ($126) {
          break;
         }
        }
        $132 = ($127|0)<($122|0);
        if ($132) {
         $$in26$i = $127;
        } else {
         $minV$0$ph415$i = $minV$0$ph416$i;$pos$1$lcssa$i = $127;
         break L35;
        }
       }
       $133 = ($127|0)<($122|0);
       if ($133) {
        $$in$i = $127;$minV$0$ph416$i = $129;
       } else {
        $minV$0$ph415$i = $129;$pos$1$lcssa$i = $127;
        break;
       }
      }
     } else {
      $minV$0$ph415$i = $minV$0$ph$i;$pos$1$lcssa$i = $pos$020$i;
     }
    } while(0);
    $134 = (($pos$1$lcssa$i) + ($108))|0;
    $135 = ($linpos$021$i|0)>=($100|0);
    $136 = ($120|0)>($134|0);
    $or$cond = $135 | $136;
    L46: do {
     if ($or$cond) {
      $linpos$1$lcssa$i = $linpos$021$i;
     } else {
      $linpos$19$i9 = $linpos$021$i;
      while(1) {
       $137 = (($logmask) + ($linpos$19$i9<<2)|0);
       $138 = +HEAPF32[$137>>2];
       $139 = $138 < $minV$0$ph415$i;
       if ($139) {
        HEAPF32[$137>>2] = $minV$0$ph415$i;
       }
       $140 = (($linpos$19$i9) + 1)|0;
       $141 = ($140|0)<($100|0);
       if (!($141)) {
        $linpos$1$lcssa$i = $140;
        break L46;
       }
       $$phi$trans$insert35$i = (($103) + ($140<<2)|0);
       $$pre36$i = HEAP32[$$phi$trans$insert35$i>>2]|0;
       $142 = ($$pre36$i|0)>($134|0);
       if ($142) {
        $linpos$1$lcssa$i = $140;
        break;
       } else {
        $linpos$19$i9 = $140;
       }
      }
     }
    } while(0);
    $112 = (($linpos$1$lcssa$i) + 1)|0;
    $113 = ($112|0)<($100|0);
    if (!($113)) {
     $linpos$0$lcssa$i = $linpos$1$lcssa$i;
     break L31;
    }
    $$phi$trans$insert$i = (($103) + ($linpos$1$lcssa$i<<2)|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $117 = $112;$120 = $$pre$i;$linpos$021$i = $linpos$1$lcssa$i;$pos$020$i = $pos$1$lcssa$i;
   }
  } else {
   $linpos$0$lcssa$i = 0;
  }
 } while(0);
 $143 = HEAP32[$1>>2]|0;
 $144 = (($143) + -1)|0;
 $145 = (($4) + ($144<<2)|0);
 $146 = +HEAPF32[$145>>2];
 $147 = ($linpos$0$lcssa$i|0)<($100|0);
 if ($147) {
  $linpos$23$i = $linpos$0$lcssa$i;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $148 = (($logmask) + ($linpos$23$i<<2)|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $149 < $146;
  if ($150) {
   HEAPF32[$148>>2] = $146;
  }
  $151 = (($linpos$23$i) + 1)|0;
  $exitcond = ($151|0)==($100|0);
  if ($exitcond) {
   break;
  } else {
   $linpos$23$i = $151;
  }
 }
 STACKTOP = sp;return;
}
function __vp_offset_and_mix($p,$noise,$tone,$offset_select,$logmask,$mdct,$logmdct) {
 $p = $p|0;
 $noise = $noise|0;
 $tone = $tone|0;
 $offset_select = $offset_select|0;
 $logmask = $logmask|0;
 $mdct = $mdct|0;
 $logmdct = $logmdct|0;
 var $$val$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $de$0 = 0.0, $exitcond = 0, $i$01 = 0, $val$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2) + ($offset_select<<2)|0) + 12|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ($0|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($p) + 48|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($p) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($offset_select<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($2) + 108|0);
 $13 = ($offset_select|0)==(1);
 $14 = $7;
 $i$01 = 0;
 while(1) {
  $15 = (($noise) + ($i$01<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = (($11) + ($i$01<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $16 + $18;
  $20 = +HEAPF32[$12>>2];
  $21 = $19 > $20;
  $val$0 = $21 ? $20 : $19;
  $22 = (($tone) + ($i$01<<2)|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $4 + $23;
  $25 = $val$0 < $24;
  $$val$0 = $25 ? $24 : $val$0;
  $26 = (($logmask) + ($i$01<<2)|0);
  HEAPF32[$26>>2] = $$val$0;
  if ($13) {
   $27 = (($logmdct) + ($i$01<<2)|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $val$0 - $28;
   $30 = $29 > -17.200000762939453125;
   $31 = $29 + 17.200000762939453125;
   $32 = $31;
   if ($30) {
    $33 = $32 * 0.00500000000000000010408;
    $34 = $14 * $33;
    $35 = 1.0 - $34;
    $36 = $35;
    $37 = $36 < 0.0;
    if ($37) {
     $de$0 = 9.99999974737875163555E-5;
    } else {
     $de$0 = $36;
    }
   } else {
    $38 = $32 * 2.99999999999999973719E-4;
    $39 = $14 * $38;
    $40 = 1.0 - $39;
    $41 = $40;
    $de$0 = $41;
   }
   $42 = (($mdct) + ($i$01<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $de$0 * $43;
   HEAPF32[$42>>2] = $44;
  }
  $45 = (($i$01) + 1)|0;
  $exitcond = ($45|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $45;
  }
 }
 STACKTOP = sp;return;
}
function __vp_couple_quantize_normalize($blobno,$g,$p,$vi,$mdct,$iwork,$nonzero,$sliding_lowpass,$ch) {
 $blobno = $blobno|0;
 $g = $g|0;
 $p = $p|0;
 $vi = $vi|0;
 $mdct = $mdct|0;
 $iwork = $iwork|0;
 $nonzero = $nonzero|0;
 $sliding_lowpass = $sliding_lowpass|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$phi$trans$insert68 = 0, $$phi$trans$insert70 = 0, $$pre = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre69 = 0, $$pre71 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $$pre75 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum5 = 0, $$v = 0.0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond51 = 0, $exitcond55 = 0, $exitcond57 = 0, $exitcond61 = 0, $exitcond62 = 0, $fabsf = 0.0, $fabsf$i = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $i$045 = 0;
 var $i$241 = 0, $i$315 = 0, $indvars$iv$next59 = 0, $indvars$iv58 = 0, $ispos = 0, $ispos7 = 0, $ispos9 = 0, $j$01$i = 0, $j$018 = 0, $j$121 = 0, $j$224 = 0, $j$331 = 0, $k$028 = 0, $neg = 0, $neg10 = 0, $neg8 = 0, $not$$i = 0, $p$idx$val = 0, $p$idx13$val = 0, $postpoint$0$in = 0.0;
 var $postpoint$0$in$in = 0, $smax60 = 0, $step$037 = 0, $stereo_threshholds_limited$stereo_threshholds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $26 = 16;
 } else {
  $6 = (($2) + 508|0);
  $7 = HEAP32[$6>>2]|0;
  $26 = $7;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (((($g) + (($8*60)|0)|0) + ($blobno<<2)|0) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($g) + ($blobno<<2)|0) + 252|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (33048 + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($g) + ($blobno<<2)|0) + 312|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $ch << 2;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$17)|0)+15)&-16)|0;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$17)|0)+15)&-16)|0;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$17)|0)+15)&-16)|0;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$17)|0)+15)&-16)|0;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$17)|0)+15)&-16)|0;
 $23 = (($vi) + 1156|0);
 $24 = ($0|0)>(1000);
 $stereo_threshholds_limited$stereo_threshholds = $24 ? 33120 : 33048;
 $postpoint$0$in$in = (($stereo_threshholds_limited$stereo_threshholds) + ($16<<3)|0);
 $postpoint$0$in = +HEAPF64[$postpoint$0$in$in>>3];
 $25 = Math_imul($17, $26)|0;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$25)|0)+15)&-16)|0;
 HEAP32[$18>>2] = $27;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$25)|0)+15)&-16)|0;
 HEAP32[$19>>2] = $28;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$25)|0)+15)&-16)|0;
 HEAP32[$20>>2] = $29;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$25)|0)+15)&-16)|0;
 HEAP32[$21>>2] = $30;
 $31 = ($ch|0)>(1);
 L4: do {
  if ($31) {
   $36 = $27;$39 = $28;$42 = $29;$45 = $30;$i$045 = 1;
   while(1) {
    $34 = Math_imul($i$045, $26)|0;
    $35 = (($36) + ($34<<2)|0);
    $37 = (($18) + ($i$045<<2)|0);
    HEAP32[$37>>2] = $35;
    $38 = (($39) + ($34<<2)|0);
    $40 = (($19) + ($i$045<<2)|0);
    HEAP32[$40>>2] = $38;
    $41 = (($42) + ($34<<2)|0);
    $43 = (($20) + ($i$045<<2)|0);
    HEAP32[$43>>2] = $41;
    $44 = (($45) + ($34<<2)|0);
    $46 = (($21) + ($i$045<<2)|0);
    HEAP32[$46>>2] = $44;
    $47 = (($i$045) + 1)|0;
    $exitcond62 = ($47|0)==($ch|0);
    if ($exitcond62) {
     break L4;
    }
    $$pre72 = HEAP32[$18>>2]|0;
    $$pre73 = HEAP32[$19>>2]|0;
    $$pre74 = HEAP32[$20>>2]|0;
    $$pre75 = HEAP32[$21>>2]|0;
    $36 = $$pre72;$39 = $$pre73;$42 = $$pre74;$45 = $$pre75;$i$045 = $47;
   }
  }
 } while(0);
 $32 = HEAP32[$23>>2]|0;
 $33 = ($0|0)>(0);
 if ($33) {
  $48 = HEAP32[$21>>2]|0;
  $49 = ($ch|0)>(0);
  $50 = $0 ^ -1;
  $51 = $26 ^ -1;
  $i$241 = 0;$indvars$iv58 = $50;
  while(1) {
   $54 = ($indvars$iv58|0)>($51|0);
   $smax60 = $54 ? $indvars$iv58 : $51;
   $55 = $smax60 ^ -1;
   $56 = (($0) - ($i$241))|0;
   $57 = ($26|0)>($56|0);
   $$ = $57 ? $56 : $26;
   _memcpy(($22|0),($nonzero|0),($17|0))|0;
   _memset(($48|0),0,($25|0))|0;
   if ($49) {
    $58 = ($$|0)>(0);
    $59 = (($10) - ($i$241))|0;
    $k$028 = 0;
    while(1) {
     $60 = (($iwork) + ($k$028<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + ($i$241<<2)|0);
     $63 = (($22) + ($k$028<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==(0);
     if ($65) {
      if ($58) {
       $66 = (($20) + ($k$028<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($18) + ($k$028<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (($19) + ($k$028<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($21) + ($k$028<<2)|0);
       $73 = HEAP32[$72>>2]|0;
       $j$224 = 0;
       while(1) {
        $115 = (($67) + ($j$224<<2)|0);
        HEAPF32[$115>>2] = 1.00000001335143196002E-10;
        $116 = (($69) + ($j$224<<2)|0);
        HEAPF32[$116>>2] = 0.0;
        $117 = (($71) + ($j$224<<2)|0);
        HEAPF32[$117>>2] = 0.0;
        $118 = (($73) + ($j$224<<2)|0);
        HEAP32[$118>>2] = 0;
        $$sum11 = (($j$224) + ($i$241))|0;
        $119 = (($61) + ($$sum11<<2)|0);
        HEAP32[$119>>2] = 0;
        $120 = (($j$224) + 1)|0;
        $exitcond55 = ($120|0)==($55|0);
        if ($exitcond55) {
         break;
        } else {
         $j$224 = $120;
        }
       }
      }
     } else {
      $74 = (($20) + ($k$028<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      if ($58) {
       $j$018 = 0;
       while(1) {
        $$sum12 = (($j$018) + ($i$241))|0;
        $76 = (($61) + ($$sum12<<2)|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = (56120 + ($77<<2)|0);
        $79 = +HEAPF32[$78>>2];
        $80 = (($75) + ($j$018<<2)|0);
        HEAPF32[$80>>2] = $79;
        $81 = (($j$018) + 1)|0;
        $exitcond = ($81|0)==($55|0);
        if ($exitcond) {
         break;
        } else {
         $j$018 = $81;
        }
       }
       $82 = (($mdct) + ($k$028<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($21) + ($k$028<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $j$01$i = 0;
       while(1) {
        $86 = ($j$01$i|0)>=($59|0);
        $$v = $86 ? $postpoint$0$in : $14;
        $87 = $$v;
        $$sum14 = (($j$01$i) + ($i$241))|0;
        $88 = (($83) + ($$sum14<<2)|0);
        $89 = +HEAPF32[$88>>2];
        $fabsf$i = (+Math_abs((+$89)));
        $90 = (($75) + ($j$01$i<<2)|0);
        $91 = +HEAPF32[$90>>2];
        $92 = $fabsf$i / $91;
        $93 = (($85) + ($j$01$i<<2)|0);
        $not$$i = !($92 < $87);
        $$$i = $not$$i&1;
        HEAP32[$93>>2] = $$$i;
        $94 = (($j$01$i) + 1)|0;
        $exitcond$i = ($94|0)==($$|0);
        if ($exitcond$i) {
         break;
        } else {
         $j$01$i = $94;
        }
       }
       $95 = (($18) + ($k$028<<2)|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (($19) + ($k$028<<2)|0);
       $98 = HEAP32[$97>>2]|0;
       $j$121 = 0;
       while(1) {
        $99 = (($j$121) + ($i$241))|0;
        $100 = (($83) + ($99<<2)|0);
        $101 = +HEAPF32[$100>>2];
        $102 = $101 * $101;
        $103 = (($96) + ($j$121<<2)|0);
        HEAPF32[$103>>2] = $102;
        $104 = (($98) + ($j$121<<2)|0);
        HEAPF32[$104>>2] = $102;
        $105 = +HEAPF32[$100>>2];
        $106 = $105 < 0.0;
        if ($106) {
         $107 = +HEAPF32[$103>>2];
         $108 = $107 * -1.0;
         HEAPF32[$103>>2] = $108;
        }
        $109 = (($75) + ($j$121<<2)|0);
        $110 = +HEAPF32[$109>>2];
        $111 = $110 * $110;
        HEAPF32[$109>>2] = $111;
        $112 = (($j$121) + 1)|0;
        $exitcond51 = ($112|0)==($55|0);
        if ($exitcond51) {
         $113 = $96;$114 = $98;
         break;
        } else {
         $j$121 = $112;
        }
       }
      } else {
       $$phi$trans$insert68 = (($18) + ($k$028<<2)|0);
       $$pre69 = HEAP32[$$phi$trans$insert68>>2]|0;
       $$phi$trans$insert70 = (($19) + ($k$028<<2)|0);
       $$pre71 = HEAP32[$$phi$trans$insert70>>2]|0;
       $113 = $$pre69;$114 = $$pre71;
      }
      $p$idx$val = HEAP32[$1>>2]|0;
      _noise_normalize($p$idx$val,$10,$113,$114,$75,0,$i$241,$$,$62);
     }
     $121 = (($k$028) + 1)|0;
     $exitcond57 = ($121|0)==($ch|0);
     if ($exitcond57) {
      break;
     } else {
      $k$028 = $121;
     }
    }
   }
   $122 = HEAP32[$23>>2]|0;
   $123 = ($122|0)>(0);
   if ($123) {
    $124 = ($$|0)>(0);
    $125 = (($sliding_lowpass) - ($i$241))|0;
    $126 = (($10) - ($i$241))|0;
    $245 = $122;$step$037 = 0;
    while(1) {
     $127 = ((($vi) + ($step$037<<2)|0) + 1160|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($vi) + ($step$037<<2)|0) + 2184|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($iwork) + ($128<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + ($i$241<<2)|0);
     $134 = (($iwork) + ($130<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($18) + ($128<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($18) + ($130<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($19) + ($128<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($19) + ($130<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($20) + ($128<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($20) + ($130<<2)|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($21) + ($128<<2)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($21) + ($130<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($22) + ($128<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==(0);
     $155 = (($22) + ($130<<2)|0);
     if ($154) {
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156|0)==(0);
      if ($157) {
       $225 = $245;
      } else {
       label = 30;
      }
     } else {
      label = 30;
     }
     if ((label|0) == 30) {
      label = 0;
      HEAP32[$155>>2] = 1;
      HEAP32[$152>>2] = 1;
      if ($124) {
       $j$331 = 0;
       while(1) {
        $158 = ($j$331|0)<($125|0);
        do {
         if ($158) {
          $159 = (($149) + ($j$331<<2)|0);
          $160 = HEAP32[$159>>2]|0;
          $161 = ($160|0)==(0);
          $162 = (($151) + ($j$331<<2)|0);
          if ($161) {
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==(0);
           if ($164) {
            $198 = ($j$331|0)<($126|0);
            do {
             if ($198) {
              $199 = (($139) + ($j$331<<2)|0);
              $200 = +HEAPF32[$199>>2];
              $201 = (($137) + ($j$331<<2)|0);
              $202 = +HEAPF32[$201>>2];
              $203 = $200 + $202;
              HEAPF32[$201>>2] = $203;
              $fabsf2 = (+Math_abs((+$203)));
              $204 = (($141) + ($j$331<<2)|0);
              HEAPF32[$204>>2] = $fabsf2;
             } else {
              $205 = (($137) + ($j$331<<2)|0);
              $206 = +HEAPF32[$205>>2];
              $207 = (($139) + ($j$331<<2)|0);
              $208 = +HEAPF32[$207>>2];
              $209 = $206 + $208;
              $210 = $209 < 0.0;
              $fabsf = (+Math_abs((+$206)));
              $fabsf1 = (+Math_abs((+$208)));
              $211 = $fabsf + $fabsf1;
              $212 = (($141) + ($j$331<<2)|0);
              HEAPF32[$212>>2] = $211;
              if ($210) {
               $213 = -$211;
               HEAPF32[$205>>2] = $213;
               break;
              } else {
               HEAPF32[$205>>2] = $211;
               break;
              }
             }
            } while(0);
            $214 = (($143) + ($j$331<<2)|0);
            HEAPF32[$214>>2] = 0.0;
            $215 = (($139) + ($j$331<<2)|0);
            HEAPF32[$215>>2] = 0.0;
            HEAP32[$162>>2] = 1;
            $$sum = (($j$331) + ($i$241))|0;
            $216 = (($135) + ($$sum<<2)|0);
            HEAP32[$216>>2] = 0;
            break;
           }
          }
          $165 = (($137) + ($j$331<<2)|0);
          $166 = +HEAPF32[$165>>2];
          $fabsf3 = (+Math_abs((+$166)));
          $167 = (($139) + ($j$331<<2)|0);
          $168 = +HEAPF32[$167>>2];
          $fabsf4 = (+Math_abs((+$168)));
          $169 = $fabsf3 + $fabsf4;
          HEAPF32[$165>>2] = $169;
          $170 = (($141) + ($j$331<<2)|0);
          $171 = +HEAPF32[$170>>2];
          $172 = (($143) + ($j$331<<2)|0);
          $173 = +HEAPF32[$172>>2];
          $174 = $171 + $173;
          HEAPF32[$170>>2] = $174;
          HEAP32[$162>>2] = 1;
          HEAP32[$159>>2] = 1;
          $$sum5 = (($j$331) + ($i$241))|0;
          $175 = (($132) + ($$sum5<<2)|0);
          $176 = HEAP32[$175>>2]|0;
          $177 = (($135) + ($$sum5<<2)|0);
          $178 = HEAP32[$177>>2]|0;
          $ispos = ($176|0)>(-1);
          $neg = (0 - ($176))|0;
          $179 = $ispos ? $176 : $neg;
          $ispos7 = ($178|0)>(-1);
          $neg8 = (0 - ($178))|0;
          $180 = $ispos7 ? $178 : $neg8;
          $181 = ($179|0)>($180|0);
          if ($181) {
           $182 = ($176|0)>(0);
           $183 = (($176) - ($178))|0;
           $184 = (($178) - ($176))|0;
           $185 = $182 ? $183 : $184;
           HEAP32[$177>>2] = $185;
           $$pre65 = HEAP32[$175>>2]|0;
           $190 = $$pre65;$193 = $185;
          } else {
           $186 = ($178|0)>(0);
           $187 = (($176) - ($178))|0;
           $188 = (($178) - ($176))|0;
           $189 = $186 ? $187 : $188;
           HEAP32[$177>>2] = $189;
           HEAP32[$175>>2] = $178;
           $$pre64 = HEAP32[$177>>2]|0;
           $190 = $178;$193 = $$pre64;
          }
          $ispos9 = ($190|0)>(-1);
          $neg10 = (0 - ($190))|0;
          $191 = $ispos9 ? $190 : $neg10;
          $192 = $191 << 1;
          $194 = ($193|0)<($192|0);
          if (!($194)) {
           $195 = (0 - ($193))|0;
           HEAP32[$177>>2] = $195;
           $196 = HEAP32[$175>>2]|0;
           $197 = (0 - ($196))|0;
           HEAP32[$175>>2] = $197;
          }
         }
        } while(0);
        $217 = (($145) + ($j$331<<2)|0);
        $218 = +HEAPF32[$217>>2];
        $219 = (($147) + ($j$331<<2)|0);
        $220 = +HEAPF32[$219>>2];
        $221 = $218 + $220;
        HEAPF32[$219>>2] = $221;
        HEAPF32[$217>>2] = $221;
        $222 = (($j$331) + 1)|0;
        $exitcond61 = ($222|0)==($55|0);
        if ($exitcond61) {
         break;
        } else {
         $j$331 = $222;
        }
       }
      }
      $p$idx13$val = HEAP32[$1>>2]|0;
      _noise_normalize($p$idx13$val,$10,$137,$141,$145,$149,$i$241,$$,$133);
      $$pre63 = HEAP32[$23>>2]|0;
      $225 = $$pre63;
     }
     $223 = (($step$037) + 1)|0;
     $224 = ($223|0)<($225|0);
     if ($224) {
      $245 = $225;$step$037 = $223;
     } else {
      $244 = $225;
      break;
     }
    }
   } else {
    $244 = $122;
   }
   $226 = (($i$241) + ($26))|0;
   $227 = ($226|0)<($0|0);
   $indvars$iv$next59 = (($indvars$iv58) + ($26))|0;
   if ($227) {
    $i$241 = $226;$indvars$iv58 = $indvars$iv$next59;
   } else {
    $52 = $244;
    break;
   }
  }
 } else {
  $52 = $32;
 }
 $53 = ($52|0)>(0);
 if ($53) {
  $243 = $52;$i$315 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $228 = ((($vi) + ($i$315<<2)|0) + 1160|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = (($nonzero) + ($229<<2)|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ($231|0)==(0);
  $233 = ((($vi) + ($i$315<<2)|0) + 2184|0);
  if ($232) {
   $234 = HEAP32[$233>>2]|0;
   $235 = (($nonzero) + ($234<<2)|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($236|0)==(0);
   if ($237) {
    $242 = $243;
   } else {
    label = 51;
   }
  } else {
   label = 51;
  }
  if ((label|0) == 51) {
   label = 0;
   HEAP32[$230>>2] = 1;
   $238 = HEAP32[$233>>2]|0;
   $239 = (($nonzero) + ($238<<2)|0);
   HEAP32[$239>>2] = 1;
   $$pre = HEAP32[$23>>2]|0;
   $242 = $$pre;
  }
  $240 = (($i$315) + 1)|0;
  $241 = ($240|0)<($242|0);
  if ($241) {
   $243 = $242;$i$315 = $240;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _noise_normalize($p$0$1$val,$limit,$r,$q,$f,$flags,$i,$n,$out) {
 $p$0$1$val = $p$0$1$val|0;
 $limit = $limit|0;
 $r = $r|0;
 $q = $q|0;
 $f = $f|0;
 $flags = $flags|0;
 $i = $i|0;
 $n = $n|0;
 $out = $out|0;
 var $$06 = 0.0, $$1 = 0.0, $$22 = 0.0, $$3 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $count$03 = 0;
 var $count$1 = 0, $exitcond = 0, $exitcond15 = 0, $exitcond16 = 0, $j$0$lcssa = 0, $j$010 = 0, $j$14 = 0, $j$21 = 0, $n$ = 0, $or$cond = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $2 = (($p$0$1$val) + 500|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $n;
 } else {
  $5 = (($p$0$1$val) + 504|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) - ($i))|0;
  $8 = $7;
 }
 $9 = ($8|0)>($n|0);
 $n$ = $9 ? $n : $8;
 $10 = ($n$|0)>(0);
 if ($10) {
  $11 = ($flags|0)==(0|0);
  $12 = $8 ^ -1;
  $13 = $n ^ -1;
  $14 = ($12|0)>($13|0);
  $smax = $14 ? $12 : $13;
  $15 = $smax ^ -1;
  $j$010 = 0;
  while(1) {
   if ($11) {
    label = 9;
   } else {
    $19 = (($flags) + ($j$010<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     label = 9;
    }
   }
   do {
    if ((label|0) == 9) {
     label = 0;
     $22 = (($q) + ($j$010<<2)|0);
     $23 = +HEAPF32[$22>>2];
     $24 = (($f) + ($j$010<<2)|0);
     $25 = +HEAPF32[$24>>2];
     $26 = $23 / $25;
     $27 = (($r) + ($j$010<<2)|0);
     $28 = +HEAPF32[$27>>2];
     $29 = $28 < 0.0;
     $30 = $26;
     $31 = (+Math_sqrt((+$30)));
     $32 = (+_rint((+$31)));
     if ($29) {
      $33 = -$32;
      $34 = (~~(($33)));
      $35 = (($out) + ($j$010<<2)|0);
      HEAP32[$35>>2] = $34;
      break;
     } else {
      $36 = (~~(($32)));
      $37 = (($out) + ($j$010<<2)|0);
      HEAP32[$37>>2] = $36;
      break;
     }
    }
   } while(0);
   $38 = (($j$010) + 1)|0;
   $exitcond16 = ($38|0)==($15|0);
   if ($exitcond16) {
    $j$0$lcssa = $15;
    break;
   } else {
    $j$010 = $38;
   }
  }
 } else {
  $j$0$lcssa = 0;
 }
 $16 = ($j$0$lcssa|0)<($n|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = ($flags|0)!=(0|0);
 $18 = (($limit) - ($i))|0;
 $$06 = 0.0;$count$03 = 0;$j$14 = $j$0$lcssa;
 while(1) {
  if ($17) {
   $39 = (($flags) + ($j$14<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    label = 15;
   } else {
    $$1 = $$06;$count$1 = $count$03;
   }
  } else {
   label = 15;
  }
  do {
   if ((label|0) == 15) {
    label = 0;
    $42 = (($q) + ($j$14<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = (($f) + ($j$14<<2)|0);
    $45 = +HEAPF32[$44>>2];
    $46 = $43 / $45;
    $47 = $46 < 0.25;
    if ($47) {
     $48 = ($j$14|0)<($18|0);
     $or$cond = $17 & $48;
     if (!($or$cond)) {
      $49 = $$06 + $46;
      $50 = (($count$03) + 1)|0;
      $51 = (($1) + ($count$03<<2)|0);
      HEAP32[$51>>2] = $42;
      $$1 = $49;$count$1 = $50;
      break;
     }
    }
    $52 = (($r) + ($j$14<<2)|0);
    $53 = +HEAPF32[$52>>2];
    $54 = $53 < 0.0;
    $55 = $46;
    $56 = (+Math_sqrt((+$55)));
    $57 = (+_rint((+$56)));
    if ($54) {
     $58 = -$57;
     $59 = (~~(($58)));
     $60 = (($out) + ($j$14<<2)|0);
     HEAP32[$60>>2] = $59;
     $64 = $59;
    } else {
     $61 = (~~(($57)));
     $62 = (($out) + ($j$14<<2)|0);
     HEAP32[$62>>2] = $61;
     $64 = $61;
    }
    $63 = Math_imul($64, $64)|0;
    $65 = (+($63|0));
    $66 = $45 * $65;
    HEAPF32[$42>>2] = $66;
    $$1 = $$06;$count$1 = $count$03;
   }
  } while(0);
  $67 = (($j$14) + 1)|0;
  $exitcond15 = ($67|0)==($n|0);
  if ($exitcond15) {
   break;
  } else {
   $$06 = $$1;$count$03 = $count$1;$j$14 = $67;
  }
 }
 $68 = ($count$1|0)==(0);
 if ($68) {
  STACKTOP = sp;return;
 }
 _qsort($1,$count$1,73);
 $69 = ($count$1|0)>(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $q;
 $71 = (($p$0$1$val) + 512|0);
 $72 = +HEAPF64[$71>>3];
 $$22 = $$1;$j$21 = 0;
 while(1) {
  $73 = (($1) + ($j$21<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74;
  $76 = (($75) - ($70))|0;
  $77 = $76 >> 2;
  $78 = $$22;
  $79 = !($78 >= $72);
  if ($79) {
   $92 = (($out) + ($77<<2)|0);
   HEAP32[$92>>2] = 0;
   $93 = (($q) + ($77<<2)|0);
   HEAPF32[$93>>2] = 0.0;
   $$3 = $$22;
  } else {
   $80 = (($r) + ($77<<2)|0);
   $81 = +HEAPF32[$80>>2];
   $82 = (HEAPF32[tempDoublePtr>>2]=$81,HEAP32[tempDoublePtr>>2]|0);
   $83 = $82 & -2147483648;
   $84 = $83 | 1065353216;
   $85 = (HEAP32[tempDoublePtr>>2]=$84,+HEAPF32[tempDoublePtr>>2]);
   $86 = (~~(($85)));
   $87 = (($out) + ($77<<2)|0);
   HEAP32[$87>>2] = $86;
   $88 = $$22 + -1.0;
   $89 = (($f) + ($77<<2)|0);
   $90 = +HEAPF32[$89>>2];
   $91 = (($q) + ($77<<2)|0);
   HEAPF32[$91>>2] = $90;
   $$3 = $88;
  }
  $94 = (($j$21) + 1)|0;
  $exitcond = ($94|0)==($count$1|0);
  if ($exitcond) {
   break;
  } else {
   $$22 = $$3;$j$21 = $94;
  }
 }
 STACKTOP = sp;return;
}
function _apsort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = +HEAPF32[$0>>2];
 $2 = HEAP32[$b>>2]|0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 $5 = $4&1;
 $6 = $1 > $3;
 $7 = $6&1;
 $8 = (($5) - ($7))|0;
 STACKTOP = sp;return ($8|0);
}
function _seed_chase($seeds,$linesper,$n) {
 $seeds = $seeds|0;
 $linesper = $linesper|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $endpos$0 = 0, $exitcond = 0;
 var $exitcond16 = 0, $exitcond18 = 0, $i$011 = 0, $i$13 = 0, $n$endpos$0 = 0, $or$cond = 0, $pos$02 = 0, $pos$1$lcssa = 0, $pos$11 = 0, $smax = 0, $stack$010 = 0, $stack$1 = 0, $stack$2 = 0, $stack$2$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$0)|0)+15)&-16)|0;
 $3 = ($n|0)>(0);
 if ($3) {
  $i$011 = 0;$stack$010 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = ($stack$010|0)<(2);
  do {
   if ($7) {
    $10 = (($1) + ($stack$010<<2)|0);
    HEAP32[$10>>2] = $i$011;
    $11 = (($seeds) + ($i$011<<2)|0);
    $12 = +HEAPF32[$11>>2];
    $13 = (($2) + ($stack$010<<2)|0);
    HEAPF32[$13>>2] = $12;
    $stack$2$in = $stack$010;
   } else {
    $8 = (($seeds) + ($i$011<<2)|0);
    $9 = +HEAPF32[$8>>2];
    $stack$1 = $stack$010;
    while(1) {
     $14 = (($stack$1) + -1)|0;
     $15 = (($2) + ($14<<2)|0);
     $16 = +HEAPF32[$15>>2];
     $17 = $9 < $16;
     if ($17) {
      label = 8;
      break;
     }
     $20 = (($1) + ($14<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + ($linesper))|0;
     $23 = ($i$011|0)<($22|0);
     $24 = ($stack$1|0)>(1);
     $or$cond = $23 & $24;
     if (!($or$cond)) {
      label = 12;
      break;
     }
     $25 = (($stack$1) + -2)|0;
     $26 = (($2) + ($25<<2)|0);
     $27 = +HEAPF32[$26>>2];
     $28 = !($16 <= $27);
     if ($28) {
      label = 12;
      break;
     }
     $29 = (($1) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($linesper))|0;
     $32 = ($i$011|0)<($31|0);
     if ($32) {
      $stack$1 = $14;
     } else {
      label = 12;
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $18 = (($1) + ($stack$1<<2)|0);
     HEAP32[$18>>2] = $i$011;
     $19 = (($2) + ($stack$1<<2)|0);
     HEAPF32[$19>>2] = $9;
     $stack$2$in = $stack$1;
     break;
    }
    else if ((label|0) == 12) {
     label = 0;
     $33 = (($1) + ($stack$1<<2)|0);
     HEAP32[$33>>2] = $i$011;
     $34 = (($2) + ($stack$1<<2)|0);
     HEAPF32[$34>>2] = $9;
     $stack$2$in = $stack$1;
     break;
    }
   }
  } while(0);
  $stack$2 = (($stack$2$in) + 1)|0;
  $35 = (($i$011) + 1)|0;
  $exitcond18 = ($35|0)==($n|0);
  if ($exitcond18) {
   break;
  } else {
   $i$011 = $35;$stack$010 = $stack$2;
  }
 }
 $4 = ($stack$2$in|0)>(-1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($linesper) + 1)|0;
 $6 = $n ^ -1;
 $i$13 = 0;$pos$02 = 0;
 while(1) {
  $36 = ($i$13|0)<($stack$2$in|0);
  if ($36) {
   $37 = (($i$13) + 1)|0;
   $38 = (($2) + ($37<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $40 = (($2) + ($i$13<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $39 > $41;
   if ($42) {
    $43 = (($1) + ($37<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $endpos$0 = $44;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $45 = (($1) + ($i$13<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($5) + ($46))|0;
   $endpos$0 = $47;
  }
  $48 = ($endpos$0|0)>($n|0);
  $n$endpos$0 = $48 ? $n : $endpos$0;
  $49 = ($pos$02|0)<($n$endpos$0|0);
  if ($49) {
   $50 = (($2) + ($i$13<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $endpos$0 ^ -1;
   $53 = ($52|0)>($6|0);
   $smax = $53 ? $52 : $6;
   $54 = $smax ^ -1;
   $pos$11 = $pos$02;
   while(1) {
    $55 = (($seeds) + ($pos$11<<2)|0);
    HEAPF32[$55>>2] = $51;
    $56 = (($pos$11) + 1)|0;
    $exitcond = ($56|0)==($54|0);
    if ($exitcond) {
     $pos$1$lcssa = $54;
     break;
    } else {
     $pos$11 = $56;
    }
   }
  } else {
   $pos$1$lcssa = $pos$02;
  }
  $57 = (($i$13) + 1)|0;
  $exitcond16 = ($57|0)==($stack$2|0);
  if ($exitcond16) {
   break;
  } else {
   $i$13 = $57;$pos$02 = $pos$1$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_info_clear($vi) {
 $vi = $vi|0;
 var $$pre = 0, $$pre$phi25Z2D = 0, $$pre1 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$016 = 0, $i$113 = 0, $i$210 = 0, $i$37 = 0, $i$43 = 0, $i$51 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($vi) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ;HEAP32[$vi+0>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
  STACKTOP = sp;return;
 }
 $3 = (($1) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = (($1) + 32|0);
  $114 = $4;$i$016 = 0;
  while(1) {
   $12 = (($6) + ($i$016<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $17 = $114;
   } else {
    _free($13);
    $$pre20 = HEAP32[$3>>2]|0;
    $17 = $$pre20;
   }
   $15 = (($i$016) + 1)|0;
   $16 = ($15|0)<($17|0);
   if ($16) {
    $114 = $17;$i$016 = $15;
   } else {
    break;
   }
  }
 }
 $7 = (($1) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = (($1) + 544|0);
  $11 = (($1) + 288|0);
  $115 = $8;$i$113 = 0;
  while(1) {
   $23 = (($10) + ($i$113<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $34 = $115;
   } else {
    $26 = (($11) + ($i$113<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (57320 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    FUNCTION_TABLE_vi[$31 & 127]($24);
    $$pre19 = HEAP32[$7>>2]|0;
    $34 = $$pre19;
   }
   $32 = (($i$113) + 1)|0;
   $33 = ($32|0)<($34|0);
   if ($33) {
    $115 = $34;$i$113 = $32;
   } else {
    break;
   }
  }
 }
 $18 = (($1) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if ($20) {
  $21 = (($1) + 1056|0);
  $22 = (($1) + 800|0);
  $116 = $19;$i$210 = 0;
  while(1) {
   $40 = (($21) + ($i$210<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $51 = $116;
   } else {
    $43 = (($22) + ($i$210<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (57296 + ($44<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_vi[$48 & 127]($41);
    $$pre18 = HEAP32[$18>>2]|0;
    $51 = $$pre18;
   }
   $49 = (($i$210) + 1)|0;
   $50 = ($49|0)<($51|0);
   if ($50) {
    $116 = $51;$i$210 = $49;
   } else {
    break;
   }
  }
 }
 $35 = (($1) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>(0);
 if ($37) {
  $38 = (($1) + 1568|0);
  $39 = (($1) + 1312|0);
  $117 = $36;$i$37 = 0;
  while(1) {
   $57 = (($38) + ($i$37<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if ($59) {
    $68 = $117;
   } else {
    $60 = (($39) + ($i$37<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (57304 + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    FUNCTION_TABLE_vi[$65 & 127]($58);
    $$pre = HEAP32[$35>>2]|0;
    $68 = $$pre;
   }
   $66 = (($i$37) + 1)|0;
   $67 = ($66|0)<($68|0);
   if ($67) {
    $117 = $68;$i$37 = $66;
   } else {
    break;
   }
  }
 }
 $52 = (($1) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)>(0);
 if ($54) {
  $55 = (($1) + 1824|0);
  $56 = (($1) + 2848|0);
  $i$43 = 0;
  while(1) {
   $69 = (($55) + ($i$43<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(0|0);
   if (!($71)) {
    $72 = (($70) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if (!($74)) {
     $75 = (($70) + 32|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==(0|0);
     if (!($77)) {
      _free($76);
     }
     $78 = (($70) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==(0|0);
     if (!($80)) {
      _free($79);
     }
     _free($70);
    }
   }
   $81 = HEAP32[$56>>2]|0;
   $82 = ($81|0)==(0|0);
   if (!($82)) {
    $83 = (($81) + (($i$43*56)|0)|0);
    $84 = ((($81) + (($i$43*56)|0)|0) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(0|0);
    if (!($86)) {
     _free($85);
    }
    $87 = ((($81) + (($i$43*56)|0)|0) + 20|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    if (!($89)) {
     _free($88);
    }
    $90 = ((($81) + (($i$43*56)|0)|0) + 24|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    if (!($92)) {
     _free($91);
    }
    $93 = ((($81) + (($i$43*56)|0)|0) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if (!($95)) {
     _free($94);
    }
    $96 = ((($81) + (($i$43*56)|0)|0) + 32|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     _free($97);
    }
    dest=$83+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   }
   $99 = (($i$43) + 1)|0;
   $100 = HEAP32[$52>>2]|0;
   $101 = ($99|0)<($100|0);
   if ($101) {
    $i$43 = $99;
   } else {
    $$pre$phi25Z2D = $56;
    break;
   }
  }
 } else {
  $$pre23 = (($1) + 2848|0);
  $$pre$phi25Z2D = $$pre23;
 }
 $102 = HEAP32[$$pre$phi25Z2D>>2]|0;
 $103 = ($102|0)==(0|0);
 if (!($103)) {
  _free($102);
 }
 $104 = (($1) + 28|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ($105|0)>(0);
 if ($106) {
  $107 = (($1) + 2852|0);
  $118 = $105;$i$51 = 0;
  while(1) {
   $108 = (($107) + ($i$51<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    $113 = $118;
   } else {
    _free($109);
    $$pre1 = HEAP32[$104>>2]|0;
    $113 = $$pre1;
   }
   $111 = (($i$51) + 1)|0;
   $112 = ($111|0)<($113|0);
   if ($112) {
    $118 = $113;$i$51 = $111;
   } else {
    break;
   }
  }
 }
 _free($1);
 ;HEAP32[$vi+0>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
 STACKTOP = sp;return;
}
function _floor1_fit($vb,$look,$logmdct,$logmask) {
 $vb = $vb|0;
 $look = $look|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$$i = 0, $$$i$i = 0, $$$i4$i = 0, $$$i49 = 0, $$0$i$i = 0, $$0$i3 = 0, $$0$i4 = 0, $$0$i5 = 0, $$0$i5$i = 0, $$0$i5063 = 0, $$0$i52 = 0, $$0$i60 = 0, $$0$i62 = 0, $$0$i7 = 0, $$0$p$i = 0, $$pn$i = 0, $$pre = 0, $$pre114 = 0, $$pre115 = 0, $$sum = 0;
 var $$val$i = 0.0, $$val$i23 = 0.0, $$val$i57 = 0.0, $$val3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0;
 var $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0;
 var $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err$010$i = 0, $err$1$i = 0, $exitcond = 0;
 var $exitcond108 = 0, $exitcond110 = 0, $exitcond112 = 0, $exitcond113 = 0, $fit_valueA = 0, $fit_valueB = 0, $fits = 0, $hineighbor = 0, $hy0 = 0, $hy1 = 0, $i$01$i = 0, $i$01$i22 = 0, $i$0103 = 0, $i$1101 = 0, $i$395 = 0, $i$588 = 0, $i$680 = 0, $i$769 = 0, $ispos$i = 0, $ispos$i54 = 0;
 var $ispos1$i = 0, $j$074 = 0, $j$074$in = 0, $j$1 = 0, $j$177 = 0, $j$178 = 0, $loneighbor = 0, $ly0 = 0, $ly1 = 0, $memo = 0, $mse$0$lcssa$i = 0, $mse$011$i = 0, $n$0$lcssa$i = 0, $n$012$i = 0, $na$0$lcssa$i = 0, $na$0$lcssa$i42 = 0, $na$07$i = 0, $na$07$i16 = 0, $na$1$i = 0, $na$1$i29 = 0;
 var $nb$0$lcssa$i = 0, $nb$0$lcssa$i36 = 0, $nb$013$i = 0, $nb$013$i10 = 0, $nb$1$i = 0, $nb$1$i35 = 0, $neg$i = 0, $neg$i55 = 0, $neg2$i = 0, $nonzero$087 = 0, $nonzero$1 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond2 = 0, $output$0 = 0, $x1$$i = 0, $x2a$0$lcssa$i = 0, $x2a$0$lcssa$i45 = 0, $x2a$04$i = 0, $x2a$04$i19 = 0;
 var $x2a$1$i = 0, $x2a$1$i26 = 0, $x2b$0$lcssa$i = 0, $x2b$0$lcssa$i39 = 0, $x2b$010$i = 0, $x2b$010$i13 = 0, $x2b$1$i = 0, $x2b$1$i32 = 0, $xa$0$lcssa$i = 0, $xa$0$lcssa$i47 = 0, $xa$02$i = 0, $xa$02$i21 = 0, $xa$1$i = 0, $xa$1$i24 = 0, $xb$0$lcssa$i = 0, $xb$0$lcssa$i41 = 0, $xb$08$i = 0, $xb$08$i15 = 0, $xb$1$i = 0, $xb$1$i30 = 0;
 var $xya$0$lcssa$i = 0, $xya$0$lcssa$i43 = 0, $xya$06$i = 0, $xya$06$i17 = 0, $xya$1$i = 0, $xya$1$i28 = 0, $xyb$0$lcssa$i = 0, $xyb$0$lcssa$i37 = 0, $xyb$012$i = 0, $xyb$012$i11 = 0, $xyb$1$i = 0, $xyb$1$i34 = 0, $y$09$i = 0, $y$1$i = 0, $y0 = 0, $y1 = 0, $y2a$0$lcssa$i = 0, $y2a$0$lcssa$i44 = 0, $y2a$05$i = 0, $y2a$05$i18 = 0;
 var $y2a$1$i = 0, $y2a$1$i27 = 0, $y2b$0$lcssa$i = 0, $y2b$0$lcssa$i38 = 0, $y2b$011$i = 0, $y2b$011$i12 = 0, $y2b$1$i = 0, $y2b$1$i33 = 0, $ya$0$lcssa$i = 0, $ya$0$lcssa$i46 = 0, $ya$03$i = 0, $ya$03$i20 = 0, $ya$1$i = 0, $ya$1$i25 = 0, $yb$0$lcssa$i = 0, $yb$0$lcssa$i40 = 0, $yb$09$i = 0, $yb$09$i14 = 0, $yb$1$i = 0, $yb$1$i31 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4912|0;
 $fits = sp + 1328|0;
 $fit_valueA = sp + 1064|0;
 $fit_valueB = sp + 804|0;
 $loneighbor = sp + 544|0;
 $hineighbor = sp + 284|0;
 $memo = sp + 24|0;
 $y0 = sp + 20|0;
 $y1 = sp + 16|0;
 $ly0 = sp + 12|0;
 $ly1 = sp + 8|0;
 $hy0 = sp + 4|0;
 $hy1 = sp;
 $0 = (($look) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($look) + 1288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($look) + 1284|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $i$0103 = 0;
  while(1) {
   $7 = (($fit_valueA) + ($i$0103<<2)|0);
   HEAP32[$7>>2] = -200;
   $8 = (($i$0103) + 1)|0;
   $exitcond113 = ($8|0)==($5|0);
   if ($exitcond113) {
    $i$1101 = 0;
    break;
   } else {
    $i$0103 = $8;
   }
  }
  while(1) {
   $9 = (($fit_valueB) + ($i$1101<<2)|0);
   HEAP32[$9>>2] = -200;
   $10 = (($i$1101) + 1)|0;
   $exitcond112 = ($10|0)==($5|0);
   if ($exitcond112) {
    break;
   } else {
    $i$1101 = $10;
   }
  }
  $11 = $5 << 2;
  _memset(($loneighbor|0),0,($11|0))|0;
  $i$395 = 0;
  while(1) {
   $12 = (($hineighbor) + ($i$395<<2)|0);
   HEAP32[$12>>2] = 1;
   $13 = (($i$395) + 1)|0;
   $exitcond110 = ($13|0)==($5|0);
   if ($exitcond110) {
    break;
   } else {
    $i$395 = $13;
   }
  }
  _memset(($memo|0),-1,($11|0))|0;
 }
 $14 = ($5|0)==(0);
 if ($14) {
  dest=$fits+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$fits>>2] = 0;
  $19 = (($fits) + 4|0);
  HEAP32[$19>>2] = $3;
  $20 = (($3) + -1)|0;
  $21 = ($3|0)<(1);
  if ($21) {
   $na$0$lcssa$i = 0;$nb$0$lcssa$i = 0;$x2a$0$lcssa$i = 0;$x2b$0$lcssa$i = 0;$xa$0$lcssa$i = 0;$xb$0$lcssa$i = 0;$xya$0$lcssa$i = 0;$xyb$0$lcssa$i = 0;$y2a$0$lcssa$i = 0;$y2b$0$lcssa$i = 0;$ya$0$lcssa$i = 0;$yb$0$lcssa$i = 0;
  } else {
   $22 = (($1) + 1112|0);
   $i$01$i = 0;$na$07$i = 0;$nb$013$i = 0;$x2a$04$i = 0;$x2b$010$i = 0;$xa$02$i = 0;$xb$08$i = 0;$xya$06$i = 0;$xyb$012$i = 0;$y2a$05$i = 0;$y2b$011$i = 0;$ya$03$i = 0;$yb$09$i = 0;
   while(1) {
    $23 = (($logmask) + ($i$01$i<<2)|0);
    $$val$i = +HEAPF32[$23>>2];
    $24 = $$val$i * 7.31428575515747070313;
    $25 = $24 + 1023.5;
    $26 = (~~(($25)));
    $27 = ($26|0)>(1023);
    if ($27) {
     $$0$i62 = 1023;
     label = 14;
    } else {
     $28 = ($26|0)<(0);
     $$$i = $28 ? 0 : $26;
     $29 = ($$$i|0)==(0);
     if ($29) {
      $na$1$i = $na$07$i;$nb$1$i = $nb$013$i;$x2a$1$i = $x2a$04$i;$x2b$1$i = $x2b$010$i;$xa$1$i = $xa$02$i;$xb$1$i = $xb$08$i;$xya$1$i = $xya$06$i;$xyb$1$i = $xyb$012$i;$y2a$1$i = $y2a$05$i;$y2b$1$i = $y2b$011$i;$ya$1$i = $ya$03$i;$yb$1$i = $yb$09$i;
     } else {
      $$0$i62 = $$$i;
      label = 14;
     }
    }
    do {
     if ((label|0) == 14) {
      label = 0;
      $30 = (($logmdct) + ($i$01$i<<2)|0);
      $31 = +HEAPF32[$30>>2];
      $32 = +HEAPF32[$22>>2];
      $33 = $31 + $32;
      $34 = !($33 >= $$val$i);
      if ($34) {
       $44 = (($i$01$i) + ($xb$08$i))|0;
       $45 = (($$0$i62) + ($yb$09$i))|0;
       $46 = Math_imul($i$01$i, $i$01$i)|0;
       $47 = (($46) + ($x2b$010$i))|0;
       $48 = Math_imul($$0$i62, $$0$i62)|0;
       $49 = (($48) + ($y2b$011$i))|0;
       $50 = Math_imul($$0$i62, $i$01$i)|0;
       $51 = (($50) + ($xyb$012$i))|0;
       $52 = (($nb$013$i) + 1)|0;
       $na$1$i = $na$07$i;$nb$1$i = $52;$x2a$1$i = $x2a$04$i;$x2b$1$i = $47;$xa$1$i = $xa$02$i;$xb$1$i = $44;$xya$1$i = $xya$06$i;$xyb$1$i = $51;$y2a$1$i = $y2a$05$i;$y2b$1$i = $49;$ya$1$i = $ya$03$i;$yb$1$i = $45;
       break;
      } else {
       $35 = (($i$01$i) + ($xa$02$i))|0;
       $36 = (($$0$i62) + ($ya$03$i))|0;
       $37 = Math_imul($i$01$i, $i$01$i)|0;
       $38 = (($37) + ($x2a$04$i))|0;
       $39 = Math_imul($$0$i62, $$0$i62)|0;
       $40 = (($39) + ($y2a$05$i))|0;
       $41 = Math_imul($$0$i62, $i$01$i)|0;
       $42 = (($41) + ($xya$06$i))|0;
       $43 = (($na$07$i) + 1)|0;
       $na$1$i = $43;$nb$1$i = $nb$013$i;$x2a$1$i = $38;$x2b$1$i = $x2b$010$i;$xa$1$i = $35;$xb$1$i = $xb$08$i;$xya$1$i = $42;$xyb$1$i = $xyb$012$i;$y2a$1$i = $40;$y2b$1$i = $y2b$011$i;$ya$1$i = $36;$yb$1$i = $yb$09$i;
       break;
      }
     }
    } while(0);
    $53 = (($i$01$i) + 1)|0;
    $54 = ($i$01$i|0)<($20|0);
    if ($54) {
     $i$01$i = $53;$na$07$i = $na$1$i;$nb$013$i = $nb$1$i;$x2a$04$i = $x2a$1$i;$x2b$010$i = $x2b$1$i;$xa$02$i = $xa$1$i;$xb$08$i = $xb$1$i;$xya$06$i = $xya$1$i;$xyb$012$i = $xyb$1$i;$y2a$05$i = $y2a$1$i;$y2b$011$i = $y2b$1$i;$ya$03$i = $ya$1$i;$yb$09$i = $yb$1$i;
    } else {
     $na$0$lcssa$i = $na$1$i;$nb$0$lcssa$i = $nb$1$i;$x2a$0$lcssa$i = $x2a$1$i;$x2b$0$lcssa$i = $x2b$1$i;$xa$0$lcssa$i = $xa$1$i;$xb$0$lcssa$i = $xb$1$i;$xya$0$lcssa$i = $xya$1$i;$xyb$0$lcssa$i = $xyb$1$i;$y2a$0$lcssa$i = $y2a$1$i;$y2b$0$lcssa$i = $y2b$1$i;$ya$0$lcssa$i = $ya$1$i;$yb$0$lcssa$i = $yb$1$i;
     break;
    }
   }
  }
  $55 = (($fits) + 8|0);
  HEAP32[$55>>2] = $xa$0$lcssa$i;
  $56 = (($fits) + 12|0);
  HEAP32[$56>>2] = $ya$0$lcssa$i;
  $57 = (($fits) + 16|0);
  HEAP32[$57>>2] = $x2a$0$lcssa$i;
  $58 = (($fits) + 20|0);
  HEAP32[$58>>2] = $y2a$0$lcssa$i;
  $59 = (($fits) + 24|0);
  HEAP32[$59>>2] = $xya$0$lcssa$i;
  $60 = (($fits) + 28|0);
  HEAP32[$60>>2] = $na$0$lcssa$i;
  $61 = (($fits) + 32|0);
  HEAP32[$61>>2] = $xb$0$lcssa$i;
  $62 = (($fits) + 36|0);
  HEAP32[$62>>2] = $yb$0$lcssa$i;
  $63 = (($fits) + 40|0);
  HEAP32[$63>>2] = $x2b$0$lcssa$i;
  $64 = (($fits) + 44|0);
  HEAP32[$64>>2] = $y2b$0$lcssa$i;
  $65 = (($fits) + 48|0);
  HEAP32[$65>>2] = $xyb$0$lcssa$i;
  $66 = (($fits) + 52|0);
  HEAP32[$66>>2] = $nb$0$lcssa$i;
  $nonzero$1 = $na$0$lcssa$i;
 } else {
  $15 = (($5) + -1)|0;
  $16 = ($15|0)>(0);
  if (!($16)) {
   $output$0 = 0;
   STACKTOP = sp;return ($output$0|0);
  }
  $17 = (($3) + -1)|0;
  $18 = (($1) + 1112|0);
  $$pre115 = HEAP32[$look>>2]|0;
  $71 = $$pre115;$i$588 = 0;$nonzero$087 = 0;
  while(1) {
   $67 = (($i$588) + 1)|0;
   $68 = (($look) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($fits) + (($i$588*56)|0)|0);
   dest=$70+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$70>>2] = $71;
   $72 = ((($fits) + (($i$588*56)|0)|0) + 4|0);
   HEAP32[$72>>2] = $69;
   $73 = ($69|0)<($3|0);
   $x1$$i = $73 ? $69 : $17;
   $74 = ($x1$$i|0)<($71|0);
   if ($74) {
    $na$0$lcssa$i42 = 0;$nb$0$lcssa$i36 = 0;$x2a$0$lcssa$i45 = 0;$x2b$0$lcssa$i39 = 0;$xa$0$lcssa$i47 = 0;$xb$0$lcssa$i41 = 0;$xya$0$lcssa$i43 = 0;$xyb$0$lcssa$i37 = 0;$y2a$0$lcssa$i44 = 0;$y2b$0$lcssa$i38 = 0;$ya$0$lcssa$i46 = 0;$yb$0$lcssa$i40 = 0;
   } else {
    $i$01$i22 = $71;$na$07$i16 = 0;$nb$013$i10 = 0;$x2a$04$i19 = 0;$x2b$010$i13 = 0;$xa$02$i21 = 0;$xb$08$i15 = 0;$xya$06$i17 = 0;$xyb$012$i11 = 0;$y2a$05$i18 = 0;$y2b$011$i12 = 0;$ya$03$i20 = 0;$yb$09$i14 = 0;
    while(1) {
     $75 = (($logmask) + ($i$01$i22<<2)|0);
     $$val$i23 = +HEAPF32[$75>>2];
     $76 = $$val$i23 * 7.31428575515747070313;
     $77 = $76 + 1023.5;
     $78 = (~~(($77)));
     $79 = ($78|0)>(1023);
     if ($79) {
      $$0$i5063 = 1023;
      label = 22;
     } else {
      $80 = ($78|0)<(0);
      $$$i49 = $80 ? 0 : $78;
      $81 = ($$$i49|0)==(0);
      if ($81) {
       $na$1$i29 = $na$07$i16;$nb$1$i35 = $nb$013$i10;$x2a$1$i26 = $x2a$04$i19;$x2b$1$i32 = $x2b$010$i13;$xa$1$i24 = $xa$02$i21;$xb$1$i30 = $xb$08$i15;$xya$1$i28 = $xya$06$i17;$xyb$1$i34 = $xyb$012$i11;$y2a$1$i27 = $y2a$05$i18;$y2b$1$i33 = $y2b$011$i12;$ya$1$i25 = $ya$03$i20;$yb$1$i31 = $yb$09$i14;
      } else {
       $$0$i5063 = $$$i49;
       label = 22;
      }
     }
     do {
      if ((label|0) == 22) {
       label = 0;
       $82 = (($logmdct) + ($i$01$i22<<2)|0);
       $83 = +HEAPF32[$82>>2];
       $84 = +HEAPF32[$18>>2];
       $85 = $83 + $84;
       $86 = !($85 >= $$val$i23);
       if ($86) {
        $96 = (($i$01$i22) + ($xb$08$i15))|0;
        $97 = (($$0$i5063) + ($yb$09$i14))|0;
        $98 = Math_imul($i$01$i22, $i$01$i22)|0;
        $99 = (($98) + ($x2b$010$i13))|0;
        $100 = Math_imul($$0$i5063, $$0$i5063)|0;
        $101 = (($100) + ($y2b$011$i12))|0;
        $102 = Math_imul($$0$i5063, $i$01$i22)|0;
        $103 = (($102) + ($xyb$012$i11))|0;
        $104 = (($nb$013$i10) + 1)|0;
        $na$1$i29 = $na$07$i16;$nb$1$i35 = $104;$x2a$1$i26 = $x2a$04$i19;$x2b$1$i32 = $99;$xa$1$i24 = $xa$02$i21;$xb$1$i30 = $96;$xya$1$i28 = $xya$06$i17;$xyb$1$i34 = $103;$y2a$1$i27 = $y2a$05$i18;$y2b$1$i33 = $101;$ya$1$i25 = $ya$03$i20;$yb$1$i31 = $97;
        break;
       } else {
        $87 = (($i$01$i22) + ($xa$02$i21))|0;
        $88 = (($$0$i5063) + ($ya$03$i20))|0;
        $89 = Math_imul($i$01$i22, $i$01$i22)|0;
        $90 = (($89) + ($x2a$04$i19))|0;
        $91 = Math_imul($$0$i5063, $$0$i5063)|0;
        $92 = (($91) + ($y2a$05$i18))|0;
        $93 = Math_imul($$0$i5063, $i$01$i22)|0;
        $94 = (($93) + ($xya$06$i17))|0;
        $95 = (($na$07$i16) + 1)|0;
        $na$1$i29 = $95;$nb$1$i35 = $nb$013$i10;$x2a$1$i26 = $90;$x2b$1$i32 = $x2b$010$i13;$xa$1$i24 = $87;$xb$1$i30 = $xb$08$i15;$xya$1$i28 = $94;$xyb$1$i34 = $xyb$012$i11;$y2a$1$i27 = $92;$y2b$1$i33 = $y2b$011$i12;$ya$1$i25 = $88;$yb$1$i31 = $yb$09$i14;
        break;
       }
      }
     } while(0);
     $105 = (($i$01$i22) + 1)|0;
     $106 = ($i$01$i22|0)<($x1$$i|0);
     if ($106) {
      $i$01$i22 = $105;$na$07$i16 = $na$1$i29;$nb$013$i10 = $nb$1$i35;$x2a$04$i19 = $x2a$1$i26;$x2b$010$i13 = $x2b$1$i32;$xa$02$i21 = $xa$1$i24;$xb$08$i15 = $xb$1$i30;$xya$06$i17 = $xya$1$i28;$xyb$012$i11 = $xyb$1$i34;$y2a$05$i18 = $y2a$1$i27;$y2b$011$i12 = $y2b$1$i33;$ya$03$i20 = $ya$1$i25;$yb$09$i14 = $yb$1$i31;
     } else {
      $na$0$lcssa$i42 = $na$1$i29;$nb$0$lcssa$i36 = $nb$1$i35;$x2a$0$lcssa$i45 = $x2a$1$i26;$x2b$0$lcssa$i39 = $x2b$1$i32;$xa$0$lcssa$i47 = $xa$1$i24;$xb$0$lcssa$i41 = $xb$1$i30;$xya$0$lcssa$i43 = $xya$1$i28;$xyb$0$lcssa$i37 = $xyb$1$i34;$y2a$0$lcssa$i44 = $y2a$1$i27;$y2b$0$lcssa$i38 = $y2b$1$i33;$ya$0$lcssa$i46 = $ya$1$i25;$yb$0$lcssa$i40 = $yb$1$i31;
      break;
     }
    }
   }
   $107 = ((($fits) + (($i$588*56)|0)|0) + 8|0);
   HEAP32[$107>>2] = $xa$0$lcssa$i47;
   $108 = ((($fits) + (($i$588*56)|0)|0) + 12|0);
   HEAP32[$108>>2] = $ya$0$lcssa$i46;
   $109 = ((($fits) + (($i$588*56)|0)|0) + 16|0);
   HEAP32[$109>>2] = $x2a$0$lcssa$i45;
   $110 = ((($fits) + (($i$588*56)|0)|0) + 20|0);
   HEAP32[$110>>2] = $y2a$0$lcssa$i44;
   $111 = ((($fits) + (($i$588*56)|0)|0) + 24|0);
   HEAP32[$111>>2] = $xya$0$lcssa$i43;
   $112 = ((($fits) + (($i$588*56)|0)|0) + 28|0);
   HEAP32[$112>>2] = $na$0$lcssa$i42;
   $113 = ((($fits) + (($i$588*56)|0)|0) + 32|0);
   HEAP32[$113>>2] = $xb$0$lcssa$i41;
   $114 = ((($fits) + (($i$588*56)|0)|0) + 36|0);
   HEAP32[$114>>2] = $yb$0$lcssa$i40;
   $115 = ((($fits) + (($i$588*56)|0)|0) + 40|0);
   HEAP32[$115>>2] = $x2b$0$lcssa$i39;
   $116 = ((($fits) + (($i$588*56)|0)|0) + 44|0);
   HEAP32[$116>>2] = $y2b$0$lcssa$i38;
   $117 = ((($fits) + (($i$588*56)|0)|0) + 48|0);
   HEAP32[$117>>2] = $xyb$0$lcssa$i37;
   $118 = ((($fits) + (($i$588*56)|0)|0) + 52|0);
   HEAP32[$118>>2] = $nb$0$lcssa$i36;
   $119 = (($na$0$lcssa$i42) + ($nonzero$087))|0;
   $exitcond108 = ($67|0)==($15|0);
   if ($exitcond108) {
    $nonzero$1 = $119;
    break;
   } else {
    $71 = $69;$i$588 = $67;$nonzero$087 = $119;
   }
  }
 }
 $120 = ($nonzero$1|0)==(0);
 if ($120) {
  $output$0 = 0;
  STACKTOP = sp;return ($output$0|0);
 }
 HEAP32[$y0>>2] = -200;
 HEAP32[$y1>>2] = -200;
 $121 = (($5) + -1)|0;
 (_fit_line($fits,$121,$y0,$y1,$1)|0);
 $122 = HEAP32[$y0>>2]|0;
 HEAP32[$fit_valueA>>2] = $122;
 HEAP32[$fit_valueB>>2] = $122;
 $123 = HEAP32[$y1>>2]|0;
 $124 = (($fit_valueB) + 4|0);
 HEAP32[$124>>2] = $123;
 $125 = (($fit_valueA) + 4|0);
 HEAP32[$125>>2] = $123;
 $126 = ($5|0)>(2);
 do {
  if ($126) {
   $127 = (($1) + 1112|0);
   $128 = (($1) + 1096|0);
   $129 = (($1) + 1100|0);
   $130 = (($1) + 1104|0);
   $i$680 = 2;
   L50: while(1) {
    $131 = ((($look) + ($i$680<<2)|0) + 520|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($loneighbor) + ($132<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($hineighbor) + ($132<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($memo) + ($134<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)==($136|0);
    L52: do {
     if (!($139)) {
      $140 = ((($look) + ($134<<2)|0) + 520|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ((($look) + ($136<<2)|0) + 520|0);
      $143 = HEAP32[$142>>2]|0;
      HEAP32[$137>>2] = $136;
      $144 = ((($1) + ($134<<2)|0) + 836|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($1) + ($136<<2)|0) + 836|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($fit_valueA) + ($134<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)<(0);
      $151 = (($fit_valueB) + ($134<<2)|0);
      $152 = HEAP32[$151>>2]|0;
      if ($150) {
       $$0$i52 = $152;
      } else {
       $153 = ($152|0)<(0);
       if ($153) {
        $$0$i52 = $149;
       } else {
        $154 = (($152) + ($149))|0;
        $155 = $154 >> 1;
        $$0$i52 = $155;
       }
      }
      $156 = (($fit_valueA) + ($136<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)<(0);
      $159 = (($fit_valueB) + ($136<<2)|0);
      $160 = HEAP32[$159>>2]|0;
      if ($158) {
       $$0$i60 = $160;
      } else {
       $161 = ($160|0)<(0);
       if ($161) {
        $$0$i60 = $157;
       } else {
        $162 = (($160) + ($157))|0;
        $163 = $162 >> 1;
        $$0$i60 = $163;
       }
      }
      $164 = ($$0$i52|0)==(-1);
      $165 = ($$0$i60|0)==(-1);
      $or$cond = $164 | $165;
      if ($or$cond) {
       label = 38;
       break L50;
      }
      $166 = (($$0$i60) - ($$0$i52))|0;
      $167 = (($147) - ($145))|0;
      $ispos$i54 = ($166|0)>(-1);
      $neg$i55 = (0 - ($166))|0;
      $168 = $ispos$i54 ? $166 : $neg$i55;
      $169 = (($166|0) / ($167|0))&-1;
      $170 = $166 >> 31;
      $171 = $170 | 1;
      $172 = (($logmask) + ($145<<2)|0);
      $$val3$i = +HEAPF32[$172>>2];
      $173 = $$val3$i * 7.31428575515747070313;
      $174 = $173 + 1023.5;
      $175 = (~~(($174)));
      $176 = ($175|0)>(1023);
      if ($176) {
       $$0$i$i = 1023;
      } else {
       $177 = ($175|0)<(0);
       $$$i$i = $177 ? 0 : $175;
       $$0$i$i = $$$i$i;
      }
      $178 = Math_imul($169, $167)|0;
      $ispos1$i = ($178|0)>(-1);
      $neg2$i = (0 - ($178))|0;
      $179 = $ispos1$i ? $178 : $neg2$i;
      $180 = (($168) - ($179))|0;
      $181 = (($$0$i52) - ($$0$i$i))|0;
      $182 = Math_imul($181, $181)|0;
      $183 = (($logmdct) + ($145<<2)|0);
      $184 = +HEAPF32[$183>>2];
      $185 = +HEAPF32[$127>>2];
      $186 = $184 + $185;
      $187 = !($186 >= $$val3$i);
      if ($187) {
       label = 44;
      } else {
       $188 = (+($$0$i52|0));
       $189 = +HEAPF32[$128>>2];
       $190 = $188 + $189;
       $191 = (+($$0$i$i|0));
       $192 = $190 < $191;
       if (!($192)) {
        $193 = +HEAPF32[$129>>2];
        $194 = $188 - $193;
        $195 = $194 > $191;
        if (!($195)) {
         label = 44;
        }
       }
      }
      L69: do {
       if ((label|0) == 44) {
        label = 0;
        $196 = (($145) + 1)|0;
        $197 = ($196|0)<($147|0);
        if ($197) {
         $203 = $196;$err$010$i = 0;$mse$011$i = $182;$n$012$i = 1;$y$09$i = $$0$i52;
         while(1) {
          $198 = (($err$010$i) + ($180))|0;
          $199 = ($198|0)<($167|0);
          $200 = $199 ? 0 : $171;
          $201 = $199 ? 0 : $167;
          $err$1$i = (($198) - ($201))|0;
          $$pn$i = (($y$09$i) + ($169))|0;
          $y$1$i = (($$pn$i) + ($200))|0;
          $202 = (($logmask) + ($203<<2)|0);
          $$val$i57 = +HEAPF32[$202>>2];
          $204 = $$val$i57 * 7.31428575515747070313;
          $205 = $204 + 1023.5;
          $206 = (~~(($205)));
          $207 = ($206|0)>(1023);
          if ($207) {
           $$0$i5$i = 1023;
          } else {
           $208 = ($206|0)<(0);
           $$$i4$i = $208 ? 0 : $206;
           $$0$i5$i = $$$i4$i;
          }
          $209 = (($y$1$i) - ($$0$i5$i))|0;
          $210 = Math_imul($209, $209)|0;
          $211 = (($210) + ($mse$011$i))|0;
          $212 = (($n$012$i) + 1)|0;
          $213 = (($logmdct) + ($203<<2)|0);
          $214 = +HEAPF32[$213>>2];
          $215 = $185 + $214;
          $216 = !($215 >= $$val$i57);
          $217 = ($$0$i5$i|0)==(0);
          $or$cond$i = $216 | $217;
          if (!($or$cond$i)) {
           $218 = (+($y$1$i|0));
           $219 = +HEAPF32[$128>>2];
           $220 = $218 + $219;
           $221 = (+($$0$i5$i|0));
           $222 = $220 < $221;
           if ($222) {
            break L69;
           }
           $223 = +HEAPF32[$129>>2];
           $224 = $218 - $223;
           $225 = $224 > $221;
           if ($225) {
            break L69;
           }
          }
          $226 = (($203) + 1)|0;
          $227 = ($226|0)<($147|0);
          if ($227) {
           $203 = $226;$err$010$i = $err$1$i;$mse$011$i = $211;$n$012$i = $212;$y$09$i = $y$1$i;
          } else {
           $mse$0$lcssa$i = $211;$n$0$lcssa$i = $212;
           break;
          }
         }
        } else {
         $mse$0$lcssa$i = $182;$n$0$lcssa$i = 1;
        }
        $228 = +HEAPF32[$128>>2];
        $229 = $228 * $228;
        $230 = (+($n$0$lcssa$i|0));
        $231 = $229 / $230;
        $232 = +HEAPF32[$130>>2];
        $233 = $231 > $232;
        if (!($233)) {
         $234 = +HEAPF32[$129>>2];
         $235 = $234 * $234;
         $236 = $235 / $230;
         $237 = $236 > $232;
         if (!($237)) {
          $238 = (($mse$0$lcssa$i|0) / ($n$0$lcssa$i|0))&-1;
          $239 = (+($238|0));
          $240 = $239 > $232;
          if ($240) {
           break;
          }
         }
        }
        $273 = (($fit_valueA) + ($i$680<<2)|0);
        HEAP32[$273>>2] = -200;
        $274 = (($fit_valueB) + ($i$680<<2)|0);
        HEAP32[$274>>2] = -200;
        break L52;
       }
      } while(0);
      HEAP32[$ly0>>2] = -200;
      HEAP32[$ly1>>2] = -200;
      HEAP32[$hy0>>2] = -200;
      HEAP32[$hy1>>2] = -200;
      $241 = (($fits) + (($141*56)|0)|0);
      $242 = (($132) - ($141))|0;
      $243 = (_fit_line($241,$242,$ly0,$ly1,$1)|0);
      $244 = (($fits) + (($132*56)|0)|0);
      $245 = (($143) - ($132))|0;
      $246 = (_fit_line($244,$245,$hy0,$hy1,$1)|0);
      $247 = ($243|0)!=(0);
      if ($247) {
       HEAP32[$ly0>>2] = $$0$i52;
       $248 = HEAP32[$hy0>>2]|0;
       HEAP32[$ly1>>2] = $248;
      }
      $249 = ($246|0)==(0);
      if (!($249)) {
       $250 = HEAP32[$ly1>>2]|0;
       HEAP32[$hy0>>2] = $250;
       HEAP32[$hy1>>2] = $$0$i60;
       if ($247) {
        $251 = (($fit_valueA) + ($i$680<<2)|0);
        HEAP32[$251>>2] = -200;
        $252 = (($fit_valueB) + ($i$680<<2)|0);
        HEAP32[$252>>2] = -200;
        break;
       }
      }
      $253 = HEAP32[$ly0>>2]|0;
      HEAP32[$151>>2] = $253;
      $254 = ($134|0)==(0);
      if ($254) {
       HEAP32[$fit_valueA>>2] = $253;
      }
      $255 = HEAP32[$ly1>>2]|0;
      $256 = (($fit_valueA) + ($i$680<<2)|0);
      HEAP32[$256>>2] = $255;
      $257 = HEAP32[$hy0>>2]|0;
      $258 = (($fit_valueB) + ($i$680<<2)|0);
      HEAP32[$258>>2] = $257;
      $259 = HEAP32[$hy1>>2]|0;
      HEAP32[$156>>2] = $259;
      $260 = ($136|0)==(1);
      if ($260) {
       HEAP32[$124>>2] = $259;
      }
      $261 = $255 & $257;
      $262 = ($261|0)>(-1);
      if ($262) {
       $263 = ($132|0)>(0);
       L101: do {
        if ($263) {
         $j$074$in = $132;
         while(1) {
          $j$074 = (($j$074$in) + -1)|0;
          $264 = (($hineighbor) + ($j$074<<2)|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = ($265|0)==($136|0);
          if (!($266)) {
           break L101;
          }
          HEAP32[$264>>2] = $i$680;
          $267 = ($j$074|0)>(0);
          if ($267) {
           $j$074$in = $j$074;
          } else {
           break;
          }
         }
        }
       } while(0);
       $j$177 = (($132) + 1)|0;
       $268 = ($j$177|0)<($5|0);
       if ($268) {
        $j$178 = $j$177;
        while(1) {
         $269 = (($loneighbor) + ($j$178<<2)|0);
         $270 = HEAP32[$269>>2]|0;
         $271 = ($270|0)==($134|0);
         if (!($271)) {
          break L52;
         }
         HEAP32[$269>>2] = $i$680;
         $j$1 = (($j$178) + 1)|0;
         $272 = ($j$1|0)<($5|0);
         if ($272) {
          $j$178 = $j$1;
         } else {
          break;
         }
        }
       }
      }
     }
    } while(0);
    $275 = (($i$680) + 1)|0;
    $276 = ($275|0)<($5|0);
    if ($276) {
     $i$680 = $275;
    } else {
     label = 72;
     break;
    }
   }
   if ((label|0) == 38) {
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 72) {
    $$pre = HEAP32[$fit_valueA>>2]|0;
    $$pre114 = HEAP32[$fit_valueB>>2]|0;
    $301 = $$pre;$303 = $$pre114;
    break;
   }
  } else {
   $301 = $122;$303 = $122;
  }
 } while(0);
 $277 = $5 << 2;
 $278 = (($277) + 7)|0;
 $279 = $278 & -8;
 $280 = (($vb) + 72|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = (($281) + ($279))|0;
 $283 = (($vb) + 76|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)>($284|0);
 $286 = (($vb) + 68|0);
 $287 = HEAP32[$286>>2]|0;
 if ($285) {
  $288 = ($287|0)==(0|0);
  if (!($288)) {
   $289 = (_malloc(8)|0);
   $290 = (($vb) + 80|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($291) + ($281))|0;
   HEAP32[$290>>2] = $292;
   $293 = (($vb) + 84|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (($289) + 4|0);
   HEAP32[$295>>2] = $294;
   HEAP32[$289>>2] = $287;
   HEAP32[$293>>2] = $289;
  }
  HEAP32[$283>>2] = $279;
  $296 = (_malloc($279)|0);
  HEAP32[$286>>2] = $296;
  HEAP32[$280>>2] = 0;
  $298 = $296;$299 = 0;
 } else {
  $298 = $287;$299 = $281;
 }
 $297 = (($298) + ($299)|0);
 $300 = (($299) + ($279))|0;
 HEAP32[$280>>2] = $300;
 $302 = ($301|0)<(0);
 if ($302) {
  $$0$i7 = $303;
 } else {
  $304 = ($303|0)<(0);
  if ($304) {
   $$0$i7 = $301;
  } else {
   $305 = (($303) + ($301))|0;
   $306 = $305 >> 1;
   $$0$i7 = $306;
  }
 }
 HEAP32[$297>>2] = $$0$i7;
 $307 = HEAP32[$125>>2]|0;
 $308 = ($307|0)<(0);
 $309 = HEAP32[$124>>2]|0;
 if ($308) {
  $$0$i5 = $309;
 } else {
  $310 = ($309|0)<(0);
  if ($310) {
   $$0$i5 = $307;
  } else {
   $311 = (($309) + ($307))|0;
   $312 = $311 >> 1;
   $$0$i5 = $312;
  }
 }
 $$sum = (($299) + 4)|0;
 $313 = (($298) + ($$sum)|0);
 HEAP32[$313>>2] = $$0$i5;
 if ($126) {
  $i$769 = 2;
 } else {
  $output$0 = $297;
  STACKTOP = sp;return ($output$0|0);
 }
 while(1) {
  $314 = (($i$769) + -2)|0;
  $315 = ((($look) + ($314<<2)|0) + 1032|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = ((($look) + ($314<<2)|0) + 780|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = ((($1) + ($316<<2)|0) + 836|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ((($1) + ($318<<2)|0) + 836|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = (($297) + ($316<<2)|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = (($297) + ($318<<2)|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ((($1) + ($i$769<<2)|0) + 836|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $324 & 32767;
  $330 = $326 & 32767;
  $331 = (($330) - ($329))|0;
  $332 = (($322) - ($320))|0;
  $ispos$i = ($331|0)>(-1);
  $neg$i = (0 - ($331))|0;
  $333 = $ispos$i ? $331 : $neg$i;
  $334 = (($328) - ($320))|0;
  $335 = Math_imul($333, $334)|0;
  $336 = (($335|0) / ($332|0))&-1;
  $337 = ($331|0)<(0);
  $338 = (0 - ($336))|0;
  $$0$p$i = $337 ? $338 : $336;
  $$0$i4 = (($$0$p$i) + ($329))|0;
  $339 = (($fit_valueA) + ($i$769<<2)|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($340|0)<(0);
  $342 = (($fit_valueB) + ($i$769<<2)|0);
  $343 = HEAP32[$342>>2]|0;
  if ($341) {
   $$0$i3 = $343;
  } else {
   $344 = ($343|0)<(0);
   if ($344) {
    $$0$i3 = $340;
   } else {
    $345 = (($343) + ($340))|0;
    $346 = $345 >> 1;
    $$0$i3 = $346;
   }
  }
  $347 = ($$0$i3|0)<(0);
  $348 = ($$0$i4|0)==($$0$i3|0);
  $or$cond2 = $347 | $348;
  if ($or$cond2) {
   $350 = $$0$i4 | 32768;
   $351 = (($297) + ($i$769<<2)|0);
   HEAP32[$351>>2] = $350;
  } else {
   $349 = (($297) + ($i$769<<2)|0);
   HEAP32[$349>>2] = $$0$i3;
  }
  $352 = (($i$769) + 1)|0;
  $exitcond = ($352|0)==($5|0);
  if ($exitcond) {
   $output$0 = $297;
   break;
  } else {
   $i$769 = $352;
  }
 }
 STACKTOP = sp;return ($output$0|0);
}
function _fit_line($a,$fits,$y0,$y1,$info) {
 $a = $a|0;
 $fits = $fits|0;
 $y0 = $y0|0;
 $y1 = $y1|0;
 $info = $info|0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $bn$0$lcssa = 0.0, $bn$01 = 0.0, $bn$1 = 0.0, $bn$2 = 0.0, $exitcond = 0, $i$02 = 0, $x2b$0$lcssa = 0.0, $x2b$04 = 0.0, $x2b$1 = 0.0, $x2b$2 = 0.0, $xb$0$lcssa = 0.0, $xb$06 = 0.0, $xb$1 = 0.0, $xb$2 = 0.0, $xyb$0$lcssa = 0.0, $xyb$03 = 0.0, $xyb$1 = 0.0;
 var $xyb$2 = 0.0, $yb$0$lcssa = 0.0, $yb$05 = 0.0, $yb$1 = 0.0, $yb$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (($fits) + -1)|0;
 $2 = ((($a) + (($1*56)|0)|0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($fits|0)>(0);
 if ($4) {
  $5 = (($info) + 1108|0);
  $6 = +HEAPF32[$5>>2];
  $bn$01 = 0.0;$i$02 = 0;$x2b$04 = 0.0;$xb$06 = 0.0;$xyb$03 = 0.0;$yb$05 = 0.0;
  while(1) {
   $7 = ((($a) + (($i$02*56)|0)|0) + 52|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($a) + (($i$02*56)|0)|0) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($8))|0;
   $12 = (+($11|0));
   $13 = $6 * $12;
   $14 = (($10) + 1)|0;
   $15 = (+($14|0));
   $16 = $13 / $15;
   $17 = $16;
   $18 = $17 + 1.0;
   $19 = ((($a) + (($i$02*56)|0)|0) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (+($20|0));
   $22 = ((($a) + (($i$02*56)|0)|0) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (+($23|0));
   $25 = $18 * $24;
   $26 = $21 + $25;
   $27 = $xb$06 + $26;
   $28 = ((($a) + (($i$02*56)|0)|0) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (+($29|0));
   $31 = ((($a) + (($i$02*56)|0)|0) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (+($32|0));
   $34 = $18 * $33;
   $35 = $30 + $34;
   $36 = $yb$05 + $35;
   $37 = ((($a) + (($i$02*56)|0)|0) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38|0));
   $40 = ((($a) + (($i$02*56)|0)|0) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (+($41|0));
   $43 = $18 * $42;
   $44 = $39 + $43;
   $45 = $x2b$04 + $44;
   $46 = ((($a) + (($i$02*56)|0)|0) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (+($47|0));
   $49 = ((($a) + (($i$02*56)|0)|0) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (+($50|0));
   $52 = $18 * $51;
   $53 = $48 + $52;
   $54 = $xyb$03 + $53;
   $55 = (+($8|0));
   $56 = (+($10|0));
   $57 = $56 * $18;
   $58 = $55 + $57;
   $59 = $bn$01 + $58;
   $60 = (($i$02) + 1)|0;
   $exitcond = ($60|0)==($fits|0);
   if ($exitcond) {
    $bn$0$lcssa = $59;$x2b$0$lcssa = $45;$xb$0$lcssa = $27;$xyb$0$lcssa = $54;$yb$0$lcssa = $36;
    break;
   } else {
    $bn$01 = $59;$i$02 = $60;$x2b$04 = $45;$xb$06 = $27;$xyb$03 = $54;$yb$05 = $36;
   }
  }
 } else {
  $bn$0$lcssa = 0.0;$x2b$0$lcssa = 0.0;$xb$0$lcssa = 0.0;$xyb$0$lcssa = 0.0;$yb$0$lcssa = 0.0;
 }
 $61 = HEAP32[$y0>>2]|0;
 $62 = ($61|0)>(-1);
 if ($62) {
  $63 = (+($0|0));
  $64 = $63 + $xb$0$lcssa;
  $65 = (+($61|0));
  $66 = $yb$0$lcssa + $65;
  $67 = Math_imul($0, $0)|0;
  $68 = (+($67|0));
  $69 = $68 + $x2b$0$lcssa;
  $70 = Math_imul($61, $0)|0;
  $71 = (+($70|0));
  $72 = $xyb$0$lcssa + $71;
  $73 = $bn$0$lcssa + 1.0;
  $bn$1 = $73;$x2b$1 = $69;$xb$1 = $64;$xyb$1 = $72;$yb$1 = $66;
 } else {
  $bn$1 = $bn$0$lcssa;$x2b$1 = $x2b$0$lcssa;$xb$1 = $xb$0$lcssa;$xyb$1 = $xyb$0$lcssa;$yb$1 = $yb$0$lcssa;
 }
 $74 = HEAP32[$y1>>2]|0;
 $75 = ($74|0)>(-1);
 if ($75) {
  $76 = (+($3|0));
  $77 = $76 + $xb$1;
  $78 = (+($74|0));
  $79 = $yb$1 + $78;
  $80 = Math_imul($3, $3)|0;
  $81 = (+($80|0));
  $82 = $81 + $x2b$1;
  $83 = Math_imul($74, $3)|0;
  $84 = (+($83|0));
  $85 = $xyb$1 + $84;
  $86 = $bn$1 + 1.0;
  $bn$2 = $86;$x2b$2 = $82;$xb$2 = $77;$xyb$2 = $85;$yb$2 = $79;
 } else {
  $bn$2 = $bn$1;$x2b$2 = $x2b$1;$xb$2 = $xb$1;$xyb$2 = $xyb$1;$yb$2 = $yb$1;
 }
 $87 = $bn$2 * $x2b$2;
 $88 = $xb$2 * $xb$2;
 $89 = $87 - $88;
 $90 = $89 > 0.0;
 if (!($90)) {
  HEAP32[$y0>>2] = 0;
  HEAP32[$y1>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = $x2b$2 * $yb$2;
 $92 = $xyb$2 * $xb$2;
 $93 = $91 - $92;
 $94 = $93 / $89;
 $95 = $bn$2 * $xyb$2;
 $96 = $yb$2 * $xb$2;
 $97 = $95 - $96;
 $98 = $97 / $89;
 $99 = (+($0|0));
 $100 = $99 * $98;
 $101 = $94 + $100;
 $102 = (+_rint((+$101)));
 $103 = (~~(($102)));
 HEAP32[$y0>>2] = $103;
 $104 = (+($3|0));
 $105 = $104 * $98;
 $106 = $94 + $105;
 $107 = (+_rint((+$106)));
 $108 = (~~(($107)));
 HEAP32[$y1>>2] = $108;
 $109 = HEAP32[$y0>>2]|0;
 $110 = ($109|0)>(1023);
 if ($110) {
  HEAP32[$y0>>2] = 1023;
  $$pr = HEAP32[$y1>>2]|0;
  $111 = $$pr;$117 = 1023;
 } else {
  $111 = $108;$117 = $109;
 }
 $112 = ($111|0)>(1023);
 if ($112) {
  HEAP32[$y1>>2] = 1023;
  $$pre = HEAP32[$y0>>2]|0;
  $113 = $$pre;$118 = 1023;
 } else {
  $113 = $117;$118 = $111;
 }
 $114 = ($113|0)<(0);
 if ($114) {
  HEAP32[$y0>>2] = 0;
  $$pre15 = HEAP32[$y1>>2]|0;
  $115 = $$pre15;
 } else {
  $115 = $118;
 }
 $116 = ($115|0)<(0);
 if (!($116)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$y1>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _floor1_pack($i,$opb) {
 $i = $i|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i3 = 0, $$maxclass$0 = 0, $$pre = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $count$08 = 0, $exitcond = 0, $exitcond28 = 0, $j$022 = 0, $j$118 = 0, $j$210 = 0;
 var $k$014 = 0, $k$19 = 0, $k$2$lcssa = 0, $k$27 = 0, $maxclass$023 = 0, $ret$0$lcssa$i5 = 0, $ret$02$i = 0, $ret$02$i2 = 0, $v$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($i) + 836|0);
 $1 = (($i) + 840|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$i>>2]|0;
 _oggpack_write($opb,$3,5);
 $4 = HEAP32[$i>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = (($i) + 4|0);
  $j$022 = 0;$maxclass$023 = -1;
  while(1) {
   $12 = (($6) + ($j$022<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _oggpack_write($opb,$13,4);
   $14 = HEAP32[$12>>2]|0;
   $15 = ($maxclass$023|0)<($14|0);
   $$maxclass$0 = $15 ? $14 : $maxclass$023;
   $16 = (($j$022) + 1)|0;
   $17 = HEAP32[$i>>2]|0;
   $18 = ($16|0)<($17|0);
   if ($18) {
    $j$022 = $16;$maxclass$023 = $$maxclass$0;
   } else {
    break;
   }
  }
  $7 = ($$maxclass$0|0)>(-1);
  if ($7) {
   $8 = (($i) + 128|0);
   $9 = (($i) + 192|0);
   $10 = (($i) + 256|0);
   $11 = (($i) + 320|0);
   $j$118 = 0;
   while(1) {
    $19 = (($8) + ($j$118<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + -1)|0;
    _oggpack_write($opb,$21,3);
    $22 = (($9) + ($j$118<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _oggpack_write($opb,$23,2);
    $24 = HEAP32[$22>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $29 = 0;
    } else {
     $26 = (($10) + ($j$118<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     _oggpack_write($opb,$27,8);
     $$pre29 = HEAP32[$22>>2]|0;
     $29 = $$pre29;
    }
    $28 = 1 << $29;
    $30 = ($28|0)>(0);
    if ($30) {
     $k$014 = 0;
     while(1) {
      $31 = ((($11) + ($j$118<<5)|0) + ($k$014<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      _oggpack_write($opb,$33,8);
      $34 = (($k$014) + 1)|0;
      $35 = HEAP32[$22>>2]|0;
      $36 = 1 << $35;
      $37 = ($34|0)<($36|0);
      if ($37) {
       $k$014 = $34;
      } else {
       break;
      }
     }
    }
    $38 = (($j$118) + 1)|0;
    $exitcond28 = ($j$118|0)==($$maxclass$0|0);
    if ($exitcond28) {
     break;
    } else {
     $j$118 = $38;
    }
   }
  }
 }
 $39 = (($i) + 832|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + -1)|0;
 _oggpack_write($opb,$41,2);
 $42 = ($2|0)==(0);
 $43 = (($2) + -1)|0;
 $v$$i = $42 ? 0 : $43;
 $44 = ($v$$i|0)==(0);
 if ($44) {
  _oggpack_write($opb,0,4);
  $ret$0$lcssa$i5 = 0;
 } else {
  $$01$i = $v$$i;$ret$02$i = 0;
  while(1) {
   $45 = (($ret$02$i) + 1)|0;
   $46 = $$01$i >>> 1;
   $47 = ($46|0)==(0);
   if ($47) {
    break;
   } else {
    $$01$i = $46;$ret$02$i = $45;
   }
  }
  _oggpack_write($opb,$45,4);
  $$01$i3 = $v$$i;$ret$02$i2 = 0;
  while(1) {
   $48 = (($ret$02$i2) + 1)|0;
   $49 = $$01$i3 >>> 1;
   $50 = ($49|0)==(0);
   if ($50) {
    $ret$0$lcssa$i5 = $48;
    break;
   } else {
    $$01$i3 = $49;$ret$02$i2 = $48;
   }
  }
 }
 $51 = HEAP32[$i>>2]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = (($i) + 4|0);
 $54 = (($i) + 128|0);
 $68 = $51;$count$08 = 0;$j$210 = 0;$k$19 = 0;
 while(1) {
  $55 = (($53) + ($j$210<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($count$08))|0;
  $60 = ($k$19|0)<($59|0);
  if ($60) {
   $k$27 = $k$19;
   while(1) {
    $61 = (($k$27) + 2)|0;
    $62 = (($0) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    _oggpack_write($opb,$63,$ret$0$lcssa$i5);
    $64 = (($k$27) + 1)|0;
    $exitcond = ($64|0)==($59|0);
    if ($exitcond) {
     break;
    } else {
     $k$27 = $64;
    }
   }
   $$pre = HEAP32[$i>>2]|0;
   $67 = $$pre;$k$2$lcssa = $59;
  } else {
   $67 = $68;$k$2$lcssa = $k$19;
  }
  $65 = (($j$210) + 1)|0;
  $66 = ($65|0)<($67|0);
  if ($66) {
   $68 = $67;$count$08 = $59;$j$210 = $65;$k$19 = $k$2$lcssa;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _floor1_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$01 = 0, $$maxclass$0 = 0, $$phi$trans$insert47 = 0, $$pre = 0, $$pre44 = 0, $$pre45 = 0, $$pre48 = 0, $$pre49 = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $count$0$lcssa53 = 0, $count$015 = 0, $exitcond = 0, $j$037 = 0, $j$130 = 0, $j$217 = 0, $j$34 = 0, $j$43 = 0, $k$024 = 0, $k$116 = 0, $k$2$lcssa = 0, $k$27 = 0, $maxclass$036 = 0, $or$cond = 0;
 var $phitmp = 0, $sortpointer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $sortpointer = sp;
 $0 = (($vi) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_malloc(1120)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + -4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 3;
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset(($2|0),0,1120)|0;
  }
 }
 $8 = (_oggpack_read($opb,5)|0);
 HEAP32[$2>>2] = $8;
 $9 = ($8|0)>(0);
 L5: do {
  if ($9) {
   $10 = (($2) + 4|0);
   $j$037 = 0;$maxclass$036 = -1;
   while(1) {
    $17 = (_oggpack_read($opb,4)|0);
    $18 = (($10) + ($j$037<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = ($17|0)<(0);
    if ($19) {
     break L5;
    }
    $20 = ($maxclass$036|0)<($17|0);
    $$maxclass$0 = $20 ? $17 : $maxclass$036;
    $21 = (($j$037) + 1)|0;
    $22 = HEAP32[$2>>2]|0;
    $23 = ($21|0)<($22|0);
    if ($23) {
     $j$037 = $21;$maxclass$036 = $$maxclass$0;
    } else {
     break;
    }
   }
   $11 = ($$maxclass$0|0)>(-1);
   if ($11) {
    $12 = (($2) + 128|0);
    $13 = (($2) + 192|0);
    $14 = (($2) + 256|0);
    $15 = (($1) + 24|0);
    $16 = (($2) + 320|0);
    $j$130 = 0;
    while(1) {
     $24 = (_oggpack_read($opb,3)|0);
     $25 = (($24) + 1)|0;
     $26 = (($12) + ($j$130<<2)|0);
     HEAP32[$26>>2] = $25;
     $27 = (_oggpack_read($opb,2)|0);
     $28 = (($13) + ($j$130<<2)|0);
     HEAP32[$28>>2] = $27;
     $29 = ($27|0)<(0);
     if ($29) {
      break L5;
     }
     $30 = ($27|0)==(0);
     if ($30) {
      $$phi$trans$insert47 = (($14) + ($j$130<<2)|0);
      $$pre48 = HEAP32[$$phi$trans$insert47>>2]|0;
      $33 = $$pre48;
     } else {
      $31 = (_oggpack_read($opb,8)|0);
      $32 = (($14) + ($j$130<<2)|0);
      HEAP32[$32>>2] = $31;
      $33 = $31;
     }
     $34 = ($33|0)<(0);
     if ($34) {
      label = 39;
      break L5;
     }
     $35 = HEAP32[$15>>2]|0;
     $36 = ($33|0)<($35|0);
     if (!($36)) {
      label = 39;
      break L5;
     }
     $37 = HEAP32[$28>>2]|0;
     $38 = 1 << $37;
     $39 = ($38|0)>(0);
     if ($39) {
      $k$024 = 0;
      while(1) {
       $44 = (_oggpack_read($opb,8)|0);
       $45 = (($44) + -1)|0;
       $46 = ((($16) + ($j$130<<5)|0) + ($k$024<<2)|0);
       HEAP32[$46>>2] = $45;
       $47 = ($44|0)<(0);
       if ($47) {
        break L5;
       }
       $48 = HEAP32[$15>>2]|0;
       $49 = ($44|0)>($48|0);
       $42 = (($k$024) + 1)|0;
       if ($49) {
        label = 39;
        break L5;
       }
       $40 = HEAP32[$28>>2]|0;
       $41 = 1 << $40;
       $43 = ($42|0)<($41|0);
       if ($43) {
        $k$024 = $42;
       } else {
        break;
       }
      }
     }
     $50 = (($j$130) + 1)|0;
     $51 = ($j$130|0)<($$maxclass$0|0);
     if ($51) {
      $j$130 = $50;
     } else {
      label = 21;
      break;
     }
    }
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
 } while(0);
 L27: do {
  if ((label|0) == 21) {
   $52 = (_oggpack_read($opb,2)|0);
   $53 = (($52) + 1)|0;
   $54 = (($2) + 832|0);
   HEAP32[$54>>2] = $53;
   $55 = (_oggpack_read($opb,4)|0);
   $56 = ($55|0)<(0);
   if (!($56)) {
    $57 = HEAP32[$2>>2]|0;
    $58 = ($57|0)>(0);
    if ($58) {
     $60 = (($2) + 4|0);
     $61 = (($2) + 128|0);
     $62 = (($2) + 836|0);
     $63 = 1 << $55;
     $96 = $57;$count$015 = 0;$j$217 = 0;$k$116 = 0;
     while(1) {
      $64 = (($60) + ($j$217<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($61) + ($65<<2)|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + ($count$015))|0;
      $69 = ($68|0)>(63);
      if ($69) {
       break L27;
      }
      $70 = ($k$116|0)<($68|0);
      if ($70) {
       $k$27 = $k$116;
       while(1) {
        $73 = (_oggpack_read($opb,$55)|0);
        $74 = (($k$27) + 2)|0;
        $75 = (($62) + ($74<<2)|0);
        HEAP32[$75>>2] = $73;
        $76 = ($73|0)>(-1);
        $77 = ($73|0)<($63|0);
        $or$cond = $76 & $77;
        $71 = (($k$27) + 1)|0;
        if (!($or$cond)) {
         break L27;
        }
        $72 = ($71|0)<($68|0);
        if ($72) {
         $k$27 = $71;
        } else {
         break;
        }
       }
       $$pre45 = HEAP32[$2>>2]|0;
       $80 = $$pre45;$k$2$lcssa = $71;
      } else {
       $80 = $96;$k$2$lcssa = $k$116;
      }
      $78 = (($j$217) + 1)|0;
      $79 = ($78|0)<($80|0);
      if ($79) {
       $96 = $80;$count$015 = $68;$j$217 = $78;$k$116 = $k$2$lcssa;
      } else {
       break;
      }
     }
     $phitmp = (($68) + 2)|0;
     HEAP32[$62>>2] = 0;
     $81 = (($2) + 840|0);
     HEAP32[$81>>2] = $63;
     $82 = ($phitmp|0)>(0);
     if ($82) {
      $84 = $62;$87 = $sortpointer;$count$0$lcssa53 = $phitmp;
     } else {
      _qsort($sortpointer,$phitmp,74);
      $$01 = $2;
      STACKTOP = sp;return ($$01|0);
     }
    } else {
     $$pre49 = (($2) + 836|0);
     $$pre50 = 1 << $55;
     HEAP32[$$pre49>>2] = 0;
     $59 = (($2) + 840|0);
     HEAP32[$59>>2] = $$pre50;
     $84 = $$pre49;$87 = $sortpointer;$count$0$lcssa53 = 2;
    }
    $j$34 = 0;
    while(1) {
     $83 = (($84) + ($j$34<<2)|0);
     $85 = (($sortpointer) + ($j$34<<2)|0);
     HEAP32[$85>>2] = $83;
     $86 = (($j$34) + 1)|0;
     $exitcond = ($86|0)==($count$0$lcssa53|0);
     if ($exitcond) {
      break;
     } else {
      $j$34 = $86;
     }
    }
    _qsort($87,$count$0$lcssa53,74);
    $88 = ($count$0$lcssa53|0)>(1);
    if (!($88)) {
     $$01 = $2;
     STACKTOP = sp;return ($$01|0);
    }
    $$pre = HEAP32[$sortpointer>>2]|0;
    $$pre44 = HEAP32[$$pre>>2]|0;
    $94 = $$pre44;$j$43 = 1;
    while(1) {
     $91 = (($sortpointer) + ($j$43<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = HEAP32[$92>>2]|0;
     $95 = ($94|0)==($93|0);
     $89 = (($j$43) + 1)|0;
     if ($95) {
      label = 39;
      break L27;
     }
     $90 = ($89|0)<($count$0$lcssa53|0);
     if ($90) {
      $94 = $93;$j$43 = $89;
     } else {
      $$01 = $2;
      break;
     }
    }
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 39) {
  if ($3) {
   $$01 = 0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 _free($2);
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function _floor1_look($vd,$in) {
 $vd = $vd|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond31 = 0, $exitcond32 = 0, $exitcond33 = 0, $exitcond34 = 0, $exitcond35 = 0;
 var $hi$0$lcssa = 0, $hi$03 = 0, $hi$1 = 0, $hx$05 = 0, $hx$1 = 0, $i$026 = 0, $i$121 = 0, $i$218 = 0, $i$316 = 0, $i$412 = 0, $i$58 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$06 = 0, $lo$0$lcssa = 0, $lo$02 = 0, $lo$1 = 0, $lx$04 = 0, $lx$1 = 0, $n$0$lcssa36384041 = 0;
 var $n$0$lcssa37 = 0, $n$025 = 0, $or$cond = 0, $or$cond1 = 0, $sortpointer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $sortpointer = sp;
 $0 = (_malloc(1312)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,1312)|0;
  }
 }
 $6 = (($0) + 1296|0);
 HEAP32[$6>>2] = $in;
 $7 = (($in) + 836|0);
 $8 = (($in) + 840|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 1288|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$in>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $14 = (($in) + 4|0);
  $15 = (($in) + 128|0);
  $i$026 = 0;$n$025 = 0;
  while(1) {
   $16 = (($14) + ($i$026<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($n$025))|0;
   $21 = (($i$026) + 1)|0;
   $22 = ($21|0)<($11|0);
   if ($22) {
    $i$026 = $21;$n$025 = $20;
   } else {
    break;
   }
  }
  $23 = (($20) + 2)|0;
  $24 = (($0) + 1284|0);
  HEAP32[$24>>2] = $23;
  $25 = ($23|0)>(0);
  if ($25) {
   $29 = $23;$n$0$lcssa37 = $20;
   label = 10;
  } else {
   _qsort($sortpointer,$23,74);
   $n$0$lcssa36384041 = $20;
  }
 } else {
  $13 = (($0) + 1284|0);
  HEAP32[$13>>2] = 2;
  $29 = 2;$n$0$lcssa37 = 0;
  label = 10;
 }
 if ((label|0) == 10) {
  $i$121 = 0;
  while(1) {
   $26 = (($7) + ($i$121<<2)|0);
   $27 = (($sortpointer) + ($i$121<<2)|0);
   HEAP32[$27>>2] = $26;
   $28 = (($i$121) + 1)|0;
   $exitcond35 = ($28|0)==($29|0);
   if ($exitcond35) {
    break;
   } else {
    $i$121 = $28;
   }
  }
  _qsort($sortpointer,$29,74);
  $30 = $7;
  $31 = (($0) + 260|0);
  $i$218 = 0;
  while(1) {
   $33 = (($sortpointer) + ($i$218<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34;
   $36 = (($35) - ($30))|0;
   $37 = $36 >> 2;
   $38 = (($31) + ($i$218<<2)|0);
   HEAP32[$38>>2] = $37;
   $39 = (($i$218) + 1)|0;
   $exitcond34 = ($39|0)==($29|0);
   if ($exitcond34) {
    break;
   } else {
    $i$218 = $39;
   }
  }
  $32 = (($0) + 520|0);
  $i$316 = 0;
  while(1) {
   $40 = (($31) + ($i$316<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($32) + ($41<<2)|0);
   HEAP32[$42>>2] = $i$316;
   $43 = (($i$316) + 1)|0;
   $exitcond33 = ($43|0)==($29|0);
   if ($exitcond33) {
    break;
   } else {
    $i$316 = $43;
   }
  }
  $i$412 = 0;
  while(1) {
   $44 = (($31) + ($i$412<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($7) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($0) + ($i$412<<2)|0);
   HEAP32[$48>>2] = $47;
   $49 = (($i$412) + 1)|0;
   $exitcond32 = ($49|0)==($29|0);
   if ($exitcond32) {
    $n$0$lcssa36384041 = $n$0$lcssa37;
    break;
   } else {
    $i$412 = $49;
   }
  }
 }
 $50 = (($in) + 832|0);
 $51 = HEAP32[$50>>2]|0;
 if ((($51|0) == 3)) {
  $54 = (($0) + 1292|0);
  HEAP32[$54>>2] = 86;
 } else if ((($51|0) == 4)) {
  $55 = (($0) + 1292|0);
  HEAP32[$55>>2] = 64;
 } else if ((($51|0) == 1)) {
  $52 = (($0) + 1292|0);
  HEAP32[$52>>2] = 256;
 } else if ((($51|0) == 2)) {
  $53 = (($0) + 1292|0);
  HEAP32[$53>>2] = 128;
 }
 $56 = ($n$0$lcssa36384041|0)>(0);
 if (!($56)) {
  STACKTOP = sp;return ($0|0);
 }
 $57 = (($0) + 1032|0);
 $58 = (($0) + 780|0);
 $i$58 = 0;$indvars$iv = 2;
 while(1) {
  $59 = (($i$58) + 2)|0;
  $60 = (($7) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)>(0);
  if ($62) {
   $63 = HEAP32[$10>>2]|0;
   $hi$03 = 1;$hx$05 = $63;$j$06 = 0;$lo$02 = 0;$lx$04 = 0;
   while(1) {
    $64 = (($7) + ($j$06<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)>($lx$04|0);
    $67 = ($65|0)<($61|0);
    $or$cond = $66 & $67;
    $lo$1 = $or$cond ? $j$06 : $lo$02;
    $lx$1 = $or$cond ? $65 : $lx$04;
    $68 = ($65|0)<($hx$05|0);
    $69 = ($65|0)>($61|0);
    $or$cond1 = $68 & $69;
    $hi$1 = $or$cond1 ? $j$06 : $hi$03;
    $hx$1 = $or$cond1 ? $65 : $hx$05;
    $70 = (($j$06) + 1)|0;
    $exitcond = ($70|0)==($indvars$iv|0);
    if ($exitcond) {
     $hi$0$lcssa = $hi$1;$lo$0$lcssa = $lo$1;
     break;
    } else {
     $hi$03 = $hi$1;$hx$05 = $hx$1;$j$06 = $70;$lo$02 = $lo$1;$lx$04 = $lx$1;
    }
   }
  } else {
   $hi$0$lcssa = 1;$lo$0$lcssa = 0;
  }
  $71 = (($57) + ($i$58<<2)|0);
  HEAP32[$71>>2] = $lo$0$lcssa;
  $72 = (($58) + ($i$58<<2)|0);
  HEAP32[$72>>2] = $hi$0$lcssa;
  $73 = (($i$58) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond31 = ($73|0)==($n$0$lcssa36384041|0);
  if ($exitcond31) {
   break;
  } else {
   $i$58 = $73;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _floor1_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 STACKTOP = sp;return;
}
function _floor1_free_look($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 STACKTOP = sp;return;
}
function _floor1_inverse1($vb,$in) {
 $vb = $vb|0;
 $in = $in|0;
 var $$0 = 0, $$0$i = 0, $$0$p$i = 0, $$01$i = 0, $$01$i2 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cval$1$ph = 0, $cval$19 = 0, $i$014 = 0, $i$16 = 0;
 var $ispos$i = 0, $j$013 = 0, $k$010 = 0, $neg$i = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i4 = 0, $ret$02$i = 0, $ret$02$i1 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($in) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 2848|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($vb) + 4|0);
 $11 = (_oggpack_read($10,1)|0);
 $12 = ($11|0)==(1);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($in) + 1284|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 2;
 $16 = (($15) + 7)|0;
 $17 = $16 & -8;
 $18 = (($vb) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($17))|0;
 $21 = (($vb) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)>($22|0);
 $24 = (($vb) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = (_malloc(8)|0);
   $28 = (($vb) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($19))|0;
   HEAP32[$28>>2] = $30;
   $31 = (($vb) + 84|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($27) + 4|0);
   HEAP32[$33>>2] = $32;
   HEAP32[$27>>2] = $25;
   HEAP32[$31>>2] = $27;
  }
  HEAP32[$21>>2] = $17;
  $34 = (_malloc($17)|0);
  HEAP32[$24>>2] = $34;
  HEAP32[$18>>2] = 0;
  $36 = $34;$37 = 0;
 } else {
  $36 = $25;$37 = $19;
 }
 $35 = (($36) + ($37)|0);
 $38 = (($37) + ($17))|0;
 HEAP32[$18>>2] = $38;
 $39 = (($in) + 1292|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + -1)|0;
 $42 = ($41|0)==(0);
 if ($42) {
  $ret$0$lcssa$i = 0;
 } else {
  $$01$i = $41;$ret$02$i = 0;
  while(1) {
   $43 = (($ret$02$i) + 1)|0;
   $44 = $$01$i >>> 1;
   $45 = ($44|0)==(0);
   if ($45) {
    $ret$0$lcssa$i = $43;
    break;
   } else {
    $$01$i = $44;$ret$02$i = $43;
   }
  }
 }
 $46 = (_oggpack_read($10,$ret$0$lcssa$i)|0);
 HEAP32[$35>>2] = $46;
 $47 = HEAP32[$39>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = ($48|0)==(0);
 if ($49) {
  $ret$0$lcssa$i4 = 0;
 } else {
  $$01$i2 = $48;$ret$02$i1 = 0;
  while(1) {
   $50 = (($ret$02$i1) + 1)|0;
   $51 = $$01$i2 >>> 1;
   $52 = ($51|0)==(0);
   if ($52) {
    $ret$0$lcssa$i4 = $50;
    break;
   } else {
    $$01$i2 = $51;$ret$02$i1 = $50;
   }
  }
 }
 $53 = (_oggpack_read($10,$ret$0$lcssa$i4)|0);
 $$sum = (($37) + 4)|0;
 $54 = (($36) + ($$sum)|0);
 HEAP32[$54>>2] = $53;
 $55 = HEAP32[$1>>2]|0;
 $56 = ($55|0)>(0);
 L18: do {
  if ($56) {
   $i$014 = 0;$j$013 = 2;
   L19: while(1) {
    $61 = ((($1) + ($i$014<<2)|0) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($1) + ($62<<2)|0) + 128|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ((($1) + ($62<<2)|0) + 192|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = 1 << $66;
    $68 = ($66|0)==(0);
    if ($68) {
     $cval$1$ph = 0;
    } else {
     $69 = ((($1) + ($62<<2)|0) + 256|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($9) + (($70*56)|0)|0) + 8|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)>(0);
     if (!($73)) {
      $$0 = 0;
      label = 38;
      break;
     }
     $74 = (($9) + (($70*56)|0)|0);
     $75 = (_decode_packed_entry_number($74,$10)|0);
     $76 = ($75|0)>(-1);
     if (!($76)) {
      $$0 = 0;
      label = 38;
      break;
     }
     $77 = ((($9) + (($70*56)|0)|0) + 24|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($78) + ($75<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(-1);
     if ($81) {
      $$0 = 0;
      label = 38;
      break;
     } else {
      $cval$1$ph = $80;
     }
    }
    $82 = ($64|0)>(0);
    if ($82) {
     $83 = (($67) + -1)|0;
     $cval$19 = $cval$1$ph;$k$010 = 0;
     while(1) {
      $84 = $cval$19 & $83;
      $85 = (((($1) + ($62<<5)|0) + ($84<<2)|0) + 320|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $cval$19 >> $66;
      $88 = ($86|0)>(-1);
      if ($88) {
       $89 = ((($9) + (($86*56)|0)|0) + 8|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($90|0)>(0);
       if (!($91)) {
        label = 22;
        break L19;
       }
       $92 = (($9) + (($86*56)|0)|0);
       $93 = (_decode_packed_entry_number($92,$10)|0);
       $94 = ($93|0)>(-1);
       if (!($94)) {
        label = 22;
        break L19;
       }
       $97 = ((($9) + (($86*56)|0)|0) + 24|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($98) + ($93<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($k$010) + ($j$013))|0;
       $102 = (($35) + ($101<<2)|0);
       HEAP32[$102>>2] = $100;
       $103 = ($100|0)==(-1);
       if ($103) {
        $$0 = 0;
        label = 38;
        break L19;
       }
      } else {
       $104 = (($k$010) + ($j$013))|0;
       $105 = (($35) + ($104<<2)|0);
       HEAP32[$105>>2] = 0;
      }
      $106 = (($k$010) + 1)|0;
      $107 = ($106|0)<($64|0);
      if ($107) {
       $cval$19 = $87;$k$010 = $106;
      } else {
       break;
      }
     }
    }
    $108 = (($64) + ($j$013))|0;
    $109 = (($i$014) + 1)|0;
    $110 = HEAP32[$1>>2]|0;
    $111 = ($109|0)<($110|0);
    if ($111) {
     $i$014 = $109;$j$013 = $108;
    } else {
     break L18;
    }
   }
   if ((label|0) == 22) {
    $95 = (($k$010) + ($j$013))|0;
    $96 = (($35) + ($95<<2)|0);
    HEAP32[$96>>2] = -1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $57 = HEAP32[$13>>2]|0;
 $58 = ($57|0)>(2);
 if (!($58)) {
  $$0 = $35;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = (($in) + 1032|0);
 $60 = (($in) + 780|0);
 $i$16 = 2;
 while(1) {
  $112 = (($i$16) + -2)|0;
  $113 = (($59) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($1) + ($114<<2)|0) + 836|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($60) + ($112<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($1) + ($118<<2)|0) + 836|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($35) + ($114<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($35) + ($118<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($1) + ($i$16<<2)|0) + 836|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $122 & 32767;
  $128 = $124 & 32767;
  $129 = (($128) - ($127))|0;
  $130 = (($120) - ($116))|0;
  $ispos$i = ($129|0)>(-1);
  $neg$i = (0 - ($129))|0;
  $131 = $ispos$i ? $129 : $neg$i;
  $132 = (($126) - ($116))|0;
  $133 = Math_imul($131, $132)|0;
  $134 = (($133|0) / ($130|0))&-1;
  $135 = ($129|0)<(0);
  $136 = (0 - ($134))|0;
  $$0$p$i = $135 ? $136 : $134;
  $$0$i = (($$0$p$i) + ($127))|0;
  $137 = HEAP32[$39>>2]|0;
  $138 = (($137) - ($$0$i))|0;
  $139 = (($35) + ($i$16<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)==(0);
  if ($141) {
   $166 = $$0$i | 32768;
   HEAP32[$139>>2] = $166;
  } else {
   $142 = ($138|0)<($$0$i|0);
   $143 = $142 ? $138 : $$0$i;
   $144 = $143 << 1;
   $145 = ($140|0)<($144|0);
   do {
    if ($145) {
     $150 = $140 & 1;
     $151 = ($150|0)==(0);
     if ($151) {
      $155 = $140 >> 1;
      $val$0 = $155;
      break;
     } else {
      $152 = (($140) + 1)|0;
      $153 = $152 >> 1;
      $154 = (0 - ($153))|0;
      $val$0 = $154;
      break;
     }
    } else {
     $146 = ($138|0)>($$0$i|0);
     if ($146) {
      $147 = (($140) - ($$0$i))|0;
      $val$0 = $147;
      break;
     } else {
      $148 = (($140) - ($138))|0;
      $149 = $148 ^ -1;
      $val$0 = $149;
      break;
     }
    }
   } while(0);
   $156 = (($val$0) + ($$0$i))|0;
   $157 = $156 & 32767;
   HEAP32[$139>>2] = $157;
   $158 = HEAP32[$113>>2]|0;
   $159 = (($35) + ($158<<2)|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $160 & 32767;
   HEAP32[$159>>2] = $161;
   $162 = HEAP32[$117>>2]|0;
   $163 = (($35) + ($162<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $164 & 32767;
   HEAP32[$163>>2] = $165;
  }
  $167 = (($i$16) + 1)|0;
  $168 = HEAP32[$13>>2]|0;
  $169 = ($167|0)<($168|0);
  if ($169) {
   $i$16 = $167;
  } else {
   $$0 = $35;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _floor1_inverse2($vb,$in,$memo,$out) {
 $vb = $vb|0;
 $in = $in|0;
 $memo = $memo|0;
 $out = $out|0;
 var $$0 = 0, $$pn$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0, $9 = 0, $err$04$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond$i = 0, $hx$0$lcssa = 0, $hx$04 = 0, $hx$1 = 0, $ispos$i = 0, $ispos1$i = 0, $j$03 = 0, $j$11 = 0, $lx$05 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$0$ph = 0, $ly$06 = 0, $ly$1 = 0;
 var $neg$i = 0, $neg2$i = 0, $smax$i = 0, $x1$n$i = 0, $y$03$i = 0, $y$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($in) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($vb) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = ($memo|0)==(0|0);
 if ($13) {
  $80 = $12 << 2;
  _memset(($out|0),0,($80|0))|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$memo>>2]|0;
 $15 = (($1) + 832|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $14)|0;
 $18 = ($17|0)<(0);
 if ($18) {
  $ly$0$ph = 0;
 } else {
  $19 = ($17|0)>(255);
  $20 = $19 ? 255 : $17;
  $ly$0$ph = $20;
 }
 $21 = (($in) + 1284|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>(1);
 if ($23) {
  $24 = (($in) + 260|0);
  $25 = $12 ^ -1;
  $hx$04 = 0;$j$03 = 1;$lx$05 = 0;$ly$06 = $ly$0$ph;
  while(1) {
   $29 = (($24) + ($j$03<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($memo) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 32767;
   $34 = ($33|0)==($32|0);
   if ($34) {
    $35 = ((($1) + ($30<<2)|0) + 836|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($16, $32)|0;
    $38 = ($37|0)<(0);
    if ($38) {
     $42 = 0;
    } else {
     $39 = ($37|0)>(255);
     $40 = $39 ? 255 : $37;
     $42 = $40;
    }
    $41 = (($42) - ($ly$06))|0;
    $43 = (($36) - ($lx$05))|0;
    $ispos$i = ($41|0)>(-1);
    $neg$i = (0 - ($41))|0;
    $44 = $ispos$i ? $41 : $neg$i;
    $45 = (($41|0) / ($43|0))&-1;
    $46 = $41 >> 31;
    $47 = $46 | 1;
    $48 = Math_imul($45, $43)|0;
    $ispos1$i = ($48|0)>(-1);
    $neg2$i = (0 - ($48))|0;
    $49 = $ispos1$i ? $48 : $neg2$i;
    $50 = (($44) - ($49))|0;
    $51 = ($12|0)>($36|0);
    $x1$n$i = $51 ? $36 : $12;
    $52 = ($x1$n$i|0)>($lx$05|0);
    if ($52) {
     $53 = (56120 + ($ly$06<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = (($out) + ($lx$05<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = $54 * $56;
     HEAPF32[$55>>2] = $57;
    }
    $58 = (($lx$05) + 1)|0;
    $59 = ($58|0)<($x1$n$i|0);
    if ($59) {
     $60 = $36 ^ -1;
     $61 = ($60|0)>($25|0);
     $smax$i = $61 ? $60 : $25;
     $62 = $smax$i ^ -1;
     $70 = $58;$err$04$i = 0;$y$03$i = $ly$06;
     while(1) {
      $63 = (($err$04$i) + ($50))|0;
      $64 = ($63|0)<($43|0);
      $65 = $64 ? 0 : $47;
      $66 = $64 ? 0 : $43;
      $err$1$i = (($63) - ($66))|0;
      $$pn$i = (($y$03$i) + ($45))|0;
      $y$1$i = (($$pn$i) + ($65))|0;
      $67 = (56120 + ($y$1$i<<2)|0);
      $68 = +HEAPF32[$67>>2];
      $69 = (($out) + ($70<<2)|0);
      $71 = +HEAPF32[$69>>2];
      $72 = $68 * $71;
      HEAPF32[$69>>2] = $72;
      $73 = (($70) + 1)|0;
      $exitcond$i = ($73|0)==($62|0);
      if ($exitcond$i) {
       $hx$1 = $36;$lx$1 = $36;$ly$1 = $42;
       break;
      } else {
       $70 = $73;$err$04$i = $err$1$i;$y$03$i = $y$1$i;
      }
     }
    } else {
     $hx$1 = $36;$lx$1 = $36;$ly$1 = $42;
    }
   } else {
    $hx$1 = $hx$04;$lx$1 = $lx$05;$ly$1 = $ly$06;
   }
   $74 = (($j$03) + 1)|0;
   $75 = ($74|0)<($22|0);
   if ($75) {
    $hx$04 = $hx$1;$j$03 = $74;$lx$05 = $lx$1;$ly$06 = $ly$1;
   } else {
    $hx$0$lcssa = $hx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $hx$0$lcssa = 0;$ly$0$lcssa = $ly$0$ph;
 }
 $26 = ($hx$0$lcssa|0)<($12|0);
 if (!($26)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (56120 + ($ly$0$lcssa<<2)|0);
 $28 = +HEAPF32[$27>>2];
 $j$11 = $hx$0$lcssa;
 while(1) {
  $76 = (($out) + ($j$11<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $28 * $77;
  HEAPF32[$76>>2] = $78;
  $79 = (($j$11) + 1)|0;
  $exitcond = ($79|0)==($12|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $j$11 = $79;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _icomp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _floor0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $j$01 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($vi) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_malloc(96)|0);
 $3 = (_oggpack_read($opb,8)|0);
 HEAP32[$2>>2] = $3;
 $4 = (_oggpack_read($opb,16)|0);
 $5 = (($2) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_oggpack_read($opb,16)|0);
 $7 = (($2) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (_oggpack_read($opb,6)|0);
 $9 = (($2) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (_oggpack_read($opb,8)|0);
 $11 = (($2) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (_oggpack_read($opb,4)|0);
 $13 = (($12) + 1)|0;
 $14 = (($2) + 20|0);
 HEAP32[$14>>2] = $13;
 $15 = ($3|0)<(1);
 $16 = ($4|0)<(1);
 $or$cond2 = $15 | $16;
 L1: do {
  if (!($or$cond2)) {
   $17 = ($6|0)<(1);
   $18 = ($12|0)<(0);
   $or$cond = $17 | $18;
   if (!($or$cond)) {
    $19 = ($12|0)>(-1);
    if (!($19)) {
     $$0 = $2;
     STACKTOP = sp;return ($$0|0);
    }
    $20 = (($2) + 24|0);
    $21 = (($1) + 24|0);
    $22 = (($1) + 1824|0);
    $j$01 = 0;
    while(1) {
     $26 = (_oggpack_read($opb,8)|0);
     $27 = (($20) + ($j$01<<2)|0);
     HEAP32[$27>>2] = $26;
     $28 = ($26|0)<(0);
     if ($28) {
      break L1;
     }
     $29 = HEAP32[$21>>2]|0;
     $30 = ($26|0)<($29|0);
     if (!($30)) {
      break L1;
     }
     $31 = (($22) + ($26<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0);
     if ($35) {
      break L1;
     }
     $36 = HEAP32[$32>>2]|0;
     $37 = ($36|0)<(1);
     $24 = (($j$01) + 1)|0;
     if ($37) {
      break L1;
     }
     $23 = HEAP32[$14>>2]|0;
     $25 = ($24|0)<($23|0);
     if ($25) {
      $j$01 = $24;
     } else {
      $$0 = $2;
      break;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $38 = ($2|0)==(0|0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _free($2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _floor0_look($vd,$i) {
 $vd = $vd|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(32)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   dest=$0+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $6 = HEAP32[$i>>2]|0;
 $7 = (($0) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (($i) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $9;
 $10 = (($0) + 20|0);
 HEAP32[$10>>2] = $i;
 $11 = (_malloc(8)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $21 = (($0) + 8|0);
  HEAP32[$21>>2] = $11;
  STACKTOP = sp;return ($0|0);
 }
 $13 = (($11) + -4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 3;
 $16 = ($15|0)==(0);
 if ($16) {
  $21 = (($0) + 8|0);
  HEAP32[$21>>2] = $11;
  STACKTOP = sp;return ($0|0);
 }
 $17 = $11;
 $18 = $17;
 HEAP8[$18>>0]=0&255;HEAP8[$18+1>>0]=(0>>8)&255;HEAP8[$18+2>>0]=(0>>16)&255;HEAP8[$18+3>>0]=0>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
 $21 = (($0) + 8|0);
 HEAP32[$21>>2] = $11;
 STACKTOP = sp;return ($0|0);
}
function _floor0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 STACKTOP = sp;return;
}
function _floor0_free_look($i) {
 $i = $i|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($i) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $7 = $2;
  } else {
   _free($4);
   $$pre = HEAP32[$1>>2]|0;
   $7 = $$pre;
  }
  $6 = (($7) + 4|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = $7;
  } else {
   _free($8);
   $$pre1 = HEAP32[$1>>2]|0;
   $10 = $$pre1;
  }
  _free($10);
 }
 _free($i);
 STACKTOP = sp;return;
}
function _floor0_inverse1($vb,$i) {
 $vb = $vb|0;
 $i = $i|0;
 var $$0 = 0, $$01$i = 0, $$pre = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$03$i = 0, $i$1$lcssa$i = 0, $i$12$i = 0, $j$01$i = 0, $j$04 = 0, $j$1$lcssa = 0, $j$12 = 0, $k$01 = 0, $last$05 = 0.0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($i) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 4|0);
 $3 = (($1) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_oggpack_read($2,$4)|0);
 $6 = ($5|0)>(0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = 1 << $7;
 $9 = (($8) + -1)|0;
 $10 = (+($5|0));
 $11 = (+($9|0));
 $12 = $10 / $11;
 $13 = (($1) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $12 * $15;
 $17 = (($1) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $ret$0$lcssa$i = 0;
 } else {
  $$01$i = $18;$ret$02$i = 0;
  while(1) {
   $20 = (($ret$02$i) + 1)|0;
   $21 = $$01$i >>> 1;
   $22 = ($21|0)==(0);
   if ($22) {
    $ret$0$lcssa$i = $20;
    break;
   } else {
    $$01$i = $21;$ret$02$i = $20;
   }
  }
 }
 $23 = (_oggpack_read($2,$ret$0$lcssa$i)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$17>>2]|0;
 $26 = ($23|0)<($25|0);
 if (!($26)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($vb) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 2848|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($1) + ($23<<2)|0) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + (($36*56)|0)|0);
 $38 = (($i) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + ($39))|0;
 $42 = $41 << 2;
 $43 = (($42) + 11)|0;
 $44 = $43 & -8;
 $45 = (($vb) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 $48 = (($vb) + 76|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($47|0)>($49|0);
 $51 = (($vb) + 68|0);
 $52 = HEAP32[$51>>2]|0;
 if ($50) {
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   $54 = (_malloc(8)|0);
   $55 = (($vb) + 80|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($46))|0;
   HEAP32[$55>>2] = $57;
   $58 = (($vb) + 84|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($54) + 4|0);
   HEAP32[$60>>2] = $59;
   HEAP32[$54>>2] = $52;
   HEAP32[$58>>2] = $54;
  }
  HEAP32[$48>>2] = $44;
  $61 = (_malloc($44)|0);
  HEAP32[$51>>2] = $61;
  HEAP32[$45>>2] = 0;
  $$pre = HEAP32[$38>>2]|0;
  $63 = $61;$64 = 0;$69 = $$pre;
 } else {
  $63 = $52;$64 = $46;$69 = $39;
 }
 $62 = (($63) + ($64)|0);
 $65 = (($64) + ($44))|0;
 HEAP32[$45>>2] = $65;
 $66 = ((($34) + (($36*56)|0)|0) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)>(0);
 $70 = ($69|0)>(0);
 L20: do {
  if ($68) {
   if ($70) {
    $72 = ((($34) + (($36*56)|0)|0) + 16|0);
    $i$03$i = 0;
    while(1) {
     $74 = (_decode_packed_entry_number($37,$2)|0);
     $75 = ($74|0)==(-1);
     if ($75) {
      $$0 = 0;
      break;
     }
     $76 = HEAP32[$72>>2]|0;
     $77 = HEAP32[$37>>2]|0;
     $78 = Math_imul($77, $74)|0;
     $79 = ($i$03$i|0)<($69|0);
     L26: do {
      if ($79) {
       $i$12$i = $i$03$i;$j$01$i = 0;
       while(1) {
        $80 = ($j$01$i|0)<($77|0);
        if (!($80)) {
         $i$1$lcssa$i = $i$12$i;
         break L26;
        }
        $81 = (($j$01$i) + 1)|0;
        $$sum$i = (($j$01$i) + ($78))|0;
        $82 = (($76) + ($$sum$i<<2)|0);
        $83 = +HEAPF32[$82>>2];
        $84 = (($i$12$i) + 1)|0;
        $85 = (($62) + ($i$12$i<<2)|0);
        HEAPF32[$85>>2] = $83;
        $86 = ($84|0)<($69|0);
        if ($86) {
         $i$12$i = $84;$j$01$i = $81;
        } else {
         $i$1$lcssa$i = $84;
         break;
        }
       }
      } else {
       $i$1$lcssa$i = $i$03$i;
      }
     } while(0);
     $73 = ($i$1$lcssa$i|0)<($69|0);
     if ($73) {
      $i$03$i = $i$1$lcssa$i;
     } else {
      break L20;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   if ($70) {
    $71 = $69 << 2;
    _memset(($62|0),0,($71|0))|0;
   }
  }
 } while(0);
 $87 = HEAP32[$38>>2]|0;
 $88 = ($87|0)>(0);
 if ($88) {
  $j$04 = 0;$last$05 = 0.0;
  while(1) {
   $89 = ($j$04|0)<($87|0);
   L38: do {
    if ($89) {
     $90 = HEAP32[$37>>2]|0;
     $j$12 = $j$04;$k$01 = 0;
     while(1) {
      $91 = ($k$01|0)<($90|0);
      if (!($91)) {
       $j$1$lcssa = $j$12;
       break L38;
      }
      $92 = (($62) + ($j$12<<2)|0);
      $93 = +HEAPF32[$92>>2];
      $94 = $last$05 + $93;
      HEAPF32[$92>>2] = $94;
      $95 = (($k$01) + 1)|0;
      $96 = (($j$12) + 1)|0;
      $97 = ($96|0)<($87|0);
      if ($97) {
       $j$12 = $96;$k$01 = $95;
      } else {
       $j$1$lcssa = $96;
       break;
      }
     }
    } else {
     $j$1$lcssa = $j$04;
    }
   } while(0);
   $98 = (($j$1$lcssa) + -1)|0;
   $99 = (($62) + ($98<<2)|0);
   $100 = +HEAPF32[$99>>2];
   $101 = ($j$1$lcssa|0)<($87|0);
   if ($101) {
    $j$04 = $j$1$lcssa;$last$05 = $100;
   } else {
    break;
   }
  }
 }
 $102 = (($62) + ($87<<2)|0);
 HEAPF32[$102>>2] = $16;
 $$0 = $62;
 STACKTOP = sp;return ($$0|0);
}
function _floor0_inverse2($vb,$i,$memo,$out) {
 $vb = $vb|0;
 $i = $i|0;
 $memo = $memo|0;
 $out = $out|0;
 var $$$i = 0, $$0 = 0, $$lcssa$i = 0, $$lcssa$us$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre4$i = 0, $$pre5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0;
 var $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0;
 var $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0;
 var $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0;
 var $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0.0, $exitcond$i = 0, $i$012$i = 0, $i$19$i = 0, $i$19$us$i = 0, $j$0$lcssa$i = 0, $j$01$i = 0, $j$01$us$i = 0, $p$02$us$i = 0.0, $p$1$i = 0.0, $p$1$in$i = 0.0, $p$1$us$i = 0.0, $q$03$us$i = 0.0, $q$1$i = 0.0, $q$1$us$i = 0.0, $smax$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($i) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($i) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (($vb) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($3<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16|0) / 2)&-1;
  $18 = HEAP32[$i>>2]|0;
  $19 = (($1) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($20|0));
  $22 = $21 * 0.5;
  $23 = $17 << 2;
  $24 = (($23) + 4)|0;
  $25 = (_malloc($24)|0);
  HEAP32[$6>>2] = $25;
  $26 = ($16|0)>(1);
  if ($26) {
   $27 = $22 * $22;
   $28 = $27 * 1.84999997543400240829E-8;
   $29 = $21 * 3.69999994290992617607E-4;
   $30 = $28;
   $31 = $29;
   $32 = (+Math_atan((+$30)));
   $33 = (+Math_atan((+$31)));
   $34 = $21 * 4.99999987368937581778E-5;
   $35 = $32 * 2.24000000953674316406;
   $36 = $33 * 13.1000003814697265625;
   $37 = $34;
   $38 = $35 + $36;
   $39 = $37 + $38;
   $40 = (+($18|0));
   $41 = $40 / $39;
   $42 = $41;
   $43 = (+($17|0));
   $44 = $22 / $43;
   $45 = $42;
   $46 = HEAP32[$4>>2]|0;
   $47 = (($46) + ($3<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $68 = $18;$j$01$i = 0;
   while(1) {
    $49 = (+($j$01$i|0));
    $50 = $44 * $49;
    $51 = $50 * 7.39999988581985235214E-4;
    $52 = $51;
    $53 = (+Math_atan((+$52)));
    $54 = $53 * 13.1000003814697265625;
    $55 = $50 * $50;
    $56 = $55 * 1.84999997543400240829E-8;
    $57 = $56;
    $58 = (+Math_atan((+$57)));
    $59 = $58 * 2.24000000953674316406;
    $60 = $54 + $59;
    $61 = $50 * 9.99999974737875163555E-5;
    $62 = $61;
    $63 = $62 + $60;
    $64 = $45 * $63;
    $65 = (+Math_floor((+$64)));
    $66 = (~~(($65)));
    $67 = ($66|0)<($68|0);
    $69 = (($68) + -1)|0;
    $$$i = $67 ? $66 : $69;
    $70 = (($48) + ($j$01$i<<2)|0);
    HEAP32[$70>>2] = $$$i;
    $71 = (($j$01$i) + 1)|0;
    $72 = ($71|0)<($17|0);
    if (!($72)) {
     break;
    }
    $$pre5$i = HEAP32[$i>>2]|0;
    $68 = $$pre5$i;$j$01$i = $71;
   }
   $73 = ($17|0)>(1);
   $smax$i = $73 ? $17 : 1;
   $75 = $48;$j$0$lcssa$i = $smax$i;
  } else {
   $$pre$i = HEAP32[$4>>2]|0;
   $$phi$trans$insert$i = (($$pre$i) + ($3<<2)|0);
   $$pre4$i = HEAP32[$$phi$trans$insert$i>>2]|0;
   $75 = $$pre4$i;$j$0$lcssa$i = 0;
  }
  $74 = (($75) + ($j$0$lcssa$i<<2)|0);
  HEAP32[$74>>2] = -1;
  $76 = ((($i) + ($3<<2)|0) + 12|0);
  HEAP32[$76>>2] = $17;
 }
 $77 = ($memo|0)==(0|0);
 if ($77) {
  $209 = (($i) + 12|0);
  $210 = (($209) + ($3<<2)|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $211 << 2;
  _memset(($out|0),0,($212|0))|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $78 = (($i) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($memo) + ($79<<2)|0);
 $81 = +HEAPF32[$80>>2];
 $82 = HEAP32[$4>>2]|0;
 $83 = (($82) + ($3<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($i) + 12|0);
 $86 = (($85) + ($3<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$i>>2]|0;
 $89 = (($1) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (+($90|0));
 $92 = (+($88|0));
 $93 = 3.141592653589793116 / $92;
 $94 = $93;
 $95 = ($79|0)>(0);
 if ($95) {
  $i$012$i = 0;
  while(1) {
   $161 = (($memo) + ($i$012$i<<2)|0);
   $162 = +HEAPF32[$161>>2];
   $163 = $162;
   $164 = (+Math_cos((+$163)));
   $165 = $164 * 2.0;
   $166 = $165;
   HEAPF32[$161>>2] = $166;
   $167 = (($i$012$i) + 1)|0;
   $exitcond$i = ($167|0)==($79|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$012$i = $167;
   }
  }
 }
 $96 = ($87|0)>(0);
 if (!($96)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = ($79|0)>(1);
 $98 = $81;
 $99 = $91;
 if (!($97)) {
  $100 = ($79|0)==(1);
  $i$19$i = 0;
  while(1) {
   $169 = (($84) + ($i$19$i<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (+($170|0));
   $172 = $94 * $171;
   $173 = $172;
   $174 = (+Math_cos((+$173)));
   $175 = $174 * 2.0;
   $176 = $175;
   if ($100) {
    $177 = +HEAPF32[$memo>>2];
    $178 = $176 - $177;
    $179 = $178 * 0.5;
    $180 = $176 * $176;
    $181 = 4.0 - $180;
    $182 = $179 * $179;
    $p$1$in$i = $181;$q$1$i = $182;
   } else {
    $183 = 2.0 - $176;
    $184 = $176 + 2.0;
    $185 = $184 * 0.25;
    $p$1$in$i = $183;$q$1$i = $185;
   }
   $p$1$i = $p$1$in$i * 0.25;
   $186 = $p$1$i + $q$1$i;
   $187 = $186;
   $188 = (+Math_sqrt((+$187)));
   $189 = $98 / $188;
   $190 = $189 - $99;
   $191 = $190 * 0.115129247307777404785;
   $192 = (+Math_exp((+$191)));
   $193 = $192;
   $194 = (($out) + ($i$19$i<<2)|0);
   $195 = +HEAPF32[$194>>2];
   $196 = $195 * $193;
   HEAPF32[$194>>2] = $196;
   $197 = (($i$19$i) + 1)|0;
   $198 = (($84) + ($197<<2)|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ($199|0)==($170|0);
   if ($200) {
    $202 = $197;
    while(1) {
     $201 = (($out) + ($202<<2)|0);
     $203 = +HEAPF32[$201>>2];
     $204 = $193 * $203;
     HEAPF32[$201>>2] = $204;
     $205 = (($202) + 1)|0;
     $206 = (($84) + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==($170|0);
     if ($208) {
      $202 = $205;
     } else {
      $$lcssa$i = $205;
      break;
     }
    }
   } else {
    $$lcssa$i = $197;
   }
   $168 = ($$lcssa$i|0)<($87|0);
   if ($168) {
    $i$19$i = $$lcssa$i;
   } else {
    $$0 = 1;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $101 = (($79) + -1)|0;
 $102 = (($memo) + ($101<<2)|0);
 $i$19$us$i = 0;
 while(1) {
  $154 = (($84) + ($i$19$us$i<<2)|0);
  $137 = HEAP32[$154>>2]|0;
  $155 = (+($137|0));
  $156 = $94 * $155;
  $157 = $156;
  $158 = (+Math_cos((+$157)));
  $159 = $158 * 2.0;
  $106 = $159;
  $j$01$us$i = 1;$p$02$us$i = 0.5;$q$03$us$i = 0.5;
  while(1) {
   $146 = (($j$01$us$i) + -1)|0;
   $147 = (($memo) + ($146<<2)|0);
   $148 = +HEAPF32[$147>>2];
   $149 = $106 - $148;
   $112 = $q$03$us$i * $149;
   $150 = (($memo) + ($j$01$us$i<<2)|0);
   $151 = +HEAPF32[$150>>2];
   $152 = $106 - $151;
   $108 = $p$02$us$i * $152;
   $103 = (($j$01$us$i) + 2)|0;
   $153 = ($103|0)<($79|0);
   if ($153) {
    $j$01$us$i = $103;$p$02$us$i = $108;$q$03$us$i = $112;
   } else {
    break;
   }
  }
  $104 = ($103|0)==($79|0);
  if ($104) {
   $114 = +HEAPF32[$102>>2];
   $115 = $106 - $114;
   $116 = $112 * $115;
   $117 = $106 * $106;
   $118 = 4.0 - $117;
   $119 = $108 * $108;
   $120 = $118 * $119;
   $121 = $116 * $116;
   $p$1$us$i = $120;$q$1$us$i = $121;
  } else {
   $105 = 2.0 - $106;
   $107 = $108 * $108;
   $109 = $105 * $107;
   $110 = $106 + 2.0;
   $111 = $112 * $112;
   $113 = $110 * $111;
   $p$1$us$i = $109;$q$1$us$i = $113;
  }
  $122 = $p$1$us$i + $q$1$us$i;
  $123 = $122;
  $124 = (+Math_sqrt((+$123)));
  $125 = $98 / $124;
  $126 = $125 - $99;
  $127 = $126 * 0.115129247307777404785;
  $128 = (+Math_exp((+$127)));
  $129 = $128;
  $130 = (($out) + ($i$19$us$i<<2)|0);
  $131 = +HEAPF32[$130>>2];
  $132 = $131 * $129;
  HEAPF32[$130>>2] = $132;
  $133 = (($i$19$us$i) + 1)|0;
  $134 = (($84) + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)==($137|0);
  if ($136) {
   $139 = $133;
   while(1) {
    $138 = (($out) + ($139<<2)|0);
    $140 = +HEAPF32[$138>>2];
    $141 = $129 * $140;
    HEAPF32[$138>>2] = $141;
    $142 = (($139) + 1)|0;
    $143 = (($84) + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==($137|0);
    if ($145) {
     $139 = $142;
    } else {
     $$lcssa$us$i = $142;
     break;
    }
   }
  } else {
   $$lcssa$us$i = $133;
  }
  $160 = ($$lcssa$us$i|0)<($87|0);
  if ($160) {
   $i$19$us$i = $$lcssa$us$i;
  } else {
   $$0 = 1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _res0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 STACKTOP = sp;return;
}
function _res0_free_look($i) {
 $i = $i|0;
 var $$lcssa = 0, $$lcssa2 = 0, $$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$03 = 0, $j$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($i) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = (($i) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 if ($3) {
  $25 = $2;$7 = $5;$j$03 = 0;
  while(1) {
   $6 = (($7) + ($j$03<<2)|0);
   $8 = HEAP32[$6>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $12 = $25;$26 = $7;
   } else {
    _free($8);
    $$pre = HEAP32[$1>>2]|0;
    $$pre9 = HEAP32[$4>>2]|0;
    $12 = $$pre;$26 = $$pre9;
   }
   $10 = (($j$03) + 1)|0;
   $11 = ($10|0)<($12|0);
   if ($11) {
    $25 = $12;$7 = $26;$j$03 = $10;
   } else {
    $$lcssa2 = $26;
    break;
   }
  }
 } else {
  $$lcssa2 = $5;
 }
 _free($$lcssa2);
 $13 = (($i) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 $16 = (($i) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 if ($15) {
  $19 = $17;$j$11 = 0;
  while(1) {
   $18 = (($19) + ($j$11<<2)|0);
   $20 = HEAP32[$18>>2]|0;
   _free($20);
   $21 = (($j$11) + 1)|0;
   $22 = HEAP32[$13>>2]|0;
   $23 = ($21|0)<($22|0);
   $24 = HEAP32[$16>>2]|0;
   if ($23) {
    $19 = $24;$j$11 = $21;
   } else {
    $$lcssa = $24;
    break;
   }
  }
 } else {
  $$lcssa = $17;
 }
 _free($$lcssa);
 _free($i);
 STACKTOP = sp;return;
}
function _res0_pack($vr,$opb) {
 $vr = $vr|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $acc$07 = 0, $exitcond = 0, $j$06 = 0, $j$15 = 0, $ret$0$lcssa$i4 = 0, $ret$02$i = 0, $ret$02$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vr>>2]|0;
 _oggpack_write($opb,$0,24);
 $1 = (($vr) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _oggpack_write($opb,$2,24);
 $3 = (($vr) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 _oggpack_write($opb,$5,24);
 $6 = (($vr) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 _oggpack_write($opb,$8,6);
 $9 = (($vr) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 _oggpack_write($opb,$10,8);
 $11 = HEAP32[$6>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($vr) + 24|0);
 $acc$07 = 0;$j$06 = 0;
 while(1) {
  $17 = (($13) + ($j$06<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $26 = 0;
   label = 9;
  } else {
   $$01$i = $18;$ret$02$i = 0;
   while(1) {
    $20 = (($ret$02$i) + 1)|0;
    $21 = $$01$i >>> 1;
    $22 = ($21|0)==(0);
    if ($22) {
     break;
    } else {
     $$01$i = $21;$ret$02$i = $20;
    }
   }
   $23 = ($ret$02$i|0)>(2);
   if ($23) {
    _oggpack_write($opb,$18,3);
    _oggpack_write($opb,1,1);
    $24 = HEAP32[$17>>2]|0;
    $25 = $24 >> 3;
    _oggpack_write($opb,$25,5);
   } else {
    $26 = $18;
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   _oggpack_write($opb,$26,4);
  }
  $27 = HEAP32[$17>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   $ret$0$lcssa$i4 = 0;
  } else {
   $$01$i2 = $27;$ret$02$i1 = 0;
   while(1) {
    $29 = $$01$i2 & 1;
    $30 = (($29) + ($ret$02$i1))|0;
    $31 = $$01$i2 >>> 1;
    $32 = ($31|0)==(0);
    if ($32) {
     $ret$0$lcssa$i4 = $30;
     break;
    } else {
     $$01$i2 = $31;$ret$02$i1 = $30;
    }
   }
  }
  $14 = (($ret$0$lcssa$i4) + ($acc$07))|0;
  $33 = (($j$06) + 1)|0;
  $34 = HEAP32[$6>>2]|0;
  $35 = ($33|0)<($34|0);
  if ($35) {
   $acc$07 = $14;$j$06 = $33;
  } else {
   break;
  }
 }
 $15 = ($14|0)>(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = (($vr) + 280|0);
 $j$15 = 0;
 while(1) {
  $36 = (($16) + ($j$15<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  _oggpack_write($opb,$37,8);
  $38 = (($j$15) + 1)|0;
  $exitcond = ($38|0)==($14|0);
  if ($exitcond) {
   break;
  } else {
   $j$15 = $38;
  }
 }
 STACKTOP = sp;return;
}
function _res0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $$01$i = 0, $$pre = 0, $$pre$phi24Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $acc$0$lcssa25 = 0, $acc$017 = 0, $cascade$0 = 0, $dim$02 = 0, $j$018 = 0, $j$111 = 0, $j$26 = 0, $partvals$03 = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(2840)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,2840)|0;
  }
 }
 $6 = (($vi) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_oggpack_read($opb,24)|0);
 HEAP32[$0>>2] = $8;
 $9 = (_oggpack_read($opb,24)|0);
 $10 = (($0) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (_oggpack_read($opb,24)|0);
 $12 = (($11) + 1)|0;
 $13 = (($0) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = (_oggpack_read($opb,6)|0);
 $15 = (($14) + 1)|0;
 $16 = (($0) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = (_oggpack_read($opb,8)|0);
 $18 = (($0) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = ($17|0)<(0);
 L5: do {
  if ($19) {
   label = 30;
  } else {
   $20 = ($14|0)>(-1);
   if ($20) {
    $21 = (($0) + 24|0);
    $acc$017 = 0;$j$018 = 0;
    while(1) {
     $25 = (_oggpack_read($opb,3)|0);
     $26 = (_oggpack_read($opb,1)|0);
     $27 = ($26|0)<(0);
     if ($27) {
      label = 30;
      break L5;
     }
     $28 = ($26|0)==(0);
     if ($28) {
      $cascade$0 = $25;
     } else {
      $29 = (_oggpack_read($opb,5)|0);
      $30 = ($29|0)<(0);
      if ($30) {
       label = 30;
       break L5;
      }
      $31 = $29 << 3;
      $32 = $31 | $25;
      $cascade$0 = $32;
     }
     $33 = (($21) + ($j$018<<2)|0);
     HEAP32[$33>>2] = $cascade$0;
     $34 = ($cascade$0|0)==(0);
     if ($34) {
      $ret$0$lcssa$i = 0;
     } else {
      $$01$i = $cascade$0;$ret$02$i = 0;
      while(1) {
       $35 = $$01$i & 1;
       $36 = (($35) + ($ret$02$i))|0;
       $37 = $$01$i >>> 1;
       $38 = ($37|0)==(0);
       if ($38) {
        $ret$0$lcssa$i = $36;
        break;
       } else {
        $$01$i = $37;$ret$02$i = $36;
       }
      }
     }
     $22 = (($ret$0$lcssa$i) + ($acc$017))|0;
     $39 = (($j$018) + 1)|0;
     $40 = HEAP32[$16>>2]|0;
     $41 = ($39|0)<($40|0);
     if ($41) {
      $acc$017 = $22;$j$018 = $39;
     } else {
      break;
     }
    }
    $23 = ($22|0)>(0);
    if ($23) {
     $24 = (($0) + 280|0);
     $j$111 = 0;
     while(1) {
      $42 = (_oggpack_read($opb,8)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       label = 30;
       break L5;
      }
      $44 = (($24) + ($j$111<<2)|0);
      HEAP32[$44>>2] = $42;
      $45 = (($j$111) + 1)|0;
      $46 = ($45|0)<($22|0);
      if ($46) {
       $j$111 = $45;
      } else {
       $75 = 1;$acc$0$lcssa25 = $22;
       break;
      }
     }
    } else {
     $75 = 0;$acc$0$lcssa25 = $22;
    }
   } else {
    $75 = 0;$acc$0$lcssa25 = 0;
   }
   $47 = HEAP32[$18>>2]|0;
   $48 = (($7) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)<($49|0);
   if ($50) {
    if ($75) {
     $51 = (($0) + 280|0);
     $52 = (($7) + 1824|0);
     $j$26 = 0;
     while(1) {
      $55 = (($51) + ($j$26<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)<($49|0);
      if (!($57)) {
       break L5;
      }
      $58 = (($52) + ($56<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0);
      $53 = (($j$26) + 1)|0;
      if ($62) {
       label = 30;
       break L5;
      }
      $54 = ($53|0)<($acc$0$lcssa25|0);
      if ($54) {
       $j$26 = $53;
      } else {
       $$pre$phi24Z2D = $52;
       break;
      }
     }
    } else {
     $$pre = (($7) + 1824|0);
     $$pre$phi24Z2D = $$pre;
    }
    $63 = (($$pre$phi24Z2D) + ($47<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[$64>>2]|0;
    $68 = ($67|0)<(1);
    if (!($68)) {
     $69 = HEAP32[$16>>2]|0;
     $dim$02 = $67;$partvals$03 = 1;
     while(1) {
      $72 = Math_imul($69, $partvals$03)|0;
      $73 = ($72|0)>($66|0);
      $70 = (($dim$02) + -1)|0;
      if ($73) {
       label = 30;
       break L5;
      }
      $71 = ($70|0)>(0);
      if ($71) {
       $dim$02 = $70;$partvals$03 = $72;
      } else {
       break;
      }
     }
     $74 = (($0) + 16|0);
     HEAP32[$74>>2] = $72;
     $$0 = $0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  if ($1) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _res0_look($vd,$vr) {
 $vd = $vd|0;
 $vr = $vr|0;
 var $$$i = 0, $$$i2 = 0, $$01$i = 0, $$maxstage$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $acc$017 = 0, $acc$113 = 0, $acc$2 = 0, $acc$3 = 0, $exitcond = 0, $exitcond25 = 0, $j$019 = 0, $j$18 = 0, $j$24 = 0, $j$24$us = 0, $k$014 = 0, $k$11$us = 0, $maxstage$0$lcssa = 0, $maxstage$018 = 0, $maxstage$2 = 0, $mult$03$us = 0, $req$0$i = 0, $req$0$i3 = 0, $ret$02$i = 0, $val$02$us = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(44)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   dest=$0+0|0; stop=dest+44|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $6 = (($vd) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $vr;
 $10 = (($vr) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($0) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (($9) + 2848|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($0) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = (($vr) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + (($17*56)|0)|0);
 $19 = (($0) + 16|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$18>>2]|0;
 $21 = ($11|0)==(0);
 if ($21) {
  $req$0$i = 0;
 } else {
  $22 = $11 << 2;
  $23 = ($11>>>0)>(65535);
  if ($23) {
   $24 = (($22>>>0) / ($11>>>0))&-1;
   $25 = ($24|0)==(4);
   $$$i = $25 ? $22 : -1;
   $req$0$i = $$$i;
  } else {
   $req$0$i = $22;
  }
 }
 $26 = (_malloc($req$0$i)|0);
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = (($26) + -4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 3;
  $31 = ($30|0)==(0);
  if (!($31)) {
   _memset(($26|0),0,($req$0$i|0))|0;
  }
 }
 $32 = (($0) + 20|0);
 HEAP32[$32>>2] = $26;
 $33 = ($11|0)>(0);
 if ($33) {
  $34 = (($vr) + 24|0);
  $35 = (($vr) + 280|0);
  $acc$017 = 0;$j$019 = 0;$maxstage$018 = 0;
  while(1) {
   $36 = (($34) + ($j$019<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $acc$3 = $acc$017;$maxstage$2 = $maxstage$018;
   } else {
    $$01$i = $37;$ret$02$i = 0;
    while(1) {
     $39 = (($ret$02$i) + 1)|0;
     $40 = $$01$i >>> 1;
     $41 = ($40|0)==(0);
     if ($41) {
      break;
     } else {
      $$01$i = $40;$ret$02$i = $39;
     }
    }
    $42 = ($39|0)==(0);
    if ($42) {
     $acc$3 = $acc$017;$maxstage$2 = $maxstage$018;
    } else {
     $43 = ($39|0)>($maxstage$018|0);
     $$maxstage$0 = $43 ? $39 : $maxstage$018;
     $44 = $39 << 2;
     $45 = ($39>>>0)>(65535);
     if ($45) {
      $46 = (($44>>>0) / ($39>>>0))&-1;
      $47 = ($46|0)==(4);
      $$$i2 = $47 ? $44 : -1;
      $req$0$i3 = $$$i2;
     } else {
      $req$0$i3 = $44;
     }
     $48 = (_malloc($req$0$i3)|0);
     $49 = ($48|0)==(0|0);
     if (!($49)) {
      $50 = (($48) + -4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = $51 & 3;
      $53 = ($52|0)==(0);
      if (!($53)) {
       _memset(($48|0),0,($req$0$i3|0))|0;
      }
     }
     $54 = (($26) + ($j$019<<2)|0);
     HEAP32[$54>>2] = $48;
     $55 = ($ret$02$i|0)>(-1);
     if ($55) {
      $acc$113 = $acc$017;$k$014 = 0;
      while(1) {
       $56 = 1 << $k$014;
       $57 = $37 & $56;
       $58 = ($57|0)==(0);
       if ($58) {
        $acc$2 = $acc$113;
       } else {
        $59 = HEAP32[$13>>2]|0;
        $60 = (($acc$113) + 1)|0;
        $61 = (($35) + ($acc$113<<2)|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = (($59) + (($62*56)|0)|0);
        $64 = HEAP32[$54>>2]|0;
        $65 = (($64) + ($k$014<<2)|0);
        HEAP32[$65>>2] = $63;
        $acc$2 = $60;
       }
       $66 = (($k$014) + 1)|0;
       $67 = ($66|0)<($39|0);
       if ($67) {
        $acc$113 = $acc$2;$k$014 = $66;
       } else {
        $acc$3 = $acc$2;$maxstage$2 = $$maxstage$0;
        break;
       }
      }
     } else {
      $acc$3 = $acc$017;$maxstage$2 = $$maxstage$0;
     }
    }
   }
   $68 = (($j$019) + 1)|0;
   $69 = ($68|0)<($11|0);
   if ($69) {
    $acc$017 = $acc$3;$j$019 = $68;$maxstage$018 = $maxstage$2;
   } else {
    $maxstage$0$lcssa = $maxstage$2;
    break;
   }
  }
 } else {
  $maxstage$0$lcssa = 0;
 }
 $70 = (($0) + 24|0);
 HEAP32[$70>>2] = 1;
 $71 = ($20|0)>(0);
 if ($71) {
  $73 = 1;$j$18 = 0;
  while(1) {
   $72 = Math_imul($73, $11)|0;
   $74 = (($j$18) + 1)|0;
   $exitcond = ($74|0)==($20|0);
   if ($exitcond) {
    break;
   } else {
    $73 = $72;$j$18 = $74;
   }
  }
  HEAP32[$70>>2] = $72;
  $77 = $72;
 } else {
  $77 = 1;
 }
 $75 = (($0) + 8|0);
 HEAP32[$75>>2] = $maxstage$0$lcssa;
 $76 = $77 << 2;
 $78 = (_malloc($76)|0);
 $79 = (($0) + 28|0);
 HEAP32[$79>>2] = $78;
 $80 = ($77|0)>(0);
 if (!($80)) {
  STACKTOP = sp;return ($0|0);
 }
 $81 = $20 << 2;
 if ($71) {
  $j$24$us = 0;
 } else {
  $j$24 = 0;
  while(1) {
   $91 = (_malloc($81)|0);
   $92 = (($78) + ($j$24<<2)|0);
   HEAP32[$92>>2] = $91;
   $93 = (($j$24) + 1)|0;
   $94 = ($93|0)<($77|0);
   if ($94) {
    $j$24 = $93;
   } else {
    break;
   }
  }
  STACKTOP = sp;return ($0|0);
 }
 while(1) {
  $88 = (_malloc($81)|0);
  $90 = (($78) + ($j$24$us<<2)|0);
  HEAP32[$90>>2] = $88;
  $$pn = $77;$k$11$us = 0;$val$02$us = $j$24$us;
  while(1) {
   $mult$03$us = (($$pn|0) / ($11|0))&-1;
   $84 = (($val$02$us|0) / ($mult$03$us|0))&-1;
   $85 = Math_imul($84, $mult$03$us)|0;
   $86 = (($val$02$us) - ($85))|0;
   $87 = (($88) + ($k$11$us<<2)|0);
   HEAP32[$87>>2] = $84;
   $89 = (($k$11$us) + 1)|0;
   $exitcond25 = ($89|0)==($20|0);
   if ($exitcond25) {
    break;
   } else {
    $$pn = $mult$03$us;$k$11$us = $89;$val$02$us = $86;
   }
  }
  $82 = (($j$24$us) + 1)|0;
  $83 = ($82|0)<($77|0);
  if ($83) {
   $j$24$us = $82;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _res0_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  STACKTOP = sp;return 0;
 }
 __01inverse($vb,$vl,$in,$used$1,75);
 STACKTOP = sp;return 0;
}
function __01inverse($vb,$vl,$in,$ch,$decodepart) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $decodepart = $decodepart|0;
 var $$ = 0, $$not = 0, $$not29 = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $i$016 = 0, $i$1$lcssa = 0, $i$111 = 0, $i$111$us = 0, $j$023 = 0, $j$12 = 0, $j$25$us = 0, $k$010 = 0, $k$010$us = 0, $l$013 = 0, $or$cond = 0;
 var $or$cond$us = 0, $or$cond9 = 0, $s$021 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($vl) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($vb) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 1;
 $9 = (($0) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($8|0);
 $$ = $11 ? $10 : $8;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($$) - ($12))|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = (($13|0) / ($2|0))&-1;
 $16 = $ch << 2;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$16)|0)+15)&-16)|0;
 $18 = ($ch|0)>(0);
 if ($18) {
  $19 = (($5) + -1)|0;
  $20 = (($19) + ($15))|0;
  $21 = (($20|0) / ($5|0))&-1;
  $22 = $21 << 2;
  $23 = (($22) + 7)|0;
  $24 = $23 & -8;
  $25 = (($vb) + 72|0);
  $26 = (($vb) + 76|0);
  $27 = (($vb) + 68|0);
  $28 = (($vb) + 80|0);
  $29 = (($vb) + 84|0);
  $$pre4 = HEAP32[$25>>2]|0;
  $$pre5 = HEAP32[$27>>2]|0;
  $40 = $$pre4;$43 = $$pre5;$j$023 = 0;
  while(1) {
   $39 = (($40) + ($24))|0;
   $41 = HEAP32[$26>>2]|0;
   $42 = ($39|0)>($41|0);
   if ($42) {
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = (_malloc(8)|0);
     $46 = HEAP32[$28>>2]|0;
     $47 = (($46) + ($40))|0;
     HEAP32[$28>>2] = $47;
     $48 = HEAP32[$29>>2]|0;
     $49 = (($45) + 4|0);
     HEAP32[$49>>2] = $48;
     HEAP32[$45>>2] = $43;
     HEAP32[$29>>2] = $45;
    }
    HEAP32[$26>>2] = $24;
    $50 = (_malloc($24)|0);
    HEAP32[$27>>2] = $50;
    HEAP32[$25>>2] = 0;
    $52 = $50;$53 = 0;
   } else {
    $52 = $43;$53 = $40;
   }
   $51 = (($52) + ($53)|0);
   $54 = (($53) + ($24))|0;
   HEAP32[$25>>2] = $54;
   $55 = (($17) + ($j$023<<2)|0);
   HEAP32[$55>>2] = $51;
   $56 = (($j$023) + 1)|0;
   $exitcond = ($56|0)==($ch|0);
   if ($exitcond) {
    break;
   } else {
    $40 = $54;$43 = $52;$j$023 = $56;
   }
  }
 }
 $30 = (($vl) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)>(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = ($15|0)>(0);
 $34 = (($vb) + 4|0);
 $35 = (($0) + 16|0);
 $36 = (($vl) + 28|0);
 $37 = ($5|0)>(0);
 $38 = (($vl) + 20|0);
 $$not29 = $18 ^ 1;
 $120 = $31;$s$021 = 0;
 L18: while(1) {
  if ($33) {
   $57 = 1 << $s$021;
   $$not = ($s$021|0)!=(0);
   $brmerge = $$not | $$not29;
   $i$016 = 0;$l$013 = 0;
   while(1) {
    if (!($brmerge)) {
     $j$12 = 0;
     while(1) {
      $60 = HEAP32[$3>>2]|0;
      $61 = (($60) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)>(0);
      if (!($63)) {
       label = 32;
       break L18;
      }
      $64 = (_decode_packed_entry_number($60,$34)|0);
      $65 = ($64|0)>(-1);
      if (!($65)) {
       label = 32;
       break L18;
      }
      $66 = (($60) + 24|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + ($64<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(-1);
      if ($70) {
       label = 32;
       break L18;
      }
      $71 = HEAP32[$35>>2]|0;
      $72 = ($69|0)<($71|0);
      if (!($72)) {
       label = 32;
       break L18;
      }
      $73 = HEAP32[$36>>2]|0;
      $74 = (($73) + ($69<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($17) + ($j$12<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + ($l$013<<2)|0);
      HEAP32[$78>>2] = $75;
      $79 = ($75|0)==(0|0);
      $58 = (($j$12) + 1)|0;
      if ($79) {
       label = 32;
       break L18;
      }
      $59 = ($58|0)<($ch|0);
      if ($59) {
       $j$12 = $58;
      } else {
       break;
      }
     }
    }
    $80 = ($i$016|0)<($15|0);
    $or$cond9 = $37 & $80;
    L33: do {
     if ($or$cond9) {
      if ($18) {
       $i$111$us = $i$016;$k$010$us = 0;
      } else {
       $i$111 = $i$016;$k$010 = 0;
       while(1) {
        $111 = (($k$010) + 1)|0;
        $112 = (($i$111) + 1)|0;
        $113 = ($111|0)<($5|0);
        $114 = ($112|0)<($15|0);
        $or$cond = $113 & $114;
        if ($or$cond) {
         $i$111 = $112;$k$010 = $111;
        } else {
         $i$1$lcssa = $112;
         break L33;
        }
       }
      }
      while(1) {
       $87 = Math_imul($i$111$us, $2)|0;
       $j$25$us = 0;
       while(1) {
        $85 = HEAP32[$0>>2]|0;
        $86 = (($85) + ($87))|0;
        $88 = (($17) + ($j$25$us<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (($89) + ($l$013<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (($91) + ($k$010$us<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ((($0) + ($93<<2)|0) + 24|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $95 & $57;
        $97 = ($96|0)==(0);
        if (!($97)) {
         $98 = HEAP32[$38>>2]|0;
         $99 = (($98) + ($93<<2)|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (($100) + ($s$021<<2)|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = ($102|0)==(0|0);
         if (!($103)) {
          $104 = (($in) + ($j$25$us<<2)|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = (($105) + ($86<<2)|0);
          $107 = (FUNCTION_TABLE_iiiii[$decodepart & 127]($102,$106,$34,$2)|0);
          $108 = ($107|0)==(-1);
          if ($108) {
           label = 32;
           break L18;
          }
         }
        }
        $109 = (($j$25$us) + 1)|0;
        $110 = ($109|0)<($ch|0);
        if ($110) {
         $j$25$us = $109;
        } else {
         break;
        }
       }
       $81 = (($k$010$us) + 1)|0;
       $82 = (($i$111$us) + 1)|0;
       $83 = ($81|0)<($5|0);
       $84 = ($82|0)<($15|0);
       $or$cond$us = $83 & $84;
       if ($or$cond$us) {
        $i$111$us = $82;$k$010$us = $81;
       } else {
        $i$1$lcssa = $82;
        break;
       }
      }
     } else {
      $i$1$lcssa = $i$016;
     }
    } while(0);
    $115 = (($l$013) + 1)|0;
    $116 = ($i$1$lcssa|0)<($15|0);
    if ($116) {
     $i$016 = $i$1$lcssa;$l$013 = $115;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$30>>2]|0;
   $119 = $$pre;
  } else {
   $119 = $120;
  }
  $117 = (($s$021) + 1)|0;
  $118 = ($117|0)<($119|0);
  if ($118) {
   $120 = $119;$s$021 = $117;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  STACKTOP = sp;return;
 }
}
function _res1_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  STACKTOP = sp;return 0;
 }
 __01forward($opb,$vl,$in,$used$1,$partword);
 STACKTOP = sp;return 0;
}
function __01forward($opb,$vl,$in,$ch,$partword) {
 $opb = $opb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $partword = $partword|0;
 var $$$i$i = 0, $$0$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$03$i$i = 0, $$1$i$i = 0, $$lcssa$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre42 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best$017$i$i = 0, $best$1$i$i = 0, $bits$0$lcssa$i = 0, $bits$08$i = 0;
 var $brmerge$demorgan = 0, $e$i$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond15$i = 0, $exitcond34 = 0, $exitcond36 = 0, $exitcond37 = 0, $exitcond38 = 0, $exitcond38$i$i = 0, $exitcond42$i$i = 0, $exitcond44$i$i = 0, $i$024 = 0, $i$034$i$i = 0, $i$09$i = 0, $i$1$lcssa = 0, $i$121 = 0, $i$127$i$i = 0, $i$218$i$i = 0;
 var $i$32$i$i = 0, $index$032$i$i = 0, $index$125$i$i = 0, $index$2$i$i = 0, $index$316$i$i = 0, $index$4$i$i = 0, $index$5$i$i = 0, $j$05$i$i = 0, $j$06 = 0, $j$06$us = 0, $j$114 = 0, $j$19$i$i = 0, $k$05$us = 0, $k$120 = 0, $o$033$i$i = 0, $o$126$i$i = 0, $or$cond$i$i = 0, $or$cond19 = 0, $or$cond48$i$i = 0, $p$i$i = 0;
 var $phitmp = 0, $resbits = 0, $resvals = 0, $s$026 = 0, $this$0$lcssa$i$i = 0, $this$06$i$i = 0, $umax = 0, $val$04$us = 0, $val$1$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $p$i$i = sp + 1056|0;
 $e$i$i = sp + 1024|0;
 $resbits = sp + 512|0;
 $resvals = sp;
 $0 = HEAP32[$vl>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($vl) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / ($2|0))&-1;
 _memset(($resbits|0),0,512)|0;
 _memset(($resvals|0),0,512)|0;
 $13 = (($vl) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ($12|0)>(0);
 $17 = ($ch|0)>(0);
 $18 = ($7|0)>(1);
 $19 = (($vl) + 36|0);
 $20 = ($7|0)>(0);
 $21 = (($vl) + 20|0);
 $22 = (($vl) + 32|0);
 $23 = (0 - ($7))|0;
 $261 = $14;$s$026 = 0;
 while(1) {
  if ($16) {
   $24 = ($s$026|0)==(0);
   $25 = 1 << $s$026;
   $brmerge$demorgan = $24 & $17;
   $i$024 = 0;
   while(1) {
    L10: do {
     if ($brmerge$demorgan) {
      if ($18) {
       $j$06$us = 0;
      } else {
       $j$06 = 0;
       while(1) {
        $67 = (($partword) + ($j$06<<2)|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($68) + ($i$024<<2)|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = HEAP32[$5>>2]|0;
        $72 = (($71) + 4|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ($70|0)<($73|0);
        if ($74) {
         $75 = ($70|0)<(0);
         if ($75) {
          $$0$i1 = 0;
         } else {
          $76 = (($71) + 12|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = (($77) + 4|0);
          $79 = HEAP32[$78>>2]|0;
          $80 = ($79|0)>($70|0);
          if ($80) {
           $81 = (($71) + 20|0);
           $82 = HEAP32[$81>>2]|0;
           $83 = (($82) + ($70<<2)|0);
           $84 = HEAP32[$83>>2]|0;
           $85 = (($77) + 8|0);
           $86 = HEAP32[$85>>2]|0;
           $87 = (($86) + ($70)|0);
           $88 = HEAP8[$87>>0]|0;
           $89 = $88 << 24 >> 24;
           _oggpack_write($opb,$84,$89);
           $90 = HEAP32[$76>>2]|0;
           $91 = (($90) + 8|0);
           $92 = HEAP32[$91>>2]|0;
           $93 = (($92) + ($70)|0);
           $94 = HEAP8[$93>>0]|0;
           $95 = $94 << 24 >> 24;
           $$0$i1 = $95;
          } else {
           $$0$i1 = 0;
          }
         }
         $96 = HEAP32[$19>>2]|0;
         $97 = (($96) + ($$0$i1))|0;
         HEAP32[$19>>2] = $97;
        }
        $98 = (($j$06) + 1)|0;
        $exitcond = ($98|0)==($ch|0);
        if ($exitcond) {
         break L10;
        } else {
         $j$06 = $98;
        }
       }
      }
      while(1) {
       $64 = (($partword) + ($j$06$us<<2)|0);
       $60 = HEAP32[$64>>2]|0;
       $65 = (($60) + ($i$024<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $k$05$us = 1;$val$04$us = $66;
       while(1) {
        $56 = Math_imul($val$04$us, $4)|0;
        $57 = (($k$05$us) + ($i$024))|0;
        $58 = ($57|0)<($12|0);
        if ($58) {
         $59 = (($60) + ($57<<2)|0);
         $61 = HEAP32[$59>>2]|0;
         $62 = (($61) + ($56))|0;
         $val$1$us = $62;
        } else {
         $val$1$us = $56;
        }
        $63 = (($k$05$us) + 1)|0;
        $exitcond37 = ($63|0)==($7|0);
        if ($exitcond37) {
         break;
        } else {
         $k$05$us = $63;$val$04$us = $val$1$us;
        }
       }
       $28 = HEAP32[$5>>2]|0;
       $29 = (($28) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($val$1$us|0)<($30|0);
       if ($31) {
        $32 = ($val$1$us|0)<(0);
        if ($32) {
         $$0$i = 0;
        } else {
         $33 = (($28) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = (($34) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($36|0)>($val$1$us|0);
         if ($37) {
          $38 = (($28) + 20|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($39) + ($val$1$us<<2)|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = (($34) + 8|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = (($43) + ($val$1$us)|0);
          $45 = HEAP8[$44>>0]|0;
          $46 = $45 << 24 >> 24;
          _oggpack_write($opb,$41,$46);
          $47 = HEAP32[$33>>2]|0;
          $48 = (($47) + 8|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = (($49) + ($val$1$us)|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = $51 << 24 >> 24;
          $$0$i = $52;
         } else {
          $$0$i = 0;
         }
        }
        $53 = HEAP32[$19>>2]|0;
        $54 = (($53) + ($$0$i))|0;
        HEAP32[$19>>2] = $54;
       }
       $55 = (($j$06$us) + 1)|0;
       $exitcond38 = ($55|0)==($ch|0);
       if ($exitcond38) {
        break;
       } else {
        $j$06$us = $55;
       }
      }
     }
    } while(0);
    $99 = ($i$024|0)<($12|0);
    $or$cond19 = $20 & $99;
    if ($or$cond19) {
     $100 = (($i$024) - ($12))|0;
     $101 = ($100>>>0)<($23>>>0);
     $umax = $101 ? $23 : $100;
     $102 = (0 - ($umax))|0;
     $i$121 = $i$024;$k$120 = 1;
     while(1) {
      $103 = Math_imul($i$121, $2)|0;
      $104 = HEAP32[$0>>2]|0;
      $105 = (($104) + ($103))|0;
      if ($17) {
       $j$114 = 0;
       while(1) {
        $106 = (($partword) + ($j$114<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = (($107) + ($i$121<<2)|0);
        $109 = HEAP32[$108>>2]|0;
        if ($24) {
         $110 = (($resvals) + ($109<<2)|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = (($111) + ($2))|0;
         HEAP32[$110>>2] = $112;
        }
        $113 = ((($0) + ($109<<2)|0) + 24|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = $114 & $25;
        $116 = ($115|0)==(0);
        if (!($116)) {
         $117 = HEAP32[$21>>2]|0;
         $118 = (($117) + ($109<<2)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = (($119) + ($s$026<<2)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0|0);
         if (!($122)) {
          $123 = (($in) + ($j$114<<2)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = HEAP32[$121>>2]|0;
          $126 = (($2|0) / ($125|0))&-1;
          $127 = ($126|0)>(0);
          if ($127) {
           $128 = (($121) + 48|0);
           $129 = (($121) + 52|0);
           $130 = (($121) + 44|0);
           $131 = (($121) + 12|0);
           $132 = (($121) + 4|0);
           $133 = (($121) + 20|0);
           $141 = $125;$bits$08$i = 0;$i$09$i = 0;
           while(1) {
            $134 = Math_imul($i$09$i, $125)|0;
            $$sum = (($134) + ($105))|0;
            $135 = (($124) + ($$sum<<2)|0);
            $136 = HEAP32[$128>>2]|0;
            $137 = HEAP32[$129>>2]|0;
            $138 = HEAP32[$130>>2]|0;
            $139 = $138 >> 1;
            ;HEAP32[$p$i$i+0>>2]=0|0;HEAP32[$p$i$i+4>>2]=0|0;HEAP32[$p$i$i+8>>2]=0|0;HEAP32[$p$i$i+12>>2]=0|0;HEAP32[$p$i$i+16>>2]=0|0;HEAP32[$p$i$i+20>>2]=0|0;HEAP32[$p$i$i+24>>2]=0|0;HEAP32[$p$i$i+28>>2]=0|0;
            $140 = ($137|0)==(1);
            $142 = ($141|0)>(0);
            do {
             if ($140) {
              if (!($142)) {
               $index$2$i$i = 0;
               break;
              }
              $146 = (($138) + -1)|0;
              $i$127$i$i = 0;$index$125$i$i = 0;$o$126$i$i = $141;
              while(1) {
               $168 = (($o$126$i$i) + -1)|0;
               $$sum3 = (($$sum) + ($168))|0;
               $169 = (($124) + ($$sum3<<2)|0);
               $170 = HEAP32[$169>>2]|0;
               $171 = (($170) - ($136))|0;
               $172 = ($171|0)<($139|0);
               if ($172) {
                $173 = (($139) - ($171))|0;
                $174 = $173 << 1;
                $175 = (($174) + -1)|0;
                $179 = $175;
               } else {
                $176 = (($171) - ($139))|0;
                $177 = $176 << 1;
                $179 = $177;
               }
               $178 = Math_imul($index$125$i$i, $138)|0;
               $180 = ($179|0)<(0);
               if ($180) {
                $183 = 0;
               } else {
                $181 = ($179|0)<($138|0);
                $$1$i$i = $181 ? $179 : $146;
                $183 = $$1$i$i;
               }
               $182 = (($183) + ($178))|0;
               $184 = (($p$i$i) + ($168<<2)|0);
               HEAP32[$184>>2] = $170;
               $185 = (($i$127$i$i) + 1)|0;
               $exitcond42$i$i = ($185|0)==($141|0);
               if ($exitcond42$i$i) {
                $index$2$i$i = $182;
                break;
               } else {
                $i$127$i$i = $185;$index$125$i$i = $182;$o$126$i$i = $168;
               }
              }
             } else {
              if (!($142)) {
               $index$2$i$i = 0;
               break;
              }
              $143 = $137 >> 1;
              $144 = (($143) - ($136))|0;
              $145 = (($138) + -1)|0;
              $i$034$i$i = 0;$index$032$i$i = 0;$o$033$i$i = $141;
              while(1) {
               $147 = (($o$033$i$i) + -1)|0;
               $$sum2 = (($$sum) + ($147))|0;
               $148 = (($124) + ($$sum2<<2)|0);
               $149 = HEAP32[$148>>2]|0;
               $150 = (($144) + ($149))|0;
               $151 = (($150|0) / ($137|0))&-1;
               $152 = ($151|0)<($139|0);
               if ($152) {
                $153 = (($139) - ($151))|0;
                $154 = $153 << 1;
                $155 = (($154) + -1)|0;
                $159 = $155;
               } else {
                $156 = (($151) - ($139))|0;
                $157 = $156 << 1;
                $159 = $157;
               }
               $158 = Math_imul($index$032$i$i, $138)|0;
               $160 = ($159|0)<(0);
               if ($160) {
                $163 = 0;
               } else {
                $161 = ($159|0)<($138|0);
                $$$i$i = $161 ? $159 : $145;
                $163 = $$$i$i;
               }
               $162 = (($163) + ($158))|0;
               $164 = Math_imul($151, $137)|0;
               $165 = (($164) + ($136))|0;
               $166 = (($p$i$i) + ($147<<2)|0);
               HEAP32[$166>>2] = $165;
               $167 = (($i$034$i$i) + 1)|0;
               $exitcond44$i$i = ($167|0)==($141|0);
               if ($exitcond44$i$i) {
                $index$2$i$i = $162;
                break;
               } else {
                $i$034$i$i = $167;$index$032$i$i = $162;$o$033$i$i = $147;
               }
              }
             }
            } while(0);
            $186 = HEAP32[$131>>2]|0;
            $187 = (($186) + 8|0);
            $188 = HEAP32[$187>>2]|0;
            $189 = (($188) + ($index$2$i$i)|0);
            $190 = HEAP8[$189>>0]|0;
            $191 = ($190<<24>>24)<(1);
            do {
             if ($191) {
              ;HEAP32[$e$i$i+0>>2]=0|0;HEAP32[$e$i$i+4>>2]=0|0;HEAP32[$e$i$i+8>>2]=0|0;HEAP32[$e$i$i+12>>2]=0|0;HEAP32[$e$i$i+16>>2]=0|0;HEAP32[$e$i$i+20>>2]=0|0;HEAP32[$e$i$i+24>>2]=0|0;HEAP32[$e$i$i+28>>2]=0|0;
              $192 = (($138) + -1)|0;
              $193 = Math_imul($192, $137)|0;
              $194 = (($193) + ($136))|0;
              $195 = HEAP32[$132>>2]|0;
              $196 = ($195|0)>(0);
              if ($196) {
               $best$017$i$i = -1;$i$218$i$i = 0;$index$316$i$i = $index$2$i$i;
              } else {
               $index$5$i$i = $index$2$i$i;
               break;
              }
              while(1) {
               $197 = (($188) + ($i$218$i$i)|0);
               $198 = HEAP8[$197>>0]|0;
               $199 = ($198<<24>>24)>(0);
               do {
                if ($199) {
                 if ($142) {
                  $j$05$i$i = 0;$this$06$i$i = 0;
                  while(1) {
                   $200 = (($e$i$i) + ($j$05$i$i<<2)|0);
                   $201 = HEAP32[$200>>2]|0;
                   $$sum1 = (($$sum) + ($j$05$i$i))|0;
                   $202 = (($124) + ($$sum1<<2)|0);
                   $203 = HEAP32[$202>>2]|0;
                   $204 = (($201) - ($203))|0;
                   $205 = Math_imul($204, $204)|0;
                   $206 = (($205) + ($this$06$i$i))|0;
                   $207 = (($j$05$i$i) + 1)|0;
                   $exitcond38$i$i = ($207|0)==($141|0);
                   if ($exitcond38$i$i) {
                    $this$0$lcssa$i$i = $206;
                    break;
                   } else {
                    $j$05$i$i = $207;$this$06$i$i = $206;
                   }
                  }
                 } else {
                  $this$0$lcssa$i$i = 0;
                 }
                 $208 = ($best$017$i$i|0)==(-1);
                 $209 = ($this$0$lcssa$i$i|0)<($best$017$i$i|0);
                 $or$cond$i$i = $208 | $209;
                 if (!($or$cond$i$i)) {
                  $best$1$i$i = $best$017$i$i;$index$4$i$i = $index$316$i$i;
                  break;
                 }
                 ;HEAP32[$p$i$i+0>>2]=HEAP32[$e$i$i+0>>2]|0;HEAP32[$p$i$i+4>>2]=HEAP32[$e$i$i+4>>2]|0;HEAP32[$p$i$i+8>>2]=HEAP32[$e$i$i+8>>2]|0;HEAP32[$p$i$i+12>>2]=HEAP32[$e$i$i+12>>2]|0;HEAP32[$p$i$i+16>>2]=HEAP32[$e$i$i+16>>2]|0;HEAP32[$p$i$i+20>>2]=HEAP32[$e$i$i+20>>2]|0;HEAP32[$p$i$i+24>>2]=HEAP32[$e$i$i+24>>2]|0;HEAP32[$p$i$i+28>>2]=HEAP32[$e$i$i+28>>2]|0;
                 $best$1$i$i = $this$0$lcssa$i$i;$index$4$i$i = $i$218$i$i;
                } else {
                 $best$1$i$i = $best$017$i$i;$index$4$i$i = $index$316$i$i;
                }
               } while(0);
               $210 = HEAP32[$e$i$i>>2]|0;
               $211 = ($210|0)<($194|0);
               if ($211) {
                $$lcssa$i$i = $e$i$i;$217 = $210;
               } else {
                $213 = $e$i$i;$j$19$i$i = 0;
                while(1) {
                 $212 = (($j$19$i$i) + 1)|0;
                 HEAP32[$213>>2] = 0;
                 $214 = (($e$i$i) + ($212<<2)|0);
                 $215 = HEAP32[$214>>2]|0;
                 $216 = ($215|0)<($194|0);
                 if ($216) {
                  $$lcssa$i$i = $214;$217 = $215;
                  break;
                 } else {
                  $213 = $214;$j$19$i$i = $212;
                 }
                }
               }
               $218 = ($217|0)>(-1);
               if ($218) {
                $219 = (($137) + ($217))|0;
                HEAP32[$$lcssa$i$i>>2] = $219;
                $221 = $219;
               } else {
                $221 = $217;
               }
               $220 = (0 - ($221))|0;
               HEAP32[$$lcssa$i$i>>2] = $220;
               $222 = (($i$218$i$i) + 1)|0;
               $exitcond$i = ($222|0)==($195|0);
               if ($exitcond$i) {
                $index$5$i$i = $index$4$i$i;
                break;
               } else {
                $best$017$i$i = $best$1$i$i;$i$218$i$i = $222;$index$316$i$i = $index$4$i$i;
               }
              }
             } else {
              $index$5$i$i = $index$2$i$i;
             }
            } while(0);
            $223 = ($index$5$i$i|0)>(-1);
            $or$cond48$i$i = $223 & $142;
            if ($or$cond48$i$i) {
             $$03$i$i = $135;$i$32$i$i = 0;
             while(1) {
              $224 = (($p$i$i) + ($i$32$i$i<<2)|0);
              $225 = HEAP32[$224>>2]|0;
              $226 = (($$03$i$i) + 4|0);
              $227 = HEAP32[$$03$i$i>>2]|0;
              $228 = (($227) - ($225))|0;
              HEAP32[$$03$i$i>>2] = $228;
              $229 = (($i$32$i$i) + 1)|0;
              $exitcond$i$i = ($229|0)==($141|0);
              if ($exitcond$i$i) {
               break;
              } else {
               $$03$i$i = $226;$i$32$i$i = $229;
              }
             }
            }
            $230 = ($index$5$i$i|0)<(0);
            do {
             if ($230) {
              $$0$i3 = 0;
             } else {
              $231 = (($186) + 4|0);
              $232 = HEAP32[$231>>2]|0;
              $233 = ($232|0)>($index$5$i$i|0);
              if (!($233)) {
               $$0$i3 = 0;
               break;
              }
              $234 = HEAP32[$133>>2]|0;
              $235 = (($234) + ($index$5$i$i<<2)|0);
              $236 = HEAP32[$235>>2]|0;
              $237 = (($188) + ($index$5$i$i)|0);
              $238 = HEAP8[$237>>0]|0;
              $239 = $238 << 24 >> 24;
              _oggpack_write($opb,$236,$239);
              $240 = HEAP32[$131>>2]|0;
              $241 = (($240) + 8|0);
              $242 = HEAP32[$241>>2]|0;
              $243 = (($242) + ($index$5$i$i)|0);
              $244 = HEAP8[$243>>0]|0;
              $245 = $244 << 24 >> 24;
              $$0$i3 = $245;
             }
            } while(0);
            $246 = (($$0$i3) + ($bits$08$i))|0;
            $247 = (($i$09$i) + 1)|0;
            $exitcond15$i = ($247|0)==($126|0);
            if ($exitcond15$i) {
             break;
            }
            $$pre$i = HEAP32[$121>>2]|0;
            $141 = $$pre$i;$bits$08$i = $246;$i$09$i = $247;
           }
           $$pre = HEAP32[$106>>2]|0;
           $251 = $$pre;$bits$0$lcssa$i = $246;
          } else {
           $251 = $107;$bits$0$lcssa$i = 0;
          }
          $248 = HEAP32[$22>>2]|0;
          $249 = (($248) + ($bits$0$lcssa$i))|0;
          HEAP32[$22>>2] = $249;
          $250 = (($251) + ($i$121<<2)|0);
          $252 = HEAP32[$250>>2]|0;
          $253 = (($resbits) + ($252<<2)|0);
          $254 = HEAP32[$253>>2]|0;
          $255 = (($254) + ($bits$0$lcssa$i))|0;
          HEAP32[$253>>2] = $255;
         }
        }
        $256 = (($j$114) + 1)|0;
        $exitcond34 = ($256|0)==($ch|0);
        if ($exitcond34) {
         break;
        } else {
         $j$114 = $256;
        }
       }
      }
      $exitcond36 = ($k$120|0)==($102|0);
      if ($exitcond36) {
       break;
      }
      $257 = (($i$121) + 1)|0;
      $phitmp = (($k$120) + 1)|0;
      $i$121 = $257;$k$120 = $phitmp;
     }
     $26 = (($i$024) - ($umax))|0;
     $i$1$lcssa = $26;
    } else {
     $i$1$lcssa = $i$024;
    }
    $27 = ($i$1$lcssa|0)<($12|0);
    if ($27) {
     $i$024 = $i$1$lcssa;
    } else {
     break;
    }
   }
   $$pre42 = HEAP32[$13>>2]|0;
   $260 = $$pre42;
  } else {
   $260 = $261;
  }
  $258 = (($s$026) + 1)|0;
  $259 = ($258|0)<($260|0);
  if ($259) {
   $261 = $260;$s$026 = $258;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _res1_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$max$0$i = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ent$0$lcssa$i = 0.0, $ent$07$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond26$i = 0, $exitcond27$i = 0, $exitcond28$i = 0, $i$02 = 0, $i$021$i = 0, $i$118$i = 0;
 var $ispos$i = 0, $j$015$i = 0, $k$05$i = 0, $k$1$lcssa$i = 0, $k$19$i = 0, $max$0$lcssa$i = 0, $max$06$i = 0, $neg$i = 0, $or$cond$i = 0, $phitmp$i = 0.0, $used$03 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$02 = 0;$used$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$02<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$03;
  } else {
   $4 = (($in) + ($i$02<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$03) + 1)|0;
   $7 = (($in) + ($used$03<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$02) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $8;$used$03 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$vl>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($10) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / ($12|0))&-1;
 $20 = $used$1 << 2;
 $21 = (($20) + 7)|0;
 $22 = $21 & -8;
 $23 = (($vb) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 $26 = (($vb) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)>($27|0);
 $29 = (($vb) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 if ($28) {
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $32 = (_malloc(8)|0);
   $33 = (($vb) + 80|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($24))|0;
   HEAP32[$33>>2] = $35;
   $36 = (($vb) + 84|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($32) + 4|0);
   HEAP32[$38>>2] = $37;
   HEAP32[$32>>2] = $30;
   HEAP32[$36>>2] = $32;
  }
  HEAP32[$26>>2] = $22;
  $39 = (_malloc($22)|0);
  HEAP32[$29>>2] = $39;
  HEAP32[$23>>2] = 0;
  $41 = $39;$42 = 0;
 } else {
  $41 = $30;$42 = $24;
 }
 $40 = (($41) + ($42)|0);
 $43 = (($42) + ($22))|0;
 HEAP32[$23>>2] = $43;
 $44 = (+($12|0));
 $45 = 100.0 / $44;
 $46 = $45;
 $47 = ($used$1|0)>(0);
 L18: do {
  if ($47) {
   $48 = $19 << 2;
   $49 = (($48) + 7)|0;
   $50 = $49 & -8;
   $51 = (($vb) + 80|0);
   $52 = (($vb) + 84|0);
   $58 = $43;$61 = $41;$i$021$i = 0;
   while(1) {
    $57 = (($58) + ($50))|0;
    $59 = HEAP32[$26>>2]|0;
    $60 = ($57|0)>($59|0);
    if ($60) {
     $62 = ($61|0)==(0|0);
     if (!($62)) {
      $63 = (_malloc(8)|0);
      $64 = HEAP32[$51>>2]|0;
      $65 = (($64) + ($58))|0;
      HEAP32[$51>>2] = $65;
      $66 = HEAP32[$52>>2]|0;
      $67 = (($63) + 4|0);
      HEAP32[$67>>2] = $66;
      HEAP32[$63>>2] = $61;
      HEAP32[$52>>2] = $63;
     }
     HEAP32[$26>>2] = $50;
     $68 = (_malloc($50)|0);
     HEAP32[$29>>2] = $68;
     HEAP32[$23>>2] = 0;
     $70 = $68;$71 = 0;
    } else {
     $70 = $61;$71 = $58;
    }
    $69 = (($70) + ($71)|0);
    $72 = (($71) + ($50))|0;
    HEAP32[$23>>2] = $72;
    $73 = (($40) + ($i$021$i<<2)|0);
    HEAP32[$73>>2] = $69;
    _memset(($69|0),0,($48|0))|0;
    $74 = (($i$021$i) + 1)|0;
    $exitcond28$i = ($74|0)==($used$1|0);
    if ($exitcond28$i) {
     break L18;
    }
    $$pre = HEAP32[$23>>2]|0;
    $$pre4 = HEAP32[$29>>2]|0;
    $58 = $$pre;$61 = $$pre4;$i$021$i = $74;
   }
  }
 } while(0);
 $53 = ($19|0)>(0);
 if ($53) {
  $54 = ($12|0)>(0);
  $55 = (($14) + -1)|0;
  $56 = ($55|0)>(0);
  $i$118$i = 0;
  while(1) {
   $75 = Math_imul($i$118$i, $12)|0;
   $76 = HEAP32[$10>>2]|0;
   $77 = (($76) + ($75))|0;
   if ($47) {
    $j$015$i = 0;
    while(1) {
     if ($54) {
      $78 = (($in) + ($j$015$i<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $ent$07$i = 0;$k$05$i = 0;$max$06$i = 0;
      while(1) {
       $80 = (($77) + ($k$05$i))|0;
       $81 = (($79) + ($80<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $ispos$i = ($82|0)>(-1);
       $neg$i = (0 - ($82))|0;
       $83 = $ispos$i ? $82 : $neg$i;
       $84 = ($83|0)>($max$06$i|0);
       $$max$0$i = $84 ? $83 : $max$06$i;
       $85 = (($83) + ($ent$07$i))|0;
       $86 = (($k$05$i) + 1)|0;
       $exitcond$i = ($86|0)==($12|0);
       if ($exitcond$i) {
        break;
       } else {
        $ent$07$i = $85;$k$05$i = $86;$max$06$i = $$max$0$i;
       }
      }
      $phitmp$i = (+($85|0));
      $ent$0$lcssa$i = $phitmp$i;$max$0$lcssa$i = $$max$0$i;
     } else {
      $ent$0$lcssa$i = 0.0;$max$0$lcssa$i = 0;
     }
     $87 = $46 * $ent$0$lcssa$i;
     $88 = (~~(($87)));
     L43: do {
      if ($56) {
       $k$19$i = 0;
       while(1) {
        $89 = ((($10) + ($k$19$i<<2)|0) + 2328|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($max$0$lcssa$i|0)>($90|0);
        if (!($91)) {
         $92 = ((($10) + ($k$19$i<<2)|0) + 2584|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = ($93|0)<(0);
         $95 = ($88|0)<($93|0);
         $or$cond$i = $94 | $95;
         if ($or$cond$i) {
          $k$1$lcssa$i = $k$19$i;
          break L43;
         }
        }
        $96 = (($k$19$i) + 1)|0;
        $97 = ($96|0)<($55|0);
        if ($97) {
         $k$19$i = $96;
        } else {
         $k$1$lcssa$i = $96;
         break;
        }
       }
      } else {
       $k$1$lcssa$i = 0;
      }
     } while(0);
     $98 = (($40) + ($j$015$i<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + ($i$118$i<<2)|0);
     HEAP32[$100>>2] = $k$1$lcssa$i;
     $101 = (($j$015$i) + 1)|0;
     $exitcond26$i = ($101|0)==($used$1|0);
     if ($exitcond26$i) {
      break;
     } else {
      $j$015$i = $101;
     }
    }
   }
   $102 = (($i$118$i) + 1)|0;
   $exitcond27$i = ($102|0)==($19|0);
   if ($exitcond27$i) {
    break;
   } else {
    $i$118$i = $102;
   }
  }
 }
 $103 = (($vl) + 40|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 HEAP32[$103>>2] = $105;
 $$0 = $40;
 STACKTOP = sp;return ($$0|0);
}
function _res1_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  STACKTOP = sp;return 0;
 }
 __01inverse($vb,$vl,$in,$used$1,76);
 STACKTOP = sp;return 0;
}
function _res2_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$angmax$1$i = 0, $$magmax$0$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $angmax$0$lcssa$i = 0, $angmax$012$i = 0, $angmax$1$lcssa$i = 0, $angmax$18$i = 0, $exitcond = 0;
 var $exitcond$i = 0, $exitcond27$i = 0, $i$01 = 0, $i$023$i = 0, $ispos$i = 0, $ispos1$i = 0, $j$010$i = 0, $j$1$lcssa$i = 0, $j$117$i = 0, $k$07$i = 0, $l$022$i = 0, $l$1$lcssa$i = 0, $l$19$i = 0, $magmax$0$lcssa$i = 0, $magmax$011$i = 0, $neg$i = 0, $neg2$i = 0, $not$ = 0, $phitmp = 0, $used$0$ = 0;
 var $used$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $not$ = ($2|0)!=(0);
  $3 = $not$&1;
  $used$0$ = (($3) + ($used$02))|0;
  $4 = (($i$01) + 1)|0;
  $exitcond = ($4|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;$used$02 = $used$0$;
  }
 }
 $phitmp = ($used$0$|0)==(0);
 if ($phitmp) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$vl>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($5) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / ($7|0))&-1;
 $15 = (($vb) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 8)|0;
 $18 = (($vb) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)>($19|0);
 $21 = (($vb) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = (_malloc(8)|0);
   $25 = (($vb) + 80|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($16))|0;
   HEAP32[$25>>2] = $27;
   $28 = (($vb) + 84|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($24) + 4|0);
   HEAP32[$30>>2] = $29;
   HEAP32[$24>>2] = $22;
   HEAP32[$28>>2] = $24;
  }
  HEAP32[$18>>2] = 8;
  $31 = (_malloc(8)|0);
  HEAP32[$21>>2] = $31;
  HEAP32[$15>>2] = 0;
  $$pre = HEAP32[$18>>2]|0;
  $33 = $31;$34 = 0;$41 = $$pre;
 } else {
  $33 = $22;$34 = $16;$41 = $19;
 }
 $32 = (($33) + ($34)|0);
 $35 = (($34) + 8)|0;
 HEAP32[$15>>2] = $35;
 $36 = $14 << 2;
 $37 = (($36) + 7)|0;
 $38 = $37 & -8;
 $39 = (($35) + ($38))|0;
 $40 = ($39|0)>($41|0);
 if ($40) {
  $42 = ($33|0)==(0|0);
  if (!($42)) {
   $43 = (_malloc(8)|0);
   $44 = (($vb) + 80|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($35))|0;
   HEAP32[$44>>2] = $46;
   $47 = (($vb) + 84|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($43) + 4|0);
   HEAP32[$49>>2] = $48;
   HEAP32[$43>>2] = $33;
   HEAP32[$47>>2] = $43;
  }
  HEAP32[$18>>2] = $38;
  $50 = (_malloc($38)|0);
  HEAP32[$21>>2] = $50;
  HEAP32[$15>>2] = 0;
  $52 = $50;$53 = 0;
 } else {
  $52 = $33;$53 = $35;
 }
 $51 = (($52) + ($53)|0);
 $54 = (($53) + ($38))|0;
 HEAP32[$15>>2] = $54;
 HEAP32[$32>>2] = $51;
 _memset(($51|0),0,($36|0))|0;
 $55 = ($14|0)>(0);
 if ($55) {
  $56 = HEAP32[$5>>2]|0;
  $57 = (($56|0) / ($ch|0))&-1;
  $58 = ($7|0)>(0);
  $59 = (($9) + -1)|0;
  $60 = ($59|0)>(0);
  $61 = HEAP32[$32>>2]|0;
  $62 = ($ch|0)>(1);
  $i$023$i = 0;$l$022$i = $57;
  while(1) {
   if ($58) {
    $63 = HEAP32[$in>>2]|0;
    $angmax$012$i = 0;$j$010$i = 0;$l$19$i = $l$022$i;$magmax$011$i = 0;
    while(1) {
     $64 = (($63) + ($l$19$i<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $ispos$i = ($65|0)>(-1);
     $neg$i = (0 - ($65))|0;
     $66 = $ispos$i ? $65 : $neg$i;
     $67 = ($66|0)>($magmax$011$i|0);
     $$magmax$0$i = $67 ? $66 : $magmax$011$i;
     if ($62) {
      $angmax$18$i = $angmax$012$i;$k$07$i = 1;
      while(1) {
       $68 = (($in) + ($k$07$i<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (($69) + ($l$19$i<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $ispos1$i = ($71|0)>(-1);
       $neg2$i = (0 - ($71))|0;
       $72 = $ispos1$i ? $71 : $neg2$i;
       $73 = ($72|0)>($angmax$18$i|0);
       $$angmax$1$i = $73 ? $72 : $angmax$18$i;
       $74 = (($k$07$i) + 1)|0;
       $exitcond$i = ($74|0)==($ch|0);
       if ($exitcond$i) {
        $angmax$1$lcssa$i = $$angmax$1$i;
        break;
       } else {
        $angmax$18$i = $$angmax$1$i;$k$07$i = $74;
       }
      }
     } else {
      $angmax$1$lcssa$i = $angmax$012$i;
     }
     $75 = (($l$19$i) + 1)|0;
     $76 = (($j$010$i) + ($ch))|0;
     $77 = ($76|0)<($7|0);
     if ($77) {
      $angmax$012$i = $angmax$1$lcssa$i;$j$010$i = $76;$l$19$i = $75;$magmax$011$i = $$magmax$0$i;
     } else {
      $angmax$0$lcssa$i = $angmax$1$lcssa$i;$l$1$lcssa$i = $75;$magmax$0$lcssa$i = $$magmax$0$i;
      break;
     }
    }
   } else {
    $angmax$0$lcssa$i = 0;$l$1$lcssa$i = $l$022$i;$magmax$0$lcssa$i = 0;
   }
   L34: do {
    if ($60) {
     $j$117$i = 0;
     while(1) {
      $78 = ((($5) + ($j$117$i<<2)|0) + 2328|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($magmax$0$lcssa$i|0)>($79|0);
      if (!($80)) {
       $81 = ((($5) + ($j$117$i<<2)|0) + 2584|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($angmax$0$lcssa$i|0)>($82|0);
       if (!($83)) {
        $j$1$lcssa$i = $j$117$i;
        break L34;
       }
      }
      $84 = (($j$117$i) + 1)|0;
      $85 = ($84|0)<($59|0);
      if ($85) {
       $j$117$i = $84;
      } else {
       $j$1$lcssa$i = $84;
       break;
      }
     }
    } else {
     $j$1$lcssa$i = 0;
    }
   } while(0);
   $86 = (($61) + ($i$023$i<<2)|0);
   HEAP32[$86>>2] = $j$1$lcssa$i;
   $87 = (($i$023$i) + 1)|0;
   $exitcond27$i = ($87|0)==($14|0);
   if ($exitcond27$i) {
    break;
   } else {
    $i$023$i = $87;$l$022$i = $l$1$lcssa$i;
   }
  }
 }
 $88 = (($vl) + 40|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 1)|0;
 HEAP32[$88>>2] = $90;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _res2_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $j$01 = 0, $k$02 = 0, $not$ = 0, $phitmp = 0, $used$0$ = 0, $used$04 = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $work = sp;
 $0 = (($vb) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1|0) / 2)&-1;
 $3 = $ch << 2;
 $4 = Math_imul($3, $2)|0;
 $5 = (($4) + 7)|0;
 $6 = $5 & -8;
 $7 = (($vb) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 $10 = (($vb) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)>($11|0);
 $13 = (($vb) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 if ($12) {
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = (_malloc(8)|0);
   $17 = (($vb) + 80|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($8))|0;
   HEAP32[$17>>2] = $19;
   $20 = (($vb) + 84|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($16) + 4|0);
   HEAP32[$22>>2] = $21;
   HEAP32[$16>>2] = $14;
   HEAP32[$20>>2] = $16;
  }
  HEAP32[$10>>2] = $6;
  $23 = (_malloc($6)|0);
  HEAP32[$13>>2] = $23;
  HEAP32[$7>>2] = 0;
  $25 = $23;$26 = 0;
 } else {
  $25 = $14;$26 = $8;
 }
 $24 = (($25) + ($26)|0);
 $27 = (($26) + ($6))|0;
 HEAP32[$7>>2] = $27;
 HEAP32[$work>>2] = $24;
 $28 = ($ch|0)>(0);
 if (!($28)) {
  STACKTOP = sp;return 0;
 }
 $29 = ($1|0)>(1);
 $i$03 = 0;$used$04 = 0;
 while(1) {
  $30 = (($in) + ($i$03<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($nonzero) + ($i$03<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $not$ = ($33|0)!=(0);
  $34 = $not$&1;
  $used$0$ = (($34) + ($used$04))|0;
  if ($29) {
   $j$01 = 0;$k$02 = $i$03;
   while(1) {
    $35 = (($31) + ($j$01<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($24) + ($k$02<<2)|0);
    HEAP32[$37>>2] = $36;
    $38 = (($j$01) + 1)|0;
    $39 = (($k$02) + ($ch))|0;
    $40 = ($38|0)<($2|0);
    if ($40) {
     $j$01 = $38;$k$02 = $39;
    } else {
     break;
    }
   }
  }
  $41 = (($i$03) + 1)|0;
  $exitcond = ($41|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $41;$used$04 = $used$0$;
  }
 }
 $phitmp = ($used$0$|0)==(0);
 if ($phitmp) {
  STACKTOP = sp;return 0;
 }
 __01forward($opb,$vl,$work,1,$partword);
 STACKTOP = sp;return 0;
}
function _res2_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$i$1$i = 0, $$pre = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $chptr$07$i = 0, $chptr$1$lcssa$i = 0, $chptr$13$i = 0, $i$0$lcssa = 0, $i$014 = 0, $i$06$i = 0, $i$1$lcssa$i = 0, $i$12$i = 0, $i$18 = 0, $i$2$lcssa = 0, $i$24 = 0, $j$01$i = 0, $k$03 = 0, $l$07 = 0, $or$cond = 0, $or$cond2 = 0, $s$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($vl) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($vb) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $ch)|0;
 $9 = $8 >> 1;
 $10 = (($0) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($9|0);
 $$ = $12 ? $11 : $9;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($$) - ($13))|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  STACKTOP = sp;return 0;
 }
 $16 = (($14|0) / ($2|0))&-1;
 $17 = (($5) + -1)|0;
 $18 = (($17) + ($16))|0;
 $19 = (($18|0) / ($5|0))&-1;
 $20 = $19 << 2;
 $21 = (($20) + 7)|0;
 $22 = $21 & -8;
 $23 = (($vb) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 $26 = (($vb) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)>($27|0);
 $29 = (($vb) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 if ($28) {
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $32 = (_malloc(8)|0);
   $33 = (($vb) + 80|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($24))|0;
   HEAP32[$33>>2] = $35;
   $36 = (($vb) + 84|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($32) + 4|0);
   HEAP32[$38>>2] = $37;
   HEAP32[$32>>2] = $30;
   HEAP32[$36>>2] = $32;
  }
  HEAP32[$26>>2] = $22;
  $39 = (_malloc($22)|0);
  HEAP32[$29>>2] = $39;
  HEAP32[$23>>2] = 0;
  $41 = $39;$42 = 0;
 } else {
  $41 = $30;$42 = $24;
 }
 $40 = (($41) + ($42)|0);
 $43 = (($42) + ($22))|0;
 HEAP32[$23>>2] = $43;
 $44 = ($ch|0)>(0);
 L10: do {
  if ($44) {
   $i$014 = 0;
   while(1) {
    $47 = (($nonzero) + ($i$014<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0);
    $45 = (($i$014) + 1)|0;
    if (!($49)) {
     $i$0$lcssa = $i$014;
     break L10;
    }
    $46 = ($45|0)<($ch|0);
    if ($46) {
     $i$014 = $45;
    } else {
     $i$0$lcssa = $45;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;
  }
 } while(0);
 $50 = ($i$0$lcssa|0)==($ch|0);
 if ($50) {
  STACKTOP = sp;return 0;
 }
 $51 = (($vl) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)>(0);
 if (!($53)) {
  STACKTOP = sp;return 0;
 }
 $54 = ($16|0)>(0);
 $55 = (($vb) + 4|0);
 $56 = (($0) + 16|0);
 $57 = (($vl) + 28|0);
 $58 = ($5|0)>(0);
 $59 = (($vl) + 20|0);
 $134 = $52;$s$012 = 0;
 L21: while(1) {
  if ($54) {
   $60 = ($s$012|0)==(0);
   $61 = 1 << $s$012;
   $i$18 = 0;$l$07 = 0;
   while(1) {
    if ($60) {
     $62 = HEAP32[$3>>2]|0;
     $63 = (($62) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)>(0);
     if (!($65)) {
      label = 35;
      break L21;
     }
     $66 = (_decode_packed_entry_number($62,$55)|0);
     $67 = ($66|0)>(-1);
     if (!($67)) {
      label = 35;
      break L21;
     }
     $68 = (($62) + 24|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($66<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==(-1);
     if ($72) {
      label = 35;
      break L21;
     }
     $73 = HEAP32[$56>>2]|0;
     $74 = ($71|0)<($73|0);
     if (!($74)) {
      label = 35;
      break L21;
     }
     $75 = HEAP32[$57>>2]|0;
     $76 = (($75) + ($71<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($40) + ($l$07<<2)|0);
     HEAP32[$78>>2] = $77;
     $79 = ($77|0)==(0|0);
     if ($79) {
      label = 35;
      break L21;
     }
    }
    $80 = ($i$18|0)<($16|0);
    $or$cond2 = $58 & $80;
    if ($or$cond2) {
     $81 = (($40) + ($l$07<<2)|0);
     $i$24 = $i$18;$k$03 = 0;
     while(1) {
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + ($k$03<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($0) + ($84<<2)|0) + 24|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 & $61;
      $88 = ($87|0)==(0);
      if (!($88)) {
       $89 = HEAP32[$59>>2]|0;
       $90 = (($89) + ($84<<2)|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (($91) + ($s$012<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)==(0|0);
       if (!($94)) {
        $95 = Math_imul($i$24, $2)|0;
        $96 = HEAP32[$0>>2]|0;
        $97 = (($96) + ($95))|0;
        $98 = (($93) + 8|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($99|0)>(0);
        if ($100) {
         $101 = (($97|0) / ($ch|0))&-1;
         $102 = (($2) + ($97))|0;
         $103 = (($102|0) / ($ch|0))&-1;
         $104 = ($101|0)<($103|0);
         if ($104) {
          $105 = (($93) + 16|0);
          $chptr$07$i = 0;$i$06$i = $101;
          while(1) {
           $107 = (_decode_packed_entry_number($93,$55)|0);
           $108 = ($107|0)==(-1);
           if ($108) {
            label = 35;
            break L21;
           }
           $109 = HEAP32[$105>>2]|0;
           $110 = HEAP32[$93>>2]|0;
           $111 = Math_imul($110, $107)|0;
           $112 = ($110|0)>(0);
           if ($112) {
            $chptr$13$i = $chptr$07$i;$i$12$i = $i$06$i;$j$01$i = 0;
            while(1) {
             $$sum$i = (($j$01$i) + ($111))|0;
             $113 = (($109) + ($$sum$i<<2)|0);
             $114 = +HEAPF32[$113>>2];
             $115 = (($chptr$13$i) + 1)|0;
             $116 = (($in) + ($chptr$13$i<<2)|0);
             $117 = HEAP32[$116>>2]|0;
             $118 = (($117) + ($i$12$i<<2)|0);
             $119 = +HEAPF32[$118>>2];
             $120 = $114 + $119;
             HEAPF32[$118>>2] = $120;
             $121 = ($115|0)==($ch|0);
             $122 = $121&1;
             $$i$1$i = (($122) + ($i$12$i))|0;
             $$$i = $121 ? 0 : $115;
             $123 = (($j$01$i) + 1)|0;
             $124 = ($123|0)<($110|0);
             if ($124) {
              $chptr$13$i = $$$i;$i$12$i = $$i$1$i;$j$01$i = $123;
             } else {
              $chptr$1$lcssa$i = $$$i;$i$1$lcssa$i = $$i$1$i;
              break;
             }
            }
           } else {
            $chptr$1$lcssa$i = $chptr$07$i;$i$1$lcssa$i = $i$06$i;
           }
           $106 = ($i$1$lcssa$i|0)<($103|0);
           if ($106) {
            $chptr$07$i = $chptr$1$lcssa$i;$i$06$i = $i$1$lcssa$i;
           } else {
            break;
           }
          }
         }
        }
       }
      }
      $125 = (($k$03) + 1)|0;
      $126 = (($i$24) + 1)|0;
      $127 = ($125|0)<($5|0);
      $128 = ($126|0)<($16|0);
      $or$cond = $127 & $128;
      if ($or$cond) {
       $i$24 = $126;$k$03 = $125;
      } else {
       $i$2$lcssa = $126;
       break;
      }
     }
    } else {
     $i$2$lcssa = $i$18;
    }
    $129 = (($l$07) + 1)|0;
    $130 = ($i$2$lcssa|0)<($16|0);
    if ($130) {
     $i$18 = $i$2$lcssa;$l$07 = $129;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$51>>2]|0;
   $133 = $$pre;
  } else {
   $133 = $134;
  }
  $131 = (($s$012) + 1)|0;
  $132 = ($131|0)<($133|0);
  if ($132) {
   $134 = $133;$s$012 = $131;
  } else {
   label = 35;
   break;
  }
 }
 if ((label|0) == 35) {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _mapping0_pack($vi,$vm,$opb) {
 $vi = $vi|0;
 $vm = $vm|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i3 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$012 = 0, $i$19 = 0, $i$27 = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i5 = 0, $ret$02$i = 0, $ret$02$i2 = 0, $v$$i = 0, $v$$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  _oggpack_write($opb,1,1);
  $2 = HEAP32[$vm>>2]|0;
  $3 = (($2) + -1)|0;
  _oggpack_write($opb,$3,4);
 } else {
  _oggpack_write($opb,0,1);
 }
 $4 = (($vm) + 1156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  _oggpack_write($opb,1,1);
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + -1)|0;
  _oggpack_write($opb,$8,8);
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = (($vm) + 1160|0);
   $12 = (($vi) + 4|0);
   $13 = (($vm) + 2184|0);
   $i$012 = 0;
   while(1) {
    $14 = (($11) + ($i$012<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$12>>2]|0;
    $17 = ($16|0)==(0);
    $18 = (($16) + -1)|0;
    $v$$i = $17 ? 0 : $18;
    $19 = ($v$$i|0)==(0);
    if ($19) {
     $ret$0$lcssa$i = 0;
    } else {
     $$01$i = $v$$i;$ret$02$i = 0;
     while(1) {
      $20 = (($ret$02$i) + 1)|0;
      $21 = $$01$i >>> 1;
      $22 = ($21|0)==(0);
      if ($22) {
       $ret$0$lcssa$i = $20;
       break;
      } else {
       $$01$i = $21;$ret$02$i = $20;
      }
     }
    }
    _oggpack_write($opb,$15,$ret$0$lcssa$i);
    $23 = (($13) + ($i$012<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$12>>2]|0;
    $26 = ($25|0)==(0);
    $27 = (($25) + -1)|0;
    $v$$i1 = $26 ? 0 : $27;
    $28 = ($v$$i1|0)==(0);
    if ($28) {
     $ret$0$lcssa$i5 = 0;
    } else {
     $$01$i3 = $v$$i1;$ret$02$i2 = 0;
     while(1) {
      $29 = (($ret$02$i2) + 1)|0;
      $30 = $$01$i3 >>> 1;
      $31 = ($30|0)==(0);
      if ($31) {
       $ret$0$lcssa$i5 = $29;
       break;
      } else {
       $$01$i3 = $30;$ret$02$i2 = $29;
      }
     }
    }
    _oggpack_write($opb,$24,$ret$0$lcssa$i5);
    $32 = (($i$012) + 1)|0;
    $33 = HEAP32[$4>>2]|0;
    $34 = ($32|0)<($33|0);
    if ($34) {
     $i$012 = $32;
    } else {
     break;
    }
   }
  }
 } else {
  _oggpack_write($opb,0,1);
 }
 _oggpack_write($opb,0,2);
 $35 = HEAP32[$vm>>2]|0;
 $36 = ($35|0)>(1);
 if ($36) {
  $37 = (($vi) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)>(0);
  if ($39) {
   $40 = (($vm) + 4|0);
   $i$19 = 0;
   while(1) {
    $45 = (($40) + ($i$19<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    _oggpack_write($opb,$46,4);
    $47 = (($i$19) + 1)|0;
    $48 = HEAP32[$37>>2]|0;
    $49 = ($47|0)<($48|0);
    if ($49) {
     $i$19 = $47;
    } else {
     break;
    }
   }
   $$pre$pre = HEAP32[$vm>>2]|0;
   $41 = $$pre$pre;
   label = 17;
  }
 } else {
  $41 = $35;
  label = 17;
 }
 if ((label|0) == 17) {
  $42 = ($41|0)>(0);
  if (!($42)) {
   STACKTOP = sp;return;
  }
 }
 $43 = (($vm) + 1028|0);
 $44 = (($vm) + 1092|0);
 $i$27 = 0;
 while(1) {
  _oggpack_write($opb,0,8);
  $50 = (($43) + ($i$27<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  _oggpack_write($opb,$51,8);
  $52 = (($44) + ($i$27<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  _oggpack_write($opb,$53,8);
  $54 = (($i$27) + 1)|0;
  $55 = HEAP32[$vm>>2]|0;
  $56 = ($54|0)<($55|0);
  if ($56) {
   $i$27 = $54;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _mapping0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $$01$i = 0, $$01$i8 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$020 = 0, $i$114 = 0, $i$212 = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i10 = 0;
 var $ret$02$i = 0, $ret$02$i7 = 0, $v$$i = 0, $v$$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(3208)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,3208)|0;
  }
 }
 $6 = (($vi) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 _memset(($0|0),0,3208)|0;
 $8 = (_oggpack_read($opb,1)|0);
 $9 = ($8|0)<(0);
 L5: do {
  if ($9) {
   label = 30;
  } else {
   $10 = ($8|0)==(0);
   if ($10) {
    HEAP32[$0>>2] = 1;
   } else {
    $11 = (_oggpack_read($opb,4)|0);
    $12 = (($11) + 1)|0;
    HEAP32[$0>>2] = $12;
    $13 = ($11|0)<(0);
    if ($13) {
     break;
    }
   }
   $14 = (_oggpack_read($opb,1)|0);
   $15 = ($14|0)<(0);
   if ($15) {
    label = 30;
   } else {
    $16 = ($14|0)==(0);
    if (!($16)) {
     $17 = (_oggpack_read($opb,8)|0);
     $18 = (($17) + 1)|0;
     $19 = (($0) + 1156|0);
     HEAP32[$19>>2] = $18;
     $20 = ($17|0)<(0);
     if ($20) {
      break;
     }
     $21 = (($vi) + 4|0);
     $22 = (($0) + 1160|0);
     $23 = (($0) + 2184|0);
     $$pre = HEAP32[$21>>2]|0;
     $27 = $$pre;$i$020 = 0;
     while(1) {
      $28 = ($27|0)==(0);
      $29 = (($27) + -1)|0;
      $v$$i = $28 ? 0 : $29;
      $30 = ($v$$i|0)==(0);
      if ($30) {
       $ret$0$lcssa$i = 0;
      } else {
       $$01$i = $v$$i;$ret$02$i = 0;
       while(1) {
        $31 = (($ret$02$i) + 1)|0;
        $32 = $$01$i >>> 1;
        $33 = ($32|0)==(0);
        if ($33) {
         $ret$0$lcssa$i = $31;
         break;
        } else {
         $$01$i = $32;$ret$02$i = $31;
        }
       }
      }
      $34 = (_oggpack_read($opb,$ret$0$lcssa$i)|0);
      $35 = (($22) + ($i$020<<2)|0);
      HEAP32[$35>>2] = $34;
      $36 = HEAP32[$21>>2]|0;
      $37 = ($36|0)==(0);
      $38 = (($36) + -1)|0;
      $v$$i6 = $37 ? 0 : $38;
      $39 = ($v$$i6|0)==(0);
      if ($39) {
       $ret$0$lcssa$i10 = 0;
      } else {
       $$01$i8 = $v$$i6;$ret$02$i7 = 0;
       while(1) {
        $40 = (($ret$02$i7) + 1)|0;
        $41 = $$01$i8 >>> 1;
        $42 = ($41|0)==(0);
        if ($42) {
         $ret$0$lcssa$i10 = $40;
         break;
        } else {
         $$01$i8 = $41;$ret$02$i7 = $40;
        }
       }
      }
      $43 = (_oggpack_read($opb,$ret$0$lcssa$i10)|0);
      $44 = (($23) + ($i$020<<2)|0);
      HEAP32[$44>>2] = $43;
      $45 = $43 | $34;
      $46 = ($45|0)<(0);
      $47 = ($34|0)==($43|0);
      $or$cond1 = $46 | $47;
      if ($or$cond1) {
       label = 30;
       break L5;
      }
      $48 = HEAP32[$21>>2]|0;
      $49 = ($34|0)<($48|0);
      $50 = ($43|0)<($48|0);
      $or$cond2 = $49 & $50;
      $25 = (($i$020) + 1)|0;
      if (!($or$cond2)) {
       label = 30;
       break L5;
      }
      $24 = HEAP32[$19>>2]|0;
      $26 = ($25|0)<($24|0);
      if ($26) {
       $27 = $48;$i$020 = $25;
      } else {
       break;
      }
     }
    }
    $51 = (_oggpack_read($opb,2)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = HEAP32[$0>>2]|0;
     $54 = ($53|0)>(1);
     if ($54) {
      $55 = (($vi) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)>(0);
      if ($57) {
       $58 = (($0) + 4|0);
       $i$114 = 0;
       while(1) {
        $68 = (_oggpack_read($opb,4)|0);
        $69 = (($58) + ($i$114<<2)|0);
        HEAP32[$69>>2] = $68;
        $70 = HEAP32[$0>>2]|0;
        $71 = ($68|0)>=($70|0);
        $72 = ($68|0)<(0);
        $or$cond3 = $71 | $72;
        $66 = (($i$114) + 1)|0;
        if ($or$cond3) {
         break L5;
        }
        $65 = HEAP32[$55>>2]|0;
        $67 = ($66|0)<($65|0);
        if ($67) {
         $i$114 = $66;
        } else {
         $59 = $70;
         label = 23;
         break;
        }
       }
      }
     } else {
      $59 = $53;
      label = 23;
     }
     if ((label|0) == 23) {
      $60 = ($59|0)>(0);
      if (!($60)) {
       $$0 = $0;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $61 = (($0) + 1028|0);
     $62 = (($7) + 16|0);
     $63 = (($0) + 1092|0);
     $64 = (($7) + 20|0);
     $i$212 = 0;
     while(1) {
      (_oggpack_read($opb,8)|0);
      $76 = (_oggpack_read($opb,8)|0);
      $77 = (($61) + ($i$212<<2)|0);
      HEAP32[$77>>2] = $76;
      $78 = HEAP32[$62>>2]|0;
      $79 = ($76|0)>=($78|0);
      $80 = ($76|0)<(0);
      $or$cond4 = $79 | $80;
      if ($or$cond4) {
       label = 30;
       break L5;
      }
      $81 = (_oggpack_read($opb,8)|0);
      $82 = (($63) + ($i$212<<2)|0);
      HEAP32[$82>>2] = $81;
      $83 = HEAP32[$64>>2]|0;
      $84 = ($81|0)>=($83|0);
      $85 = ($81|0)<(0);
      $or$cond5 = $84 | $85;
      $74 = (($i$212) + 1)|0;
      if ($or$cond5) {
       label = 30;
       break L5;
      }
      $73 = HEAP32[$0>>2]|0;
      $75 = ($74|0)<($73|0);
      if ($75) {
       $i$212 = $74;
      } else {
       $$0 = $0;
       break;
      }
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     label = 30;
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  if ($1) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _mapping0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 STACKTOP = sp;return;
}
function _mapping0_forward($vb) {
 $vb = $vb|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i1$i = 0, $$0$i2$i = 0, $$0$i205 = 0, $$0$p$i$i = 0, $$01$i$i = 0, $$01$i10$i = 0, $$01$i5$i = 0, $$in = 0, $$lcssa = 0, $$neg$i = 0, $$phi$trans$insert$i = 0, $$pn$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi53Z2D = 0, $$pre$phi61Z2D = 0;
 var $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre214 = 0, $$pre215 = 0, $$pre216 = 0, $$pre217 = 0, $$pre218 = 0, $$pre219 = 0, $$pre222 = 0, $$pre225 = 0, $$pre226 = 0, $$pre227 = 0, $$pre228 = 0, $$pre229 = 0, $$pre230 = 0, $$pre51 = 0, $$pre52 = 0, $$pre58 = 0, $$pre62 = 0, $$sum = 0;
 var $$sum$i = 0, $$sum1$i = 0, $$sum1$us = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum3$i = 0, $$sum4$i = 0, $$sum8$i$i = 0, $$val$0$i = 0.0, $$val$0$i103 = 0.0, $$val$0$i109 = 0.0, $$val$0$i12 = 0.0, $$val$us = 0.0, $$val2 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0.0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0.0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0.0, $1089 = 0.0, $109 = 0.0, $1090 = 0.0, $1091 = 0.0, $1092 = 0.0;
 var $1093 = 0.0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0.0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0.0, $1175 = 0, $1176 = 0.0, $1177 = 0.0, $1178 = 0.0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0.0, $1182 = 0.0;
 var $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0.0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0, $1204 = 0.0, $1205 = 0.0, $1206 = 0.0, $1207 = 0, $1208 = 0, $1209 = 0.0, $121 = 0, $1210 = 0.0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0;
 var $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0;
 var $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0;
 var $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0;
 var $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0;
 var $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0;
 var $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0;
 var $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0;
 var $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0;
 var $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0;
 var $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0;
 var $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0;
 var $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0;
 var $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0;
 var $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0;
 var $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0;
 var $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0;
 var $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0;
 var $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0;
 var $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0;
 var $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0;
 var $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0;
 var $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0;
 var $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0;
 var $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0;
 var $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0;
 var $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0;
 var $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0;
 var $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0;
 var $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0;
 var $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0;
 var $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0;
 var $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0.0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0;
 var $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0.0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0.0;
 var $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0;
 var $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0;
 var $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0;
 var $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0.0, $2080 = 0, $2081 = 0, $2082 = 0;
 var $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0.0;
 var $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0.0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0;
 var $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0;
 var $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0;
 var $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0;
 var $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0;
 var $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0;
 var $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0;
 var $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0;
 var $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0.0, $226 = 0, $2260 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0;
 var $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0;
 var $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0.0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0.0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bookas$i = 0, $ch_in_bundle$0$lcssa = 0, $ch_in_bundle$05 = 0, $ch_in_bundle$1 = 0, $ch_in_bundle$2$lcssa = 0;
 var $ch_in_bundle$211 = 0, $ch_in_bundle$3 = 0, $cshift$031$i = 0, $cshift$031$us$i = 0, $cval$0$lcssa$i = 0, $cval$0$lcssa$i208 = 0, $cval$030$i = 0, $cval$030$us$i = 0, $err$04$i$i = 0, $err$1$i$i = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i$i203 = 0, $exitcond$i104 = 0, $exitcond$i110 = 0, $exitcond$i115 = 0, $exitcond$i122 = 0, $exitcond$i129 = 0, $exitcond$i13 = 0, $exitcond$i136 = 0;
 var $exitcond$i143 = 0, $exitcond$i150 = 0, $exitcond$i157 = 0, $exitcond$i164 = 0, $exitcond$i17 = 0, $exitcond$i171 = 0, $exitcond$i178 = 0, $exitcond$i185 = 0, $exitcond$i192 = 0, $exitcond$i200 = 0, $exitcond$i22 = 0, $exitcond$i29 = 0, $exitcond$i36 = 0, $exitcond$i43 = 0, $exitcond$i50 = 0, $exitcond$i57 = 0, $exitcond$i64 = 0, $exitcond$i71 = 0, $exitcond$i78 = 0, $exitcond$i8 = 0;
 var $exitcond$i85 = 0, $exitcond$i92 = 0, $exitcond17$i$i = 0, $exitcond56$i = 0, $exitcond57$i = 0, $exitcond60$i = 0, $exitcond64$i = 0, $exitcond65$i = 0, $global_ampmax$0$lcssa = 0.0, $global_ampmax$040 = 0.0, $global_ampmax$1 = 0.0, $hx$0$lcssa$i = 0, $hx$016$i = 0, $hx$1$i = 0, $i$0$lcssa$i = 0, $i$01$i = 0, $i$01$i10 = 0, $i$01$i101 = 0, $i$01$i107 = 0, $i$01$i114 = 0;
 var $i$01$i121 = 0, $i$01$i128 = 0, $i$01$i135 = 0, $i$01$i142 = 0, $i$01$i149 = 0, $i$01$i156 = 0, $i$01$i16 = 0, $i$01$i163 = 0, $i$01$i170 = 0, $i$01$i177 = 0, $i$01$i184 = 0, $i$01$i191 = 0, $i$01$i21 = 0, $i$01$i28 = 0, $i$01$i35 = 0, $i$01$i42 = 0, $i$01$i49 = 0, $i$01$i56 = 0, $i$01$i63 = 0, $i$01$i70 = 0;
 var $i$01$i77 = 0, $i$01$i84 = 0, $i$01$i91 = 0, $i$010$i$i = 0, $i$041 = 0, $i$053$i = 0, $i$130 = 0, $i$130$us = 0, $i$147$i = 0, $i$18$i = 0, $i$2$lcssa$i = 0, $i$23 = 0, $i$24$i = 0, $i$242$i = 0, $i$316 = 0, $ispos$i$i = 0, $ispos$i1$i = 0, $ispos1$i$i = 0, $iw$011$i$i = 0, $j$034 = 0;
 var $j$038$i = 0, $j$115$i = 0, $j$121$us = 0, $j$214$i = 0, $j$24 = 0, $j$310 = 0, $k$023$i = 0, $k$132$i = 0, $k$132$us$i = 0, $k$220 = 0, $k$235$i = 0, $k1$014$i$i = 0, $l$028$us$i = 0, $l2$013$i$i = 0, $lx$017$i = 0, $lx$1$i = 0, $ly$0$lcssa$i = 0, $ly$018$i = 0, $ly$1$i = 0, $maxval$i = 0;
 var $na$0$$i$i = 0, $na$012$i$i = 0, $na$2$i$i = 0, $neg$i$i = 0, $neg$i2$i = 0, $neg2$i$i = 0, $not$ = 0, $not$$i = 0, $not$$i196 = 0, $not$$i206 = 0, $not$$i98 = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i112 = 0, $or$cond$i119 = 0, $or$cond$i126 = 0, $or$cond$i133 = 0, $or$cond$i140 = 0, $or$cond$i147 = 0, $or$cond$i154 = 0;
 var $or$cond$i161 = 0, $or$cond$i168 = 0, $or$cond$i175 = 0, $or$cond$i182 = 0, $or$cond$i189 = 0, $or$cond$i19 = 0, $or$cond$i199 = 0, $or$cond$i26 = 0, $or$cond$i33 = 0, $or$cond$i40 = 0, $or$cond$i47 = 0, $or$cond$i54 = 0, $or$cond$i61 = 0, $or$cond$i68 = 0, $or$cond$i75 = 0, $or$cond$i82 = 0, $or$cond$i89 = 0, $out$i = 0, $output$0$i = 0, $output$0$i116 = 0;
 var $output$0$i123 = 0, $output$0$i130 = 0, $output$0$i137 = 0, $output$0$i144 = 0, $output$0$i151 = 0, $output$0$i158 = 0, $output$0$i165 = 0, $output$0$i172 = 0, $output$0$i179 = 0, $output$0$i186 = 0, $output$0$i193 = 0, $output$0$i23 = 0, $output$0$i30 = 0, $output$0$i37 = 0, $output$0$i44 = 0, $output$0$i51 = 0, $output$0$i58 = 0, $output$0$i65 = 0, $output$0$i72 = 0, $output$0$i79 = 0;
 var $output$0$i86 = 0, $output$0$i93 = 0, $p$09$i = 0, $p$15$i = 0, $p$15$in$i = 0, $phitmp$i = 0, $ret$0$lcssa$i$i = 0, $ret$0$lcssa$i7$i = 0, $ret$02$i$i = 0, $ret$02$i4$i = 0, $ret$02$i9$i = 0, $scevgep$i = 0, $smax$i = 0, $smax$i$i = 0, $val$0$i = 0.0, $val$0$i102 = 0.0, $val$0$i108 = 0.0, $val$0$i11 = 0.0, $val$0$i198 = 0, $val1$0$i = 0;
 var $x1$n$i$i = 0, $y$03$i$i = 0, $y$1$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $out$i = sp + 64|0;
 $bookas$i = sp + 32|0;
 $maxval$i = sp;
 $0 = (($vb) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($vb) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($vb) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 2;
 $15 = STACKTOP; STACKTOP = STACKTOP + ((((1*$14)|0)+15)&-16)|0;
 $16 = (($14) + 7)|0;
 $17 = $16 & -8;
 $18 = (($vb) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($17))|0;
 $21 = (($vb) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)>($22|0);
 $24 = (($vb) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = (_malloc(8)|0);
   $28 = (($vb) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($19))|0;
   HEAP32[$28>>2] = $30;
   $31 = (($vb) + 84|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($27) + 4|0);
   HEAP32[$33>>2] = $32;
   HEAP32[$27>>2] = $25;
   HEAP32[$31>>2] = $27;
  }
  HEAP32[$21>>2] = $17;
  $34 = (_malloc($17)|0);
  HEAP32[$24>>2] = $34;
  HEAP32[$18>>2] = 0;
  $$pre214 = HEAP32[$12>>2]|0;
  $$pre215 = HEAP32[$21>>2]|0;
  $36 = $34;$37 = 0;$40 = $$pre214;$45 = $$pre215;
 } else {
  $36 = $25;$37 = $19;$40 = $13;$45 = $22;
 }
 $35 = (($36) + ($37)|0);
 $38 = (($37) + ($17))|0;
 HEAP32[$18>>2] = $38;
 $39 = $40 << 2;
 $41 = (($39) + 7)|0;
 $42 = $41 & -8;
 $43 = (($38) + ($42))|0;
 $44 = ($43|0)>($45|0);
 if ($44) {
  $46 = ($36|0)==(0|0);
  if (!($46)) {
   $47 = (_malloc(8)|0);
   $48 = (($vb) + 80|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($38))|0;
   HEAP32[$48>>2] = $50;
   $51 = (($vb) + 84|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($47) + 4|0);
   HEAP32[$53>>2] = $52;
   HEAP32[$47>>2] = $36;
   HEAP32[$51>>2] = $47;
  }
  HEAP32[$21>>2] = $42;
  $54 = (_malloc($42)|0);
  HEAP32[$24>>2] = $54;
  HEAP32[$18>>2] = 0;
  $$pre216 = HEAP32[$12>>2]|0;
  $$pre217 = HEAP32[$21>>2]|0;
  $56 = $54;$57 = 0;$60 = $$pre216;$65 = $$pre217;
 } else {
  $56 = $36;$57 = $38;$60 = $40;$65 = $45;
 }
 $55 = (($56) + ($57)|0);
 $58 = (($57) + ($42))|0;
 HEAP32[$18>>2] = $58;
 $59 = $60 << 2;
 $61 = (($59) + 7)|0;
 $62 = $61 & -8;
 $63 = (($58) + ($62))|0;
 $64 = ($63|0)>($65|0);
 if ($64) {
  $66 = ($56|0)==(0|0);
  if (!($66)) {
   $67 = (_malloc(8)|0);
   $68 = (($vb) + 80|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + ($58))|0;
   HEAP32[$68>>2] = $70;
   $71 = (($vb) + 84|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($67) + 4|0);
   HEAP32[$73>>2] = $72;
   HEAP32[$67>>2] = $56;
   HEAP32[$71>>2] = $67;
  }
  HEAP32[$21>>2] = $62;
  $74 = (_malloc($62)|0);
  HEAP32[$24>>2] = $74;
  HEAP32[$18>>2] = 0;
  $$pre218 = HEAP32[$12>>2]|0;
  $76 = $74;$77 = 0;$82 = $$pre218;
 } else {
  $76 = $56;$77 = $58;$82 = $60;
 }
 $75 = (($76) + ($77)|0);
 $78 = (($77) + ($62))|0;
 HEAP32[$18>>2] = $78;
 $79 = (($9) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $82 << 2;
 $83 = STACKTOP; STACKTOP = STACKTOP + ((((1*$81)|0)+15)&-16)|0;
 $84 = (($9) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($vb) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($5) + 544|0);
 $89 = (($88) + ($87<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($7) + 56|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($87|0)!=(0);
 $94 = $93 ? 2 : 0;
 $$sum = (($94) + ($85))|0;
 $95 = (($92) + (($$sum*52)|0)|0);
 $96 = (($vb) + 40|0);
 HEAP32[$96>>2] = $87;
 $97 = HEAP32[$12>>2]|0;
 $98 = ($97|0)>(0);
 if ($98) {
  $99 = (+($11|0));
  $100 = 4.0 / $99;
  $101 = (($11|0) / 2)&-1;
  $102 = $101 << 2;
  $103 = (HEAPF32[tempDoublePtr>>2]=$100,HEAP32[tempDoublePtr>>2]|0);
  $104 = $103 & 2147483647;
  $105 = (+($104>>>0));
  $106 = $105 * 7.1771142984289326705E-7;
  $107 = $106 + -764.6162109375;
  $108 = $107;
  $109 = $108 + 0.344999999999999973355;
  $110 = $109;
  $111 = (($7) + 4|0);
  $112 = (($vb) + 24|0);
  $113 = (($vb) + 32|0);
  $114 = (($7) + 12|0);
  $115 = (($7) + 20|0);
  $116 = (($11) + -1)|0;
  $117 = ($116|0)>(1);
  $118 = (($102) + 7)|0;
  $119 = $118 & -8;
  $120 = (($vb) + 80|0);
  $121 = (($vb) + 84|0);
  $126 = $78;$129 = $76;$global_ampmax$040 = $80;$i$041 = 0;
  while(1) {
   $122 = HEAP32[$vb>>2]|0;
   $123 = (($122) + ($i$041<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($126) + ($119))|0;
   $127 = HEAP32[$21>>2]|0;
   $128 = ($125|0)>($127|0);
   if ($128) {
    $130 = ($129|0)==(0|0);
    if (!($130)) {
     $131 = (_malloc(8)|0);
     $132 = HEAP32[$120>>2]|0;
     $133 = (($132) + ($126))|0;
     HEAP32[$120>>2] = $133;
     $134 = HEAP32[$121>>2]|0;
     $135 = (($131) + 4|0);
     HEAP32[$135>>2] = $134;
     HEAP32[$131>>2] = $129;
     HEAP32[$121>>2] = $131;
    }
    HEAP32[$21>>2] = $119;
    $136 = (_malloc($119)|0);
    HEAP32[$24>>2] = $136;
    HEAP32[$18>>2] = 0;
    $$pre219 = HEAP32[$21>>2]|0;
    $138 = $136;$139 = 0;$144 = $$pre219;
   } else {
    $138 = $129;$139 = $126;$144 = $127;
   }
   $137 = (($138) + ($139)|0);
   $140 = (($139) + ($119))|0;
   HEAP32[$18>>2] = $140;
   $141 = (($55) + ($i$041<<2)|0);
   HEAP32[$141>>2] = $137;
   $142 = (($140) + ($119))|0;
   $143 = ($142|0)>($144|0);
   $145 = HEAP32[$24>>2]|0;
   if ($143) {
    $146 = ($145|0)==(0|0);
    if (!($146)) {
     $147 = (_malloc(8)|0);
     $148 = HEAP32[$120>>2]|0;
     $149 = (($148) + ($140))|0;
     HEAP32[$120>>2] = $149;
     $150 = HEAP32[$121>>2]|0;
     $151 = (($147) + 4|0);
     HEAP32[$151>>2] = $150;
     HEAP32[$147>>2] = $145;
     HEAP32[$121>>2] = $147;
    }
    HEAP32[$21>>2] = $119;
    $152 = (_malloc($119)|0);
    HEAP32[$24>>2] = $152;
    HEAP32[$18>>2] = 0;
    $154 = $152;$155 = 0;
   } else {
    $154 = $145;$155 = $140;
   }
   $153 = (($154) + ($155)|0);
   $156 = (($155) + ($119))|0;
   HEAP32[$18>>2] = $156;
   $157 = (($35) + ($i$041<<2)|0);
   HEAP32[$157>>2] = $153;
   $158 = HEAP32[$112>>2]|0;
   $159 = HEAP32[$86>>2]|0;
   $160 = HEAP32[$113>>2]|0;
   $161 = ($159|0)!=(0);
   $162 = $161 ? $158 : 0;
   $163 = $161 ? $160 : 0;
   $164 = (($111) + ($162<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (24 + ($165<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($111) + ($163<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (24 + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($5) + ($159<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($5) + ($162<<2)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($5) + ($163<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($173|0) / 4)&-1;
   $179 = (($175|0) / 4)&-1;
   $180 = (($178) - ($179))|0;
   $181 = (($175|0) / 2)&-1;
   $182 = (($180) + ($181))|0;
   $183 = (($173|0) / 2)&-1;
   $184 = (($183) + ($178))|0;
   $$neg$i = (($177|0) / -4)&-1;
   $185 = (($184) + ($$neg$i))|0;
   $186 = (($177|0) / 2)&-1;
   $187 = (($185) + ($186))|0;
   $188 = ($180|0)>(0);
   if ($188) {
    $189 = $180 << 2;
    _memset(($124|0),0,($189|0))|0;
    $i$0$lcssa$i = $180;
   } else {
    $i$0$lcssa$i = 0;
   }
   $190 = ($i$0$lcssa$i|0)<($182|0);
   if ($190) {
    $191 = (($178) + ($181))|0;
    $192 = (($191) - ($i$0$lcssa$i))|0;
    $193 = (($192) - ($179))|0;
    $i$18$i = $i$0$lcssa$i;$p$09$i = 0;
    while(1) {
     $197 = (($167) + ($p$09$i<<2)|0);
     $198 = +HEAPF32[$197>>2];
     $199 = (($124) + ($i$18$i<<2)|0);
     $200 = +HEAPF32[$199>>2];
     $201 = $198 * $200;
     HEAPF32[$199>>2] = $201;
     $202 = (($i$18$i) + 1)|0;
     $203 = (($p$09$i) + 1)|0;
     $exitcond$i = ($203|0)==($193|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$18$i = $202;$p$09$i = $203;
     }
    }
   }
   $194 = ($177|0)>(1);
   if ($194) {
    $195 = (($185) + 1)|0;
    $196 = ($187|0)>($195|0);
    $i$24$i = $185;$p$15$in$i = $186;
    while(1) {
     $p$15$i = (($p$15$in$i) + -1)|0;
     $207 = (($171) + ($p$15$i<<2)|0);
     $208 = +HEAPF32[$207>>2];
     $209 = (($124) + ($i$24$i<<2)|0);
     $210 = +HEAPF32[$209>>2];
     $211 = $208 * $210;
     HEAPF32[$209>>2] = $211;
     $212 = (($i$24$i) + 1)|0;
     $213 = ($212|0)<($187|0);
     if ($213) {
      $i$24$i = $212;$p$15$in$i = $p$15$i;
     } else {
      break;
     }
    }
    $smax$i = $196 ? $187 : $195;
    $i$2$lcssa$i = $smax$i;
   } else {
    $i$2$lcssa$i = $185;
   }
   $204 = ($i$2$lcssa$i|0)<($173|0);
   if ($204) {
    $scevgep$i = (($124) + ($i$2$lcssa$i<<2)|0);
    $205 = (($173) - ($i$2$lcssa$i))|0;
    $206 = $205 << 2;
    _memset(($scevgep$i|0),0,($206|0))|0;
   }
   $214 = HEAP32[$86>>2]|0;
   $215 = (($114) + ($214<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = HEAP32[$216>>2]|0;
   $218 = HEAP32[$157>>2]|0;
   _mdct_forward($217,$124,$218);
   $219 = HEAP32[$86>>2]|0;
   $220 = (($115) + (($219*12)|0)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ($221|0)==(1);
   if (!($222)) {
    $223 = ((($115) + (($219*12)|0)|0) + 4|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = ((($115) + (($219*12)|0)|0) + 8|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + 4|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)>(0);
    if ($229) {
     $230 = (($228) + 1)|0;
     $$sum8$i$i = (($221) + -1)|0;
     $iw$011$i$i = $221;$k1$014$i$i = 0;$l2$013$i$i = $221;$na$012$i$i = 1;
     while(1) {
      $231 = (($230) - ($k1$014$i$i))|0;
      $232 = (($226) + ($231<<2)|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = (($l2$013$i$i|0) / ($233|0))&-1;
      $235 = (($221|0) / ($l2$013$i$i|0))&-1;
      $236 = Math_imul($235, $234)|0;
      $237 = (($233) + -1)|0;
      $238 = Math_imul($235, $237)|0;
      $239 = (($iw$011$i$i) - ($238))|0;
      $240 = (1 - ($na$012$i$i))|0;
      do {
       if ((($233|0) == 2)) {
        $246 = ($na$012$i$i|0)==(1);
        $$sum$i = (($$sum8$i$i) + ($239))|0;
        $247 = (($224) + ($$sum$i<<2)|0);
        if ($246) {
         _dradf2($235,$234,$124,$224,$247);
         $na$2$i$i = $240;
         break;
        } else {
         _dradf2($235,$234,$224,$124,$247);
         $na$2$i$i = $240;
         break;
        }
       } else if ((($233|0) == 4)) {
        $241 = (($239) + ($235))|0;
        $242 = ($na$012$i$i|0)==(1);
        $$sum1$i = (($$sum8$i$i) + ($239))|0;
        $243 = (($224) + ($$sum1$i<<2)|0);
        $$sum2$i = (($$sum8$i$i) + ($241))|0;
        $244 = (($224) + ($$sum2$i<<2)|0);
        $$sum2$i$i = (($$sum8$i$i) + ($235))|0;
        $$sum3$i = (($$sum2$i$i) + ($241))|0;
        $245 = (($224) + ($$sum3$i<<2)|0);
        if ($242) {
         _dradf4($235,$234,$124,$224,$243,$244,$245);
         $na$2$i$i = $240;
         break;
        } else {
         _dradf4($235,$234,$224,$124,$243,$244,$245);
         $na$2$i$i = $240;
         break;
        }
       } else {
        $248 = ($235|0)==(1);
        $na$0$$i$i = $248 ? $na$012$i$i : $240;
        $249 = ($na$0$$i$i|0)==(0);
        $$sum4$i = (($$sum8$i$i) + ($239))|0;
        $250 = (($224) + ($$sum4$i<<2)|0);
        if ($249) {
         _dradfg($235,$233,$234,$236,$124,$124,$124,$224,$224,$250);
         $na$2$i$i = 1;
         break;
        } else {
         _dradfg($235,$233,$234,$236,$224,$224,$224,$124,$124,$250);
         $na$2$i$i = 0;
         break;
        }
       }
      } while(0);
      $251 = (($k1$014$i$i) + 1)|0;
      $exitcond17$i$i = ($251|0)==($228|0);
      if ($exitcond17$i$i) {
       break;
      } else {
       $iw$011$i$i = $239;$k1$014$i$i = $251;$l2$013$i$i = $234;$na$012$i$i = $na$2$i$i;
      }
     }
     $252 = ($na$2$i$i|0)!=(1);
     $253 = ($221|0)>(0);
     $or$cond$i$i = $252 & $253;
     if ($or$cond$i$i) {
      $i$010$i$i = 0;
      while(1) {
       $254 = (($224) + ($i$010$i$i<<2)|0);
       $255 = +HEAPF32[$254>>2];
       $256 = (($124) + ($i$010$i$i<<2)|0);
       HEAPF32[$256>>2] = $255;
       $257 = (($i$010$i$i) + 1)|0;
       $exitcond$i$i = ($257|0)==($221|0);
       if ($exitcond$i$i) {
        break;
       } else {
        $i$010$i$i = $257;
       }
      }
     }
    }
   }
   $$val2 = +HEAPF32[$124>>2];
   $258 = (HEAPF32[tempDoublePtr>>2]=$$val2,HEAP32[tempDoublePtr>>2]|0);
   $259 = $258 & 2147483647;
   $260 = (+($259>>>0));
   $261 = $260 * 7.1771142984289326705E-7;
   $262 = $261 + -764.6162109375;
   $263 = $110 + $262;
   $264 = $263;
   $265 = $264 + 0.344999999999999973355;
   $266 = $265;
   HEAPF32[$124>>2] = $266;
   $267 = (($83) + ($i$041<<2)|0);
   HEAPF32[$267>>2] = $266;
   if ($117) {
    $288 = $266;$j$034 = 1;
    while(1) {
     $268 = (($124) + ($j$034<<2)|0);
     $269 = +HEAPF32[$268>>2];
     $270 = $269 * $269;
     $271 = (($j$034) + 1)|0;
     $272 = (($124) + ($271<<2)|0);
     $273 = +HEAPF32[$272>>2];
     $274 = $273 * $273;
     $275 = $270 + $274;
     $276 = (HEAPF32[tempDoublePtr>>2]=$275,HEAP32[tempDoublePtr>>2]|0);
     $277 = $276 & 2147483647;
     $278 = (+($277>>>0));
     $279 = $278 * 3.58855714921446633525E-7;
     $280 = $279 + -382.30810546875;
     $281 = $110 + $280;
     $282 = $281;
     $283 = $282 + 0.344999999999999973355;
     $284 = $283;
     $285 = $271 >> 1;
     $286 = (($124) + ($285<<2)|0);
     HEAPF32[$286>>2] = $284;
     $287 = $284 > $288;
     if ($287) {
      HEAPF32[$267>>2] = $284;
      $2259 = $284;
     } else {
      $2259 = $288;
     }
     $289 = (($j$034) + 2)|0;
     $290 = ($289|0)<($116|0);
     if ($290) {
      $288 = $2259;$j$034 = $289;
     } else {
      $292 = $2259;
      break;
     }
    }
   } else {
    $292 = $266;
   }
   $291 = $292 > 0.0;
   if ($291) {
    HEAPF32[$267>>2] = 0.0;
    $294 = 0.0;
   } else {
    $294 = $292;
   }
   $293 = $294 > $global_ampmax$040;
   $global_ampmax$1 = $293 ? $294 : $global_ampmax$040;
   $295 = (($i$041) + 1)|0;
   $296 = HEAP32[$12>>2]|0;
   $297 = ($295|0)<($296|0);
   $$pre225 = HEAP32[$18>>2]|0;
   $$pre226 = HEAP32[$24>>2]|0;
   if ($297) {
    $126 = $$pre225;$129 = $$pre226;$global_ampmax$040 = $global_ampmax$1;$i$041 = $295;
   } else {
    $$pre$phi53Z2D = $102;$$pre$phiZ2D = $101;$301 = $$pre225;$304 = $$pre226;$global_ampmax$0$lcssa = $global_ampmax$1;
    break;
   }
  }
 } else {
  $$pre51 = (($11|0) / 2)&-1;
  $$pre52 = $$pre51 << 2;
  $$pre$phi53Z2D = $$pre52;$$pre$phiZ2D = $$pre51;$301 = $78;$304 = $76;$global_ampmax$0$lcssa = $80;
 }
 $298 = (($$pre$phi53Z2D) + 7)|0;
 $299 = $298 & -8;
 $300 = (($301) + ($299))|0;
 $302 = HEAP32[$21>>2]|0;
 $303 = ($300|0)>($302|0);
 if ($303) {
  $305 = ($304|0)==(0|0);
  if (!($305)) {
   $306 = (_malloc(8)|0);
   $307 = (($vb) + 80|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = (($308) + ($301))|0;
   HEAP32[$307>>2] = $309;
   $310 = (($vb) + 84|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($306) + 4|0);
   HEAP32[$312>>2] = $311;
   HEAP32[$306>>2] = $304;
   HEAP32[$310>>2] = $306;
  }
  HEAP32[$21>>2] = $299;
  $313 = (_malloc($299)|0);
  HEAP32[$24>>2] = $313;
  HEAP32[$18>>2] = 0;
  $$pre222 = HEAP32[$21>>2]|0;
  $315 = $313;$316 = 0;$320 = $$pre222;
 } else {
  $315 = $304;$316 = $301;$320 = $302;
 }
 $314 = (($315) + ($316)|0);
 $317 = (($316) + ($299))|0;
 HEAP32[$18>>2] = $317;
 $318 = (($317) + ($299))|0;
 $319 = ($318|0)>($320|0);
 if ($319) {
  $321 = ($315|0)==(0|0);
  if (!($321)) {
   $322 = (_malloc(8)|0);
   $323 = (($vb) + 80|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + ($317))|0;
   HEAP32[$323>>2] = $325;
   $326 = (($vb) + 84|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($322) + 4|0);
   HEAP32[$328>>2] = $327;
   HEAP32[$322>>2] = $315;
   HEAP32[$326>>2] = $322;
  }
  HEAP32[$21>>2] = $299;
  $329 = (_malloc($299)|0);
  HEAP32[$24>>2] = $329;
  HEAP32[$18>>2] = 0;
  $331 = $329;$332 = 0;
 } else {
  $331 = $315;$332 = $317;
 }
 $330 = (($331) + ($332)|0);
 $333 = (($332) + ($299))|0;
 HEAP32[$18>>2] = $333;
 $334 = HEAP32[$12>>2]|0;
 $335 = ($334|0)>(0);
 $336 = (($90) + 4|0);
 L99: do {
  if ($335) {
   $337 = ($11|0)>(1);
   $338 = (($90) + 1028|0);
   $339 = (($5) + 800|0);
   $340 = (($7) + 48|0);
   $341 = (($vb) + 80|0);
   $342 = (($vb) + 84|0);
   $343 = ((($92) + (($$sum*52)|0)|0) + 4|0);
   $344 = ((($92) + (($$sum*52)|0)|0) + 12|0);
   if ($337) {
    $1102 = $333;$1105 = $331;$i$130$us = 0;
   } else {
    $1126 = $333;$1129 = $331;$i$130 = 0;
    while(1) {
     $1117 = (($336) + ($i$130<<2)|0);
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = (($35) + ($i$130<<2)|0);
     $1120 = HEAP32[$1119>>2]|0;
     $1121 = HEAP32[$vb>>2]|0;
     $1122 = (($1121) + ($i$130<<2)|0);
     $1123 = HEAP32[$1122>>2]|0;
     $1124 = (($1123) + ($$pre$phiZ2D<<2)|0);
     HEAP32[$96>>2] = $87;
     $1125 = (($1126) + 64)|0;
     $1127 = HEAP32[$21>>2]|0;
     $1128 = ($1125|0)>($1127|0);
     if ($1128) {
      $1130 = ($1129|0)==(0|0);
      if (!($1130)) {
       $1131 = (_malloc(8)|0);
       $1132 = HEAP32[$341>>2]|0;
       $1133 = (($1132) + ($1126))|0;
       HEAP32[$341>>2] = $1133;
       $1134 = HEAP32[$342>>2]|0;
       $1135 = (($1131) + 4|0);
       HEAP32[$1135>>2] = $1134;
       HEAP32[$1131>>2] = $1129;
       HEAP32[$342>>2] = $1131;
      }
      HEAP32[$21>>2] = 64;
      $1136 = (_malloc(64)|0);
      HEAP32[$24>>2] = $1136;
      HEAP32[$18>>2] = 0;
      $1138 = $1136;$1139 = 0;
     } else {
      $1138 = $1129;$1139 = $1126;
     }
     $1137 = (($1138) + ($1139)|0);
     $1140 = (($1139) + 64)|0;
     HEAP32[$18>>2] = $1140;
     $1141 = (($75) + ($i$130<<2)|0);
     HEAP32[$1141>>2] = $1137;
     dest=$1137+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __vp_noisemask($95,$1124,$314);
     $1142 = (($83) + ($i$130<<2)|0);
     $1143 = +HEAPF32[$1142>>2];
     __vp_tonemask($95,$1123,$330,$global_ampmax$0$lcssa,$1143);
     __vp_offset_and_mix($95,$314,$330,1,$1123,$1120,$1124);
     $1144 = (($338) + ($1118<<2)|0);
     $1145 = HEAP32[$1144>>2]|0;
     $1146 = (($339) + ($1145<<2)|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = ($1147|0)==(1);
     if (!($1148)) {
      $$0 = -1;
      break;
     }
     $1149 = HEAP32[$340>>2]|0;
     $1150 = (($1149) + ($1145<<2)|0);
     $1151 = HEAP32[$1150>>2]|0;
     $1152 = (_floor1_fit($vb,$1151,$1124,$1123)|0);
     $1153 = HEAP32[$1141>>2]|0;
     $1154 = (($1153) + 28|0);
     HEAP32[$1154>>2] = $1152;
     $1155 = HEAP32[$0>>2]|0;
     $1156 = (($1155) + 104|0);
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = (($1157) + 80|0);
     $1159 = HEAP32[$1158>>2]|0;
     $not$$i98 = ($1159|0)==(0);
     if (!($not$$i98)) {
      $1160 = HEAP32[$1141>>2]|0;
      $1161 = (($1160) + 28|0);
      $1162 = HEAP32[$1161>>2]|0;
      $1163 = ($1162|0)==(0|0);
      if (!($1163)) {
       $1164 = HEAP32[$95>>2]|0;
       $1165 = HEAP32[$343>>2]|0;
       $1166 = (($1165) + 20|0);
       $1167 = +HEAPF32[$1166>>2];
       $1168 = ($1164|0)>(0);
       if ($1168) {
        $1169 = HEAP32[$344>>2]|0;
        $1170 = (($1169) + 8|0);
        $1171 = HEAP32[$1170>>2]|0;
        $1172 = (($1165) + 108|0);
        $i$01$i101 = 0;
        while(1) {
         $1173 = (($314) + ($i$01$i101<<2)|0);
         $1174 = +HEAPF32[$1173>>2];
         $1175 = (($1171) + ($i$01$i101<<2)|0);
         $1176 = +HEAPF32[$1175>>2];
         $1177 = $1174 + $1176;
         $1178 = +HEAPF32[$1172>>2];
         $1179 = $1177 > $1178;
         $val$0$i102 = $1179 ? $1178 : $1177;
         $1180 = (($330) + ($i$01$i101<<2)|0);
         $1181 = +HEAPF32[$1180>>2];
         $1182 = $1167 + $1181;
         $1183 = $val$0$i102 < $1182;
         $$val$0$i103 = $1183 ? $1182 : $val$0$i102;
         $1184 = (($1123) + ($i$01$i101<<2)|0);
         HEAPF32[$1184>>2] = $$val$0$i103;
         $1185 = (($i$01$i101) + 1)|0;
         $exitcond$i104 = ($1185|0)==($1164|0);
         if ($exitcond$i104) {
          break;
         } else {
          $i$01$i101 = $1185;
         }
        }
       }
       $1186 = HEAP32[$1144>>2]|0;
       $1187 = HEAP32[$340>>2]|0;
       $1188 = (($1187) + ($1186<<2)|0);
       $1189 = HEAP32[$1188>>2]|0;
       $1190 = (_floor1_fit($vb,$1189,$1124,$1123)|0);
       $1191 = HEAP32[$1141>>2]|0;
       $1192 = (($1191) + 56|0);
       HEAP32[$1192>>2] = $1190;
       $1193 = HEAP32[$95>>2]|0;
       $1194 = HEAP32[$343>>2]|0;
       $1195 = (($1194) + 12|0);
       $1196 = +HEAPF32[$1195>>2];
       $1197 = ($1193|0)>(0);
       if ($1197) {
        $1198 = HEAP32[$344>>2]|0;
        $1199 = HEAP32[$1198>>2]|0;
        $1200 = (($1194) + 108|0);
        $i$01$i107 = 0;
        while(1) {
         $1201 = (($314) + ($i$01$i107<<2)|0);
         $1202 = +HEAPF32[$1201>>2];
         $1203 = (($1199) + ($i$01$i107<<2)|0);
         $1204 = +HEAPF32[$1203>>2];
         $1205 = $1202 + $1204;
         $1206 = +HEAPF32[$1200>>2];
         $1207 = $1205 > $1206;
         $val$0$i108 = $1207 ? $1206 : $1205;
         $1208 = (($330) + ($i$01$i107<<2)|0);
         $1209 = +HEAPF32[$1208>>2];
         $1210 = $1196 + $1209;
         $1211 = $val$0$i108 < $1210;
         $$val$0$i109 = $1211 ? $1210 : $val$0$i108;
         $1212 = (($1123) + ($i$01$i107<<2)|0);
         HEAPF32[$1212>>2] = $$val$0$i109;
         $1213 = (($i$01$i107) + 1)|0;
         $exitcond$i110 = ($1213|0)==($1193|0);
         if ($exitcond$i110) {
          break;
         } else {
          $i$01$i107 = $1213;
         }
        }
       }
       $1214 = HEAP32[$1144>>2]|0;
       $1215 = HEAP32[$340>>2]|0;
       $1216 = (($1215) + ($1214<<2)|0);
       $1217 = HEAP32[$1216>>2]|0;
       $1218 = (_floor1_fit($vb,$1217,$1124,$1123)|0);
       $1219 = HEAP32[$1141>>2]|0;
       HEAP32[$1219>>2] = $1218;
       $1220 = HEAP32[$1144>>2]|0;
       $1221 = HEAP32[$340>>2]|0;
       $1222 = (($1221) + ($1220<<2)|0);
       $1223 = HEAP32[$1222>>2]|0;
       $1224 = HEAP32[$1141>>2]|0;
       $1225 = HEAP32[$1224>>2]|0;
       $1226 = (($1224) + 28|0);
       $1227 = HEAP32[$1226>>2]|0;
       $1228 = (($1223) + 1284|0);
       $1229 = HEAP32[$1228>>2]|0;
       $1230 = ($1225|0)==(0|0);
       $1231 = ($1227|0)==(0|0);
       $or$cond$i112 = $1230 | $1231;
       do {
        if ($or$cond$i112) {
         $output$0$i116 = 0;
        } else {
         $1232 = $1229 << 2;
         $1233 = (($1232) + 7)|0;
         $1234 = $1233 & -8;
         $1235 = HEAP32[$18>>2]|0;
         $1236 = (($1235) + ($1234))|0;
         $1237 = HEAP32[$21>>2]|0;
         $1238 = ($1236|0)>($1237|0);
         $1239 = HEAP32[$24>>2]|0;
         if ($1238) {
          $1240 = ($1239|0)==(0|0);
          if (!($1240)) {
           $1241 = (_malloc(8)|0);
           $1242 = HEAP32[$341>>2]|0;
           $1243 = (($1242) + ($1235))|0;
           HEAP32[$341>>2] = $1243;
           $1244 = HEAP32[$342>>2]|0;
           $1245 = (($1241) + 4|0);
           HEAP32[$1245>>2] = $1244;
           HEAP32[$1241>>2] = $1239;
           HEAP32[$342>>2] = $1241;
          }
          HEAP32[$21>>2] = $1234;
          $1246 = (_malloc($1234)|0);
          HEAP32[$24>>2] = $1246;
          HEAP32[$18>>2] = 0;
          $1248 = $1246;$1249 = 0;
         } else {
          $1248 = $1239;$1249 = $1235;
         }
         $1247 = (($1248) + ($1249)|0);
         $1250 = (($1249) + ($1234))|0;
         HEAP32[$18>>2] = $1250;
         $1251 = ($1229|0)>(0);
         if ($1251) {
          $i$01$i114 = 0;
         } else {
          $output$0$i116 = $1247;
          break;
         }
         while(1) {
          $1252 = (($1225) + ($i$01$i114<<2)|0);
          $1253 = HEAP32[$1252>>2]|0;
          $1254 = $1253 & 32767;
          $1255 = ($1254*56174)|0;
          $1256 = (($1227) + ($i$01$i114<<2)|0);
          $1257 = HEAP32[$1256>>2]|0;
          $1258 = $1257 & 32767;
          $1259 = ($1258*9362)|0;
          $1260 = (($1255) + 32768)|0;
          $1261 = (($1260) + ($1259))|0;
          $1262 = $1261 >> 16;
          $1263 = (($1247) + ($i$01$i114<<2)|0);
          HEAP32[$1263>>2] = $1262;
          $1264 = HEAP32[$1252>>2]|0;
          $1265 = $1264 & 32768;
          $1266 = ($1265|0)==(0);
          do {
           if (!($1266)) {
            $1267 = HEAP32[$1256>>2]|0;
            $1268 = $1267 & 32768;
            $1269 = ($1268|0)==(0);
            if ($1269) {
             break;
            }
            $1270 = $1262 | 32768;
            HEAP32[$1263>>2] = $1270;
           }
          } while(0);
          $1271 = (($i$01$i114) + 1)|0;
          $exitcond$i115 = ($1271|0)==($1229|0);
          if ($exitcond$i115) {
           $output$0$i116 = $1247;
           break;
          } else {
           $i$01$i114 = $1271;
          }
         }
        }
       } while(0);
       $1272 = HEAP32[$1141>>2]|0;
       $1273 = (($1272) + 4|0);
       HEAP32[$1273>>2] = $output$0$i116;
       $1274 = HEAP32[$1144>>2]|0;
       $1275 = HEAP32[$340>>2]|0;
       $1276 = (($1275) + ($1274<<2)|0);
       $1277 = HEAP32[$1276>>2]|0;
       $1278 = HEAP32[$1141>>2]|0;
       $1279 = HEAP32[$1278>>2]|0;
       $1280 = (($1278) + 28|0);
       $1281 = HEAP32[$1280>>2]|0;
       $1282 = (($1277) + 1284|0);
       $1283 = HEAP32[$1282>>2]|0;
       $1284 = ($1279|0)==(0|0);
       $1285 = ($1281|0)==(0|0);
       $or$cond$i119 = $1284 | $1285;
       do {
        if ($or$cond$i119) {
         $output$0$i123 = 0;
        } else {
         $1286 = $1283 << 2;
         $1287 = (($1286) + 7)|0;
         $1288 = $1287 & -8;
         $1289 = HEAP32[$18>>2]|0;
         $1290 = (($1289) + ($1288))|0;
         $1291 = HEAP32[$21>>2]|0;
         $1292 = ($1290|0)>($1291|0);
         $1293 = HEAP32[$24>>2]|0;
         if ($1292) {
          $1294 = ($1293|0)==(0|0);
          if (!($1294)) {
           $1295 = (_malloc(8)|0);
           $1296 = HEAP32[$341>>2]|0;
           $1297 = (($1296) + ($1289))|0;
           HEAP32[$341>>2] = $1297;
           $1298 = HEAP32[$342>>2]|0;
           $1299 = (($1295) + 4|0);
           HEAP32[$1299>>2] = $1298;
           HEAP32[$1295>>2] = $1293;
           HEAP32[$342>>2] = $1295;
          }
          HEAP32[$21>>2] = $1288;
          $1300 = (_malloc($1288)|0);
          HEAP32[$24>>2] = $1300;
          HEAP32[$18>>2] = 0;
          $1302 = $1300;$1303 = 0;
         } else {
          $1302 = $1293;$1303 = $1289;
         }
         $1301 = (($1302) + ($1303)|0);
         $1304 = (($1303) + ($1288))|0;
         HEAP32[$18>>2] = $1304;
         $1305 = ($1283|0)>(0);
         if ($1305) {
          $i$01$i121 = 0;
         } else {
          $output$0$i123 = $1301;
          break;
         }
         while(1) {
          $1306 = (($1279) + ($i$01$i121<<2)|0);
          $1307 = HEAP32[$1306>>2]|0;
          $1308 = $1307 & 32767;
          $1309 = ($1308*46812)|0;
          $1310 = (($1281) + ($i$01$i121<<2)|0);
          $1311 = HEAP32[$1310>>2]|0;
          $1312 = $1311 & 32767;
          $1313 = ($1312*18724)|0;
          $1314 = (($1309) + 32768)|0;
          $1315 = (($1314) + ($1313))|0;
          $1316 = $1315 >> 16;
          $1317 = (($1301) + ($i$01$i121<<2)|0);
          HEAP32[$1317>>2] = $1316;
          $1318 = HEAP32[$1306>>2]|0;
          $1319 = $1318 & 32768;
          $1320 = ($1319|0)==(0);
          do {
           if (!($1320)) {
            $1321 = HEAP32[$1310>>2]|0;
            $1322 = $1321 & 32768;
            $1323 = ($1322|0)==(0);
            if ($1323) {
             break;
            }
            $1324 = $1316 | 32768;
            HEAP32[$1317>>2] = $1324;
           }
          } while(0);
          $1325 = (($i$01$i121) + 1)|0;
          $exitcond$i122 = ($1325|0)==($1283|0);
          if ($exitcond$i122) {
           $output$0$i123 = $1301;
           break;
          } else {
           $i$01$i121 = $1325;
          }
         }
        }
       } while(0);
       $1326 = HEAP32[$1141>>2]|0;
       $1327 = (($1326) + 8|0);
       HEAP32[$1327>>2] = $output$0$i123;
       $1328 = HEAP32[$1144>>2]|0;
       $1329 = HEAP32[$340>>2]|0;
       $1330 = (($1329) + ($1328<<2)|0);
       $1331 = HEAP32[$1330>>2]|0;
       $1332 = HEAP32[$1141>>2]|0;
       $1333 = HEAP32[$1332>>2]|0;
       $1334 = (($1332) + 28|0);
       $1335 = HEAP32[$1334>>2]|0;
       $1336 = (($1331) + 1284|0);
       $1337 = HEAP32[$1336>>2]|0;
       $1338 = ($1333|0)==(0|0);
       $1339 = ($1335|0)==(0|0);
       $or$cond$i126 = $1338 | $1339;
       do {
        if ($or$cond$i126) {
         $output$0$i130 = 0;
        } else {
         $1340 = $1337 << 2;
         $1341 = (($1340) + 7)|0;
         $1342 = $1341 & -8;
         $1343 = HEAP32[$18>>2]|0;
         $1344 = (($1343) + ($1342))|0;
         $1345 = HEAP32[$21>>2]|0;
         $1346 = ($1344|0)>($1345|0);
         $1347 = HEAP32[$24>>2]|0;
         if ($1346) {
          $1348 = ($1347|0)==(0|0);
          if (!($1348)) {
           $1349 = (_malloc(8)|0);
           $1350 = HEAP32[$341>>2]|0;
           $1351 = (($1350) + ($1343))|0;
           HEAP32[$341>>2] = $1351;
           $1352 = HEAP32[$342>>2]|0;
           $1353 = (($1349) + 4|0);
           HEAP32[$1353>>2] = $1352;
           HEAP32[$1349>>2] = $1347;
           HEAP32[$342>>2] = $1349;
          }
          HEAP32[$21>>2] = $1342;
          $1354 = (_malloc($1342)|0);
          HEAP32[$24>>2] = $1354;
          HEAP32[$18>>2] = 0;
          $1356 = $1354;$1357 = 0;
         } else {
          $1356 = $1347;$1357 = $1343;
         }
         $1355 = (($1356) + ($1357)|0);
         $1358 = (($1357) + ($1342))|0;
         HEAP32[$18>>2] = $1358;
         $1359 = ($1337|0)>(0);
         if ($1359) {
          $i$01$i128 = 0;
         } else {
          $output$0$i130 = $1355;
          break;
         }
         while(1) {
          $1360 = (($1333) + ($i$01$i128<<2)|0);
          $1361 = HEAP32[$1360>>2]|0;
          $1362 = $1361 & 32767;
          $1363 = ($1362*37450)|0;
          $1364 = (($1335) + ($i$01$i128<<2)|0);
          $1365 = HEAP32[$1364>>2]|0;
          $1366 = $1365 & 32767;
          $1367 = ($1366*28086)|0;
          $1368 = (($1363) + 32768)|0;
          $1369 = (($1368) + ($1367))|0;
          $1370 = $1369 >> 16;
          $1371 = (($1355) + ($i$01$i128<<2)|0);
          HEAP32[$1371>>2] = $1370;
          $1372 = HEAP32[$1360>>2]|0;
          $1373 = $1372 & 32768;
          $1374 = ($1373|0)==(0);
          do {
           if (!($1374)) {
            $1375 = HEAP32[$1364>>2]|0;
            $1376 = $1375 & 32768;
            $1377 = ($1376|0)==(0);
            if ($1377) {
             break;
            }
            $1378 = $1370 | 32768;
            HEAP32[$1371>>2] = $1378;
           }
          } while(0);
          $1379 = (($i$01$i128) + 1)|0;
          $exitcond$i129 = ($1379|0)==($1337|0);
          if ($exitcond$i129) {
           $output$0$i130 = $1355;
           break;
          } else {
           $i$01$i128 = $1379;
          }
         }
        }
       } while(0);
       $1380 = HEAP32[$1141>>2]|0;
       $1381 = (($1380) + 12|0);
       HEAP32[$1381>>2] = $output$0$i130;
       $1382 = HEAP32[$1144>>2]|0;
       $1383 = HEAP32[$340>>2]|0;
       $1384 = (($1383) + ($1382<<2)|0);
       $1385 = HEAP32[$1384>>2]|0;
       $1386 = HEAP32[$1141>>2]|0;
       $1387 = HEAP32[$1386>>2]|0;
       $1388 = (($1386) + 28|0);
       $1389 = HEAP32[$1388>>2]|0;
       $1390 = (($1385) + 1284|0);
       $1391 = HEAP32[$1390>>2]|0;
       $1392 = ($1387|0)==(0|0);
       $1393 = ($1389|0)==(0|0);
       $or$cond$i133 = $1392 | $1393;
       do {
        if ($or$cond$i133) {
         $output$0$i137 = 0;
        } else {
         $1394 = $1391 << 2;
         $1395 = (($1394) + 7)|0;
         $1396 = $1395 & -8;
         $1397 = HEAP32[$18>>2]|0;
         $1398 = (($1397) + ($1396))|0;
         $1399 = HEAP32[$21>>2]|0;
         $1400 = ($1398|0)>($1399|0);
         $1401 = HEAP32[$24>>2]|0;
         if ($1400) {
          $1402 = ($1401|0)==(0|0);
          if (!($1402)) {
           $1403 = (_malloc(8)|0);
           $1404 = HEAP32[$341>>2]|0;
           $1405 = (($1404) + ($1397))|0;
           HEAP32[$341>>2] = $1405;
           $1406 = HEAP32[$342>>2]|0;
           $1407 = (($1403) + 4|0);
           HEAP32[$1407>>2] = $1406;
           HEAP32[$1403>>2] = $1401;
           HEAP32[$342>>2] = $1403;
          }
          HEAP32[$21>>2] = $1396;
          $1408 = (_malloc($1396)|0);
          HEAP32[$24>>2] = $1408;
          HEAP32[$18>>2] = 0;
          $1410 = $1408;$1411 = 0;
         } else {
          $1410 = $1401;$1411 = $1397;
         }
         $1409 = (($1410) + ($1411)|0);
         $1412 = (($1411) + ($1396))|0;
         HEAP32[$18>>2] = $1412;
         $1413 = ($1391|0)>(0);
         if ($1413) {
          $i$01$i135 = 0;
         } else {
          $output$0$i137 = $1409;
          break;
         }
         while(1) {
          $1414 = (($1387) + ($i$01$i135<<2)|0);
          $1415 = HEAP32[$1414>>2]|0;
          $1416 = $1415 & 32767;
          $1417 = ($1416*28087)|0;
          $1418 = (($1389) + ($i$01$i135<<2)|0);
          $1419 = HEAP32[$1418>>2]|0;
          $1420 = $1419 & 32767;
          $1421 = ($1420*37449)|0;
          $1422 = (($1417) + 32768)|0;
          $1423 = (($1422) + ($1421))|0;
          $1424 = $1423 >> 16;
          $1425 = (($1409) + ($i$01$i135<<2)|0);
          HEAP32[$1425>>2] = $1424;
          $1426 = HEAP32[$1414>>2]|0;
          $1427 = $1426 & 32768;
          $1428 = ($1427|0)==(0);
          do {
           if (!($1428)) {
            $1429 = HEAP32[$1418>>2]|0;
            $1430 = $1429 & 32768;
            $1431 = ($1430|0)==(0);
            if ($1431) {
             break;
            }
            $1432 = $1424 | 32768;
            HEAP32[$1425>>2] = $1432;
           }
          } while(0);
          $1433 = (($i$01$i135) + 1)|0;
          $exitcond$i136 = ($1433|0)==($1391|0);
          if ($exitcond$i136) {
           $output$0$i137 = $1409;
           break;
          } else {
           $i$01$i135 = $1433;
          }
         }
        }
       } while(0);
       $1434 = HEAP32[$1141>>2]|0;
       $1435 = (($1434) + 16|0);
       HEAP32[$1435>>2] = $output$0$i137;
       $1436 = HEAP32[$1144>>2]|0;
       $1437 = HEAP32[$340>>2]|0;
       $1438 = (($1437) + ($1436<<2)|0);
       $1439 = HEAP32[$1438>>2]|0;
       $1440 = HEAP32[$1141>>2]|0;
       $1441 = HEAP32[$1440>>2]|0;
       $1442 = (($1440) + 28|0);
       $1443 = HEAP32[$1442>>2]|0;
       $1444 = (($1439) + 1284|0);
       $1445 = HEAP32[$1444>>2]|0;
       $1446 = ($1441|0)==(0|0);
       $1447 = ($1443|0)==(0|0);
       $or$cond$i140 = $1446 | $1447;
       do {
        if ($or$cond$i140) {
         $output$0$i144 = 0;
        } else {
         $1448 = $1445 << 2;
         $1449 = (($1448) + 7)|0;
         $1450 = $1449 & -8;
         $1451 = HEAP32[$18>>2]|0;
         $1452 = (($1451) + ($1450))|0;
         $1453 = HEAP32[$21>>2]|0;
         $1454 = ($1452|0)>($1453|0);
         $1455 = HEAP32[$24>>2]|0;
         if ($1454) {
          $1456 = ($1455|0)==(0|0);
          if (!($1456)) {
           $1457 = (_malloc(8)|0);
           $1458 = HEAP32[$341>>2]|0;
           $1459 = (($1458) + ($1451))|0;
           HEAP32[$341>>2] = $1459;
           $1460 = HEAP32[$342>>2]|0;
           $1461 = (($1457) + 4|0);
           HEAP32[$1461>>2] = $1460;
           HEAP32[$1457>>2] = $1455;
           HEAP32[$342>>2] = $1457;
          }
          HEAP32[$21>>2] = $1450;
          $1462 = (_malloc($1450)|0);
          HEAP32[$24>>2] = $1462;
          HEAP32[$18>>2] = 0;
          $1464 = $1462;$1465 = 0;
         } else {
          $1464 = $1455;$1465 = $1451;
         }
         $1463 = (($1464) + ($1465)|0);
         $1466 = (($1465) + ($1450))|0;
         HEAP32[$18>>2] = $1466;
         $1467 = ($1445|0)>(0);
         if ($1467) {
          $i$01$i142 = 0;
         } else {
          $output$0$i144 = $1463;
          break;
         }
         while(1) {
          $1468 = (($1441) + ($i$01$i142<<2)|0);
          $1469 = HEAP32[$1468>>2]|0;
          $1470 = $1469 & 32767;
          $1471 = ($1470*18725)|0;
          $1472 = (($1443) + ($i$01$i142<<2)|0);
          $1473 = HEAP32[$1472>>2]|0;
          $1474 = $1473 & 32767;
          $1475 = ($1474*46811)|0;
          $1476 = (($1471) + 32768)|0;
          $1477 = (($1476) + ($1475))|0;
          $1478 = $1477 >> 16;
          $1479 = (($1463) + ($i$01$i142<<2)|0);
          HEAP32[$1479>>2] = $1478;
          $1480 = HEAP32[$1468>>2]|0;
          $1481 = $1480 & 32768;
          $1482 = ($1481|0)==(0);
          do {
           if (!($1482)) {
            $1483 = HEAP32[$1472>>2]|0;
            $1484 = $1483 & 32768;
            $1485 = ($1484|0)==(0);
            if ($1485) {
             break;
            }
            $1486 = $1478 | 32768;
            HEAP32[$1479>>2] = $1486;
           }
          } while(0);
          $1487 = (($i$01$i142) + 1)|0;
          $exitcond$i143 = ($1487|0)==($1445|0);
          if ($exitcond$i143) {
           $output$0$i144 = $1463;
           break;
          } else {
           $i$01$i142 = $1487;
          }
         }
        }
       } while(0);
       $1488 = HEAP32[$1141>>2]|0;
       $1489 = (($1488) + 20|0);
       HEAP32[$1489>>2] = $output$0$i144;
       $1490 = HEAP32[$1144>>2]|0;
       $1491 = HEAP32[$340>>2]|0;
       $1492 = (($1491) + ($1490<<2)|0);
       $1493 = HEAP32[$1492>>2]|0;
       $1494 = HEAP32[$1141>>2]|0;
       $1495 = HEAP32[$1494>>2]|0;
       $1496 = (($1494) + 28|0);
       $1497 = HEAP32[$1496>>2]|0;
       $1498 = (($1493) + 1284|0);
       $1499 = HEAP32[$1498>>2]|0;
       $1500 = ($1495|0)==(0|0);
       $1501 = ($1497|0)==(0|0);
       $or$cond$i147 = $1500 | $1501;
       do {
        if ($or$cond$i147) {
         $output$0$i151 = 0;
        } else {
         $1502 = $1499 << 2;
         $1503 = (($1502) + 7)|0;
         $1504 = $1503 & -8;
         $1505 = HEAP32[$18>>2]|0;
         $1506 = (($1505) + ($1504))|0;
         $1507 = HEAP32[$21>>2]|0;
         $1508 = ($1506|0)>($1507|0);
         $1509 = HEAP32[$24>>2]|0;
         if ($1508) {
          $1510 = ($1509|0)==(0|0);
          if (!($1510)) {
           $1511 = (_malloc(8)|0);
           $1512 = HEAP32[$341>>2]|0;
           $1513 = (($1512) + ($1505))|0;
           HEAP32[$341>>2] = $1513;
           $1514 = HEAP32[$342>>2]|0;
           $1515 = (($1511) + 4|0);
           HEAP32[$1515>>2] = $1514;
           HEAP32[$1511>>2] = $1509;
           HEAP32[$342>>2] = $1511;
          }
          HEAP32[$21>>2] = $1504;
          $1516 = (_malloc($1504)|0);
          HEAP32[$24>>2] = $1516;
          HEAP32[$18>>2] = 0;
          $1518 = $1516;$1519 = 0;
         } else {
          $1518 = $1509;$1519 = $1505;
         }
         $1517 = (($1518) + ($1519)|0);
         $1520 = (($1519) + ($1504))|0;
         HEAP32[$18>>2] = $1520;
         $1521 = ($1499|0)>(0);
         if ($1521) {
          $i$01$i149 = 0;
         } else {
          $output$0$i151 = $1517;
          break;
         }
         while(1) {
          $1522 = (($1495) + ($i$01$i149<<2)|0);
          $1523 = HEAP32[$1522>>2]|0;
          $1524 = $1523 & 32767;
          $1525 = ($1524*9363)|0;
          $1526 = (($1497) + ($i$01$i149<<2)|0);
          $1527 = HEAP32[$1526>>2]|0;
          $1528 = $1527 & 32767;
          $1529 = ($1528*56173)|0;
          $1530 = (($1525) + 32768)|0;
          $1531 = (($1530) + ($1529))|0;
          $1532 = $1531 >> 16;
          $1533 = (($1517) + ($i$01$i149<<2)|0);
          HEAP32[$1533>>2] = $1532;
          $1534 = HEAP32[$1522>>2]|0;
          $1535 = $1534 & 32768;
          $1536 = ($1535|0)==(0);
          do {
           if (!($1536)) {
            $1537 = HEAP32[$1526>>2]|0;
            $1538 = $1537 & 32768;
            $1539 = ($1538|0)==(0);
            if ($1539) {
             break;
            }
            $1540 = $1532 | 32768;
            HEAP32[$1533>>2] = $1540;
           }
          } while(0);
          $1541 = (($i$01$i149) + 1)|0;
          $exitcond$i150 = ($1541|0)==($1499|0);
          if ($exitcond$i150) {
           $output$0$i151 = $1517;
           break;
          } else {
           $i$01$i149 = $1541;
          }
         }
        }
       } while(0);
       $1542 = HEAP32[$1141>>2]|0;
       $1543 = (($1542) + 24|0);
       HEAP32[$1543>>2] = $output$0$i151;
       $1544 = HEAP32[$1144>>2]|0;
       $1545 = HEAP32[$340>>2]|0;
       $1546 = (($1545) + ($1544<<2)|0);
       $1547 = HEAP32[$1546>>2]|0;
       $1548 = HEAP32[$1141>>2]|0;
       $1549 = (($1548) + 28|0);
       $1550 = HEAP32[$1549>>2]|0;
       $1551 = (($1548) + 56|0);
       $1552 = HEAP32[$1551>>2]|0;
       $1553 = (($1547) + 1284|0);
       $1554 = HEAP32[$1553>>2]|0;
       $1555 = ($1550|0)==(0|0);
       $1556 = ($1552|0)==(0|0);
       $or$cond$i154 = $1555 | $1556;
       do {
        if ($or$cond$i154) {
         $output$0$i158 = 0;
        } else {
         $1557 = $1554 << 2;
         $1558 = (($1557) + 7)|0;
         $1559 = $1558 & -8;
         $1560 = HEAP32[$18>>2]|0;
         $1561 = (($1560) + ($1559))|0;
         $1562 = HEAP32[$21>>2]|0;
         $1563 = ($1561|0)>($1562|0);
         $1564 = HEAP32[$24>>2]|0;
         if ($1563) {
          $1565 = ($1564|0)==(0|0);
          if (!($1565)) {
           $1566 = (_malloc(8)|0);
           $1567 = HEAP32[$341>>2]|0;
           $1568 = (($1567) + ($1560))|0;
           HEAP32[$341>>2] = $1568;
           $1569 = HEAP32[$342>>2]|0;
           $1570 = (($1566) + 4|0);
           HEAP32[$1570>>2] = $1569;
           HEAP32[$1566>>2] = $1564;
           HEAP32[$342>>2] = $1566;
          }
          HEAP32[$21>>2] = $1559;
          $1571 = (_malloc($1559)|0);
          HEAP32[$24>>2] = $1571;
          HEAP32[$18>>2] = 0;
          $1573 = $1571;$1574 = 0;
         } else {
          $1573 = $1564;$1574 = $1560;
         }
         $1572 = (($1573) + ($1574)|0);
         $1575 = (($1574) + ($1559))|0;
         HEAP32[$18>>2] = $1575;
         $1576 = ($1554|0)>(0);
         if ($1576) {
          $i$01$i156 = 0;
         } else {
          $output$0$i158 = $1572;
          break;
         }
         while(1) {
          $1577 = (($1550) + ($i$01$i156<<2)|0);
          $1578 = HEAP32[$1577>>2]|0;
          $1579 = $1578 & 32767;
          $1580 = ($1579*56174)|0;
          $1581 = (($1552) + ($i$01$i156<<2)|0);
          $1582 = HEAP32[$1581>>2]|0;
          $1583 = $1582 & 32767;
          $1584 = ($1583*9362)|0;
          $1585 = (($1580) + 32768)|0;
          $1586 = (($1585) + ($1584))|0;
          $1587 = $1586 >> 16;
          $1588 = (($1572) + ($i$01$i156<<2)|0);
          HEAP32[$1588>>2] = $1587;
          $1589 = HEAP32[$1577>>2]|0;
          $1590 = $1589 & 32768;
          $1591 = ($1590|0)==(0);
          do {
           if (!($1591)) {
            $1592 = HEAP32[$1581>>2]|0;
            $1593 = $1592 & 32768;
            $1594 = ($1593|0)==(0);
            if ($1594) {
             break;
            }
            $1595 = $1587 | 32768;
            HEAP32[$1588>>2] = $1595;
           }
          } while(0);
          $1596 = (($i$01$i156) + 1)|0;
          $exitcond$i157 = ($1596|0)==($1554|0);
          if ($exitcond$i157) {
           $output$0$i158 = $1572;
           break;
          } else {
           $i$01$i156 = $1596;
          }
         }
        }
       } while(0);
       $1597 = HEAP32[$1141>>2]|0;
       $1598 = (($1597) + 32|0);
       HEAP32[$1598>>2] = $output$0$i158;
       $1599 = HEAP32[$1144>>2]|0;
       $1600 = HEAP32[$340>>2]|0;
       $1601 = (($1600) + ($1599<<2)|0);
       $1602 = HEAP32[$1601>>2]|0;
       $1603 = HEAP32[$1141>>2]|0;
       $1604 = (($1603) + 28|0);
       $1605 = HEAP32[$1604>>2]|0;
       $1606 = (($1603) + 56|0);
       $1607 = HEAP32[$1606>>2]|0;
       $1608 = (($1602) + 1284|0);
       $1609 = HEAP32[$1608>>2]|0;
       $1610 = ($1605|0)==(0|0);
       $1611 = ($1607|0)==(0|0);
       $or$cond$i161 = $1610 | $1611;
       do {
        if ($or$cond$i161) {
         $output$0$i165 = 0;
        } else {
         $1612 = $1609 << 2;
         $1613 = (($1612) + 7)|0;
         $1614 = $1613 & -8;
         $1615 = HEAP32[$18>>2]|0;
         $1616 = (($1615) + ($1614))|0;
         $1617 = HEAP32[$21>>2]|0;
         $1618 = ($1616|0)>($1617|0);
         $1619 = HEAP32[$24>>2]|0;
         if ($1618) {
          $1620 = ($1619|0)==(0|0);
          if (!($1620)) {
           $1621 = (_malloc(8)|0);
           $1622 = HEAP32[$341>>2]|0;
           $1623 = (($1622) + ($1615))|0;
           HEAP32[$341>>2] = $1623;
           $1624 = HEAP32[$342>>2]|0;
           $1625 = (($1621) + 4|0);
           HEAP32[$1625>>2] = $1624;
           HEAP32[$1621>>2] = $1619;
           HEAP32[$342>>2] = $1621;
          }
          HEAP32[$21>>2] = $1614;
          $1626 = (_malloc($1614)|0);
          HEAP32[$24>>2] = $1626;
          HEAP32[$18>>2] = 0;
          $1628 = $1626;$1629 = 0;
         } else {
          $1628 = $1619;$1629 = $1615;
         }
         $1627 = (($1628) + ($1629)|0);
         $1630 = (($1629) + ($1614))|0;
         HEAP32[$18>>2] = $1630;
         $1631 = ($1609|0)>(0);
         if ($1631) {
          $i$01$i163 = 0;
         } else {
          $output$0$i165 = $1627;
          break;
         }
         while(1) {
          $1632 = (($1605) + ($i$01$i163<<2)|0);
          $1633 = HEAP32[$1632>>2]|0;
          $1634 = $1633 & 32767;
          $1635 = ($1634*46812)|0;
          $1636 = (($1607) + ($i$01$i163<<2)|0);
          $1637 = HEAP32[$1636>>2]|0;
          $1638 = $1637 & 32767;
          $1639 = ($1638*18724)|0;
          $1640 = (($1635) + 32768)|0;
          $1641 = (($1640) + ($1639))|0;
          $1642 = $1641 >> 16;
          $1643 = (($1627) + ($i$01$i163<<2)|0);
          HEAP32[$1643>>2] = $1642;
          $1644 = HEAP32[$1632>>2]|0;
          $1645 = $1644 & 32768;
          $1646 = ($1645|0)==(0);
          do {
           if (!($1646)) {
            $1647 = HEAP32[$1636>>2]|0;
            $1648 = $1647 & 32768;
            $1649 = ($1648|0)==(0);
            if ($1649) {
             break;
            }
            $1650 = $1642 | 32768;
            HEAP32[$1643>>2] = $1650;
           }
          } while(0);
          $1651 = (($i$01$i163) + 1)|0;
          $exitcond$i164 = ($1651|0)==($1609|0);
          if ($exitcond$i164) {
           $output$0$i165 = $1627;
           break;
          } else {
           $i$01$i163 = $1651;
          }
         }
        }
       } while(0);
       $1652 = HEAP32[$1141>>2]|0;
       $1653 = (($1652) + 36|0);
       HEAP32[$1653>>2] = $output$0$i165;
       $1654 = HEAP32[$1144>>2]|0;
       $1655 = HEAP32[$340>>2]|0;
       $1656 = (($1655) + ($1654<<2)|0);
       $1657 = HEAP32[$1656>>2]|0;
       $1658 = HEAP32[$1141>>2]|0;
       $1659 = (($1658) + 28|0);
       $1660 = HEAP32[$1659>>2]|0;
       $1661 = (($1658) + 56|0);
       $1662 = HEAP32[$1661>>2]|0;
       $1663 = (($1657) + 1284|0);
       $1664 = HEAP32[$1663>>2]|0;
       $1665 = ($1660|0)==(0|0);
       $1666 = ($1662|0)==(0|0);
       $or$cond$i168 = $1665 | $1666;
       do {
        if ($or$cond$i168) {
         $output$0$i172 = 0;
        } else {
         $1667 = $1664 << 2;
         $1668 = (($1667) + 7)|0;
         $1669 = $1668 & -8;
         $1670 = HEAP32[$18>>2]|0;
         $1671 = (($1670) + ($1669))|0;
         $1672 = HEAP32[$21>>2]|0;
         $1673 = ($1671|0)>($1672|0);
         $1674 = HEAP32[$24>>2]|0;
         if ($1673) {
          $1675 = ($1674|0)==(0|0);
          if (!($1675)) {
           $1676 = (_malloc(8)|0);
           $1677 = HEAP32[$341>>2]|0;
           $1678 = (($1677) + ($1670))|0;
           HEAP32[$341>>2] = $1678;
           $1679 = HEAP32[$342>>2]|0;
           $1680 = (($1676) + 4|0);
           HEAP32[$1680>>2] = $1679;
           HEAP32[$1676>>2] = $1674;
           HEAP32[$342>>2] = $1676;
          }
          HEAP32[$21>>2] = $1669;
          $1681 = (_malloc($1669)|0);
          HEAP32[$24>>2] = $1681;
          HEAP32[$18>>2] = 0;
          $1683 = $1681;$1684 = 0;
         } else {
          $1683 = $1674;$1684 = $1670;
         }
         $1682 = (($1683) + ($1684)|0);
         $1685 = (($1684) + ($1669))|0;
         HEAP32[$18>>2] = $1685;
         $1686 = ($1664|0)>(0);
         if ($1686) {
          $i$01$i170 = 0;
         } else {
          $output$0$i172 = $1682;
          break;
         }
         while(1) {
          $1687 = (($1660) + ($i$01$i170<<2)|0);
          $1688 = HEAP32[$1687>>2]|0;
          $1689 = $1688 & 32767;
          $1690 = ($1689*37450)|0;
          $1691 = (($1662) + ($i$01$i170<<2)|0);
          $1692 = HEAP32[$1691>>2]|0;
          $1693 = $1692 & 32767;
          $1694 = ($1693*28086)|0;
          $1695 = (($1690) + 32768)|0;
          $1696 = (($1695) + ($1694))|0;
          $1697 = $1696 >> 16;
          $1698 = (($1682) + ($i$01$i170<<2)|0);
          HEAP32[$1698>>2] = $1697;
          $1699 = HEAP32[$1687>>2]|0;
          $1700 = $1699 & 32768;
          $1701 = ($1700|0)==(0);
          do {
           if (!($1701)) {
            $1702 = HEAP32[$1691>>2]|0;
            $1703 = $1702 & 32768;
            $1704 = ($1703|0)==(0);
            if ($1704) {
             break;
            }
            $1705 = $1697 | 32768;
            HEAP32[$1698>>2] = $1705;
           }
          } while(0);
          $1706 = (($i$01$i170) + 1)|0;
          $exitcond$i171 = ($1706|0)==($1664|0);
          if ($exitcond$i171) {
           $output$0$i172 = $1682;
           break;
          } else {
           $i$01$i170 = $1706;
          }
         }
        }
       } while(0);
       $1707 = HEAP32[$1141>>2]|0;
       $1708 = (($1707) + 40|0);
       HEAP32[$1708>>2] = $output$0$i172;
       $1709 = HEAP32[$1144>>2]|0;
       $1710 = HEAP32[$340>>2]|0;
       $1711 = (($1710) + ($1709<<2)|0);
       $1712 = HEAP32[$1711>>2]|0;
       $1713 = HEAP32[$1141>>2]|0;
       $1714 = (($1713) + 28|0);
       $1715 = HEAP32[$1714>>2]|0;
       $1716 = (($1713) + 56|0);
       $1717 = HEAP32[$1716>>2]|0;
       $1718 = (($1712) + 1284|0);
       $1719 = HEAP32[$1718>>2]|0;
       $1720 = ($1715|0)==(0|0);
       $1721 = ($1717|0)==(0|0);
       $or$cond$i175 = $1720 | $1721;
       do {
        if ($or$cond$i175) {
         $output$0$i179 = 0;
        } else {
         $1722 = $1719 << 2;
         $1723 = (($1722) + 7)|0;
         $1724 = $1723 & -8;
         $1725 = HEAP32[$18>>2]|0;
         $1726 = (($1725) + ($1724))|0;
         $1727 = HEAP32[$21>>2]|0;
         $1728 = ($1726|0)>($1727|0);
         $1729 = HEAP32[$24>>2]|0;
         if ($1728) {
          $1730 = ($1729|0)==(0|0);
          if (!($1730)) {
           $1731 = (_malloc(8)|0);
           $1732 = HEAP32[$341>>2]|0;
           $1733 = (($1732) + ($1725))|0;
           HEAP32[$341>>2] = $1733;
           $1734 = HEAP32[$342>>2]|0;
           $1735 = (($1731) + 4|0);
           HEAP32[$1735>>2] = $1734;
           HEAP32[$1731>>2] = $1729;
           HEAP32[$342>>2] = $1731;
          }
          HEAP32[$21>>2] = $1724;
          $1736 = (_malloc($1724)|0);
          HEAP32[$24>>2] = $1736;
          HEAP32[$18>>2] = 0;
          $1738 = $1736;$1739 = 0;
         } else {
          $1738 = $1729;$1739 = $1725;
         }
         $1737 = (($1738) + ($1739)|0);
         $1740 = (($1739) + ($1724))|0;
         HEAP32[$18>>2] = $1740;
         $1741 = ($1719|0)>(0);
         if ($1741) {
          $i$01$i177 = 0;
         } else {
          $output$0$i179 = $1737;
          break;
         }
         while(1) {
          $1742 = (($1715) + ($i$01$i177<<2)|0);
          $1743 = HEAP32[$1742>>2]|0;
          $1744 = $1743 & 32767;
          $1745 = ($1744*28087)|0;
          $1746 = (($1717) + ($i$01$i177<<2)|0);
          $1747 = HEAP32[$1746>>2]|0;
          $1748 = $1747 & 32767;
          $1749 = ($1748*37449)|0;
          $1750 = (($1745) + 32768)|0;
          $1751 = (($1750) + ($1749))|0;
          $1752 = $1751 >> 16;
          $1753 = (($1737) + ($i$01$i177<<2)|0);
          HEAP32[$1753>>2] = $1752;
          $1754 = HEAP32[$1742>>2]|0;
          $1755 = $1754 & 32768;
          $1756 = ($1755|0)==(0);
          do {
           if (!($1756)) {
            $1757 = HEAP32[$1746>>2]|0;
            $1758 = $1757 & 32768;
            $1759 = ($1758|0)==(0);
            if ($1759) {
             break;
            }
            $1760 = $1752 | 32768;
            HEAP32[$1753>>2] = $1760;
           }
          } while(0);
          $1761 = (($i$01$i177) + 1)|0;
          $exitcond$i178 = ($1761|0)==($1719|0);
          if ($exitcond$i178) {
           $output$0$i179 = $1737;
           break;
          } else {
           $i$01$i177 = $1761;
          }
         }
        }
       } while(0);
       $1762 = HEAP32[$1141>>2]|0;
       $1763 = (($1762) + 44|0);
       HEAP32[$1763>>2] = $output$0$i179;
       $1764 = HEAP32[$1144>>2]|0;
       $1765 = HEAP32[$340>>2]|0;
       $1766 = (($1765) + ($1764<<2)|0);
       $1767 = HEAP32[$1766>>2]|0;
       $1768 = HEAP32[$1141>>2]|0;
       $1769 = (($1768) + 28|0);
       $1770 = HEAP32[$1769>>2]|0;
       $1771 = (($1768) + 56|0);
       $1772 = HEAP32[$1771>>2]|0;
       $1773 = (($1767) + 1284|0);
       $1774 = HEAP32[$1773>>2]|0;
       $1775 = ($1770|0)==(0|0);
       $1776 = ($1772|0)==(0|0);
       $or$cond$i182 = $1775 | $1776;
       do {
        if ($or$cond$i182) {
         $output$0$i186 = 0;
        } else {
         $1777 = $1774 << 2;
         $1778 = (($1777) + 7)|0;
         $1779 = $1778 & -8;
         $1780 = HEAP32[$18>>2]|0;
         $1781 = (($1780) + ($1779))|0;
         $1782 = HEAP32[$21>>2]|0;
         $1783 = ($1781|0)>($1782|0);
         $1784 = HEAP32[$24>>2]|0;
         if ($1783) {
          $1785 = ($1784|0)==(0|0);
          if (!($1785)) {
           $1786 = (_malloc(8)|0);
           $1787 = HEAP32[$341>>2]|0;
           $1788 = (($1787) + ($1780))|0;
           HEAP32[$341>>2] = $1788;
           $1789 = HEAP32[$342>>2]|0;
           $1790 = (($1786) + 4|0);
           HEAP32[$1790>>2] = $1789;
           HEAP32[$1786>>2] = $1784;
           HEAP32[$342>>2] = $1786;
          }
          HEAP32[$21>>2] = $1779;
          $1791 = (_malloc($1779)|0);
          HEAP32[$24>>2] = $1791;
          HEAP32[$18>>2] = 0;
          $1793 = $1791;$1794 = 0;
         } else {
          $1793 = $1784;$1794 = $1780;
         }
         $1792 = (($1793) + ($1794)|0);
         $1795 = (($1794) + ($1779))|0;
         HEAP32[$18>>2] = $1795;
         $1796 = ($1774|0)>(0);
         if ($1796) {
          $i$01$i184 = 0;
         } else {
          $output$0$i186 = $1792;
          break;
         }
         while(1) {
          $1797 = (($1770) + ($i$01$i184<<2)|0);
          $1798 = HEAP32[$1797>>2]|0;
          $1799 = $1798 & 32767;
          $1800 = ($1799*18725)|0;
          $1801 = (($1772) + ($i$01$i184<<2)|0);
          $1802 = HEAP32[$1801>>2]|0;
          $1803 = $1802 & 32767;
          $1804 = ($1803*46811)|0;
          $1805 = (($1800) + 32768)|0;
          $1806 = (($1805) + ($1804))|0;
          $1807 = $1806 >> 16;
          $1808 = (($1792) + ($i$01$i184<<2)|0);
          HEAP32[$1808>>2] = $1807;
          $1809 = HEAP32[$1797>>2]|0;
          $1810 = $1809 & 32768;
          $1811 = ($1810|0)==(0);
          do {
           if (!($1811)) {
            $1812 = HEAP32[$1801>>2]|0;
            $1813 = $1812 & 32768;
            $1814 = ($1813|0)==(0);
            if ($1814) {
             break;
            }
            $1815 = $1807 | 32768;
            HEAP32[$1808>>2] = $1815;
           }
          } while(0);
          $1816 = (($i$01$i184) + 1)|0;
          $exitcond$i185 = ($1816|0)==($1774|0);
          if ($exitcond$i185) {
           $output$0$i186 = $1792;
           break;
          } else {
           $i$01$i184 = $1816;
          }
         }
        }
       } while(0);
       $1817 = HEAP32[$1141>>2]|0;
       $1818 = (($1817) + 48|0);
       HEAP32[$1818>>2] = $output$0$i186;
       $1819 = HEAP32[$1144>>2]|0;
       $1820 = HEAP32[$340>>2]|0;
       $1821 = (($1820) + ($1819<<2)|0);
       $1822 = HEAP32[$1821>>2]|0;
       $1823 = HEAP32[$1141>>2]|0;
       $1824 = (($1823) + 28|0);
       $1825 = HEAP32[$1824>>2]|0;
       $1826 = (($1823) + 56|0);
       $1827 = HEAP32[$1826>>2]|0;
       $1828 = (($1822) + 1284|0);
       $1829 = HEAP32[$1828>>2]|0;
       $1830 = ($1825|0)==(0|0);
       $1831 = ($1827|0)==(0|0);
       $or$cond$i189 = $1830 | $1831;
       do {
        if ($or$cond$i189) {
         $output$0$i193 = 0;
        } else {
         $1832 = $1829 << 2;
         $1833 = (($1832) + 7)|0;
         $1834 = $1833 & -8;
         $1835 = HEAP32[$18>>2]|0;
         $1836 = (($1835) + ($1834))|0;
         $1837 = HEAP32[$21>>2]|0;
         $1838 = ($1836|0)>($1837|0);
         $1839 = HEAP32[$24>>2]|0;
         if ($1838) {
          $1840 = ($1839|0)==(0|0);
          if (!($1840)) {
           $1841 = (_malloc(8)|0);
           $1842 = HEAP32[$341>>2]|0;
           $1843 = (($1842) + ($1835))|0;
           HEAP32[$341>>2] = $1843;
           $1844 = HEAP32[$342>>2]|0;
           $1845 = (($1841) + 4|0);
           HEAP32[$1845>>2] = $1844;
           HEAP32[$1841>>2] = $1839;
           HEAP32[$342>>2] = $1841;
          }
          HEAP32[$21>>2] = $1834;
          $1846 = (_malloc($1834)|0);
          HEAP32[$24>>2] = $1846;
          HEAP32[$18>>2] = 0;
          $1848 = $1846;$1849 = 0;
         } else {
          $1848 = $1839;$1849 = $1835;
         }
         $1847 = (($1848) + ($1849)|0);
         $1850 = (($1849) + ($1834))|0;
         HEAP32[$18>>2] = $1850;
         $1851 = ($1829|0)>(0);
         if ($1851) {
          $i$01$i191 = 0;
         } else {
          $output$0$i193 = $1847;
          break;
         }
         while(1) {
          $1852 = (($1825) + ($i$01$i191<<2)|0);
          $1853 = HEAP32[$1852>>2]|0;
          $1854 = $1853 & 32767;
          $1855 = ($1854*9363)|0;
          $1856 = (($1827) + ($i$01$i191<<2)|0);
          $1857 = HEAP32[$1856>>2]|0;
          $1858 = $1857 & 32767;
          $1859 = ($1858*56173)|0;
          $1860 = (($1855) + 32768)|0;
          $1861 = (($1860) + ($1859))|0;
          $1862 = $1861 >> 16;
          $1863 = (($1847) + ($i$01$i191<<2)|0);
          HEAP32[$1863>>2] = $1862;
          $1864 = HEAP32[$1852>>2]|0;
          $1865 = $1864 & 32768;
          $1866 = ($1865|0)==(0);
          do {
           if (!($1866)) {
            $1867 = HEAP32[$1856>>2]|0;
            $1868 = $1867 & 32768;
            $1869 = ($1868|0)==(0);
            if ($1869) {
             break;
            }
            $1870 = $1862 | 32768;
            HEAP32[$1863>>2] = $1870;
           }
          } while(0);
          $1871 = (($i$01$i191) + 1)|0;
          $exitcond$i192 = ($1871|0)==($1829|0);
          if ($exitcond$i192) {
           $output$0$i193 = $1847;
           break;
          } else {
           $i$01$i191 = $1871;
          }
         }
        }
       } while(0);
       $1872 = HEAP32[$1141>>2]|0;
       $1873 = (($1872) + 52|0);
       HEAP32[$1873>>2] = $output$0$i193;
      }
     }
     $1874 = (($i$130) + 1)|0;
     $1875 = HEAP32[$12>>2]|0;
     $1876 = ($1874|0)<($1875|0);
     if (!($1876)) {
      $$pre$phi61Z2D = $338;$$pre$phi65Z2D = $340;$1878 = $1875;
      break L99;
     }
     $$pre229 = HEAP32[$18>>2]|0;
     $$pre230 = HEAP32[$24>>2]|0;
     $1126 = $$pre229;$1129 = $$pre230;$i$130 = $1874;
    }
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $1097 = (($336) + ($i$130$us<<2)|0);
    $351 = HEAP32[$1097>>2]|0;
    $1098 = (($35) + ($i$130$us<<2)|0);
    $349 = HEAP32[$1098>>2]|0;
    $1099 = HEAP32[$vb>>2]|0;
    $1100 = (($1099) + ($i$130$us<<2)|0);
    $348 = HEAP32[$1100>>2]|0;
    $345 = (($348) + ($$pre$phiZ2D<<2)|0);
    HEAP32[$96>>2] = $87;
    $1101 = (($1102) + 64)|0;
    $1103 = HEAP32[$21>>2]|0;
    $1104 = ($1101|0)>($1103|0);
    if ($1104) {
     $1106 = ($1105|0)==(0|0);
     if (!($1106)) {
      $1107 = (_malloc(8)|0);
      $1108 = HEAP32[$341>>2]|0;
      $1109 = (($1108) + ($1102))|0;
      HEAP32[$341>>2] = $1109;
      $1110 = HEAP32[$342>>2]|0;
      $1111 = (($1107) + 4|0);
      HEAP32[$1111>>2] = $1110;
      HEAP32[$1107>>2] = $1105;
      HEAP32[$342>>2] = $1107;
     }
     HEAP32[$21>>2] = 64;
     $1112 = (_malloc(64)|0);
     HEAP32[$24>>2] = $1112;
     HEAP32[$18>>2] = 0;
     $1114 = $1112;$1115 = 0;
    } else {
     $1114 = $1105;$1115 = $1102;
    }
    $1113 = (($1114) + ($1115)|0);
    $1116 = (($1115) + 64)|0;
    HEAP32[$18>>2] = $1116;
    $361 = (($75) + ($i$130$us<<2)|0);
    HEAP32[$361>>2] = $1113;
    dest=$1113+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $j$121$us = 0;
    while(1) {
     $1085 = (($349) + ($j$121$us<<2)|0);
     $$val$us = +HEAPF32[$1085>>2];
     $1086 = (HEAPF32[tempDoublePtr>>2]=$$val$us,HEAP32[tempDoublePtr>>2]|0);
     $1087 = $1086 & 2147483647;
     $1088 = (+($1087>>>0));
     $1089 = $1088 * 7.1771142984289326705E-7;
     $1090 = $1089 + -764.6162109375;
     $1091 = $1090;
     $1092 = $1091 + 0.344999999999999973355;
     $1093 = $1092;
     $$sum1$us = (($j$121$us) + ($$pre$phiZ2D))|0;
     $1094 = (($348) + ($$sum1$us<<2)|0);
     HEAPF32[$1094>>2] = $1093;
     $1095 = (($j$121$us) + 1)|0;
     $1096 = ($1095|0)<($$pre$phiZ2D|0);
     if ($1096) {
      $j$121$us = $1095;
     } else {
      break;
     }
    }
    __vp_noisemask($95,$345,$314);
    $346 = (($83) + ($i$130$us<<2)|0);
    $347 = +HEAPF32[$346>>2];
    __vp_tonemask($95,$348,$330,$global_ampmax$0$lcssa,$347);
    __vp_offset_and_mix($95,$314,$330,1,$348,$349,$345);
    $350 = (($338) + ($351<<2)|0);
    $352 = HEAP32[$350>>2]|0;
    $353 = (($339) + ($352<<2)|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($354|0)==(1);
    if (!($355)) {
     $$0 = -1;
     break;
    }
    $356 = HEAP32[$340>>2]|0;
    $357 = (($356) + ($352<<2)|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = (_floor1_fit($vb,$358,$345,$348)|0);
    $360 = HEAP32[$361>>2]|0;
    $362 = (($360) + 28|0);
    HEAP32[$362>>2] = $359;
    $363 = HEAP32[$0>>2]|0;
    $364 = (($363) + 104|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = (($365) + 80|0);
    $367 = HEAP32[$366>>2]|0;
    $not$$i = ($367|0)==(0);
    if (!($not$$i)) {
     $368 = HEAP32[$361>>2]|0;
     $369 = (($368) + 28|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0|0);
     if (!($371)) {
      $372 = HEAP32[$95>>2]|0;
      $373 = HEAP32[$343>>2]|0;
      $374 = (($373) + 20|0);
      $375 = +HEAPF32[$374>>2];
      $376 = ($372|0)>(0);
      if ($376) {
       $377 = HEAP32[$344>>2]|0;
       $378 = (($377) + 8|0);
       $379 = HEAP32[$378>>2]|0;
       $380 = (($373) + 108|0);
       $i$01$i = 0;
       while(1) {
        $381 = (($314) + ($i$01$i<<2)|0);
        $382 = +HEAPF32[$381>>2];
        $383 = (($379) + ($i$01$i<<2)|0);
        $384 = +HEAPF32[$383>>2];
        $385 = $382 + $384;
        $386 = +HEAPF32[$380>>2];
        $387 = $385 > $386;
        $val$0$i = $387 ? $386 : $385;
        $388 = (($330) + ($i$01$i<<2)|0);
        $389 = +HEAPF32[$388>>2];
        $390 = $375 + $389;
        $391 = $val$0$i < $390;
        $$val$0$i = $391 ? $390 : $val$0$i;
        $392 = (($348) + ($i$01$i<<2)|0);
        HEAPF32[$392>>2] = $$val$0$i;
        $393 = (($i$01$i) + 1)|0;
        $exitcond$i8 = ($393|0)==($372|0);
        if ($exitcond$i8) {
         break;
        } else {
         $i$01$i = $393;
        }
       }
      }
      $394 = HEAP32[$350>>2]|0;
      $395 = HEAP32[$340>>2]|0;
      $396 = (($395) + ($394<<2)|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = (_floor1_fit($vb,$397,$345,$348)|0);
      $399 = HEAP32[$361>>2]|0;
      $400 = (($399) + 56|0);
      HEAP32[$400>>2] = $398;
      $401 = HEAP32[$95>>2]|0;
      $402 = HEAP32[$343>>2]|0;
      $403 = (($402) + 12|0);
      $404 = +HEAPF32[$403>>2];
      $405 = ($401|0)>(0);
      if ($405) {
       $406 = HEAP32[$344>>2]|0;
       $407 = HEAP32[$406>>2]|0;
       $408 = (($402) + 108|0);
       $i$01$i10 = 0;
       while(1) {
        $409 = (($314) + ($i$01$i10<<2)|0);
        $410 = +HEAPF32[$409>>2];
        $411 = (($407) + ($i$01$i10<<2)|0);
        $412 = +HEAPF32[$411>>2];
        $413 = $410 + $412;
        $414 = +HEAPF32[$408>>2];
        $415 = $413 > $414;
        $val$0$i11 = $415 ? $414 : $413;
        $416 = (($330) + ($i$01$i10<<2)|0);
        $417 = +HEAPF32[$416>>2];
        $418 = $404 + $417;
        $419 = $val$0$i11 < $418;
        $$val$0$i12 = $419 ? $418 : $val$0$i11;
        $420 = (($348) + ($i$01$i10<<2)|0);
        HEAPF32[$420>>2] = $$val$0$i12;
        $421 = (($i$01$i10) + 1)|0;
        $exitcond$i13 = ($421|0)==($401|0);
        if ($exitcond$i13) {
         break;
        } else {
         $i$01$i10 = $421;
        }
       }
      }
      $422 = HEAP32[$350>>2]|0;
      $423 = HEAP32[$340>>2]|0;
      $424 = (($423) + ($422<<2)|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = (_floor1_fit($vb,$425,$345,$348)|0);
      $427 = HEAP32[$361>>2]|0;
      HEAP32[$427>>2] = $426;
      $428 = HEAP32[$350>>2]|0;
      $429 = HEAP32[$340>>2]|0;
      $430 = (($429) + ($428<<2)|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = HEAP32[$361>>2]|0;
      $433 = HEAP32[$432>>2]|0;
      $434 = (($432) + 28|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = (($431) + 1284|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = ($433|0)==(0|0);
      $439 = ($435|0)==(0|0);
      $or$cond$i = $438 | $439;
      do {
       if ($or$cond$i) {
        $output$0$i = 0;
       } else {
        $440 = $437 << 2;
        $441 = (($440) + 7)|0;
        $442 = $441 & -8;
        $443 = HEAP32[$18>>2]|0;
        $444 = (($443) + ($442))|0;
        $445 = HEAP32[$21>>2]|0;
        $446 = ($444|0)>($445|0);
        $447 = HEAP32[$24>>2]|0;
        if ($446) {
         $448 = ($447|0)==(0|0);
         if (!($448)) {
          $449 = (_malloc(8)|0);
          $450 = HEAP32[$341>>2]|0;
          $451 = (($450) + ($443))|0;
          HEAP32[$341>>2] = $451;
          $452 = HEAP32[$342>>2]|0;
          $453 = (($449) + 4|0);
          HEAP32[$453>>2] = $452;
          HEAP32[$449>>2] = $447;
          HEAP32[$342>>2] = $449;
         }
         HEAP32[$21>>2] = $442;
         $454 = (_malloc($442)|0);
         HEAP32[$24>>2] = $454;
         HEAP32[$18>>2] = 0;
         $456 = $454;$457 = 0;
        } else {
         $456 = $447;$457 = $443;
        }
        $455 = (($456) + ($457)|0);
        $458 = (($457) + ($442))|0;
        HEAP32[$18>>2] = $458;
        $459 = ($437|0)>(0);
        if ($459) {
         $i$01$i16 = 0;
        } else {
         $output$0$i = $455;
         break;
        }
        while(1) {
         $460 = (($433) + ($i$01$i16<<2)|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = $461 & 32767;
         $463 = ($462*56174)|0;
         $464 = (($435) + ($i$01$i16<<2)|0);
         $465 = HEAP32[$464>>2]|0;
         $466 = $465 & 32767;
         $467 = ($466*9362)|0;
         $468 = (($463) + 32768)|0;
         $469 = (($468) + ($467))|0;
         $470 = $469 >> 16;
         $471 = (($455) + ($i$01$i16<<2)|0);
         HEAP32[$471>>2] = $470;
         $472 = HEAP32[$460>>2]|0;
         $473 = $472 & 32768;
         $474 = ($473|0)==(0);
         do {
          if (!($474)) {
           $475 = HEAP32[$464>>2]|0;
           $476 = $475 & 32768;
           $477 = ($476|0)==(0);
           if ($477) {
            break;
           }
           $478 = $470 | 32768;
           HEAP32[$471>>2] = $478;
          }
         } while(0);
         $479 = (($i$01$i16) + 1)|0;
         $exitcond$i17 = ($479|0)==($437|0);
         if ($exitcond$i17) {
          $output$0$i = $455;
          break;
         } else {
          $i$01$i16 = $479;
         }
        }
       }
      } while(0);
      $480 = HEAP32[$361>>2]|0;
      $481 = (($480) + 4|0);
      HEAP32[$481>>2] = $output$0$i;
      $482 = HEAP32[$350>>2]|0;
      $483 = HEAP32[$340>>2]|0;
      $484 = (($483) + ($482<<2)|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = HEAP32[$361>>2]|0;
      $487 = HEAP32[$486>>2]|0;
      $488 = (($486) + 28|0);
      $489 = HEAP32[$488>>2]|0;
      $490 = (($485) + 1284|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = ($487|0)==(0|0);
      $493 = ($489|0)==(0|0);
      $or$cond$i19 = $492 | $493;
      do {
       if ($or$cond$i19) {
        $output$0$i23 = 0;
       } else {
        $494 = $491 << 2;
        $495 = (($494) + 7)|0;
        $496 = $495 & -8;
        $497 = HEAP32[$18>>2]|0;
        $498 = (($497) + ($496))|0;
        $499 = HEAP32[$21>>2]|0;
        $500 = ($498|0)>($499|0);
        $501 = HEAP32[$24>>2]|0;
        if ($500) {
         $502 = ($501|0)==(0|0);
         if (!($502)) {
          $503 = (_malloc(8)|0);
          $504 = HEAP32[$341>>2]|0;
          $505 = (($504) + ($497))|0;
          HEAP32[$341>>2] = $505;
          $506 = HEAP32[$342>>2]|0;
          $507 = (($503) + 4|0);
          HEAP32[$507>>2] = $506;
          HEAP32[$503>>2] = $501;
          HEAP32[$342>>2] = $503;
         }
         HEAP32[$21>>2] = $496;
         $508 = (_malloc($496)|0);
         HEAP32[$24>>2] = $508;
         HEAP32[$18>>2] = 0;
         $510 = $508;$511 = 0;
        } else {
         $510 = $501;$511 = $497;
        }
        $509 = (($510) + ($511)|0);
        $512 = (($511) + ($496))|0;
        HEAP32[$18>>2] = $512;
        $513 = ($491|0)>(0);
        if ($513) {
         $i$01$i21 = 0;
        } else {
         $output$0$i23 = $509;
         break;
        }
        while(1) {
         $514 = (($487) + ($i$01$i21<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = $515 & 32767;
         $517 = ($516*46812)|0;
         $518 = (($489) + ($i$01$i21<<2)|0);
         $519 = HEAP32[$518>>2]|0;
         $520 = $519 & 32767;
         $521 = ($520*18724)|0;
         $522 = (($517) + 32768)|0;
         $523 = (($522) + ($521))|0;
         $524 = $523 >> 16;
         $525 = (($509) + ($i$01$i21<<2)|0);
         HEAP32[$525>>2] = $524;
         $526 = HEAP32[$514>>2]|0;
         $527 = $526 & 32768;
         $528 = ($527|0)==(0);
         do {
          if (!($528)) {
           $529 = HEAP32[$518>>2]|0;
           $530 = $529 & 32768;
           $531 = ($530|0)==(0);
           if ($531) {
            break;
           }
           $532 = $524 | 32768;
           HEAP32[$525>>2] = $532;
          }
         } while(0);
         $533 = (($i$01$i21) + 1)|0;
         $exitcond$i22 = ($533|0)==($491|0);
         if ($exitcond$i22) {
          $output$0$i23 = $509;
          break;
         } else {
          $i$01$i21 = $533;
         }
        }
       }
      } while(0);
      $534 = HEAP32[$361>>2]|0;
      $535 = (($534) + 8|0);
      HEAP32[$535>>2] = $output$0$i23;
      $536 = HEAP32[$350>>2]|0;
      $537 = HEAP32[$340>>2]|0;
      $538 = (($537) + ($536<<2)|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = HEAP32[$361>>2]|0;
      $541 = HEAP32[$540>>2]|0;
      $542 = (($540) + 28|0);
      $543 = HEAP32[$542>>2]|0;
      $544 = (($539) + 1284|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ($541|0)==(0|0);
      $547 = ($543|0)==(0|0);
      $or$cond$i26 = $546 | $547;
      do {
       if ($or$cond$i26) {
        $output$0$i30 = 0;
       } else {
        $548 = $545 << 2;
        $549 = (($548) + 7)|0;
        $550 = $549 & -8;
        $551 = HEAP32[$18>>2]|0;
        $552 = (($551) + ($550))|0;
        $553 = HEAP32[$21>>2]|0;
        $554 = ($552|0)>($553|0);
        $555 = HEAP32[$24>>2]|0;
        if ($554) {
         $556 = ($555|0)==(0|0);
         if (!($556)) {
          $557 = (_malloc(8)|0);
          $558 = HEAP32[$341>>2]|0;
          $559 = (($558) + ($551))|0;
          HEAP32[$341>>2] = $559;
          $560 = HEAP32[$342>>2]|0;
          $561 = (($557) + 4|0);
          HEAP32[$561>>2] = $560;
          HEAP32[$557>>2] = $555;
          HEAP32[$342>>2] = $557;
         }
         HEAP32[$21>>2] = $550;
         $562 = (_malloc($550)|0);
         HEAP32[$24>>2] = $562;
         HEAP32[$18>>2] = 0;
         $564 = $562;$565 = 0;
        } else {
         $564 = $555;$565 = $551;
        }
        $563 = (($564) + ($565)|0);
        $566 = (($565) + ($550))|0;
        HEAP32[$18>>2] = $566;
        $567 = ($545|0)>(0);
        if ($567) {
         $i$01$i28 = 0;
        } else {
         $output$0$i30 = $563;
         break;
        }
        while(1) {
         $568 = (($541) + ($i$01$i28<<2)|0);
         $569 = HEAP32[$568>>2]|0;
         $570 = $569 & 32767;
         $571 = ($570*37450)|0;
         $572 = (($543) + ($i$01$i28<<2)|0);
         $573 = HEAP32[$572>>2]|0;
         $574 = $573 & 32767;
         $575 = ($574*28086)|0;
         $576 = (($571) + 32768)|0;
         $577 = (($576) + ($575))|0;
         $578 = $577 >> 16;
         $579 = (($563) + ($i$01$i28<<2)|0);
         HEAP32[$579>>2] = $578;
         $580 = HEAP32[$568>>2]|0;
         $581 = $580 & 32768;
         $582 = ($581|0)==(0);
         do {
          if (!($582)) {
           $583 = HEAP32[$572>>2]|0;
           $584 = $583 & 32768;
           $585 = ($584|0)==(0);
           if ($585) {
            break;
           }
           $586 = $578 | 32768;
           HEAP32[$579>>2] = $586;
          }
         } while(0);
         $587 = (($i$01$i28) + 1)|0;
         $exitcond$i29 = ($587|0)==($545|0);
         if ($exitcond$i29) {
          $output$0$i30 = $563;
          break;
         } else {
          $i$01$i28 = $587;
         }
        }
       }
      } while(0);
      $588 = HEAP32[$361>>2]|0;
      $589 = (($588) + 12|0);
      HEAP32[$589>>2] = $output$0$i30;
      $590 = HEAP32[$350>>2]|0;
      $591 = HEAP32[$340>>2]|0;
      $592 = (($591) + ($590<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = HEAP32[$361>>2]|0;
      $595 = HEAP32[$594>>2]|0;
      $596 = (($594) + 28|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = (($593) + 1284|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = ($595|0)==(0|0);
      $601 = ($597|0)==(0|0);
      $or$cond$i33 = $600 | $601;
      do {
       if ($or$cond$i33) {
        $output$0$i37 = 0;
       } else {
        $602 = $599 << 2;
        $603 = (($602) + 7)|0;
        $604 = $603 & -8;
        $605 = HEAP32[$18>>2]|0;
        $606 = (($605) + ($604))|0;
        $607 = HEAP32[$21>>2]|0;
        $608 = ($606|0)>($607|0);
        $609 = HEAP32[$24>>2]|0;
        if ($608) {
         $610 = ($609|0)==(0|0);
         if (!($610)) {
          $611 = (_malloc(8)|0);
          $612 = HEAP32[$341>>2]|0;
          $613 = (($612) + ($605))|0;
          HEAP32[$341>>2] = $613;
          $614 = HEAP32[$342>>2]|0;
          $615 = (($611) + 4|0);
          HEAP32[$615>>2] = $614;
          HEAP32[$611>>2] = $609;
          HEAP32[$342>>2] = $611;
         }
         HEAP32[$21>>2] = $604;
         $616 = (_malloc($604)|0);
         HEAP32[$24>>2] = $616;
         HEAP32[$18>>2] = 0;
         $618 = $616;$619 = 0;
        } else {
         $618 = $609;$619 = $605;
        }
        $617 = (($618) + ($619)|0);
        $620 = (($619) + ($604))|0;
        HEAP32[$18>>2] = $620;
        $621 = ($599|0)>(0);
        if ($621) {
         $i$01$i35 = 0;
        } else {
         $output$0$i37 = $617;
         break;
        }
        while(1) {
         $622 = (($595) + ($i$01$i35<<2)|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = $623 & 32767;
         $625 = ($624*28087)|0;
         $626 = (($597) + ($i$01$i35<<2)|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = $627 & 32767;
         $629 = ($628*37449)|0;
         $630 = (($625) + 32768)|0;
         $631 = (($630) + ($629))|0;
         $632 = $631 >> 16;
         $633 = (($617) + ($i$01$i35<<2)|0);
         HEAP32[$633>>2] = $632;
         $634 = HEAP32[$622>>2]|0;
         $635 = $634 & 32768;
         $636 = ($635|0)==(0);
         do {
          if (!($636)) {
           $637 = HEAP32[$626>>2]|0;
           $638 = $637 & 32768;
           $639 = ($638|0)==(0);
           if ($639) {
            break;
           }
           $640 = $632 | 32768;
           HEAP32[$633>>2] = $640;
          }
         } while(0);
         $641 = (($i$01$i35) + 1)|0;
         $exitcond$i36 = ($641|0)==($599|0);
         if ($exitcond$i36) {
          $output$0$i37 = $617;
          break;
         } else {
          $i$01$i35 = $641;
         }
        }
       }
      } while(0);
      $642 = HEAP32[$361>>2]|0;
      $643 = (($642) + 16|0);
      HEAP32[$643>>2] = $output$0$i37;
      $644 = HEAP32[$350>>2]|0;
      $645 = HEAP32[$340>>2]|0;
      $646 = (($645) + ($644<<2)|0);
      $647 = HEAP32[$646>>2]|0;
      $648 = HEAP32[$361>>2]|0;
      $649 = HEAP32[$648>>2]|0;
      $650 = (($648) + 28|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($647) + 1284|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = ($649|0)==(0|0);
      $655 = ($651|0)==(0|0);
      $or$cond$i40 = $654 | $655;
      do {
       if ($or$cond$i40) {
        $output$0$i44 = 0;
       } else {
        $656 = $653 << 2;
        $657 = (($656) + 7)|0;
        $658 = $657 & -8;
        $659 = HEAP32[$18>>2]|0;
        $660 = (($659) + ($658))|0;
        $661 = HEAP32[$21>>2]|0;
        $662 = ($660|0)>($661|0);
        $663 = HEAP32[$24>>2]|0;
        if ($662) {
         $664 = ($663|0)==(0|0);
         if (!($664)) {
          $665 = (_malloc(8)|0);
          $666 = HEAP32[$341>>2]|0;
          $667 = (($666) + ($659))|0;
          HEAP32[$341>>2] = $667;
          $668 = HEAP32[$342>>2]|0;
          $669 = (($665) + 4|0);
          HEAP32[$669>>2] = $668;
          HEAP32[$665>>2] = $663;
          HEAP32[$342>>2] = $665;
         }
         HEAP32[$21>>2] = $658;
         $670 = (_malloc($658)|0);
         HEAP32[$24>>2] = $670;
         HEAP32[$18>>2] = 0;
         $672 = $670;$673 = 0;
        } else {
         $672 = $663;$673 = $659;
        }
        $671 = (($672) + ($673)|0);
        $674 = (($673) + ($658))|0;
        HEAP32[$18>>2] = $674;
        $675 = ($653|0)>(0);
        if ($675) {
         $i$01$i42 = 0;
        } else {
         $output$0$i44 = $671;
         break;
        }
        while(1) {
         $676 = (($649) + ($i$01$i42<<2)|0);
         $677 = HEAP32[$676>>2]|0;
         $678 = $677 & 32767;
         $679 = ($678*18725)|0;
         $680 = (($651) + ($i$01$i42<<2)|0);
         $681 = HEAP32[$680>>2]|0;
         $682 = $681 & 32767;
         $683 = ($682*46811)|0;
         $684 = (($679) + 32768)|0;
         $685 = (($684) + ($683))|0;
         $686 = $685 >> 16;
         $687 = (($671) + ($i$01$i42<<2)|0);
         HEAP32[$687>>2] = $686;
         $688 = HEAP32[$676>>2]|0;
         $689 = $688 & 32768;
         $690 = ($689|0)==(0);
         do {
          if (!($690)) {
           $691 = HEAP32[$680>>2]|0;
           $692 = $691 & 32768;
           $693 = ($692|0)==(0);
           if ($693) {
            break;
           }
           $694 = $686 | 32768;
           HEAP32[$687>>2] = $694;
          }
         } while(0);
         $695 = (($i$01$i42) + 1)|0;
         $exitcond$i43 = ($695|0)==($653|0);
         if ($exitcond$i43) {
          $output$0$i44 = $671;
          break;
         } else {
          $i$01$i42 = $695;
         }
        }
       }
      } while(0);
      $696 = HEAP32[$361>>2]|0;
      $697 = (($696) + 20|0);
      HEAP32[$697>>2] = $output$0$i44;
      $698 = HEAP32[$350>>2]|0;
      $699 = HEAP32[$340>>2]|0;
      $700 = (($699) + ($698<<2)|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = HEAP32[$361>>2]|0;
      $703 = HEAP32[$702>>2]|0;
      $704 = (($702) + 28|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($701) + 1284|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = ($703|0)==(0|0);
      $709 = ($705|0)==(0|0);
      $or$cond$i47 = $708 | $709;
      do {
       if ($or$cond$i47) {
        $output$0$i51 = 0;
       } else {
        $710 = $707 << 2;
        $711 = (($710) + 7)|0;
        $712 = $711 & -8;
        $713 = HEAP32[$18>>2]|0;
        $714 = (($713) + ($712))|0;
        $715 = HEAP32[$21>>2]|0;
        $716 = ($714|0)>($715|0);
        $717 = HEAP32[$24>>2]|0;
        if ($716) {
         $718 = ($717|0)==(0|0);
         if (!($718)) {
          $719 = (_malloc(8)|0);
          $720 = HEAP32[$341>>2]|0;
          $721 = (($720) + ($713))|0;
          HEAP32[$341>>2] = $721;
          $722 = HEAP32[$342>>2]|0;
          $723 = (($719) + 4|0);
          HEAP32[$723>>2] = $722;
          HEAP32[$719>>2] = $717;
          HEAP32[$342>>2] = $719;
         }
         HEAP32[$21>>2] = $712;
         $724 = (_malloc($712)|0);
         HEAP32[$24>>2] = $724;
         HEAP32[$18>>2] = 0;
         $726 = $724;$727 = 0;
        } else {
         $726 = $717;$727 = $713;
        }
        $725 = (($726) + ($727)|0);
        $728 = (($727) + ($712))|0;
        HEAP32[$18>>2] = $728;
        $729 = ($707|0)>(0);
        if ($729) {
         $i$01$i49 = 0;
        } else {
         $output$0$i51 = $725;
         break;
        }
        while(1) {
         $730 = (($703) + ($i$01$i49<<2)|0);
         $731 = HEAP32[$730>>2]|0;
         $732 = $731 & 32767;
         $733 = ($732*9363)|0;
         $734 = (($705) + ($i$01$i49<<2)|0);
         $735 = HEAP32[$734>>2]|0;
         $736 = $735 & 32767;
         $737 = ($736*56173)|0;
         $738 = (($733) + 32768)|0;
         $739 = (($738) + ($737))|0;
         $740 = $739 >> 16;
         $741 = (($725) + ($i$01$i49<<2)|0);
         HEAP32[$741>>2] = $740;
         $742 = HEAP32[$730>>2]|0;
         $743 = $742 & 32768;
         $744 = ($743|0)==(0);
         do {
          if (!($744)) {
           $745 = HEAP32[$734>>2]|0;
           $746 = $745 & 32768;
           $747 = ($746|0)==(0);
           if ($747) {
            break;
           }
           $748 = $740 | 32768;
           HEAP32[$741>>2] = $748;
          }
         } while(0);
         $749 = (($i$01$i49) + 1)|0;
         $exitcond$i50 = ($749|0)==($707|0);
         if ($exitcond$i50) {
          $output$0$i51 = $725;
          break;
         } else {
          $i$01$i49 = $749;
         }
        }
       }
      } while(0);
      $750 = HEAP32[$361>>2]|0;
      $751 = (($750) + 24|0);
      HEAP32[$751>>2] = $output$0$i51;
      $752 = HEAP32[$350>>2]|0;
      $753 = HEAP32[$340>>2]|0;
      $754 = (($753) + ($752<<2)|0);
      $755 = HEAP32[$754>>2]|0;
      $756 = HEAP32[$361>>2]|0;
      $757 = (($756) + 28|0);
      $758 = HEAP32[$757>>2]|0;
      $759 = (($756) + 56|0);
      $760 = HEAP32[$759>>2]|0;
      $761 = (($755) + 1284|0);
      $762 = HEAP32[$761>>2]|0;
      $763 = ($758|0)==(0|0);
      $764 = ($760|0)==(0|0);
      $or$cond$i54 = $763 | $764;
      do {
       if ($or$cond$i54) {
        $output$0$i58 = 0;
       } else {
        $765 = $762 << 2;
        $766 = (($765) + 7)|0;
        $767 = $766 & -8;
        $768 = HEAP32[$18>>2]|0;
        $769 = (($768) + ($767))|0;
        $770 = HEAP32[$21>>2]|0;
        $771 = ($769|0)>($770|0);
        $772 = HEAP32[$24>>2]|0;
        if ($771) {
         $773 = ($772|0)==(0|0);
         if (!($773)) {
          $774 = (_malloc(8)|0);
          $775 = HEAP32[$341>>2]|0;
          $776 = (($775) + ($768))|0;
          HEAP32[$341>>2] = $776;
          $777 = HEAP32[$342>>2]|0;
          $778 = (($774) + 4|0);
          HEAP32[$778>>2] = $777;
          HEAP32[$774>>2] = $772;
          HEAP32[$342>>2] = $774;
         }
         HEAP32[$21>>2] = $767;
         $779 = (_malloc($767)|0);
         HEAP32[$24>>2] = $779;
         HEAP32[$18>>2] = 0;
         $781 = $779;$782 = 0;
        } else {
         $781 = $772;$782 = $768;
        }
        $780 = (($781) + ($782)|0);
        $783 = (($782) + ($767))|0;
        HEAP32[$18>>2] = $783;
        $784 = ($762|0)>(0);
        if ($784) {
         $i$01$i56 = 0;
        } else {
         $output$0$i58 = $780;
         break;
        }
        while(1) {
         $785 = (($758) + ($i$01$i56<<2)|0);
         $786 = HEAP32[$785>>2]|0;
         $787 = $786 & 32767;
         $788 = ($787*56174)|0;
         $789 = (($760) + ($i$01$i56<<2)|0);
         $790 = HEAP32[$789>>2]|0;
         $791 = $790 & 32767;
         $792 = ($791*9362)|0;
         $793 = (($788) + 32768)|0;
         $794 = (($793) + ($792))|0;
         $795 = $794 >> 16;
         $796 = (($780) + ($i$01$i56<<2)|0);
         HEAP32[$796>>2] = $795;
         $797 = HEAP32[$785>>2]|0;
         $798 = $797 & 32768;
         $799 = ($798|0)==(0);
         do {
          if (!($799)) {
           $800 = HEAP32[$789>>2]|0;
           $801 = $800 & 32768;
           $802 = ($801|0)==(0);
           if ($802) {
            break;
           }
           $803 = $795 | 32768;
           HEAP32[$796>>2] = $803;
          }
         } while(0);
         $804 = (($i$01$i56) + 1)|0;
         $exitcond$i57 = ($804|0)==($762|0);
         if ($exitcond$i57) {
          $output$0$i58 = $780;
          break;
         } else {
          $i$01$i56 = $804;
         }
        }
       }
      } while(0);
      $805 = HEAP32[$361>>2]|0;
      $806 = (($805) + 32|0);
      HEAP32[$806>>2] = $output$0$i58;
      $807 = HEAP32[$350>>2]|0;
      $808 = HEAP32[$340>>2]|0;
      $809 = (($808) + ($807<<2)|0);
      $810 = HEAP32[$809>>2]|0;
      $811 = HEAP32[$361>>2]|0;
      $812 = (($811) + 28|0);
      $813 = HEAP32[$812>>2]|0;
      $814 = (($811) + 56|0);
      $815 = HEAP32[$814>>2]|0;
      $816 = (($810) + 1284|0);
      $817 = HEAP32[$816>>2]|0;
      $818 = ($813|0)==(0|0);
      $819 = ($815|0)==(0|0);
      $or$cond$i61 = $818 | $819;
      do {
       if ($or$cond$i61) {
        $output$0$i65 = 0;
       } else {
        $820 = $817 << 2;
        $821 = (($820) + 7)|0;
        $822 = $821 & -8;
        $823 = HEAP32[$18>>2]|0;
        $824 = (($823) + ($822))|0;
        $825 = HEAP32[$21>>2]|0;
        $826 = ($824|0)>($825|0);
        $827 = HEAP32[$24>>2]|0;
        if ($826) {
         $828 = ($827|0)==(0|0);
         if (!($828)) {
          $829 = (_malloc(8)|0);
          $830 = HEAP32[$341>>2]|0;
          $831 = (($830) + ($823))|0;
          HEAP32[$341>>2] = $831;
          $832 = HEAP32[$342>>2]|0;
          $833 = (($829) + 4|0);
          HEAP32[$833>>2] = $832;
          HEAP32[$829>>2] = $827;
          HEAP32[$342>>2] = $829;
         }
         HEAP32[$21>>2] = $822;
         $834 = (_malloc($822)|0);
         HEAP32[$24>>2] = $834;
         HEAP32[$18>>2] = 0;
         $836 = $834;$837 = 0;
        } else {
         $836 = $827;$837 = $823;
        }
        $835 = (($836) + ($837)|0);
        $838 = (($837) + ($822))|0;
        HEAP32[$18>>2] = $838;
        $839 = ($817|0)>(0);
        if ($839) {
         $i$01$i63 = 0;
        } else {
         $output$0$i65 = $835;
         break;
        }
        while(1) {
         $840 = (($813) + ($i$01$i63<<2)|0);
         $841 = HEAP32[$840>>2]|0;
         $842 = $841 & 32767;
         $843 = ($842*46812)|0;
         $844 = (($815) + ($i$01$i63<<2)|0);
         $845 = HEAP32[$844>>2]|0;
         $846 = $845 & 32767;
         $847 = ($846*18724)|0;
         $848 = (($843) + 32768)|0;
         $849 = (($848) + ($847))|0;
         $850 = $849 >> 16;
         $851 = (($835) + ($i$01$i63<<2)|0);
         HEAP32[$851>>2] = $850;
         $852 = HEAP32[$840>>2]|0;
         $853 = $852 & 32768;
         $854 = ($853|0)==(0);
         do {
          if (!($854)) {
           $855 = HEAP32[$844>>2]|0;
           $856 = $855 & 32768;
           $857 = ($856|0)==(0);
           if ($857) {
            break;
           }
           $858 = $850 | 32768;
           HEAP32[$851>>2] = $858;
          }
         } while(0);
         $859 = (($i$01$i63) + 1)|0;
         $exitcond$i64 = ($859|0)==($817|0);
         if ($exitcond$i64) {
          $output$0$i65 = $835;
          break;
         } else {
          $i$01$i63 = $859;
         }
        }
       }
      } while(0);
      $860 = HEAP32[$361>>2]|0;
      $861 = (($860) + 36|0);
      HEAP32[$861>>2] = $output$0$i65;
      $862 = HEAP32[$350>>2]|0;
      $863 = HEAP32[$340>>2]|0;
      $864 = (($863) + ($862<<2)|0);
      $865 = HEAP32[$864>>2]|0;
      $866 = HEAP32[$361>>2]|0;
      $867 = (($866) + 28|0);
      $868 = HEAP32[$867>>2]|0;
      $869 = (($866) + 56|0);
      $870 = HEAP32[$869>>2]|0;
      $871 = (($865) + 1284|0);
      $872 = HEAP32[$871>>2]|0;
      $873 = ($868|0)==(0|0);
      $874 = ($870|0)==(0|0);
      $or$cond$i68 = $873 | $874;
      do {
       if ($or$cond$i68) {
        $output$0$i72 = 0;
       } else {
        $875 = $872 << 2;
        $876 = (($875) + 7)|0;
        $877 = $876 & -8;
        $878 = HEAP32[$18>>2]|0;
        $879 = (($878) + ($877))|0;
        $880 = HEAP32[$21>>2]|0;
        $881 = ($879|0)>($880|0);
        $882 = HEAP32[$24>>2]|0;
        if ($881) {
         $883 = ($882|0)==(0|0);
         if (!($883)) {
          $884 = (_malloc(8)|0);
          $885 = HEAP32[$341>>2]|0;
          $886 = (($885) + ($878))|0;
          HEAP32[$341>>2] = $886;
          $887 = HEAP32[$342>>2]|0;
          $888 = (($884) + 4|0);
          HEAP32[$888>>2] = $887;
          HEAP32[$884>>2] = $882;
          HEAP32[$342>>2] = $884;
         }
         HEAP32[$21>>2] = $877;
         $889 = (_malloc($877)|0);
         HEAP32[$24>>2] = $889;
         HEAP32[$18>>2] = 0;
         $891 = $889;$892 = 0;
        } else {
         $891 = $882;$892 = $878;
        }
        $890 = (($891) + ($892)|0);
        $893 = (($892) + ($877))|0;
        HEAP32[$18>>2] = $893;
        $894 = ($872|0)>(0);
        if ($894) {
         $i$01$i70 = 0;
        } else {
         $output$0$i72 = $890;
         break;
        }
        while(1) {
         $895 = (($868) + ($i$01$i70<<2)|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & 32767;
         $898 = ($897*37450)|0;
         $899 = (($870) + ($i$01$i70<<2)|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & 32767;
         $902 = ($901*28086)|0;
         $903 = (($898) + 32768)|0;
         $904 = (($903) + ($902))|0;
         $905 = $904 >> 16;
         $906 = (($890) + ($i$01$i70<<2)|0);
         HEAP32[$906>>2] = $905;
         $907 = HEAP32[$895>>2]|0;
         $908 = $907 & 32768;
         $909 = ($908|0)==(0);
         do {
          if (!($909)) {
           $910 = HEAP32[$899>>2]|0;
           $911 = $910 & 32768;
           $912 = ($911|0)==(0);
           if ($912) {
            break;
           }
           $913 = $905 | 32768;
           HEAP32[$906>>2] = $913;
          }
         } while(0);
         $914 = (($i$01$i70) + 1)|0;
         $exitcond$i71 = ($914|0)==($872|0);
         if ($exitcond$i71) {
          $output$0$i72 = $890;
          break;
         } else {
          $i$01$i70 = $914;
         }
        }
       }
      } while(0);
      $915 = HEAP32[$361>>2]|0;
      $916 = (($915) + 40|0);
      HEAP32[$916>>2] = $output$0$i72;
      $917 = HEAP32[$350>>2]|0;
      $918 = HEAP32[$340>>2]|0;
      $919 = (($918) + ($917<<2)|0);
      $920 = HEAP32[$919>>2]|0;
      $921 = HEAP32[$361>>2]|0;
      $922 = (($921) + 28|0);
      $923 = HEAP32[$922>>2]|0;
      $924 = (($921) + 56|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($920) + 1284|0);
      $927 = HEAP32[$926>>2]|0;
      $928 = ($923|0)==(0|0);
      $929 = ($925|0)==(0|0);
      $or$cond$i75 = $928 | $929;
      do {
       if ($or$cond$i75) {
        $output$0$i79 = 0;
       } else {
        $930 = $927 << 2;
        $931 = (($930) + 7)|0;
        $932 = $931 & -8;
        $933 = HEAP32[$18>>2]|0;
        $934 = (($933) + ($932))|0;
        $935 = HEAP32[$21>>2]|0;
        $936 = ($934|0)>($935|0);
        $937 = HEAP32[$24>>2]|0;
        if ($936) {
         $938 = ($937|0)==(0|0);
         if (!($938)) {
          $939 = (_malloc(8)|0);
          $940 = HEAP32[$341>>2]|0;
          $941 = (($940) + ($933))|0;
          HEAP32[$341>>2] = $941;
          $942 = HEAP32[$342>>2]|0;
          $943 = (($939) + 4|0);
          HEAP32[$943>>2] = $942;
          HEAP32[$939>>2] = $937;
          HEAP32[$342>>2] = $939;
         }
         HEAP32[$21>>2] = $932;
         $944 = (_malloc($932)|0);
         HEAP32[$24>>2] = $944;
         HEAP32[$18>>2] = 0;
         $946 = $944;$947 = 0;
        } else {
         $946 = $937;$947 = $933;
        }
        $945 = (($946) + ($947)|0);
        $948 = (($947) + ($932))|0;
        HEAP32[$18>>2] = $948;
        $949 = ($927|0)>(0);
        if ($949) {
         $i$01$i77 = 0;
        } else {
         $output$0$i79 = $945;
         break;
        }
        while(1) {
         $950 = (($923) + ($i$01$i77<<2)|0);
         $951 = HEAP32[$950>>2]|0;
         $952 = $951 & 32767;
         $953 = ($952*28087)|0;
         $954 = (($925) + ($i$01$i77<<2)|0);
         $955 = HEAP32[$954>>2]|0;
         $956 = $955 & 32767;
         $957 = ($956*37449)|0;
         $958 = (($953) + 32768)|0;
         $959 = (($958) + ($957))|0;
         $960 = $959 >> 16;
         $961 = (($945) + ($i$01$i77<<2)|0);
         HEAP32[$961>>2] = $960;
         $962 = HEAP32[$950>>2]|0;
         $963 = $962 & 32768;
         $964 = ($963|0)==(0);
         do {
          if (!($964)) {
           $965 = HEAP32[$954>>2]|0;
           $966 = $965 & 32768;
           $967 = ($966|0)==(0);
           if ($967) {
            break;
           }
           $968 = $960 | 32768;
           HEAP32[$961>>2] = $968;
          }
         } while(0);
         $969 = (($i$01$i77) + 1)|0;
         $exitcond$i78 = ($969|0)==($927|0);
         if ($exitcond$i78) {
          $output$0$i79 = $945;
          break;
         } else {
          $i$01$i77 = $969;
         }
        }
       }
      } while(0);
      $970 = HEAP32[$361>>2]|0;
      $971 = (($970) + 44|0);
      HEAP32[$971>>2] = $output$0$i79;
      $972 = HEAP32[$350>>2]|0;
      $973 = HEAP32[$340>>2]|0;
      $974 = (($973) + ($972<<2)|0);
      $975 = HEAP32[$974>>2]|0;
      $976 = HEAP32[$361>>2]|0;
      $977 = (($976) + 28|0);
      $978 = HEAP32[$977>>2]|0;
      $979 = (($976) + 56|0);
      $980 = HEAP32[$979>>2]|0;
      $981 = (($975) + 1284|0);
      $982 = HEAP32[$981>>2]|0;
      $983 = ($978|0)==(0|0);
      $984 = ($980|0)==(0|0);
      $or$cond$i82 = $983 | $984;
      do {
       if ($or$cond$i82) {
        $output$0$i86 = 0;
       } else {
        $985 = $982 << 2;
        $986 = (($985) + 7)|0;
        $987 = $986 & -8;
        $988 = HEAP32[$18>>2]|0;
        $989 = (($988) + ($987))|0;
        $990 = HEAP32[$21>>2]|0;
        $991 = ($989|0)>($990|0);
        $992 = HEAP32[$24>>2]|0;
        if ($991) {
         $993 = ($992|0)==(0|0);
         if (!($993)) {
          $994 = (_malloc(8)|0);
          $995 = HEAP32[$341>>2]|0;
          $996 = (($995) + ($988))|0;
          HEAP32[$341>>2] = $996;
          $997 = HEAP32[$342>>2]|0;
          $998 = (($994) + 4|0);
          HEAP32[$998>>2] = $997;
          HEAP32[$994>>2] = $992;
          HEAP32[$342>>2] = $994;
         }
         HEAP32[$21>>2] = $987;
         $999 = (_malloc($987)|0);
         HEAP32[$24>>2] = $999;
         HEAP32[$18>>2] = 0;
         $1001 = $999;$1002 = 0;
        } else {
         $1001 = $992;$1002 = $988;
        }
        $1000 = (($1001) + ($1002)|0);
        $1003 = (($1002) + ($987))|0;
        HEAP32[$18>>2] = $1003;
        $1004 = ($982|0)>(0);
        if ($1004) {
         $i$01$i84 = 0;
        } else {
         $output$0$i86 = $1000;
         break;
        }
        while(1) {
         $1005 = (($978) + ($i$01$i84<<2)|0);
         $1006 = HEAP32[$1005>>2]|0;
         $1007 = $1006 & 32767;
         $1008 = ($1007*18725)|0;
         $1009 = (($980) + ($i$01$i84<<2)|0);
         $1010 = HEAP32[$1009>>2]|0;
         $1011 = $1010 & 32767;
         $1012 = ($1011*46811)|0;
         $1013 = (($1008) + 32768)|0;
         $1014 = (($1013) + ($1012))|0;
         $1015 = $1014 >> 16;
         $1016 = (($1000) + ($i$01$i84<<2)|0);
         HEAP32[$1016>>2] = $1015;
         $1017 = HEAP32[$1005>>2]|0;
         $1018 = $1017 & 32768;
         $1019 = ($1018|0)==(0);
         do {
          if (!($1019)) {
           $1020 = HEAP32[$1009>>2]|0;
           $1021 = $1020 & 32768;
           $1022 = ($1021|0)==(0);
           if ($1022) {
            break;
           }
           $1023 = $1015 | 32768;
           HEAP32[$1016>>2] = $1023;
          }
         } while(0);
         $1024 = (($i$01$i84) + 1)|0;
         $exitcond$i85 = ($1024|0)==($982|0);
         if ($exitcond$i85) {
          $output$0$i86 = $1000;
          break;
         } else {
          $i$01$i84 = $1024;
         }
        }
       }
      } while(0);
      $1025 = HEAP32[$361>>2]|0;
      $1026 = (($1025) + 48|0);
      HEAP32[$1026>>2] = $output$0$i86;
      $1027 = HEAP32[$350>>2]|0;
      $1028 = HEAP32[$340>>2]|0;
      $1029 = (($1028) + ($1027<<2)|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = HEAP32[$361>>2]|0;
      $1032 = (($1031) + 28|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = (($1031) + 56|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = (($1030) + 1284|0);
      $1037 = HEAP32[$1036>>2]|0;
      $1038 = ($1033|0)==(0|0);
      $1039 = ($1035|0)==(0|0);
      $or$cond$i89 = $1038 | $1039;
      do {
       if ($or$cond$i89) {
        $output$0$i93 = 0;
       } else {
        $1040 = $1037 << 2;
        $1041 = (($1040) + 7)|0;
        $1042 = $1041 & -8;
        $1043 = HEAP32[$18>>2]|0;
        $1044 = (($1043) + ($1042))|0;
        $1045 = HEAP32[$21>>2]|0;
        $1046 = ($1044|0)>($1045|0);
        $1047 = HEAP32[$24>>2]|0;
        if ($1046) {
         $1048 = ($1047|0)==(0|0);
         if (!($1048)) {
          $1049 = (_malloc(8)|0);
          $1050 = HEAP32[$341>>2]|0;
          $1051 = (($1050) + ($1043))|0;
          HEAP32[$341>>2] = $1051;
          $1052 = HEAP32[$342>>2]|0;
          $1053 = (($1049) + 4|0);
          HEAP32[$1053>>2] = $1052;
          HEAP32[$1049>>2] = $1047;
          HEAP32[$342>>2] = $1049;
         }
         HEAP32[$21>>2] = $1042;
         $1054 = (_malloc($1042)|0);
         HEAP32[$24>>2] = $1054;
         HEAP32[$18>>2] = 0;
         $1056 = $1054;$1057 = 0;
        } else {
         $1056 = $1047;$1057 = $1043;
        }
        $1055 = (($1056) + ($1057)|0);
        $1058 = (($1057) + ($1042))|0;
        HEAP32[$18>>2] = $1058;
        $1059 = ($1037|0)>(0);
        if ($1059) {
         $i$01$i91 = 0;
        } else {
         $output$0$i93 = $1055;
         break;
        }
        while(1) {
         $1060 = (($1033) + ($i$01$i91<<2)|0);
         $1061 = HEAP32[$1060>>2]|0;
         $1062 = $1061 & 32767;
         $1063 = ($1062*9363)|0;
         $1064 = (($1035) + ($i$01$i91<<2)|0);
         $1065 = HEAP32[$1064>>2]|0;
         $1066 = $1065 & 32767;
         $1067 = ($1066*56173)|0;
         $1068 = (($1063) + 32768)|0;
         $1069 = (($1068) + ($1067))|0;
         $1070 = $1069 >> 16;
         $1071 = (($1055) + ($i$01$i91<<2)|0);
         HEAP32[$1071>>2] = $1070;
         $1072 = HEAP32[$1060>>2]|0;
         $1073 = $1072 & 32768;
         $1074 = ($1073|0)==(0);
         do {
          if (!($1074)) {
           $1075 = HEAP32[$1064>>2]|0;
           $1076 = $1075 & 32768;
           $1077 = ($1076|0)==(0);
           if ($1077) {
            break;
           }
           $1078 = $1070 | 32768;
           HEAP32[$1071>>2] = $1078;
          }
         } while(0);
         $1079 = (($i$01$i91) + 1)|0;
         $exitcond$i92 = ($1079|0)==($1037|0);
         if ($exitcond$i92) {
          $output$0$i93 = $1055;
          break;
         } else {
          $i$01$i91 = $1079;
         }
        }
       }
      } while(0);
      $1080 = HEAP32[$361>>2]|0;
      $1081 = (($1080) + 52|0);
      HEAP32[$1081>>2] = $output$0$i93;
     }
    }
    $1082 = (($i$130$us) + 1)|0;
    $1083 = HEAP32[$12>>2]|0;
    $1084 = ($1082|0)<($1083|0);
    if (!($1084)) {
     $$pre$phi61Z2D = $338;$$pre$phi65Z2D = $340;$1878 = $1083;
     break L99;
    }
    $$pre227 = HEAP32[$18>>2]|0;
    $$pre228 = HEAP32[$24>>2]|0;
    $1102 = $$pre227;$1105 = $$pre228;$i$130$us = $1082;
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre58 = (($90) + 1028|0);
   $$pre62 = (($7) + 48|0);
   $$pre$phi61Z2D = $$pre58;$$pre$phi65Z2D = $$pre62;$1878 = $334;
  }
 } while(0);
 HEAPF32[$79>>2] = $global_ampmax$0$lcssa;
 $1877 = $1878 << 2;
 $1879 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1877)|0)+15)&-16)|0;
 $1880 = STACKTOP; STACKTOP = STACKTOP + ((((1*$1877)|0)+15)&-16)|0;
 $1881 = HEAP32[$0>>2]|0;
 $1882 = (($1881) + 104|0);
 $1883 = HEAP32[$1882>>2]|0;
 $1884 = (($1883) + 80|0);
 $1885 = HEAP32[$1884>>2]|0;
 $not$$i196 = ($1885|0)!=(0);
 $1886 = $not$$i196 ? 0 : 7;
 $1887 = (($9) + 12|0);
 $1888 = (($7) + 44|0);
 $1889 = (($vb) + 24|0);
 $1890 = (($vb) + 32|0);
 $1891 = (($5) + 2868|0);
 $1892 = (($5) + 3240|0);
 $1893 = (($90) + 1092|0);
 $1894 = (($5) + 1312|0);
 $1895 = (($7) + 52|0);
 $1896 = (($out$i) + 4|0);
 $k$220 = $1886;
 while(1) {
  $1897 = (($1887) + ($k$220<<2)|0);
  $1898 = HEAP32[$1897>>2]|0;
  _oggpack_write($1898,0,1);
  $1899 = HEAP32[$1888>>2]|0;
  _oggpack_write($1898,$87,$1899);
  $1900 = HEAP32[$86>>2]|0;
  $1901 = ($1900|0)==(0);
  if (!($1901)) {
   $1902 = HEAP32[$1889>>2]|0;
   _oggpack_write($1898,$1902,1);
   $1903 = HEAP32[$1890>>2]|0;
   _oggpack_write($1898,$1903,1);
  }
  $1904 = HEAP32[$12>>2]|0;
  $1905 = ($1904|0)>(0);
  if ($1905) {
   $i$23 = 0;
   while(1) {
    $1906 = (($336) + ($i$23<<2)|0);
    $1907 = HEAP32[$1906>>2]|0;
    $1908 = (($55) + ($i$23<<2)|0);
    $1909 = HEAP32[$1908>>2]|0;
    $1910 = (($$pre$phi61Z2D) + ($1907<<2)|0);
    $1911 = HEAP32[$1910>>2]|0;
    $1912 = HEAP32[$$pre$phi65Z2D>>2]|0;
    $1913 = (($1912) + ($1911<<2)|0);
    $1914 = HEAP32[$1913>>2]|0;
    $1915 = (($75) + ($i$23<<2)|0);
    $1916 = HEAP32[$1915>>2]|0;
    $1917 = (($1916) + ($k$220<<2)|0);
    $1918 = HEAP32[$1917>>2]|0;
    $1919 = (($1914) + 1296|0);
    $1920 = HEAP32[$1919>>2]|0;
    $1921 = (($1914) + 1284|0);
    $1922 = HEAP32[$1921>>2]|0;
    $1923 = HEAP32[$0>>2]|0;
    $1924 = (($1923) + 4|0);
    $1925 = HEAP32[$1924>>2]|0;
    $1926 = (($1925) + 28|0);
    $1927 = HEAP32[$1926>>2]|0;
    $1928 = (($1927) + 1824|0);
    $1929 = (($1927) + 2848|0);
    $1930 = HEAP32[$1929>>2]|0;
    $1931 = ($1918|0)==(0|0);
    do {
     if ($1931) {
      _oggpack_write($1898,0,1);
      $2190 = HEAP32[$10>>2]|0;
      $2191 = (($2190|0) / 2)&-1;
      $2192 = $2191 << 2;
      _memset(($1909|0),0,($2192|0))|0;
      $$0$i205 = 0;
     } else {
      $1932 = ($1922|0)>(0);
      if ($1932) {
       $1933 = (($1920) + 832|0);
       $i$053$i = 0;
       while(1) {
        $1934 = (($1918) + ($i$053$i<<2)|0);
        $1935 = HEAP32[$1934>>2]|0;
        $1936 = $1935 & 32767;
        $1937 = HEAP32[$1933>>2]|0;
        if ((($1937|0) == 1)) {
         $1938 = $1936 >>> 2;
         $val$0$i198 = $1938;
        } else if ((($1937|0) == 2)) {
         $1939 = $1936 >>> 3;
         $val$0$i198 = $1939;
        } else if ((($1937|0) == 3)) {
         $1940 = (($1936>>>0) / 12)&-1;
         $val$0$i198 = $1940;
        } else if ((($1937|0) == 4)) {
         $1941 = $1936 >>> 4;
         $val$0$i198 = $1941;
        } else {
         $val$0$i198 = $1936;
        }
        $1942 = $1935 & 32768;
        $1943 = $1942 | $val$0$i198;
        HEAP32[$1934>>2] = $1943;
        $1944 = (($i$053$i) + 1)|0;
        $exitcond65$i = ($1944|0)==($1922|0);
        if ($exitcond65$i) {
         break;
        } else {
         $i$053$i = $1944;
        }
       }
      }
      $1945 = HEAP32[$1918>>2]|0;
      HEAP32[$out$i>>2] = $1945;
      $1946 = (($1918) + 4|0);
      $1947 = HEAP32[$1946>>2]|0;
      HEAP32[$1896>>2] = $1947;
      $1948 = ($1922|0)>(2);
      $1949 = (($1914) + 1292|0);
      if ($1948) {
       $i$147$i = 2;
       while(1) {
        $1950 = (($i$147$i) + -2)|0;
        $1951 = ((($1914) + ($1950<<2)|0) + 1032|0);
        $1952 = HEAP32[$1951>>2]|0;
        $1953 = ((($1914) + ($1950<<2)|0) + 780|0);
        $1954 = HEAP32[$1953>>2]|0;
        $1955 = ((($1920) + ($1952<<2)|0) + 836|0);
        $1956 = HEAP32[$1955>>2]|0;
        $1957 = ((($1920) + ($1954<<2)|0) + 836|0);
        $1958 = HEAP32[$1957>>2]|0;
        $1959 = (($1918) + ($1952<<2)|0);
        $1960 = HEAP32[$1959>>2]|0;
        $1961 = (($1918) + ($1954<<2)|0);
        $1962 = HEAP32[$1961>>2]|0;
        $1963 = ((($1920) + ($i$147$i<<2)|0) + 836|0);
        $1964 = HEAP32[$1963>>2]|0;
        $1965 = $1960 & 32767;
        $1966 = $1962 & 32767;
        $1967 = (($1966) - ($1965))|0;
        $1968 = (($1958) - ($1956))|0;
        $ispos$i$i = ($1967|0)>(-1);
        $neg$i$i = (0 - ($1967))|0;
        $1969 = $ispos$i$i ? $1967 : $neg$i$i;
        $1970 = (($1964) - ($1956))|0;
        $1971 = Math_imul($1969, $1970)|0;
        $1972 = (($1971|0) / ($1968|0))&-1;
        $1973 = ($1967|0)<(0);
        $1974 = (0 - ($1972))|0;
        $$0$p$i$i = $1973 ? $1974 : $1972;
        $$0$i$i = (($$0$p$i$i) + ($1965))|0;
        $1975 = (($1918) + ($i$147$i<<2)|0);
        $1976 = HEAP32[$1975>>2]|0;
        $1977 = $1976 & 32768;
        $1978 = ($1977|0)!=(0);
        $1979 = ($$0$i$i|0)==($1976|0);
        $or$cond$i199 = $1978 | $1979;
        if ($or$cond$i199) {
         $1980 = $$0$i$i | 32768;
         HEAP32[$1975>>2] = $1980;
         $1981 = (($out$i) + ($i$147$i<<2)|0);
         HEAP32[$1981>>2] = 0;
        } else {
         $1982 = HEAP32[$1949>>2]|0;
         $1983 = (($1982) - ($$0$i$i))|0;
         $1984 = ($1983|0)<($$0$i$i|0);
         $$$i = $1984 ? $1983 : $$0$i$i;
         $1985 = (($1976) - ($$0$i$i))|0;
         $1986 = ($1985|0)<(0);
         do {
          if ($1986) {
           $1987 = (0 - ($$$i))|0;
           $1988 = ($1985|0)<($1987|0);
           if ($1988) {
            $1989 = $1985 ^ -1;
            $1990 = (($$$i) + ($1989))|0;
            $val1$0$i = $1990;
            break;
           } else {
            $1991 = $1985 << 1;
            $1992 = $1991 ^ -1;
            $val1$0$i = $1992;
            break;
           }
          } else {
           $1993 = ($1985|0)<($$$i|0);
           if ($1993) {
            $1995 = $1985 << 1;
            $val1$0$i = $1995;
            break;
           } else {
            $1994 = (($$$i) + ($1985))|0;
            $val1$0$i = $1994;
            break;
           }
          }
         } while(0);
         $1996 = (($out$i) + ($i$147$i<<2)|0);
         HEAP32[$1996>>2] = $val1$0$i;
         HEAP32[$1959>>2] = $1965;
         $1997 = HEAP32[$1961>>2]|0;
         $1998 = $1997 & 32767;
         HEAP32[$1961>>2] = $1998;
        }
        $1999 = (($i$147$i) + 1)|0;
        $exitcond64$i = ($1999|0)==($1922|0);
        if ($exitcond64$i) {
         break;
        } else {
         $i$147$i = $1999;
        }
       }
      }
      _oggpack_write($1898,1,1);
      $2000 = (($1914) + 1308|0);
      $2001 = HEAP32[$2000>>2]|0;
      $2002 = (($2001) + 1)|0;
      HEAP32[$2000>>2] = $2002;
      $2003 = HEAP32[$1949>>2]|0;
      $2004 = (($2003) + -1)|0;
      $2005 = ($2004|0)==(0);
      if ($2005) {
       $2006 = (($1914) + 1304|0);
       $2007 = HEAP32[$out$i>>2]|0;
       $2018 = $2007;$2127 = $2006;$ret$0$lcssa$i7$i = 0;
      } else {
       $$01$i10$i = $2004;$ret$02$i9$i = 0;
       while(1) {
        $2008 = (($ret$02$i9$i) + 1)|0;
        $2009 = $$01$i10$i >>> 1;
        $2010 = ($2009|0)==(0);
        if ($2010) {
         break;
        } else {
         $$01$i10$i = $2009;$ret$02$i9$i = $2008;
        }
       }
       $phitmp$i = $2008 << 1;
       $2011 = (($1914) + 1304|0);
       $2012 = HEAP32[$2011>>2]|0;
       $2013 = (($2012) + ($phitmp$i))|0;
       HEAP32[$2011>>2] = $2013;
       $2014 = HEAP32[$out$i>>2]|0;
       $$01$i5$i = $2004;$ret$02$i4$i = 0;
       while(1) {
        $2015 = (($ret$02$i4$i) + 1)|0;
        $2016 = $$01$i5$i >>> 1;
        $2017 = ($2016|0)==(0);
        if ($2017) {
         $2018 = $2014;$2127 = $2011;$ret$0$lcssa$i7$i = $2015;
         break;
        } else {
         $$01$i5$i = $2016;$ret$02$i4$i = $2015;
        }
       }
      }
      _oggpack_write($1898,$2018,$ret$0$lcssa$i7$i);
      $2019 = HEAP32[$1896>>2]|0;
      $2020 = HEAP32[$1949>>2]|0;
      $2021 = (($2020) + -1)|0;
      $2022 = ($2021|0)==(0);
      if ($2022) {
       $ret$0$lcssa$i$i = 0;
      } else {
       $$01$i$i = $2021;$ret$02$i$i = 0;
       while(1) {
        $2023 = (($ret$02$i$i) + 1)|0;
        $2024 = $$01$i$i >>> 1;
        $2025 = ($2024|0)==(0);
        if ($2025) {
         $ret$0$lcssa$i$i = $2023;
         break;
        } else {
         $$01$i$i = $2024;$ret$02$i$i = $2023;
        }
       }
      }
      _oggpack_write($1898,$2019,$ret$0$lcssa$i$i);
      $2026 = HEAP32[$1920>>2]|0;
      $2027 = ($2026|0)>(0);
      if ($2027) {
       $2028 = (($1914) + 1300|0);
       $i$242$i = 0;$j$038$i = 2;
       while(1) {
        $2029 = ((($1920) + ($i$242$i<<2)|0) + 4|0);
        $2030 = HEAP32[$2029>>2]|0;
        $2031 = ((($1920) + ($2030<<2)|0) + 128|0);
        $2032 = HEAP32[$2031>>2]|0;
        $2033 = ((($1920) + ($2030<<2)|0) + 192|0);
        $2034 = HEAP32[$2033>>2]|0;
        $2035 = 1 << $2034;
        ;HEAP32[$bookas$i+0>>2]=0|0;HEAP32[$bookas$i+4>>2]=0|0;HEAP32[$bookas$i+8>>2]=0|0;HEAP32[$bookas$i+12>>2]=0|0;HEAP32[$bookas$i+16>>2]=0|0;HEAP32[$bookas$i+20>>2]=0|0;HEAP32[$bookas$i+24>>2]=0|0;HEAP32[$bookas$i+28>>2]=0|0;
        $2036 = ($2034|0)==(0);
        if (!($2036)) {
         $2037 = ($2035|0)>(0);
         if ($2037) {
          $k$023$i = 0;
          while(1) {
           $2038 = (((($1920) + ($2030<<5)|0) + ($k$023$i<<2)|0) + 320|0);
           $2039 = HEAP32[$2038>>2]|0;
           $2040 = ($2039|0)<(0);
           if ($2040) {
            $2041 = (($maxval$i) + ($k$023$i<<2)|0);
            HEAP32[$2041>>2] = 1;
           } else {
            $2042 = (($1928) + ($2039<<2)|0);
            $2043 = HEAP32[$2042>>2]|0;
            $2044 = (($2043) + 4|0);
            $2045 = HEAP32[$2044>>2]|0;
            $2046 = (($maxval$i) + ($k$023$i<<2)|0);
            HEAP32[$2046>>2] = $2045;
           }
           $2047 = (($k$023$i) + 1)|0;
           $exitcond$i200 = ($2047|0)==($2035|0);
           if ($exitcond$i200) {
            break;
           } else {
            $k$023$i = $2047;
           }
          }
         }
         $2048 = ($2032|0)>(0);
         if ($2048) {
          if ($2037) {
           $cshift$031$us$i = 0;$cval$030$us$i = 0;$k$132$us$i = 0;
           while(1) {
            $2061 = (($k$132$us$i) + ($j$038$i))|0;
            $2062 = (($out$i) + ($2061<<2)|0);
            $2053 = HEAP32[$2062>>2]|0;
            $l$028$us$i = 0;
            while(1) {
             $2051 = (($maxval$i) + ($l$028$us$i<<2)|0);
             $2052 = HEAP32[$2051>>2]|0;
             $2054 = ($2053|0)<($2052|0);
             $2049 = (($l$028$us$i) + 1)|0;
             if ($2054) {
              label = 387;
              break;
             }
             $2050 = ($2049|0)<($2035|0);
             if ($2050) {
              $l$028$us$i = $2049;
             } else {
              label = 389;
              break;
             }
            }
            if ((label|0) == 387) {
             label = 0;
             $2055 = (($bookas$i) + ($k$132$us$i<<2)|0);
             HEAP32[$2055>>2] = $l$028$us$i;
             $2057 = $l$028$us$i;
            }
            else if ((label|0) == 389) {
             label = 0;
             $$phi$trans$insert$i = (($bookas$i) + ($k$132$us$i<<2)|0);
             $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
             $2057 = $$pre$i;
            }
            $2056 = $2057 << $cshift$031$us$i;
            $2058 = $2056 | $cval$030$us$i;
            $2059 = (($cshift$031$us$i) + ($2034))|0;
            $2060 = (($k$132$us$i) + 1)|0;
            $exitcond60$i = ($2060|0)==($2032|0);
            if ($exitcond60$i) {
             $cval$0$lcssa$i = $2058;
             break;
            } else {
             $cshift$031$us$i = $2059;$cval$030$us$i = $2058;$k$132$us$i = $2060;
            }
           }
          } else {
           $cshift$031$i = 0;$cval$030$i = 0;$k$132$i = 0;
           while(1) {
            $2063 = (($bookas$i) + ($k$132$i<<2)|0);
            $2064 = HEAP32[$2063>>2]|0;
            $2065 = $2064 << $cshift$031$i;
            $2066 = $2065 | $cval$030$i;
            $2067 = (($cshift$031$i) + ($2034))|0;
            $2068 = (($k$132$i) + 1)|0;
            $exitcond56$i = ($2068|0)==($2032|0);
            if ($exitcond56$i) {
             $cval$0$lcssa$i = $2066;
             break;
            } else {
             $cshift$031$i = $2067;$cval$030$i = $2066;$k$132$i = $2068;
            }
           }
          }
          $2069 = ($cval$0$lcssa$i|0)<(0);
          if ($2069) {
           $$0$i1$i = 0;
          } else {
           $cval$0$lcssa$i208 = $cval$0$lcssa$i;
           label = 393;
          }
         } else {
          $cval$0$lcssa$i208 = 0;
          label = 393;
         }
         do {
          if ((label|0) == 393) {
           label = 0;
           $$in = ((($1920) + ($2030<<2)|0) + 256|0);
           $2070 = HEAP32[$$in>>2]|0;
           $2071 = ((($1930) + (($2070*56)|0)|0) + 12|0);
           $2072 = HEAP32[$2071>>2]|0;
           $2073 = (($2072) + 4|0);
           $2074 = HEAP32[$2073>>2]|0;
           $2075 = ($2074|0)>($cval$0$lcssa$i208|0);
           if (!($2075)) {
            $$0$i1$i = 0;
            break;
           }
           $2076 = ((($1930) + (($2070*56)|0)|0) + 20|0);
           $2077 = HEAP32[$2076>>2]|0;
           $2078 = (($2077) + ($cval$0$lcssa$i208<<2)|0);
           $2079 = HEAP32[$2078>>2]|0;
           $2080 = (($2072) + 8|0);
           $2081 = HEAP32[$2080>>2]|0;
           $2082 = (($2081) + ($cval$0$lcssa$i208)|0);
           $2083 = HEAP8[$2082>>0]|0;
           $2084 = $2083 << 24 >> 24;
           _oggpack_write($1898,$2079,$2084);
           $2085 = HEAP32[$2071>>2]|0;
           $2086 = (($2085) + 8|0);
           $2087 = HEAP32[$2086>>2]|0;
           $2088 = (($2087) + ($cval$0$lcssa$i208)|0);
           $2089 = HEAP8[$2088>>0]|0;
           $2090 = $2089 << 24 >> 24;
           $$0$i1$i = $2090;
          }
         } while(0);
         $2091 = HEAP32[$2028>>2]|0;
         $2092 = (($2091) + ($$0$i1$i))|0;
         HEAP32[$2028>>2] = $2092;
        }
        $2093 = ($2032|0)>(0);
        if ($2093) {
         $k$235$i = 0;
         while(1) {
          $2094 = (($bookas$i) + ($k$235$i<<2)|0);
          $2095 = HEAP32[$2094>>2]|0;
          $2096 = (((($1920) + ($2030<<5)|0) + ($2095<<2)|0) + 320|0);
          $2097 = HEAP32[$2096>>2]|0;
          $2098 = ($2097|0)>(-1);
          do {
           if ($2098) {
            $2099 = (($k$235$i) + ($j$038$i))|0;
            $2100 = (($out$i) + ($2099<<2)|0);
            $2101 = HEAP32[$2100>>2]|0;
            $2102 = ((($1930) + (($2097*56)|0)|0) + 4|0);
            $2103 = HEAP32[$2102>>2]|0;
            $2104 = ($2101|0)<($2103|0);
            if (!($2104)) {
             break;
            }
            $2105 = ($2101|0)<(0);
            do {
             if ($2105) {
              $$0$i2$i = 0;
             } else {
              $2106 = ((($1930) + (($2097*56)|0)|0) + 12|0);
              $2107 = HEAP32[$2106>>2]|0;
              $2108 = (($2107) + 4|0);
              $2109 = HEAP32[$2108>>2]|0;
              $2110 = ($2109|0)>($2101|0);
              if (!($2110)) {
               $$0$i2$i = 0;
               break;
              }
              $2111 = ((($1930) + (($2097*56)|0)|0) + 20|0);
              $2112 = HEAP32[$2111>>2]|0;
              $2113 = (($2112) + ($2101<<2)|0);
              $2114 = HEAP32[$2113>>2]|0;
              $2115 = (($2107) + 8|0);
              $2116 = HEAP32[$2115>>2]|0;
              $2117 = (($2116) + ($2101)|0);
              $2118 = HEAP8[$2117>>0]|0;
              $2119 = $2118 << 24 >> 24;
              _oggpack_write($1898,$2114,$2119);
              $2120 = HEAP32[$2106>>2]|0;
              $2121 = (($2120) + 8|0);
              $2122 = HEAP32[$2121>>2]|0;
              $2123 = (($2122) + ($2101)|0);
              $2124 = HEAP8[$2123>>0]|0;
              $2125 = $2124 << 24 >> 24;
              $$0$i2$i = $2125;
             }
            } while(0);
            $2126 = HEAP32[$2127>>2]|0;
            $2128 = (($2126) + ($$0$i2$i))|0;
            HEAP32[$2127>>2] = $2128;
           }
          } while(0);
          $2129 = (($k$235$i) + 1)|0;
          $exitcond57$i = ($2129|0)==($2032|0);
          if ($exitcond57$i) {
           break;
          } else {
           $k$235$i = $2129;
          }
         }
        }
        $2130 = (($2032) + ($j$038$i))|0;
        $2131 = (($i$242$i) + 1)|0;
        $2132 = HEAP32[$1920>>2]|0;
        $2133 = ($2131|0)<($2132|0);
        if ($2133) {
         $i$242$i = $2131;$j$038$i = $2130;
        } else {
         break;
        }
       }
      }
      $2134 = HEAP32[$1918>>2]|0;
      $2135 = (($1920) + 832|0);
      $2136 = HEAP32[$2135>>2]|0;
      $2137 = Math_imul($2136, $2134)|0;
      $2138 = HEAP32[$86>>2]|0;
      $2139 = (($1927) + ($2138<<2)|0);
      $2140 = HEAP32[$2139>>2]|0;
      $2141 = (($2140|0) / 2)&-1;
      $2142 = HEAP32[$1921>>2]|0;
      $2143 = ($2142|0)>(1);
      if ($2143) {
       $2144 = $2141 ^ -1;
       $hx$016$i = 0;$j$115$i = 1;$lx$017$i = 0;$ly$018$i = $2137;
       while(1) {
        $2148 = ((($1914) + ($j$115$i<<2)|0) + 260|0);
        $2149 = HEAP32[$2148>>2]|0;
        $2150 = (($1918) + ($2149<<2)|0);
        $2151 = HEAP32[$2150>>2]|0;
        $2152 = $2151 & 32767;
        $2153 = ($2152|0)==($2151|0);
        do {
         if ($2153) {
          $2154 = HEAP32[$2135>>2]|0;
          $2155 = Math_imul($2154, $2151)|0;
          $2156 = ((($1920) + ($2149<<2)|0) + 836|0);
          $2157 = HEAP32[$2156>>2]|0;
          $2158 = (($2155) - ($ly$018$i))|0;
          $2159 = (($2157) - ($lx$017$i))|0;
          $ispos$i1$i = ($2158|0)>(-1);
          $neg$i2$i = (0 - ($2158))|0;
          $2160 = $ispos$i1$i ? $2158 : $neg$i2$i;
          $2161 = (($2158|0) / ($2159|0))&-1;
          $2162 = $2158 >> 31;
          $2163 = $2162 | 1;
          $2164 = Math_imul($2161, $2159)|0;
          $ispos1$i$i = ($2164|0)>(-1);
          $neg2$i$i = (0 - ($2164))|0;
          $2165 = $ispos1$i$i ? $2164 : $neg2$i$i;
          $2166 = (($2160) - ($2165))|0;
          $2167 = ($2141|0)>($2157|0);
          $x1$n$i$i = $2167 ? $2157 : $2141;
          $2168 = ($x1$n$i$i|0)>($lx$017$i|0);
          if ($2168) {
           $2169 = (($1909) + ($lx$017$i<<2)|0);
           HEAP32[$2169>>2] = $ly$018$i;
          }
          $2170 = (($lx$017$i) + 1)|0;
          $2171 = ($2170|0)<($x1$n$i$i|0);
          if (!($2171)) {
           $hx$1$i = $2157;$lx$1$i = $2157;$ly$1$i = $2155;
           break;
          }
          $2172 = $2157 ^ -1;
          $2173 = ($2172|0)>($2144|0);
          $smax$i$i = $2173 ? $2172 : $2144;
          $2174 = $smax$i$i ^ -1;
          $2180 = $2170;$err$04$i$i = 0;$y$03$i$i = $ly$018$i;
          while(1) {
           $2175 = (($err$04$i$i) + ($2166))|0;
           $2176 = ($2175|0)<($2159|0);
           $2177 = $2176 ? 0 : $2163;
           $2178 = $2176 ? 0 : $2159;
           $err$1$i$i = (($2175) - ($2178))|0;
           $$pn$i$i = (($y$03$i$i) + ($2161))|0;
           $y$1$i$i = (($$pn$i$i) + ($2177))|0;
           $2179 = (($1909) + ($2180<<2)|0);
           HEAP32[$2179>>2] = $y$1$i$i;
           $2181 = (($2180) + 1)|0;
           $exitcond$i$i203 = ($2181|0)==($2174|0);
           if ($exitcond$i$i203) {
            $hx$1$i = $2157;$lx$1$i = $2157;$ly$1$i = $2155;
            break;
           } else {
            $2180 = $2181;$err$04$i$i = $err$1$i$i;$y$03$i$i = $y$1$i$i;
           }
          }
         } else {
          $hx$1$i = $hx$016$i;$lx$1$i = $lx$017$i;$ly$1$i = $ly$018$i;
         }
        } while(0);
        $2182 = (($j$115$i) + 1)|0;
        $2183 = HEAP32[$1921>>2]|0;
        $2184 = ($2182|0)<($2183|0);
        if ($2184) {
         $hx$016$i = $hx$1$i;$j$115$i = $2182;$lx$017$i = $lx$1$i;$ly$018$i = $ly$1$i;
        } else {
         $hx$0$lcssa$i = $hx$1$i;$ly$0$lcssa$i = $ly$1$i;
         break;
        }
       }
      } else {
       $hx$0$lcssa$i = 0;$ly$0$lcssa$i = $2137;
      }
      $2145 = HEAP32[$10>>2]|0;
      $2146 = (($2145|0) / 2)&-1;
      $2147 = ($hx$0$lcssa$i|0)<($2146|0);
      if ($2147) {
       $j$214$i = $hx$0$lcssa$i;
      } else {
       $$0$i205 = 1;
       break;
      }
      while(1) {
       $2185 = (($1909) + ($j$214$i<<2)|0);
       HEAP32[$2185>>2] = $ly$0$lcssa$i;
       $2186 = (($j$214$i) + 1)|0;
       $2187 = HEAP32[$10>>2]|0;
       $2188 = (($2187|0) / 2)&-1;
       $2189 = ($2186|0)<($2188|0);
       if ($2189) {
        $j$214$i = $2186;
       } else {
        $$0$i205 = 1;
        break;
       }
      }
     }
    } while(0);
    $2193 = (($15) + ($i$23<<2)|0);
    HEAP32[$2193>>2] = $$0$i205;
    $2194 = (($i$23) + 1)|0;
    $2195 = HEAP32[$12>>2]|0;
    $2196 = ($2194|0)<($2195|0);
    if ($2196) {
     $i$23 = $2194;
    } else {
     $$lcssa = $2195;
     break;
    }
   }
  } else {
   $$lcssa = $1904;
  }
  $2197 = HEAP32[$86>>2]|0;
  $2198 = ((($1892) + (($2197*60)|0)|0) + ($k$220<<2)|0);
  $2199 = HEAP32[$2198>>2]|0;
  __vp_couple_quantize_normalize($k$220,$1891,$95,$90,$35,$55,$15,$2199,$$lcssa);
  $2200 = HEAP32[$90>>2]|0;
  $2201 = ($2200|0)>(0);
  if ($2201) {
   $i$316 = 0;
   while(1) {
    $2202 = (($1893) + ($i$316<<2)|0);
    $2203 = HEAP32[$2202>>2]|0;
    $2204 = HEAP32[$12>>2]|0;
    $2205 = ($2204|0)>(0);
    if ($2205) {
     $2260 = $2204;$ch_in_bundle$05 = 0;$j$24 = 0;
     while(1) {
      $2206 = (($336) + ($j$24<<2)|0);
      $2207 = HEAP32[$2206>>2]|0;
      $2208 = ($2207|0)==($i$316|0);
      if ($2208) {
       $2209 = (($1880) + ($ch_in_bundle$05<<2)|0);
       $2210 = (($15) + ($j$24<<2)|0);
       $2211 = HEAP32[$2210>>2]|0;
       $not$ = ($2211|0)!=(0);
       $$ = $not$&1;
       HEAP32[$2209>>2] = $$;
       $2212 = (($55) + ($j$24<<2)|0);
       $2213 = HEAP32[$2212>>2]|0;
       $2214 = (($ch_in_bundle$05) + 1)|0;
       $2215 = (($1879) + ($ch_in_bundle$05<<2)|0);
       HEAP32[$2215>>2] = $2213;
       $$pre = HEAP32[$12>>2]|0;
       $2218 = $$pre;$ch_in_bundle$1 = $2214;
      } else {
       $2218 = $2260;$ch_in_bundle$1 = $ch_in_bundle$05;
      }
      $2216 = (($j$24) + 1)|0;
      $2217 = ($2216|0)<($2218|0);
      if ($2217) {
       $2260 = $2218;$ch_in_bundle$05 = $ch_in_bundle$1;$j$24 = $2216;
      } else {
       $ch_in_bundle$0$lcssa = $ch_in_bundle$1;
       break;
      }
     }
    } else {
     $ch_in_bundle$0$lcssa = 0;
    }
    $2219 = (($1894) + ($2203<<2)|0);
    $2220 = HEAP32[$2219>>2]|0;
    $2221 = (57304 + ($2220<<2)|0);
    $2222 = HEAP32[$2221>>2]|0;
    $2223 = (($2222) + 20|0);
    $2224 = HEAP32[$2223>>2]|0;
    $2225 = HEAP32[$1895>>2]|0;
    $2226 = (($2225) + ($2203<<2)|0);
    $2227 = HEAP32[$2226>>2]|0;
    $2228 = (FUNCTION_TABLE_iiiiii[$2224 & 63]($vb,$2227,$1879,$1880,$ch_in_bundle$0$lcssa)|0);
    $2229 = HEAP32[$12>>2]|0;
    $2230 = ($2229|0)>(0);
    if ($2230) {
     $ch_in_bundle$211 = 0;$j$310 = 0;
     while(1) {
      $2231 = (($336) + ($j$310<<2)|0);
      $2232 = HEAP32[$2231>>2]|0;
      $2233 = ($2232|0)==($i$316|0);
      if ($2233) {
       $2234 = (($55) + ($j$310<<2)|0);
       $2235 = HEAP32[$2234>>2]|0;
       $2236 = (($ch_in_bundle$211) + 1)|0;
       $2237 = (($1879) + ($ch_in_bundle$211<<2)|0);
       HEAP32[$2237>>2] = $2235;
       $ch_in_bundle$3 = $2236;
      } else {
       $ch_in_bundle$3 = $ch_in_bundle$211;
      }
      $2238 = (($j$310) + 1)|0;
      $2239 = ($2238|0)<($2229|0);
      if ($2239) {
       $ch_in_bundle$211 = $ch_in_bundle$3;$j$310 = $2238;
      } else {
       $ch_in_bundle$2$lcssa = $ch_in_bundle$3;
       break;
      }
     }
    } else {
     $ch_in_bundle$2$lcssa = 0;
    }
    $2240 = HEAP32[$2219>>2]|0;
    $2241 = (57304 + ($2240<<2)|0);
    $2242 = HEAP32[$2241>>2]|0;
    $2243 = (($2242) + 24|0);
    $2244 = HEAP32[$2243>>2]|0;
    $2245 = HEAP32[$1895>>2]|0;
    $2246 = (($2245) + ($2203<<2)|0);
    $2247 = HEAP32[$2246>>2]|0;
    (FUNCTION_TABLE_iiiiiiiii[$2244 & 63]($1898,$vb,$2247,$1879,$1880,$ch_in_bundle$2$lcssa,$2228,$i$316)|0);
    $2248 = (($i$316) + 1)|0;
    $2249 = HEAP32[$90>>2]|0;
    $2250 = ($2248|0)<($2249|0);
    if ($2250) {
     $i$316 = $2248;
    } else {
     break;
    }
   }
  }
  $2251 = (($k$220) + 1)|0;
  $2252 = HEAP32[$0>>2]|0;
  $2253 = (($2252) + 104|0);
  $2254 = HEAP32[$2253>>2]|0;
  $2255 = (($2254) + 80|0);
  $2256 = HEAP32[$2255>>2]|0;
  $not$$i206 = ($2256|0)!=(0);
  $2257 = $not$$i206 ? 14 : 7;
  $2258 = ($k$220|0)<($2257|0);
  if ($2258) {
   $k$220 = $2251;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _mapping0_inverse($vb,$l) {
 $vb = $vb|0;
 $l = $l|0;
 var $$ = 0, $$2 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre30 = 0, $$pre35 = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0;
 var $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0;
 var $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0;
 var $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0;
 var $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0;
 var $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0.0;
 var $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0;
 var $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0;
 var $324 = 0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0;
 var $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0;
 var $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $T$0$i = 0, $T$1$i = 0, $T$2$i = 0;
 var $ch_in_bundle$0$lcssa = 0, $ch_in_bundle$016 = 0, $ch_in_bundle$1 = 0, $i$027 = 0, $i$124 = 0, $i$221 = 0, $i$312 = 0, $i$312$in = 0, $i$46 = 0, $i$54 = 0, $iX$0$i = 0, $iX$1$i = 0, $iX1$0$i = 0, $iX1$1$i = 0, $iX1$2$i = 0, $init$idx$i = 0, $init$idx$val$i = 0, $init$idx4$val$i = 0, $init$idx5$val$i = 0, $init$idx6$i = 0;
 var $init$idx6$val$i = 0, $j$017 = 0, $j$18 = 0, $not$ = 0, $not$3 = 0, $oX$0$i = 0, $oX$1$i = 0, $oX1$0$i = 0, $oX1$1$i = 0, $oX1$2$i = 0, $oX2$0$i = 0, $oX2$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($vb) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($vb) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($5) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($vb) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = (($3) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 2;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$15)|0)+15)&-16)|0;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$15)|0)+15)&-16)|0;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$15)|0)+15)&-16)|0;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$15)|0)+15)&-16)|0;
 $20 = HEAP32[$13>>2]|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = (($l) + 4|0);
  $23 = (($l) + 1028|0);
  $24 = (($5) + 800|0);
  $25 = (($7) + 48|0);
  $26 = $11 << 1;
  $27 = $26 & 2147483646;
  $i$027 = 0;
  while(1) {
   $33 = (($22) + ($i$027<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($23) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($24) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (57296 + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[$25>>2]|0;
   $44 = (($43) + ($36<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_iii[$42 & 127]($vb,$45)|0);
   $47 = (($19) + ($i$027<<2)|0);
   HEAP32[$47>>2] = $46;
   $48 = (($18) + ($i$027<<2)|0);
   $not$3 = ($46|0)!=(0|0);
   $$ = $not$3&1;
   HEAP32[$48>>2] = $$;
   $49 = HEAP32[$vb>>2]|0;
   $50 = (($49) + ($i$027<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   _memset(($51|0),0,($27|0))|0;
   $52 = (($i$027) + 1)|0;
   $53 = HEAP32[$13>>2]|0;
   $54 = ($52|0)<($53|0);
   if ($54) {
    $i$027 = $52;
   } else {
    $386 = $53;
    break;
   }
  }
 } else {
  $386 = $20;
 }
 $28 = (($l) + 1156|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)>(0);
 if ($30) {
  $31 = (($l) + 1160|0);
  $32 = (($l) + 2184|0);
  $i$124 = 0;
  while(1) {
   $61 = (($31) + ($i$124<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($18) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   $66 = (($32) + ($i$124<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($18) + ($67<<2)|0);
   if ($65) {
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0);
    if (!($70)) {
     $$pre$phiZ2D = $68;
     label = 10;
    }
   } else {
    $$pre$phiZ2D = $68;
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    HEAP32[$63>>2] = 1;
    HEAP32[$$pre$phiZ2D>>2] = 1;
   }
   $71 = (($i$124) + 1)|0;
   $72 = ($71|0)<($29|0);
   if ($72) {
    $i$124 = $71;
   } else {
    break;
   }
  }
 }
 $55 = HEAP32[$l>>2]|0;
 $56 = ($55|0)>(0);
 if ($56) {
  $57 = (($l) + 1092|0);
  $58 = (($5) + 1312|0);
  $59 = (($7) + 52|0);
  $60 = (($l) + 4|0);
  $73 = $386;$i$221 = 0;
  while(1) {
   $74 = ($73|0)>(0);
   if ($74) {
    $387 = $73;$ch_in_bundle$016 = 0;$j$017 = 0;
    while(1) {
     $75 = (($60) + ($j$017<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==($i$221|0);
     if ($77) {
      $78 = (($18) + ($j$017<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($17) + ($ch_in_bundle$016<<2)|0);
      $not$ = ($79|0)!=(0);
      $$2 = $not$&1;
      HEAP32[$80>>2] = $$2;
      $81 = HEAP32[$vb>>2]|0;
      $82 = (($81) + ($j$017<<2)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($ch_in_bundle$016) + 1)|0;
      $85 = (($16) + ($ch_in_bundle$016<<2)|0);
      HEAP32[$85>>2] = $83;
      $$pre30 = HEAP32[$13>>2]|0;
      $88 = $$pre30;$ch_in_bundle$1 = $84;
     } else {
      $88 = $387;$ch_in_bundle$1 = $ch_in_bundle$016;
     }
     $86 = (($j$017) + 1)|0;
     $87 = ($86|0)<($88|0);
     if ($87) {
      $387 = $88;$ch_in_bundle$016 = $ch_in_bundle$1;$j$017 = $86;
     } else {
      $ch_in_bundle$0$lcssa = $ch_in_bundle$1;
      break;
     }
    }
   } else {
    $ch_in_bundle$0$lcssa = 0;
   }
   $89 = (($57) + ($i$221<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($58) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (57304 + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 28|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[$59>>2]|0;
   $98 = (($97) + ($90<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   (FUNCTION_TABLE_iiiiii[$96 & 63]($vb,$99,$16,$17,$ch_in_bundle$0$lcssa)|0);
   $100 = (($i$221) + 1)|0;
   $101 = HEAP32[$l>>2]|0;
   $102 = ($100|0)<($101|0);
   if (!($102)) {
    break;
   }
   $$pre35 = HEAP32[$13>>2]|0;
   $73 = $$pre35;$i$221 = $100;
  }
  $$pre = HEAP32[$28>>2]|0;
  $103 = $$pre;
 } else {
  $103 = $29;
 }
 $104 = ($103|0)>(0);
 if ($104) {
  $105 = (($l) + 1160|0);
  $106 = HEAP32[$vb>>2]|0;
  $107 = (($l) + 2184|0);
  $108 = (($11|0) / 2)&-1;
  $109 = ($11|0)>(1);
  $i$312$in = $103;
  while(1) {
   $i$312 = (($i$312$in) + -1)|0;
   $117 = (($105) + ($i$312<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($106) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($107) + ($i$312<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($106) + ($122<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   if ($109) {
    $j$18 = 0;
    while(1) {
     $125 = (($120) + ($j$18<<2)|0);
     $126 = +HEAPF32[$125>>2];
     $127 = (($124) + ($j$18<<2)|0);
     $128 = +HEAPF32[$127>>2];
     $129 = $126 > 0.0;
     $130 = $128 > 0.0;
     do {
      if ($129) {
       if ($130) {
        HEAPF32[$125>>2] = $126;
        $131 = $126 - $128;
        HEAPF32[$127>>2] = $131;
        break;
       } else {
        HEAPF32[$127>>2] = $126;
        $132 = $126 + $128;
        HEAPF32[$125>>2] = $132;
        break;
       }
      } else {
       if ($130) {
        HEAPF32[$125>>2] = $126;
        $133 = $126 + $128;
        HEAPF32[$127>>2] = $133;
        break;
       } else {
        HEAPF32[$127>>2] = $126;
        $134 = $126 - $128;
        HEAPF32[$125>>2] = $134;
        break;
       }
      }
     } while(0);
     $135 = (($j$18) + 1)|0;
     $136 = ($135|0)<($108|0);
     if ($136) {
      $j$18 = $135;
     } else {
      break;
     }
    }
   }
   $110 = ($i$312|0)>(0);
   if ($110) {
    $i$312$in = $i$312;
   } else {
    break;
   }
  }
 }
 $111 = HEAP32[$13>>2]|0;
 $112 = ($111|0)>(0);
 if (!($112)) {
  STACKTOP = sp;return 0;
 }
 $113 = (($l) + 4|0);
 $114 = (($l) + 1028|0);
 $115 = (($5) + 800|0);
 $116 = (($7) + 48|0);
 $i$46 = 0;
 while(1) {
  $140 = HEAP32[$vb>>2]|0;
  $141 = (($140) + ($i$46<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($113) + ($i$46<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($114) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($115) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (57296 + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + 24|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = HEAP32[$116>>2]|0;
  $154 = (($153) + ($146<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($19) + ($i$46<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  (FUNCTION_TABLE_iiiii[$152 & 127]($vb,$155,$157,$142)|0);
  $158 = (($i$46) + 1)|0;
  $137 = HEAP32[$13>>2]|0;
  $159 = ($158|0)<($137|0);
  if ($159) {
   $i$46 = $158;
  } else {
   break;
  }
 }
 $138 = ($137|0)>(0);
 if (!($138)) {
  STACKTOP = sp;return 0;
 }
 $139 = (($7) + 12|0);
 $i$54 = 0;
 while(1) {
  $160 = HEAP32[$vb>>2]|0;
  $161 = (($160) + ($i$54<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = HEAP32[$8>>2]|0;
  $164 = (($139) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = HEAP32[$165>>2]|0;
  $167 = HEAP32[$166>>2]|0;
  $168 = $167 >> 1;
  $169 = $167 >> 2;
  $$sum$i = (($168) + -7)|0;
  $170 = (($162) + ($$sum$i<<2)|0);
  $$sum1$i = (($168) + ($169))|0;
  $171 = (($162) + ($$sum1$i<<2)|0);
  $172 = (($166) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + ($169<<2)|0);
  $T$0$i = $174;$iX$0$i = $170;$oX$0$i = $171;
  while(1) {
   $175 = (($oX$0$i) + -16|0);
   $176 = (($iX$0$i) + 8|0);
   $177 = +HEAPF32[$176>>2];
   $178 = (($T$0$i) + 12|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $177 * $179;
   $181 = -$180;
   $182 = +HEAPF32[$iX$0$i>>2];
   $183 = (($T$0$i) + 8|0);
   $184 = +HEAPF32[$183>>2];
   $185 = $182 * $184;
   $186 = $181 - $185;
   HEAPF32[$175>>2] = $186;
   $187 = +HEAPF32[$iX$0$i>>2];
   $188 = +HEAPF32[$178>>2];
   $189 = $187 * $188;
   $190 = +HEAPF32[$176>>2];
   $191 = +HEAPF32[$183>>2];
   $192 = $190 * $191;
   $193 = $189 - $192;
   $194 = (($oX$0$i) + -12|0);
   HEAPF32[$194>>2] = $193;
   $195 = (($iX$0$i) + 24|0);
   $196 = +HEAPF32[$195>>2];
   $197 = (($T$0$i) + 4|0);
   $198 = +HEAPF32[$197>>2];
   $199 = $196 * $198;
   $200 = -$199;
   $201 = (($iX$0$i) + 16|0);
   $202 = +HEAPF32[$201>>2];
   $203 = +HEAPF32[$T$0$i>>2];
   $204 = $202 * $203;
   $205 = $200 - $204;
   $206 = (($oX$0$i) + -8|0);
   HEAPF32[$206>>2] = $205;
   $207 = +HEAPF32[$201>>2];
   $208 = +HEAPF32[$197>>2];
   $209 = $207 * $208;
   $210 = +HEAPF32[$195>>2];
   $211 = +HEAPF32[$T$0$i>>2];
   $212 = $210 * $211;
   $213 = $209 - $212;
   $214 = (($oX$0$i) + -4|0);
   HEAPF32[$214>>2] = $213;
   $215 = (($iX$0$i) + -32|0);
   $216 = (($T$0$i) + 16|0);
   $217 = ($215>>>0)<($162>>>0);
   if ($217) {
    break;
   } else {
    $T$0$i = $216;$iX$0$i = $215;$oX$0$i = $175;
   }
  }
  $218 = (($162) + ($168<<2)|0);
  $$sum2$i = (($168) + -8)|0;
  $219 = (($162) + ($$sum2$i<<2)|0);
  $T$1$i = $174;$iX$1$i = $219;$oX$1$i = $171;
  while(1) {
   $220 = (($T$1$i) + -16|0);
   $221 = (($iX$1$i) + 16|0);
   $222 = +HEAPF32[$221>>2];
   $223 = (($T$1$i) + -4|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $222 * $224;
   $226 = (($iX$1$i) + 24|0);
   $227 = +HEAPF32[$226>>2];
   $228 = (($T$1$i) + -8|0);
   $229 = +HEAPF32[$228>>2];
   $230 = $227 * $229;
   $231 = $225 + $230;
   HEAPF32[$oX$1$i>>2] = $231;
   $232 = +HEAPF32[$221>>2];
   $233 = +HEAPF32[$228>>2];
   $234 = $232 * $233;
   $235 = +HEAPF32[$226>>2];
   $236 = +HEAPF32[$223>>2];
   $237 = $235 * $236;
   $238 = $234 - $237;
   $239 = (($oX$1$i) + 4|0);
   HEAPF32[$239>>2] = $238;
   $240 = +HEAPF32[$iX$1$i>>2];
   $241 = (($T$1$i) + -12|0);
   $242 = +HEAPF32[$241>>2];
   $243 = $240 * $242;
   $244 = (($iX$1$i) + 8|0);
   $245 = +HEAPF32[$244>>2];
   $246 = +HEAPF32[$220>>2];
   $247 = $245 * $246;
   $248 = $243 + $247;
   $249 = (($oX$1$i) + 8|0);
   HEAPF32[$249>>2] = $248;
   $250 = +HEAPF32[$iX$1$i>>2];
   $251 = +HEAPF32[$220>>2];
   $252 = $250 * $251;
   $253 = +HEAPF32[$244>>2];
   $254 = +HEAPF32[$241>>2];
   $255 = $253 * $254;
   $256 = $252 - $255;
   $257 = (($oX$1$i) + 12|0);
   HEAPF32[$257>>2] = $256;
   $258 = (($iX$1$i) + -32|0);
   $259 = (($oX$1$i) + 16|0);
   $260 = ($258>>>0)<($162>>>0);
   if ($260) {
    break;
   } else {
    $T$1$i = $220;$iX$1$i = $258;$oX$1$i = $259;
   }
  }
  $init$idx$i = (($166) + 4|0);
  $init$idx$val$i = HEAP32[$init$idx$i>>2]|0;
  _mdct_butterflies($init$idx$val$i,$173,$218,$168);
  $init$idx4$val$i = HEAP32[$166>>2]|0;
  $init$idx5$val$i = HEAP32[$172>>2]|0;
  $init$idx6$i = (($166) + 12|0);
  $init$idx6$val$i = HEAP32[$init$idx6$i>>2]|0;
  _mdct_bitreverse($init$idx4$val$i,$init$idx5$val$i,$init$idx6$val$i,$162);
  $261 = HEAP32[$172>>2]|0;
  $262 = (($261) + ($168<<2)|0);
  $T$2$i = $262;$iX1$0$i = $162;$oX1$0$i = $171;$oX2$0$i = $171;
  while(1) {
   $263 = (($oX1$0$i) + -16|0);
   $264 = +HEAPF32[$iX1$0$i>>2];
   $265 = (($T$2$i) + 4|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $264 * $266;
   $268 = (($iX1$0$i) + 4|0);
   $269 = +HEAPF32[$268>>2];
   $270 = +HEAPF32[$T$2$i>>2];
   $271 = $269 * $270;
   $272 = $267 - $271;
   $273 = (($oX1$0$i) + -4|0);
   HEAPF32[$273>>2] = $272;
   $274 = +HEAPF32[$iX1$0$i>>2];
   $275 = +HEAPF32[$T$2$i>>2];
   $276 = $274 * $275;
   $277 = +HEAPF32[$268>>2];
   $278 = +HEAPF32[$265>>2];
   $279 = $277 * $278;
   $280 = $276 + $279;
   $281 = -$280;
   HEAPF32[$oX2$0$i>>2] = $281;
   $282 = (($iX1$0$i) + 8|0);
   $283 = +HEAPF32[$282>>2];
   $284 = (($T$2$i) + 12|0);
   $285 = +HEAPF32[$284>>2];
   $286 = $283 * $285;
   $287 = (($iX1$0$i) + 12|0);
   $288 = +HEAPF32[$287>>2];
   $289 = (($T$2$i) + 8|0);
   $290 = +HEAPF32[$289>>2];
   $291 = $288 * $290;
   $292 = $286 - $291;
   $293 = (($oX1$0$i) + -8|0);
   HEAPF32[$293>>2] = $292;
   $294 = +HEAPF32[$282>>2];
   $295 = +HEAPF32[$289>>2];
   $296 = $294 * $295;
   $297 = +HEAPF32[$287>>2];
   $298 = +HEAPF32[$284>>2];
   $299 = $297 * $298;
   $300 = $296 + $299;
   $301 = -$300;
   $302 = (($oX2$0$i) + 4|0);
   HEAPF32[$302>>2] = $301;
   $303 = (($iX1$0$i) + 16|0);
   $304 = +HEAPF32[$303>>2];
   $305 = (($T$2$i) + 20|0);
   $306 = +HEAPF32[$305>>2];
   $307 = $304 * $306;
   $308 = (($iX1$0$i) + 20|0);
   $309 = +HEAPF32[$308>>2];
   $310 = (($T$2$i) + 16|0);
   $311 = +HEAPF32[$310>>2];
   $312 = $309 * $311;
   $313 = $307 - $312;
   $314 = (($oX1$0$i) + -12|0);
   HEAPF32[$314>>2] = $313;
   $315 = +HEAPF32[$303>>2];
   $316 = +HEAPF32[$310>>2];
   $317 = $315 * $316;
   $318 = +HEAPF32[$308>>2];
   $319 = +HEAPF32[$305>>2];
   $320 = $318 * $319;
   $321 = $317 + $320;
   $322 = -$321;
   $323 = (($oX2$0$i) + 8|0);
   HEAPF32[$323>>2] = $322;
   $324 = (($iX1$0$i) + 24|0);
   $325 = +HEAPF32[$324>>2];
   $326 = (($T$2$i) + 28|0);
   $327 = +HEAPF32[$326>>2];
   $328 = $325 * $327;
   $329 = (($iX1$0$i) + 28|0);
   $330 = +HEAPF32[$329>>2];
   $331 = (($T$2$i) + 24|0);
   $332 = +HEAPF32[$331>>2];
   $333 = $330 * $332;
   $334 = $328 - $333;
   HEAPF32[$263>>2] = $334;
   $335 = +HEAPF32[$324>>2];
   $336 = +HEAPF32[$331>>2];
   $337 = $335 * $336;
   $338 = +HEAPF32[$329>>2];
   $339 = +HEAPF32[$326>>2];
   $340 = $338 * $339;
   $341 = $337 + $340;
   $342 = -$341;
   $343 = (($oX2$0$i) + 12|0);
   HEAPF32[$343>>2] = $342;
   $344 = (($oX2$0$i) + 16|0);
   $345 = (($iX1$0$i) + 32|0);
   $346 = (($T$2$i) + 32|0);
   $347 = ($345>>>0)<($263>>>0);
   if ($347) {
    $T$2$i = $346;$iX1$0$i = $345;$oX1$0$i = $263;$oX2$0$i = $344;
   } else {
    break;
   }
  }
  $348 = (($162) + ($169<<2)|0);
  $iX1$1$i = $171;$oX1$1$i = $348;$oX2$1$i = $348;
  while(1) {
   $349 = (($oX1$1$i) + -16|0);
   $350 = (($iX1$1$i) + -16|0);
   $351 = (($iX1$1$i) + -4|0);
   $352 = +HEAPF32[$351>>2];
   $353 = (($oX1$1$i) + -4|0);
   HEAPF32[$353>>2] = $352;
   $354 = -$352;
   HEAPF32[$oX2$1$i>>2] = $354;
   $355 = (($iX1$1$i) + -8|0);
   $356 = +HEAPF32[$355>>2];
   $357 = (($oX1$1$i) + -8|0);
   HEAPF32[$357>>2] = $356;
   $358 = -$356;
   $359 = (($oX2$1$i) + 4|0);
   HEAPF32[$359>>2] = $358;
   $360 = (($iX1$1$i) + -12|0);
   $361 = +HEAPF32[$360>>2];
   $362 = (($oX1$1$i) + -12|0);
   HEAPF32[$362>>2] = $361;
   $363 = -$361;
   $364 = (($oX2$1$i) + 8|0);
   HEAPF32[$364>>2] = $363;
   $365 = +HEAPF32[$350>>2];
   HEAPF32[$349>>2] = $365;
   $366 = -$365;
   $367 = (($oX2$1$i) + 12|0);
   HEAPF32[$367>>2] = $366;
   $368 = (($oX2$1$i) + 16|0);
   $369 = ($368>>>0)<($350>>>0);
   if ($369) {
    $iX1$1$i = $350;$oX1$1$i = $349;$oX2$1$i = $368;
   } else {
    $iX1$2$i = $171;$oX1$2$i = $171;
    break;
   }
  }
  while(1) {
   $370 = (($oX1$2$i) + -16|0);
   $371 = (($iX1$2$i) + 12|0);
   $372 = +HEAPF32[$371>>2];
   HEAPF32[$370>>2] = $372;
   $373 = (($iX1$2$i) + 8|0);
   $374 = +HEAPF32[$373>>2];
   $375 = (($oX1$2$i) + -12|0);
   HEAPF32[$375>>2] = $374;
   $376 = (($iX1$2$i) + 4|0);
   $377 = +HEAPF32[$376>>2];
   $378 = (($oX1$2$i) + -8|0);
   HEAPF32[$378>>2] = $377;
   $379 = +HEAPF32[$iX1$2$i>>2];
   $380 = (($oX1$2$i) + -4|0);
   HEAPF32[$380>>2] = $379;
   $381 = (($iX1$2$i) + 16|0);
   $382 = ($370>>>0)>($218>>>0);
   if ($382) {
    $iX1$2$i = $381;$oX1$2$i = $370;
   } else {
    break;
   }
  }
  $383 = (($i$54) + 1)|0;
  $384 = HEAP32[$13>>2]|0;
  $385 = ($383|0)<($384|0);
  if ($385) {
   $i$54 = $383;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _decode_packed_entry_number($book,$b) {
 $book = $book|0;
 $b = $b|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hi$0 = 0, $hi$11 = 0, $lo$0 = 0, $lo$1$lcssa = 0, $lo$12 = 0, $lok$0$lcssa = 0, $or$cond = 0, $or$cond3 = 0, $read$0$lcssa = 0, $read$04 = 0, $storemerge$i = 0, $storemerge$i1 = 0;
 var $storemerge$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($book) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($book) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_oggpack_look($b,$3)|0);
 $5 = ($4|0)>(-1);
 do {
  if ($5) {
   $6 = (($book) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($4<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<(0);
   if ($10) {
    $11 = $9 >>> 15;
    $12 = $11 & 32767;
    $13 = (($book) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $9 & 32767;
    $16 = (($14) - ($15))|0;
    $hi$0 = $16;$lo$0 = $12;
    break;
   }
   $17 = (($9) + -1)|0;
   $18 = (($book) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = (($b) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($22))|0;
   $26 = HEAP32[$b>>2]|0;
   $27 = (($b) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($25) + 7)|0;
   $30 = $29 >> 3;
   $31 = (($28) - ($30))|0;
   $32 = ($26|0)>($31|0);
   if ($32) {
    $39 = (($b) + 12|0);
    HEAP32[$39>>2] = 0;
    HEAP32[$b>>2] = $28;
    $storemerge$i = 1;
   } else {
    $33 = (($25|0) / 8)&-1;
    $34 = (($b) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + ($33)|0);
    HEAP32[$34>>2] = $36;
    $37 = (($26) + ($33))|0;
    HEAP32[$b>>2] = $37;
    $38 = $25 & 7;
    $storemerge$i = $38;
   }
   HEAP32[$23>>2] = $storemerge$i;
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
  } else {
   $40 = (($book) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $hi$0 = $41;$lo$0 = 0;
  }
 } while(0);
 $42 = (_oggpack_look($b,$1)|0);
 $43 = ($42|0)<(0);
 $44 = ($1|0)>(1);
 $or$cond3 = $43 & $44;
 if ($or$cond3) {
  $read$04 = $1;
  while(1) {
   $45 = (($read$04) + -1)|0;
   $46 = (_oggpack_look($b,$45)|0);
   $47 = ($46|0)<(0);
   $48 = ($45|0)>(1);
   $or$cond = $47 & $48;
   if ($or$cond) {
    $read$04 = $45;
   } else {
    $$lcssa = $47;$lok$0$lcssa = $46;$read$0$lcssa = $45;
    break;
   }
  }
 } else {
  $$lcssa = $43;$lok$0$lcssa = $42;$read$0$lcssa = $1;
 }
 if ($$lcssa) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = $lok$0$lcssa >>> 16;
 $50 = $lok$0$lcssa << 16;
 $51 = $49 | $50;
 $52 = $51 >>> 8;
 $53 = $52 & 16711935;
 $54 = $51 << 8;
 $55 = $54 & -16711936;
 $56 = $53 | $55;
 $57 = $56 >>> 4;
 $58 = $57 & 252645135;
 $59 = $56 << 4;
 $60 = $59 & -252645136;
 $61 = $58 | $60;
 $62 = $61 >>> 2;
 $63 = $62 & 858993459;
 $64 = $61 << 2;
 $65 = $64 & -858993460;
 $66 = $63 | $65;
 $67 = $66 >>> 1;
 $68 = $67 & 1431655765;
 $69 = $66 << 1;
 $70 = $69 & -1431655766;
 $71 = $68 | $70;
 $72 = (($hi$0) - ($lo$0))|0;
 $73 = ($72|0)>(1);
 if ($73) {
  $74 = (($book) + 20|0);
  $75 = HEAP32[$74>>2]|0;
  $77 = $72;$hi$11 = $hi$0;$lo$12 = $lo$0;
  while(1) {
   $76 = $77 >> 1;
   $78 = (($76) + ($lo$12))|0;
   $79 = (($75) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80>>>0)>($71>>>0);
   $82 = $81 ? 0 : $76;
   $83 = (($82) + ($lo$12))|0;
   $84 = $81 ? $76 : 0;
   $85 = (($hi$11) - ($84))|0;
   $86 = (($85) - ($83))|0;
   $87 = ($86|0)>(1);
   if ($87) {
    $77 = $86;$hi$11 = $85;$lo$12 = $83;
   } else {
    $lo$1$lcssa = $83;
    break;
   }
  }
 } else {
  $lo$1$lcssa = $lo$0;
 }
 $88 = (($book) + 28|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + ($lo$1$lcssa)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = ($92|0)>($read$0$lcssa|0);
 $94 = (($b) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 if ($93) {
  $111 = (($95) + ($read$0$lcssa))|0;
  $112 = HEAP32[$b>>2]|0;
  $113 = (($b) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($111) + 7)|0;
  $116 = $115 >> 3;
  $117 = (($114) - ($116))|0;
  $118 = ($112|0)>($117|0);
  if ($118) {
   $125 = (($b) + 12|0);
   HEAP32[$125>>2] = 0;
   HEAP32[$b>>2] = $114;
   $storemerge$i1 = 1;
  } else {
   $119 = (($111|0) / 8)&-1;
   $120 = (($b) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($119)|0);
   HEAP32[$120>>2] = $122;
   $123 = (($112) + ($119))|0;
   HEAP32[$b>>2] = $123;
   $124 = $111 & 7;
   $storemerge$i1 = $124;
  }
  HEAP32[$94>>2] = $storemerge$i1;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $96 = (($95) + ($92))|0;
  $97 = HEAP32[$b>>2]|0;
  $98 = (($b) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($96) + 7)|0;
  $101 = $100 >> 3;
  $102 = (($99) - ($101))|0;
  $103 = ($97|0)>($102|0);
  if ($103) {
   $110 = (($b) + 12|0);
   HEAP32[$110>>2] = 0;
   HEAP32[$b>>2] = $99;
   $storemerge$i3 = 1;
  } else {
   $104 = (($96|0) / 8)&-1;
   $105 = (($b) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($104)|0);
   HEAP32[$105>>2] = $107;
   $108 = (($97) + ($104))|0;
   HEAP32[$b>>2] = $108;
   $109 = $96 & 7;
   $storemerge$i3 = $109;
  }
  HEAP32[$94>>2] = $storemerge$i3;
  $$0 = $lo$1$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vorbis_book_decodevs_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$07 = 0, $i$13$us = 0, $j$01$us = 0, $o$04$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($book) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = (($n|0) / ($3|0))&-1;
 $5 = $4 << 2;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$5)|0)+15)&-16)|0;
 $7 = ($4|0)>(0);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($book) + 16|0);
 $i$07 = 0;
 while(1) {
  $22 = (_decode_packed_entry_number($book,$b)|0);
  $23 = ($22|0)==(-1);
  if ($23) {
   $$0 = -1;
   label = 10;
   break;
  }
  $24 = HEAP32[$8>>2]|0;
  $9 = HEAP32[$book>>2]|0;
  $25 = Math_imul($9, $22)|0;
  $26 = (($24) + ($25<<2)|0);
  $27 = (($6) + ($i$07<<2)|0);
  HEAP32[$27>>2] = $26;
  $28 = (($i$07) + 1)|0;
  $29 = ($28|0)<($4|0);
  if ($29) {
   $i$07 = $28;
  } else {
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $$not = ($9|0)<(1);
 if ($$not) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$13$us = 0;$o$04$us = 0;
 }
 while(1) {
  $j$01$us = 0;
  while(1) {
   $13 = (($6) + ($j$01$us<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($i$13$us<<2)|0);
   $16 = +HEAPF32[$15>>2];
   $17 = (($j$01$us) + ($o$04$us))|0;
   $18 = (($a) + ($17<<2)|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $16 + $19;
   HEAPF32[$18>>2] = $20;
   $21 = (($j$01$us) + 1)|0;
   $exitcond = ($21|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $j$01$us = $21;
   }
  }
  $10 = (($i$13$us) + 1)|0;
  $11 = (($o$04$us) + ($4))|0;
  $12 = ($10|0)<($9|0);
  if ($12) {
   $i$13$us = $10;$o$04$us = $11;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_book_decodev_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $i$011 = 0, $i$1$lcssa = 0, $i$18 = 0, $i$2$ph = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$09 = 0, $j$1 = 0;
 var $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($book) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = ($3|0)>(8);
 if ($4) {
  $6 = ($n|0)>(0);
  if (!($6)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $7 = (($book) + 16|0);
  $i$011 = 0;
  while(1) {
   $10 = (_decode_packed_entry_number($book,$b)|0);
   $11 = ($10|0)==(-1);
   if ($11) {
    $$0 = -1;
    label = 29;
    break;
   }
   $12 = HEAP32[$7>>2]|0;
   $13 = HEAP32[$book>>2]|0;
   $14 = Math_imul($13, $10)|0;
   $15 = ($13|0)>(0);
   if ($15) {
    $16 = ($13|0)>(1);
    $smax = $16 ? $13 : 1;
    $i$18 = $i$011;$j$09 = 0;
    while(1) {
     $17 = (($j$09) + 1)|0;
     $$sum7 = (($j$09) + ($14))|0;
     $18 = (($12) + ($$sum7<<2)|0);
     $19 = +HEAPF32[$18>>2];
     $20 = (($i$18) + 1)|0;
     $21 = (($a) + ($i$18<<2)|0);
     $22 = +HEAPF32[$21>>2];
     $23 = $19 + $22;
     HEAPF32[$21>>2] = $23;
     $24 = ($17|0)<($13|0);
     if ($24) {
      $i$18 = $20;$j$09 = $17;
     } else {
      break;
     }
    }
    $8 = (($i$011) + ($smax))|0;
    $i$1$lcssa = $8;
   } else {
    $i$1$lcssa = $i$011;
   }
   $9 = ($i$1$lcssa|0)<($n|0);
   if ($9) {
    $i$011 = $i$1$lcssa;
   } else {
    $$0 = 0;
    label = 29;
    break;
   }
  }
  if ((label|0) == 29) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = (($book) + 16|0);
 $i$2$ph = 0;
 L22: while(1) {
  $95 = ($i$2$ph|0)<($n|0);
  if (!($95)) {
   $$0 = 0;
   label = 29;
   break;
  }
  L24: while(1) {
   $26 = (_decode_packed_entry_number($book,$b)|0);
   $96 = ($26|0)==(-1);
   if ($96) {
    $$0 = -1;
    label = 29;
    break L22;
   }
   $28 = HEAP32[$5>>2]|0;
   $97 = HEAP32[$book>>2]|0;
   switch ($97|0) {
   case 2:  {
    label = 23;
    break L24;
    break;
   }
   case 8:  {
    label = 12;
    break L24;
    break;
   }
   case 1:  {
    $88 = $26;$i$9 = $i$2$ph;$j$7 = 0;
    break L24;
    break;
   }
   case 7:  {
    label = 13;
    break L24;
    break;
   }
   case 5:  {
    label = 17;
    break L24;
    break;
   }
   case 4:  {
    label = 19;
    break L24;
    break;
   }
   case 3:  {
    label = 21;
    break L24;
    break;
   }
   case 6:  {
    label = 15;
    break L24;
    break;
   }
   default: {
   }
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $25 = $26 << 3;
   $27 = (($28) + ($25<<2)|0);
   $29 = +HEAPF32[$27>>2];
   $30 = (($i$2$ph) + 1)|0;
   $31 = (($a) + ($i$2$ph<<2)|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $29 + $32;
   HEAPF32[$31>>2] = $33;
   $36 = $25;$i$3 = $30;$j$1 = 1;
   label = 14;
  }
  else if ((label|0) == 13) {
   label = 0;
   $34 = ($26*7)|0;
   $36 = $34;$i$3 = $i$2$ph;$j$1 = 0;
   label = 14;
  }
  else if ((label|0) == 15) {
   label = 0;
   $43 = ($26*6)|0;
   $45 = $43;$i$4 = $i$2$ph;$j$2 = 0;
   label = 16;
  }
  else if ((label|0) == 17) {
   label = 0;
   $52 = ($26*5)|0;
   $54 = $52;$i$5 = $i$2$ph;$j$3 = 0;
   label = 18;
  }
  else if ((label|0) == 19) {
   label = 0;
   $61 = $26 << 2;
   $63 = $61;$i$6 = $i$2$ph;$j$4 = 0;
   label = 20;
  }
  else if ((label|0) == 21) {
   label = 0;
   $70 = ($26*3)|0;
   $72 = $70;$i$7 = $i$2$ph;$j$5 = 0;
   label = 22;
  }
  else if ((label|0) == 23) {
   label = 0;
   $79 = $26 << 1;
   $81 = $79;$i$8 = $i$2$ph;$j$6 = 0;
   label = 24;
  }
  if ((label|0) == 14) {
   label = 0;
   $35 = (($j$1) + 1)|0;
   $$sum6 = (($j$1) + ($36))|0;
   $37 = (($28) + ($$sum6<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (($i$3) + 1)|0;
   $40 = (($a) + ($i$3<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $38 + $41;
   HEAPF32[$40>>2] = $42;
   $45 = $36;$i$4 = $39;$j$2 = $35;
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $44 = (($j$2) + 1)|0;
   $$sum5 = (($j$2) + ($45))|0;
   $46 = (($28) + ($$sum5<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = (($i$4) + 1)|0;
   $49 = (($a) + ($i$4<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $47 + $50;
   HEAPF32[$49>>2] = $51;
   $54 = $45;$i$5 = $48;$j$3 = $44;
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $53 = (($j$3) + 1)|0;
   $$sum4 = (($j$3) + ($54))|0;
   $55 = (($28) + ($$sum4<<2)|0);
   $56 = +HEAPF32[$55>>2];
   $57 = (($i$5) + 1)|0;
   $58 = (($a) + ($i$5<<2)|0);
   $59 = +HEAPF32[$58>>2];
   $60 = $56 + $59;
   HEAPF32[$58>>2] = $60;
   $63 = $54;$i$6 = $57;$j$4 = $53;
   label = 20;
  }
  if ((label|0) == 20) {
   label = 0;
   $62 = (($j$4) + 1)|0;
   $$sum3 = (($j$4) + ($63))|0;
   $64 = (($28) + ($$sum3<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = (($i$6) + 1)|0;
   $67 = (($a) + ($i$6<<2)|0);
   $68 = +HEAPF32[$67>>2];
   $69 = $65 + $68;
   HEAPF32[$67>>2] = $69;
   $72 = $63;$i$7 = $66;$j$5 = $62;
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
   $71 = (($j$5) + 1)|0;
   $$sum2 = (($j$5) + ($72))|0;
   $73 = (($28) + ($$sum2<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = (($i$7) + 1)|0;
   $76 = (($a) + ($i$7<<2)|0);
   $77 = +HEAPF32[$76>>2];
   $78 = $74 + $77;
   HEAPF32[$76>>2] = $78;
   $81 = $72;$i$8 = $75;$j$6 = $71;
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $80 = (($j$6) + 1)|0;
   $$sum1 = (($j$6) + ($81))|0;
   $82 = (($28) + ($$sum1<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $84 = (($i$8) + 1)|0;
   $85 = (($a) + ($i$8<<2)|0);
   $86 = +HEAPF32[$85>>2];
   $87 = $83 + $86;
   HEAPF32[$85>>2] = $87;
   $88 = $81;$i$9 = $84;$j$7 = $80;
  }
  $$sum = (($j$7) + ($88))|0;
  $89 = (($28) + ($$sum<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = (($i$9) + 1)|0;
  $92 = (($a) + ($i$9<<2)|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $90 + $93;
  HEAPF32[$92>>2] = $94;
  $i$2$ph = $91;
 }
 if ((label|0) == 29) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vorbis_bitrate_addblock($vb) {
 $vb = $vb|0;
 var $$ = 0, $$9 = 0, $$choice$7 = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre3 = 0, $$pre5 = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $choice$031 = 0, $choice$138 = 0;
 var $choice$138$phi = 0, $choice$2 = 0, $choice$3 = 0, $choice$424 = 0, $choice$5 = 0, $choice$617 = 0, $choice$7 = 0, $minsize$015 = 0, $or$cond = 0, $or$cond29 = 0, $or$cond4 = 0, $or$cond436 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $slew$0 = 0.0, $slew$1 = 0.0, $this_bits$030 = 0, $this_bits$137 = 0;
 var $this_bits$2 = 0, $this_bits$323 = 0, $this_bits$4 = 0, $this_bits$516 = 0, $this_bits$6 = 0, $this_bits$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($vb) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($vb) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 80|0);
 $7 = (($3) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) + 112|0);
 $12 = +HEAPF64[$11>>3];
 $13 = (+_rint((+$12)));
 $14 = (~~(($13)));
 $15 = (($1) + 12|0);
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($17) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 7)|0;
 $22 = (($21|0) / 8)&-1;
 $23 = (($22) + ($18))|0;
 $24 = $23 << 3;
 $25 = (($vb) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 $28 = (($5) + 96|0);
 $29 = HEAP32[$28>>2]|0;
 if ($27) {
  $30 = (($5) + 100|0);
  $31 = HEAP32[$30>>2]|0;
  $135 = $29;$156 = $30;$159 = $31;$39 = 0;
 } else {
  $32 = (($5) + 104|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($33, $29)|0;
  $35 = (($5) + 100|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($33, $36)|0;
  $135 = $34;$156 = $35;$159 = $37;$39 = $26;
 }
 $38 = (($10) + ($39<<2)|0);
 $40 = HEAP32[$38>>2]|0;
 $41 = $40 >> 1;
 $42 = (($10) + 3372|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (+($43|0));
 $45 = (($10) + 3376|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $44 * $46;
 $48 = (~~(($47)));
 $49 = HEAP32[$6>>2]|0;
 $50 = ($49|0)==(0);
 $51 = (($5) + 120|0);
 if ($50) {
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   STACKTOP = sp;return;
  }
  HEAP32[$51>>2] = $vb;
  STACKTOP = sp;return;
 }
 HEAP32[$51>>2] = $vb;
 $54 = (($5) + 92|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(0);
 if ($56) {
  $57 = ($39|0)==(0);
  if ($57) {
   $67 = $55;
  } else {
   $58 = (($5) + 104|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = Math_imul($59, $55)|0;
   $67 = $60;
  }
  $61 = (($10) + 3384|0);
  $62 = +HEAPF64[$61>>3];
  $63 = 15.0 / $62;
  $64 = (($5) + 84|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($24) - ($67))|0;
  $68 = (($65) + ($66))|0;
  $69 = ($68|0)>($48|0);
  L17: do {
   if ($69) {
    $70 = ($14|0)>(0);
    $71 = ($24|0)>($67|0);
    $or$cond29 = $70 & $71;
    if ($or$cond29) {
     $choice$031 = $14;$this_bits$030 = $24;
     while(1) {
      $72 = (($this_bits$030) - ($67))|0;
      $73 = (($72) + ($65))|0;
      $74 = ($73|0)>($48|0);
      if (!($74)) {
       $choice$2 = $choice$031;
       break L17;
      }
      $75 = (($choice$031) + -1)|0;
      $76 = (($15) + ($75<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = HEAP32[$77>>2]|0;
      $79 = (($77) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($80) + 7)|0;
      $82 = (($81|0) / 8)&-1;
      $83 = (($82) + ($78))|0;
      $84 = $83 << 3;
      $85 = ($75|0)>(0);
      $86 = ($84|0)>($67|0);
      $or$cond = $85 & $86;
      if ($or$cond) {
       $choice$031 = $75;$this_bits$030 = $84;
      } else {
       $choice$2 = $75;
       break;
      }
     }
    } else {
     $choice$2 = $14;
    }
   } else {
    $87 = ($68|0)<($48|0);
    if ($87) {
     $88 = (($14) + 1)|0;
     $89 = ($88|0)<(15);
     $90 = ($24|0)<($67|0);
     $or$cond436 = $89 & $90;
     if ($or$cond436) {
      $95 = $88;$choice$138 = $14;$this_bits$137 = $24;
      while(1) {
       $91 = (($this_bits$137) - ($67))|0;
       $92 = (($91) + ($65))|0;
       $93 = ($92|0)<($48|0);
       if (!($93)) {
        $choice$2 = $choice$138;
        break L17;
       }
       $94 = (($15) + ($95<<2)|0);
       $96 = HEAP32[$94>>2]|0;
       $97 = HEAP32[$96>>2]|0;
       $98 = (($96) + 4|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($99) + 7)|0;
       $101 = (($100|0) / 8)&-1;
       $102 = (($101) + ($97))|0;
       $103 = $102 << 3;
       $104 = (($95) + 1)|0;
       $105 = ($104|0)<(15);
       $106 = ($103|0)<($67|0);
       $or$cond4 = $105 & $106;
       if ($or$cond4) {
        $choice$138$phi = $95;$95 = $104;$this_bits$137 = $103;$choice$138 = $choice$138$phi;
       } else {
        $choice$2 = $95;
        break;
       }
      }
     } else {
      $choice$2 = $14;
     }
    } else {
     $choice$2 = $14;
    }
   }
  } while(0);
  $107 = (+($choice$2|0));
  $108 = $107 - $12;
  $109 = (+_rint((+$108)));
  $110 = (+($41|0));
  $111 = $109 / $110;
  $112 = (($8) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (+($113|0));
  $115 = $111 * $114;
  $116 = -$63;
  $117 = $115 < $116;
  $slew$0 = $117 ? $116 : $115;
  $118 = $slew$0 > $63;
  $slew$1 = $118 ? $63 : $slew$0;
  $119 = $slew$1 / $114;
  $120 = $110 * $119;
  $121 = $12 + $120;
  HEAPF64[$11>>3] = $121;
  $122 = (+_rint((+$121)));
  $123 = (~~(($122)));
  $124 = (($15) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($125) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + 7)|0;
  $130 = (($129|0) / 8)&-1;
  $131 = (($130) + ($126))|0;
  $132 = $131 << 3;
  $choice$3 = $123;$this_bits$2 = $132;
 } else {
  $choice$3 = $14;$this_bits$2 = $24;
 }
 $133 = ($29|0)>(0);
 $134 = ($this_bits$2|0)<($135|0);
 $or$cond5 = $133 & $134;
 L29: do {
  if ($or$cond5) {
   $136 = (($5) + 88|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($this_bits$2) - ($135))|0;
   $139 = (($138) + ($137))|0;
   $140 = ($139|0)<(0);
   if ($140) {
    $choice$424 = $choice$3;$this_bits$323 = $this_bits$2;
    while(1) {
     $141 = (($choice$424) + 1)|0;
     $142 = ($choice$424|0)>(13);
     if ($142) {
      $choice$5 = $141;$this_bits$4 = $this_bits$323;
      break L29;
     }
     $143 = (($15) + ($141<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = HEAP32[$144>>2]|0;
     $146 = (($144) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + 7)|0;
     $149 = (($148|0) / 8)&-1;
     $150 = (($149) + ($145))|0;
     $151 = $150 << 3;
     $152 = (($151) - ($135))|0;
     $153 = (($152) + ($137))|0;
     $154 = ($153|0)<(0);
     if ($154) {
      $choice$424 = $141;$this_bits$323 = $151;
     } else {
      $choice$5 = $141;$this_bits$4 = $151;
      break;
     }
    }
   } else {
    $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
   }
  } else {
   $choice$5 = $choice$3;$this_bits$4 = $this_bits$2;
  }
 } while(0);
 $155 = HEAP32[$156>>2]|0;
 $157 = ($155|0)>(0);
 $158 = ($this_bits$4|0)>($159|0);
 $or$cond6 = $157 & $158;
 L35: do {
  if ($or$cond6) {
   $160 = (($5) + 88|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($this_bits$4) - ($159))|0;
   $163 = (($162) + ($161))|0;
   $164 = ($163|0)>($43|0);
   if ($164) {
    $choice$617 = $choice$5;$this_bits$516 = $this_bits$4;
    while(1) {
     $165 = (($choice$617) + -1)|0;
     $166 = ($choice$617|0)<(1);
     if ($166) {
      $choice$7 = $165;$this_bits$6 = $this_bits$516;
      break L35;
     }
     $167 = (($15) + ($165<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = HEAP32[$168>>2]|0;
     $170 = (($168) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + 7)|0;
     $173 = (($172|0) / 8)&-1;
     $174 = (($173) + ($169))|0;
     $175 = $174 << 3;
     $176 = (($175) - ($159))|0;
     $177 = (($176) + ($161))|0;
     $178 = ($177|0)>($43|0);
     if ($178) {
      $choice$617 = $165;$this_bits$516 = $175;
     } else {
      $choice$7 = $165;$this_bits$6 = $175;
      break;
     }
    }
   } else {
    $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
   }
  } else {
   $choice$7 = $choice$5;$this_bits$6 = $this_bits$4;
  }
 } while(0);
 $179 = ($choice$7|0)<(0);
 $180 = (($5) + 88|0);
 $181 = HEAP32[$180>>2]|0;
 if ($179) {
  $182 = (($43) + ($159))|0;
  $183 = (($182) - ($181))|0;
  $184 = (($183|0) / 8)&-1;
  $185 = (($5) + 124|0);
  HEAP32[$185>>2] = 0;
  $186 = HEAP32[$15>>2]|0;
  $187 = HEAP32[$186>>2]|0;
  $188 = (($186) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + 7)|0;
  $191 = (($190|0) / 8)&-1;
  $192 = (($191) + ($187))|0;
  $193 = ($192|0)>($184|0);
  if ($193) {
   $194 = (($186) + 12|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($195|0)==(0|0);
   if ($196) {
    $201 = $189;$204 = $187;
   } else {
    $197 = (($186) + 8|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (($198) + ($184)|0);
    HEAP32[$194>>2] = $199;
    HEAP32[$188>>2] = 0;
    HEAP32[$186>>2] = $184;
    HEAP8[$199>>0] = 0;
    $$pre = HEAP32[$15>>2]|0;
    $$pre3 = HEAP32[$$pre>>2]|0;
    $$phi$trans$insert4 = (($$pre) + 4|0);
    $$pre5 = HEAP32[$$phi$trans$insert4>>2]|0;
    $201 = $$pre5;$204 = $$pre3;
   }
   $200 = (($201) + 7)|0;
   $202 = (($200|0) / 8)&-1;
   $203 = (($202) + ($204))|0;
   $205 = $203 << 3;
   $this_bits$7 = $205;
  } else {
   $this_bits$7 = $this_bits$6;
  }
 } else {
  $206 = (($135) + 7)|0;
  $207 = (($206) - ($181))|0;
  $208 = (($207|0) / 8)&-1;
  $209 = ($choice$7|0)>(14);
  $$choice$7 = $209 ? 14 : $choice$7;
  $210 = (($5) + 124|0);
  HEAP32[$210>>2] = $$choice$7;
  $211 = (($15) + ($$choice$7<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = HEAP32[$212>>2]|0;
  $214 = (($212) + 4|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = (($215) + 7)|0;
  $217 = (($216|0) / 8)&-1;
  $218 = (($217) + ($213))|0;
  $219 = (($208) - ($218))|0;
  $220 = ($219|0)>(0);
  if ($220) {
   $222 = $212;$minsize$015 = $219;
   while(1) {
    $221 = (($minsize$015) + -1)|0;
    _oggpack_write($222,0,8);
    $223 = ($221|0)>(0);
    $224 = HEAP32[$211>>2]|0;
    if ($223) {
     $222 = $224;$minsize$015 = $221;
    } else {
     break;
    }
   }
   $$pre7 = HEAP32[$224>>2]|0;
   $$phi$trans$insert8 = (($224) + 4|0);
   $$pre9 = HEAP32[$$phi$trans$insert8>>2]|0;
   $226 = $$pre9;$229 = $$pre7;
  } else {
   $226 = $215;$229 = $213;
  }
  $225 = (($226) + 7)|0;
  $227 = (($225|0) / 8)&-1;
  $228 = (($227) + ($229))|0;
  $230 = $228 << 3;
  $this_bits$7 = $230;
 }
 $231 = HEAP32[$28>>2]|0;
 $232 = ($231|0)>(0);
 if ($232) {
  label = 38;
 } else {
  $233 = HEAP32[$156>>2]|0;
  $234 = ($233|0)>(0);
  if ($234) {
   label = 38;
  }
 }
 do {
  if ((label|0) == 38) {
   $235 = ($159|0)>(0);
   $236 = ($this_bits$7|0)>($159|0);
   $or$cond7 = $235 & $236;
   if ($or$cond7) {
    $237 = (($this_bits$7) - ($159))|0;
    $238 = (($5) + 88|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($237) + ($239))|0;
    HEAP32[$238>>2] = $240;
    break;
   }
   $241 = ($135|0)>(0);
   $242 = ($this_bits$7|0)<($135|0);
   $or$cond8 = $241 & $242;
   if ($or$cond8) {
    $243 = (($this_bits$7) - ($135))|0;
    $244 = (($5) + 88|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + ($245))|0;
    HEAP32[$244>>2] = $246;
    break;
   }
   $247 = (($5) + 88|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)>($48|0);
   if ($249) {
    if ($235) {
     $250 = (($this_bits$7) - ($159))|0;
     $251 = (($248) + ($250))|0;
     $252 = ($251|0)<($48|0);
     $$ = $252 ? $48 : $251;
     HEAP32[$247>>2] = $$;
     break;
    } else {
     HEAP32[$247>>2] = $48;
     break;
    }
   } else {
    if ($241) {
     $253 = (($this_bits$7) - ($135))|0;
     $254 = (($248) + ($253))|0;
     $255 = ($254|0)>($48|0);
     $$9 = $255 ? $48 : $254;
     HEAP32[$247>>2] = $$9;
     break;
    } else {
     HEAP32[$247>>2] = $48;
     break;
    }
   }
  }
 } while(0);
 $256 = HEAP32[$54>>2]|0;
 $257 = ($256|0)>(0);
 if (!($257)) {
  STACKTOP = sp;return;
 }
 $258 = HEAP32[$25>>2]|0;
 $259 = ($258|0)==(0);
 if ($259) {
  $264 = $256;
 } else {
  $260 = (($5) + 104|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = Math_imul($261, $256)|0;
  $264 = $262;
 }
 $263 = (($this_bits$7) - ($264))|0;
 $265 = (($5) + 84|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = (($263) + ($266))|0;
 HEAP32[$265>>2] = $267;
 STACKTOP = sp;return;
}
function _vorbis_encode_tonemask_setup($vi$0$7$val,$s,$block,$att,$max,$in) {
 $vi$0$7$val = $vi$0$7$val|0;
 $s = +$s;
 $block = $block|0;
 $att = $att|0;
 $max = $max|0;
 $in = $in|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = (($vi$0$7$val) + 2852|0);
 $4 = (($3) + ($block<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($att) + (($0*20)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = 1.0 - $2;
 $10 = $9 * $8;
 $11 = (($0) + 1)|0;
 $12 = (($att) + (($11*20)|0)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $2 * $14;
 $16 = $10 + $15;
 $17 = $16;
 $18 = (($5) + 12|0);
 HEAPF32[$18>>2] = $17;
 $19 = ((($att) + (($0*20)|0)|0) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = $9 * $21;
 $23 = ((($att) + (($11*20)|0)|0) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 $26 = $2 * $25;
 $27 = $22 + $26;
 $28 = $27;
 $29 = (($5) + 16|0);
 HEAPF32[$29>>2] = $28;
 $30 = ((($att) + (($0*20)|0)|0) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (+($31|0));
 $33 = $9 * $32;
 $34 = ((($att) + (($11*20)|0)|0) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = $2 * $36;
 $38 = $33 + $37;
 $39 = $38;
 $40 = (($5) + 20|0);
 HEAPF32[$40>>2] = $39;
 $41 = ((($att) + (($0*20)|0)|0) + 12|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $42;
 $44 = $9 * $43;
 $45 = ((($att) + (($11*20)|0)|0) + 12|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46;
 $48 = $2 * $47;
 $49 = $44 + $48;
 $50 = $49;
 $51 = (($5) + 24|0);
 HEAPF32[$51>>2] = $50;
 $52 = ((($att) + (($0*20)|0)|0) + 16|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $53;
 $55 = $9 * $54;
 $56 = ((($att) + (($11*20)|0)|0) + 16|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $57;
 $59 = $2 * $58;
 $60 = $55 + $59;
 $61 = $60;
 $62 = (($5) + 28|0);
 HEAPF32[$62>>2] = $61;
 $63 = (($max) + ($0<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (+($64|0));
 $66 = $9 * $65;
 $67 = (($max) + ($11<<2)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (+($68|0));
 $70 = $2 * $69;
 $71 = $66 + $70;
 $72 = $71;
 $73 = (($5) + 496|0);
 HEAPF32[$73>>2] = $72;
 $i$01 = 0;
 while(1) {
  $74 = ((($in) + (($0*68)|0)|0) + ($i$01<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (+($75|0));
  $77 = $9 * $76;
  $78 = ((($in) + (($11*68)|0)|0) + ($i$01<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (+($79|0));
  $81 = $2 * $80;
  $82 = $77 + $81;
  $83 = $82;
  $84 = ((($5) + ($i$01<<2)|0) + 36|0);
  HEAPF32[$84>>2] = $83;
  $85 = (($i$01) + 1)|0;
  $exitcond = ($85|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $85;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_encode_noisebias_setup($vi$0$7$val,$s,$block,$suppress,$in,$guard,$userbias) {
 $vi$0$7$val = $vi$0$7$val|0;
 $s = +$s;
 $block = $block|0;
 $suppress = $suppress|0;
 $in = $in|0;
 $guard = $guard|0;
 $userbias = +$userbias;
 var $$phi$trans$insert = 0, $$phi$trans$insert11 = 0, $$phi$trans$insert13 = 0, $$pre = 0.0, $$pre12 = 0.0, $$pre14 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond7 = 0, $exitcond7$1 = 0, $exitcond7$2 = 0, $i$04 = 0, $i$04$1 = 0, $i$04$2 = 0, $i$11 = 0, $i$11$1 = 0, $i$11$2 = 0, $storemerge = 0.0, $storemerge$1 = 0.0, $storemerge$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = (($vi$0$7$val) + 2852|0);
 $4 = (($3) + ($block<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($suppress) + ($0<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = 1.0 - $2;
 $10 = $9 * $8;
 $11 = (($0) + 1)|0;
 $12 = (($suppress) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $2 * $14;
 $16 = $10 + $15;
 $17 = $16;
 $18 = (($5) + 108|0);
 HEAPF32[$18>>2] = $17;
 $19 = (($guard) + (($block*12)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($5) + 120|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($guard) + (($block*12)|0)|0) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($5) + 124|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($guard) + (($block*12)|0)|0) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($5) + 128|0);
 HEAP32[$27>>2] = $26;
 $i$04 = 0;
 while(1) {
  $28 = ((($in) + (($0*204)|0)|0) + ($i$04<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (+($29|0));
  $31 = $9 * $30;
  $32 = ((($in) + (($11*204)|0)|0) + ($i$04<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (+($33|0));
  $35 = $2 * $34;
  $36 = $31 + $35;
  $37 = $36;
  $38 = ((($5) + ($i$04<<2)|0) + 132|0);
  HEAPF32[$38>>2] = $37;
  $39 = (($i$04) + 1)|0;
  $exitcond7 = ($39|0)==(17);
  if ($exitcond7) {
   $i$04$1 = 0;
   break;
  } else {
   $i$04 = $39;
  }
 }
 while(1) {
  $68 = (((($in) + (($0*204)|0)|0) + ($i$04$1<<2)|0) + 68|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (+($69|0));
  $71 = $9 * $70;
  $72 = (((($in) + (($11*204)|0)|0) + ($i$04$1<<2)|0) + 68|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (+($73|0));
  $75 = $2 * $74;
  $76 = $71 + $75;
  $77 = $76;
  $78 = ((($5) + ($i$04$1<<2)|0) + 200|0);
  HEAPF32[$78>>2] = $77;
  $79 = (($i$04$1) + 1)|0;
  $exitcond7$1 = ($79|0)==(17);
  if ($exitcond7$1) {
   $i$04$2 = 0;
   break;
  } else {
   $i$04$1 = $79;
  }
 }
 while(1) {
  $80 = (((($in) + (($0*204)|0)|0) + ($i$04$2<<2)|0) + 136|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (+($81|0));
  $83 = $9 * $82;
  $84 = (((($in) + (($11*204)|0)|0) + ($i$04$2<<2)|0) + 136|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (+($85|0));
  $87 = $2 * $86;
  $88 = $83 + $87;
  $89 = $88;
  $90 = ((($5) + ($i$04$2<<2)|0) + 268|0);
  HEAPF32[$90>>2] = $89;
  $91 = (($i$04$2) + 1)|0;
  $exitcond7$2 = ($91|0)==(17);
  if ($exitcond7$2) {
   break;
  } else {
   $i$04$2 = $91;
  }
 }
 $92 = (($5) + 132|0);
 $93 = +HEAPF32[$92>>2];
 $46 = $93 + 6.0;
 $42 = $93;$i$11 = 0;
 while(1) {
  $40 = ((($5) + ($i$11<<2)|0) + 132|0);
  $41 = $42;
  $43 = $41 + $userbias;
  $44 = $43;
  $45 = $44 < $46;
  $storemerge = $45 ? $46 : $44;
  HEAPF32[$40>>2] = $storemerge;
  $47 = (($i$11) + 1)|0;
  $exitcond = ($47|0)==(17);
  if ($exitcond) {
   break;
  }
  $$phi$trans$insert = ((($5) + ($47<<2)|0) + 132|0);
  $$pre = +HEAPF32[$$phi$trans$insert>>2];
  $42 = $$pre;$i$11 = $47;
 }
 $48 = (($5) + 200|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $49 + 6.0;
 $53 = $49;$i$11$1 = 0;
 while(1) {
  $51 = ((($5) + ($i$11$1<<2)|0) + 200|0);
  $52 = $53;
  $54 = $52 + $userbias;
  $55 = $54;
  $56 = $55 < $50;
  $storemerge$1 = $56 ? $50 : $55;
  HEAPF32[$51>>2] = $storemerge$1;
  $57 = (($i$11$1) + 1)|0;
  $exitcond$1 = ($57|0)==(17);
  if ($exitcond$1) {
   break;
  }
  $$phi$trans$insert11 = ((($5) + ($57<<2)|0) + 200|0);
  $$pre12 = +HEAPF32[$$phi$trans$insert11>>2];
  $53 = $$pre12;$i$11$1 = $57;
 }
 $58 = (($5) + 268|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $59 + 6.0;
 $63 = $59;$i$11$2 = 0;
 while(1) {
  $61 = ((($5) + ($i$11$2<<2)|0) + 268|0);
  $62 = $63;
  $64 = $62 + $userbias;
  $65 = $64;
  $66 = $65 < $60;
  $storemerge$2 = $66 ? $60 : $65;
  HEAPF32[$61>>2] = $storemerge$2;
  $67 = (($i$11$2) + 1)|0;
  $exitcond$2 = ($67|0)==(17);
  if ($exitcond$2) {
   break;
  }
  $$phi$trans$insert13 = ((($5) + ($67<<2)|0) + 268|0);
  $$pre14 = +HEAPF32[$$phi$trans$insert13>>2];
  $63 = $$pre14;$i$11$2 = $67;
 }
 STACKTOP = sp;return;
}
function _ogg_stream_packetin($os,$op) {
 $os = $os|0;
 $op = $op|0;
 var $$$i$i = 0, $$$i2$i = 0, $$phi$trans$insert21$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi25$iZ2D = 0, $$pre$phiZ2D = 0, $$pre22$i = 0, $$pre23$i = 0, $$pre24$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$2$lcssa$i = 0, $i$26$i = 0, $smax$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$op>>2]|0;
 $1 = (($op) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($op) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($op) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($os|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$os>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (2147483647 - ($2))|0;
 $16 = $2 | $15;
 $17 = ($16|0)<(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = (($2|0) / 255)&-1;
 $19 = (($18) + 1)|0;
 $20 = (($os) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 $$pre23$i = (($os) + 8|0);
 if (!($22)) {
  $23 = HEAP32[$$pre23$i>>2]|0;
  $24 = (($23) - ($21))|0;
  HEAP32[$$pre23$i>>2] = $24;
  $25 = ($23|0)==($21|0);
  if (!($25)) {
   $26 = (($13) + ($21)|0);
   _memmove(($13|0),($26|0),($24|0))|0;
  }
  HEAP32[$20>>2] = 0;
 }
 $27 = (($os) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - ($2))|0;
 $30 = HEAP32[$$pre23$i>>2]|0;
 $31 = ($29|0)>($30|0);
 do {
  if (!($31)) {
   $32 = ($28|0)>($15|0);
   if ($32) {
    $33 = HEAP32[$os>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     _free($33);
    }
    $35 = (($os) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     _free($36);
    }
    $38 = (($os) + 20|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if (!($40)) {
     _free($39);
    }
    _memset(($os|0),0,360)|0;
    STACKTOP = sp;return;
   }
   $41 = (($28) + ($2))|0;
   $42 = ($41|0)<(2147482623);
   $43 = (($41) + 1024)|0;
   $$$i2$i = $42 ? $43 : $41;
   $44 = HEAP32[$os>>2]|0;
   $45 = (_realloc($44,$$$i2$i)|0);
   $46 = ($45|0)==(0|0);
   if (!($46)) {
    HEAP32[$27>>2] = $$$i2$i;
    HEAP32[$os>>2] = $45;
    break;
   }
   $47 = HEAP32[$os>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    _free($47);
   }
   $49 = (($os) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    _free($50);
   }
   $52 = (($os) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    _free($53);
   }
   _memset(($os|0),0,360)|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $55 = (($os) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - ($19))|0;
 $58 = (($os) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57|0)>($59|0);
 do {
  if ($60) {
   $$pre = (($os) + 16|0);
   $$pre$phiZ2D = $$pre;
  } else {
   $61 = (2147483646 - ($18))|0;
   $62 = ($56|0)>($61|0);
   if ($62) {
    $63 = HEAP32[$os>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     _free($63);
    }
    $65 = (($os) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     _free($66);
    }
    $68 = (($os) + 20|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     _free($69);
    }
    _memset(($os|0),0,360)|0;
    STACKTOP = sp;return;
   }
   $71 = (($56) + ($19))|0;
   $72 = ($71|0)<(2147483615);
   $73 = (($71) + 32)|0;
   $$$i$i = $72 ? $73 : $71;
   $74 = (($os) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $$$i$i << 2;
   $77 = (_realloc($75,$76)|0);
   $78 = ($77|0)==(0|0);
   if ($78) {
    $79 = HEAP32[$os>>2]|0;
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     _free($79);
    }
    $81 = HEAP32[$74>>2]|0;
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     _free($81);
    }
    $83 = (($os) + 20|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==(0|0);
    if (!($85)) {
     _free($84);
    }
    _memset(($os|0),0,360)|0;
    STACKTOP = sp;return;
   }
   HEAP32[$74>>2] = $77;
   $86 = (($os) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $$$i$i << 3;
   $89 = (_realloc($87,$88)|0);
   $90 = ($89|0)==(0|0);
   if (!($90)) {
    HEAP32[$86>>2] = $89;
    HEAP32[$55>>2] = $$$i$i;
    $$pre$phiZ2D = $74;
    break;
   }
   $91 = HEAP32[$os>>2]|0;
   $92 = ($91|0)==(0|0);
   if (!($92)) {
    _free($91);
   }
   $93 = HEAP32[$74>>2]|0;
   $94 = ($93|0)==(0|0);
   if (!($94)) {
    _free($93);
   }
   $95 = HEAP32[$86>>2]|0;
   $96 = ($95|0)==(0|0);
   if (!($96)) {
    _free($95);
   }
   _memset(($os|0),0,360)|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $$pre$i = HEAP32[$$pre23$i>>2]|0;
 $97 = HEAP32[$os>>2]|0;
 $98 = (($97) + ($$pre$i)|0);
 _memcpy(($98|0),($0|0),($2|0))|0;
 $99 = HEAP32[$$pre23$i>>2]|0;
 $100 = (($99) + ($2))|0;
 HEAP32[$$pre23$i>>2] = $100;
 $101 = ($2|0)>(254);
 $102 = HEAP32[$58>>2]|0;
 $103 = HEAP32[$$pre$phiZ2D>>2]|0;
 if ($101) {
  $104 = (($os) + 352|0);
  $105 = (($os) + 20|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($18|0)>(1);
  $i$26$i = 0;
  while(1) {
   $108 = (($102) + ($i$26$i))|0;
   $109 = (($103) + ($108<<2)|0);
   HEAP32[$109>>2] = 255;
   $110 = $104;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (($110) + 4)|0;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($106) + ($108<<3)|0);
   $117 = $116;
   $118 = $117;
   HEAP32[$118>>2] = $112;
   $119 = (($117) + 4)|0;
   $120 = $119;
   HEAP32[$120>>2] = $115;
   $121 = (($i$26$i) + 1)|0;
   $122 = ($121|0)<($18|0);
   if ($122) {
    $i$26$i = $121;
   } else {
    break;
   }
  }
  $smax$i = $107 ? $18 : 1;
  $$pre$phi25$iZ2D = $104;$127 = $106;$i$2$lcssa$i = $smax$i;
 } else {
  $$phi$trans$insert21$i = (($os) + 20|0);
  $$pre22$i = HEAP32[$$phi$trans$insert21$i>>2]|0;
  $$pre24$i = (($os) + 352|0);
  $$pre$phi25$iZ2D = $$pre24$i;$127 = $$pre22$i;$i$2$lcssa$i = 0;
 }
 $123 = (($2|0) % 255)&-1;
 $124 = (($102) + ($i$2$lcssa$i))|0;
 $125 = (($103) + ($124<<2)|0);
 HEAP32[$125>>2] = $123;
 $126 = (($127) + ($124<<3)|0);
 $128 = $126;
 $129 = $128;
 HEAP32[$129>>2] = $8;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = $11;
 $132 = $$pre$phi25$iZ2D;
 $133 = $132;
 HEAP32[$133>>2] = $8;
 $134 = (($132) + 4)|0;
 $135 = $134;
 HEAP32[$135>>2] = $11;
 $136 = (($103) + ($102<<2)|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 | 256;
 HEAP32[$136>>2] = $138;
 $139 = (($102) + ($19))|0;
 HEAP32[$58>>2] = $139;
 $140 = (($os) + 344|0);
 $141 = $140;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = (($141) + 4)|0;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = (_i64Add(($143|0),($146|0),1,0)|0);
 $148 = tempRet0;
 $149 = $140;
 $150 = $149;
 HEAP32[$150>>2] = $147;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $148;
 $153 = ($4|0)==(0);
 if ($153) {
  STACKTOP = sp;return;
 }
 $154 = (($os) + 328|0);
 HEAP32[$154>>2] = 1;
 STACKTOP = sp;return;
}
function _ogg_stream_flush_i($os,$og,$force) {
 $os = $os|0;
 $og = $og|0;
 $force = $force|0;
 var $$ = 0, $$$01 = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$118 = 0, $$lobit = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc$015 = 0, $bytes$0$lcssa = 0, $bytes$06 = 0, $crc_reg$0$lcssa$i = 0, $crc_reg$03$i = 0, $crc_reg$1$lcssa$i = 0, $crc_reg$11$i = 0, $exitcond = 0, $granule_pos$0$lcssa$off0 = 0, $granule_pos$0$lcssa$off16 = 0, $granule_pos$0$lcssa$off24 = 0, $granule_pos$0$lcssa$off32 = 0;
 var $granule_pos$0$lcssa$off40 = 0, $granule_pos$0$lcssa$off48 = 0, $granule_pos$0$lcssa$off56 = 0, $granule_pos$0$lcssa$off8 = 0, $granule_pos$016$off0 = 0, $granule_pos$016$off16 = 0, $granule_pos$016$off24 = 0, $granule_pos$016$off32 = 0, $granule_pos$016$off40 = 0, $granule_pos$016$off48 = 0, $granule_pos$016$off56 = 0, $granule_pos$016$off8 = 0, $granule_pos$1$off0 = 0, $granule_pos$1$off16 = 0, $granule_pos$1$off24 = 0, $granule_pos$1$off32 = 0, $granule_pos$1$off40 = 0, $granule_pos$1$off48 = 0, $granule_pos$1$off56 = 0, $granule_pos$1$off8 = 0;
 var $granule_pos$2$off0 = 0, $granule_pos$2$off16 = 0, $granule_pos$2$off24 = 0, $granule_pos$2$off32 = 0, $granule_pos$2$off40 = 0, $granule_pos$2$off48 = 0, $granule_pos$2$off56 = 0, $granule_pos$2$off8 = 0, $i$04$i = 0, $i$12$i = 0, $i$35 = 0, $or$cond = 0, $or$cond120 = 0, $or$cond3 = 0, $packet_just_done$018 = 0, $packet_just_done$1 = 0, $packets_done$017 = 0, $packets_done$1 = 0, $storemerge = 0, $vals$0 = 0;
 var $vals$1$lcssa = 0, $vals$114 = 0, $vals$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($os) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(255);
 $$ = $2 ? 255 : $1;
 $3 = ($os|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$os>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($$|0)==(0);
 $or$cond3 = $5 | $6;
 if ($or$cond3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($os) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 L7: do {
  if ($9) {
   $13 = (($os) + 16|0);
   $vals$0 = 0;
   while(1) {
    $14 = ($vals$0|0)<($$|0);
    if (!($14)) {
     $$1 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $vals$0;
     break L7;
    }
    $15 = HEAP32[$13>>2]|0;
    $16 = (($15) + ($vals$0<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 255;
    $19 = ($18|0)==(255);
    $20 = (($vals$0) + 1)|0;
    if ($19) {
     $vals$0 = $20;
    } else {
     $$1 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $20;
     break;
    }
   }
  } else {
   $10 = ($$|0)>(0);
   L9: do {
    if ($10) {
     $11 = (($os) + 16|0);
     $12 = (($os) + 20|0);
     $acc$015 = 0;$granule_pos$016$off0 = -1;$granule_pos$016$off16 = -1;$granule_pos$016$off24 = -1;$granule_pos$016$off32 = -1;$granule_pos$016$off40 = -1;$granule_pos$016$off48 = -1;$granule_pos$016$off56 = -1;$granule_pos$016$off8 = -1;$packet_just_done$018 = 0;$packets_done$017 = 0;$vals$114 = 0;
     while(1) {
      $21 = ($acc$015|0)>(4096);
      $22 = ($packet_just_done$018|0)>(3);
      $or$cond = $21 & $22;
      if ($or$cond) {
       $$01 = 1;$granule_pos$0$lcssa$off0 = $granule_pos$016$off0;$granule_pos$0$lcssa$off16 = $granule_pos$016$off16;$granule_pos$0$lcssa$off24 = $granule_pos$016$off24;$granule_pos$0$lcssa$off32 = $granule_pos$016$off32;$granule_pos$0$lcssa$off40 = $granule_pos$016$off40;$granule_pos$0$lcssa$off48 = $granule_pos$016$off48;$granule_pos$0$lcssa$off56 = $granule_pos$016$off56;$granule_pos$0$lcssa$off8 = $granule_pos$016$off8;$vals$1$lcssa = $vals$114;
       break L9;
      }
      $23 = HEAP32[$11>>2]|0;
      $24 = (($23) + ($vals$114<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = $25 & 255;
      $27 = (($26) + ($acc$015))|0;
      $28 = ($26|0)==(255);
      if ($28) {
       $granule_pos$1$off0 = $granule_pos$016$off0;$granule_pos$1$off16 = $granule_pos$016$off16;$granule_pos$1$off24 = $granule_pos$016$off24;$granule_pos$1$off32 = $granule_pos$016$off32;$granule_pos$1$off40 = $granule_pos$016$off40;$granule_pos$1$off48 = $granule_pos$016$off48;$granule_pos$1$off56 = $granule_pos$016$off56;$granule_pos$1$off8 = $granule_pos$016$off8;$packet_just_done$1 = 0;$packets_done$1 = $packets_done$017;
      } else {
       $29 = HEAP32[$12>>2]|0;
       $30 = (($29) + ($vals$114<<3)|0);
       $31 = $30;
       $32 = $31;
       $33 = HEAP32[$32>>2]|0;
       $34 = (($31) + 4)|0;
       $35 = $34;
       $36 = HEAP32[$35>>2]|0;
       $37 = (($packets_done$017) + 1)|0;
       $38 = $33&255;
       $39 = (_bitshift64Lshr(($33|0),($36|0),8)|0);
       $40 = tempRet0;
       $41 = $39&255;
       $42 = (_bitshift64Lshr(($33|0),($36|0),16)|0);
       $43 = tempRet0;
       $44 = $42&255;
       $45 = (_bitshift64Lshr(($33|0),($36|0),24)|0);
       $46 = tempRet0;
       $47 = $45&255;
       $48 = $36&255;
       $49 = (_bitshift64Lshr(($33|0),($36|0),40)|0);
       $50 = tempRet0;
       $51 = $49&255;
       $52 = (_bitshift64Lshr(($33|0),($36|0),48)|0);
       $53 = tempRet0;
       $54 = $52&255;
       $55 = (_bitshift64Lshr(($33|0),($36|0),56)|0);
       $56 = tempRet0;
       $57 = $55&255;
       $granule_pos$1$off0 = $38;$granule_pos$1$off16 = $44;$granule_pos$1$off24 = $47;$granule_pos$1$off32 = $48;$granule_pos$1$off40 = $51;$granule_pos$1$off48 = $54;$granule_pos$1$off56 = $57;$granule_pos$1$off8 = $41;$packet_just_done$1 = $37;$packets_done$1 = $37;
      }
      $58 = (($vals$114) + 1)|0;
      $59 = ($58|0)<($$|0);
      if ($59) {
       $acc$015 = $27;$granule_pos$016$off0 = $granule_pos$1$off0;$granule_pos$016$off16 = $granule_pos$1$off16;$granule_pos$016$off24 = $granule_pos$1$off24;$granule_pos$016$off32 = $granule_pos$1$off32;$granule_pos$016$off40 = $granule_pos$1$off40;$granule_pos$016$off48 = $granule_pos$1$off48;$granule_pos$016$off56 = $granule_pos$1$off56;$granule_pos$016$off8 = $granule_pos$1$off8;$packet_just_done$018 = $packet_just_done$1;$packets_done$017 = $packets_done$1;$vals$114 = $58;
      } else {
       $$01 = $force;$granule_pos$0$lcssa$off0 = $granule_pos$1$off0;$granule_pos$0$lcssa$off16 = $granule_pos$1$off16;$granule_pos$0$lcssa$off24 = $granule_pos$1$off24;$granule_pos$0$lcssa$off32 = $granule_pos$1$off32;$granule_pos$0$lcssa$off40 = $granule_pos$1$off40;$granule_pos$0$lcssa$off48 = $granule_pos$1$off48;$granule_pos$0$lcssa$off56 = $granule_pos$1$off56;$granule_pos$0$lcssa$off8 = $granule_pos$1$off8;$vals$1$lcssa = $58;
       break;
      }
     }
    } else {
     $$01 = $force;$granule_pos$0$lcssa$off0 = -1;$granule_pos$0$lcssa$off16 = -1;$granule_pos$0$lcssa$off24 = -1;$granule_pos$0$lcssa$off32 = -1;$granule_pos$0$lcssa$off40 = -1;$granule_pos$0$lcssa$off48 = -1;$granule_pos$0$lcssa$off56 = -1;$granule_pos$0$lcssa$off8 = -1;$vals$1$lcssa = 0;
    }
   } while(0);
   $60 = ($vals$1$lcssa|0)==(255);
   $$$01 = $60 ? 1 : $$01;
   $$1 = $$$01;$granule_pos$2$off0 = $granule_pos$0$lcssa$off0;$granule_pos$2$off16 = $granule_pos$0$lcssa$off16;$granule_pos$2$off24 = $granule_pos$0$lcssa$off24;$granule_pos$2$off32 = $granule_pos$0$lcssa$off32;$granule_pos$2$off40 = $granule_pos$0$lcssa$off40;$granule_pos$2$off48 = $granule_pos$0$lcssa$off48;$granule_pos$2$off56 = $granule_pos$0$lcssa$off56;$granule_pos$2$off8 = $granule_pos$0$lcssa$off8;$vals$2 = $vals$1$lcssa;
  }
 } while(0);
 $61 = ($$1|0)==(0);
 if ($61) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = (($os) + 40|0);
 HEAP8[$62>>0]=1399285583&255;HEAP8[$62+1>>0]=(1399285583>>8)&255;HEAP8[$62+2>>0]=(1399285583>>16)&255;HEAP8[$62+3>>0]=1399285583>>24;
 $63 = (($os) + 44|0);
 HEAP8[$63>>0] = 0;
 $64 = (($os) + 45|0);
 HEAP8[$64>>0] = 0;
 $65 = (($os) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 >>> 8;
 $$lobit = $68 & 1;
 $69 = $$lobit ^ 1;
 $70 = $69 | 2;
 $$118 = $9 ? $70 : $69;
 $storemerge = $$118&255;
 HEAP8[$64>>0] = $storemerge;
 $71 = (($os) + 328|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0);
 $74 = ($1|0)==($vals$2|0);
 $or$cond120 = $73 & $74;
 if ($or$cond120) {
  $75 = $$118 | 4;
  $76 = $75&255;
  HEAP8[$64>>0] = $76;
 }
 HEAP32[$7>>2] = 1;
 $77 = (($os) + 46|0);
 HEAP8[$77>>0] = $granule_pos$2$off0;
 $78 = (($os) + 47|0);
 HEAP8[$78>>0] = $granule_pos$2$off8;
 $79 = (($os) + 48|0);
 HEAP8[$79>>0] = $granule_pos$2$off16;
 $80 = (($os) + 49|0);
 HEAP8[$80>>0] = $granule_pos$2$off24;
 $81 = (($os) + 50|0);
 HEAP8[$81>>0] = $granule_pos$2$off32;
 $82 = (($os) + 51|0);
 HEAP8[$82>>0] = $granule_pos$2$off40;
 $83 = (($os) + 52|0);
 HEAP8[$83>>0] = $granule_pos$2$off48;
 $84 = (($os) + 53|0);
 HEAP8[$84>>0] = $granule_pos$2$off56;
 $85 = (($os) + 336|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86&255;
 $88 = (($os) + 54|0);
 HEAP8[$88>>0] = $87;
 $89 = $86 >>> 8;
 $90 = $89&255;
 $91 = (($os) + 55|0);
 HEAP8[$91>>0] = $90;
 $92 = $86 >>> 16;
 $93 = $92&255;
 $94 = (($os) + 56|0);
 HEAP8[$94>>0] = $93;
 $95 = $86 >>> 24;
 $96 = $95&255;
 $97 = (($os) + 57|0);
 HEAP8[$97>>0] = $96;
 $98 = (($os) + 340|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(-1);
 if ($100) {
  HEAP32[$98>>2] = 0;
  $102 = 0;
 } else {
  $102 = $99;
 }
 $101 = (($102) + 1)|0;
 HEAP32[$98>>2] = $101;
 $103 = $102&255;
 $104 = (($os) + 58|0);
 HEAP8[$104>>0] = $103;
 $105 = $102 >>> 8;
 $106 = $105&255;
 $107 = (($os) + 59|0);
 HEAP8[$107>>0] = $106;
 $108 = $102 >>> 16;
 $109 = $108&255;
 $110 = (($os) + 60|0);
 HEAP8[$110>>0] = $109;
 $111 = $102 >>> 24;
 $112 = $111&255;
 $113 = (($os) + 61|0);
 HEAP8[$113>>0] = $112;
 $114 = (($os) + 62|0);
 $115 = $vals$2&255;
 $116 = (($os) + 66|0);
 HEAP8[$114>>0]=0&255;HEAP8[$114+1>>0]=(0>>8)&255;HEAP8[$114+2>>0]=(0>>16)&255;HEAP8[$114+3>>0]=0>>24;
 HEAP8[$116>>0] = $115;
 $117 = ($vals$2|0)>(0);
 L32: do {
  if ($117) {
   $119 = $66;$bytes$06 = 0;$i$35 = 0;
   while(1) {
    $118 = (($119) + ($i$35<<2)|0);
    $120 = HEAP32[$118>>2]|0;
    $121 = $120&255;
    $122 = (($i$35) + 27)|0;
    $123 = ((($os) + ($122)|0) + 40|0);
    HEAP8[$123>>0] = $121;
    $124 = $120 & 255;
    $125 = (($124) + ($bytes$06))|0;
    $126 = (($i$35) + 1)|0;
    $exitcond = ($126|0)==($vals$2|0);
    if ($exitcond) {
     $bytes$0$lcssa = $125;
     break L32;
    }
    $$pre = HEAP32[$65>>2]|0;
    $119 = $$pre;$bytes$06 = $125;$i$35 = $126;
   }
  } else {
   $bytes$0$lcssa = 0;
  }
 } while(0);
 HEAP32[$og>>2] = $62;
 $127 = (($vals$2) + 27)|0;
 $128 = (($os) + 324|0);
 HEAP32[$128>>2] = $127;
 $129 = (($og) + 4|0);
 HEAP32[$129>>2] = $127;
 $130 = HEAP32[$os>>2]|0;
 $131 = (($os) + 12|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + ($132)|0);
 $134 = (($og) + 8|0);
 HEAP32[$134>>2] = $133;
 $135 = (($og) + 12|0);
 HEAP32[$135>>2] = $bytes$0$lcssa;
 $136 = HEAP32[$0>>2]|0;
 $137 = (($136) - ($vals$2))|0;
 HEAP32[$0>>2] = $137;
 $138 = HEAP32[$65>>2]|0;
 $139 = (($138) + ($vals$2<<2)|0);
 $140 = $137 << 2;
 _memmove(($138|0),($139|0),($140|0))|0;
 $141 = (($os) + 20|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + ($vals$2<<3)|0);
 $144 = HEAP32[$0>>2]|0;
 $145 = $144 << 3;
 _memmove(($142|0),($143|0),($145|0))|0;
 $146 = HEAP32[$131>>2]|0;
 $147 = (($146) + ($bytes$0$lcssa))|0;
 HEAP32[$131>>2] = $147;
 $148 = ($og|0)==(0|0);
 if ($148) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $149 = HEAP32[$og>>2]|0;
 $150 = (($149) + 22|0);
 HEAP8[$150>>0] = 0;
 $151 = HEAP32[$og>>2]|0;
 $152 = (($151) + 23|0);
 HEAP8[$152>>0] = 0;
 $153 = HEAP32[$og>>2]|0;
 $154 = (($153) + 24|0);
 HEAP8[$154>>0] = 0;
 $155 = HEAP32[$og>>2]|0;
 $156 = (($155) + 25|0);
 HEAP8[$156>>0] = 0;
 $157 = HEAP32[$129>>2]|0;
 $158 = ($157|0)>(0);
 if ($158) {
  $159 = HEAP32[$og>>2]|0;
  $crc_reg$03$i = 0;$i$04$i = 0;
  while(1) {
   $163 = $crc_reg$03$i << 8;
   $164 = $crc_reg$03$i >>> 24;
   $165 = (($159) + ($i$04$i)|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $167 ^ $164;
   $169 = (551880 + ($168<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $170 ^ $163;
   $172 = (($i$04$i) + 1)|0;
   $173 = ($172|0)<($157|0);
   if ($173) {
    $crc_reg$03$i = $171;$i$04$i = $172;
   } else {
    $crc_reg$0$lcssa$i = $171;
    break;
   }
  }
 } else {
  $crc_reg$0$lcssa$i = 0;
 }
 $160 = HEAP32[$135>>2]|0;
 $161 = ($160|0)>(0);
 if ($161) {
  $162 = HEAP32[$134>>2]|0;
  $crc_reg$11$i = $crc_reg$0$lcssa$i;$i$12$i = 0;
  while(1) {
   $174 = $crc_reg$11$i << 8;
   $175 = $crc_reg$11$i >>> 24;
   $176 = (($162) + ($i$12$i)|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $178 ^ $175;
   $180 = (551880 + ($179<<2)|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 ^ $174;
   $183 = (($i$12$i) + 1)|0;
   $184 = ($183|0)<($160|0);
   if ($184) {
    $crc_reg$11$i = $182;$i$12$i = $183;
   } else {
    $crc_reg$1$lcssa$i = $182;
    break;
   }
  }
 } else {
  $crc_reg$1$lcssa$i = $crc_reg$0$lcssa$i;
 }
 $185 = $crc_reg$1$lcssa$i&255;
 $186 = HEAP32[$og>>2]|0;
 $187 = (($186) + 22|0);
 HEAP8[$187>>0] = $185;
 $188 = $crc_reg$1$lcssa$i >>> 8;
 $189 = $188&255;
 $190 = HEAP32[$og>>2]|0;
 $191 = (($190) + 23|0);
 HEAP8[$191>>0] = $189;
 $192 = $crc_reg$1$lcssa$i >>> 16;
 $193 = $192&255;
 $194 = HEAP32[$og>>2]|0;
 $195 = (($194) + 24|0);
 HEAP8[$195>>0] = $193;
 $196 = $crc_reg$1$lcssa$i >>> 24;
 $197 = $196&255;
 $198 = HEAP32[$og>>2]|0;
 $199 = (($198) + 25|0);
 HEAP8[$199>>0] = $197;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _oggpack_write($b,$value,$bits) {
 $b = $b|0;
 $value = $value|0;
 $bits = $bits|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if (!($0)) {
   $1 = HEAP32[$b>>2]|0;
   $2 = (($b) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + -4)|0;
   $5 = ($1|0)<($4|0);
   $$phi$trans$insert = (($b) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($5) {
    $25 = $$pre;
   } else {
    $6 = ($$pre|0)==(0|0);
    if ($6) {
     STACKTOP = sp;return;
    }
    $7 = ($3|0)>(2147483391);
    if ($7) {
     break;
    }
    $8 = (($b) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + 256)|0;
    $11 = (_realloc($9,$10)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    }
    HEAP32[$8>>2] = $11;
    $13 = HEAP32[$2>>2]|0;
    $14 = (($13) + 256)|0;
    HEAP32[$2>>2] = $14;
    $15 = HEAP32[$b>>2]|0;
    $16 = (($11) + ($15)|0);
    HEAP32[$$phi$trans$insert>>2] = $16;
    $25 = $16;
   }
   $17 = (552904 + ($bits<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & $value;
   $20 = (($b) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($bits))|0;
   $23 = $19 << $21;
   $24 = HEAP8[$25>>0]|0;
   $26 = $24&255;
   $27 = $26 | $23;
   $28 = $27&255;
   HEAP8[$25>>0] = $28;
   $29 = ($22|0)>(7);
   do {
    if ($29) {
     $30 = HEAP32[$20>>2]|0;
     $31 = (8 - ($30))|0;
     $32 = $19 >>> $31;
     $33 = $32&255;
     $34 = HEAP32[$$phi$trans$insert>>2]|0;
     $35 = (($34) + 1|0);
     HEAP8[$35>>0] = $33;
     $36 = ($22|0)>(15);
     if ($36) {
      $37 = HEAP32[$20>>2]|0;
      $38 = (16 - ($37))|0;
      $39 = $19 >>> $38;
      $40 = $39&255;
      $41 = HEAP32[$$phi$trans$insert>>2]|0;
      $42 = (($41) + 2|0);
      HEAP8[$42>>0] = $40;
      $43 = ($22|0)>(23);
      if ($43) {
       $44 = HEAP32[$20>>2]|0;
       $45 = (24 - ($44))|0;
       $46 = $19 >>> $45;
       $47 = $46&255;
       $48 = HEAP32[$$phi$trans$insert>>2]|0;
       $49 = (($48) + 3|0);
       HEAP8[$49>>0] = $47;
       $50 = ($22|0)>(31);
       if ($50) {
        $51 = HEAP32[$20>>2]|0;
        $52 = ($51|0)==(0);
        if ($52) {
         $58 = HEAP32[$$phi$trans$insert>>2]|0;
         $59 = (($58) + 4|0);
         HEAP8[$59>>0] = 0;
         break;
        } else {
         $53 = (32 - ($51))|0;
         $54 = $19 >>> $53;
         $55 = $54&255;
         $56 = HEAP32[$$phi$trans$insert>>2]|0;
         $57 = (($56) + 4|0);
         HEAP8[$57>>0] = $55;
         break;
        }
       }
      }
     }
    }
   } while(0);
   $60 = (($22|0) / 8)&-1;
   $61 = HEAP32[$b>>2]|0;
   $62 = (($61) + ($60))|0;
   HEAP32[$b>>2] = $62;
   $63 = HEAP32[$$phi$trans$insert>>2]|0;
   $64 = (($63) + ($60)|0);
   HEAP32[$$phi$trans$insert>>2] = $64;
   $65 = $22 & 7;
   HEAP32[$20>>2] = $65;
   STACKTOP = sp;return;
  }
 } while(0);
 $66 = (($b) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 if (!($68)) {
  _free($67);
 }
 ;HEAP32[$b+0>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 STACKTOP = sp;return;
}
function _oggpack_look($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (552904 + ($bits<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($b) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($bits))|0;
 $6 = HEAP32[$b>>2]|0;
 $7 = (($b) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4)|0;
 $10 = ($6|0)<($9|0);
 if (!($10)) {
  $11 = (($5) + 7)|0;
  $12 = $11 >> 3;
  $13 = (($8) - ($12))|0;
  $14 = ($6|0)>($13|0);
  if ($14) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = ($5|0)==(0);
  if ($15) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = (($b) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> $4;
 $21 = ($5|0)>(8);
 if ($21) {
  $22 = (($17) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (8 - ($4))|0;
  $26 = $24 << $25;
  $27 = $26 | $20;
  $28 = ($5|0)>(16);
  if ($28) {
   $29 = (($17) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (16 - ($4))|0;
   $33 = $31 << $32;
   $34 = $33 | $27;
   $35 = ($5|0)>(24);
   if ($35) {
    $36 = (($17) + 3|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = (24 - ($4))|0;
    $40 = $38 << $39;
    $41 = $40 | $34;
    $42 = ($5|0)<(33);
    $43 = ($4|0)==(0);
    $or$cond = $42 | $43;
    if ($or$cond) {
     $ret$0 = $41;
    } else {
     $44 = (($17) + 4|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (32 - ($4))|0;
     $48 = $46 << $47;
     $49 = $48 | $41;
     $ret$0 = $49;
    }
   } else {
    $ret$0 = $34;
   }
  } else {
   $ret$0 = $27;
  }
 } else {
  $ret$0 = $20;
 }
 $50 = $ret$0 & $2;
 $$0 = $50;
 STACKTOP = sp;return ($$0|0);
}
function _oggpack_read($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if ($0) {
   $$phi$trans$insert = (($b) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre3 = (($b) + 4|0);
   $$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $b;$56 = $$pre;
  } else {
   $1 = (552904 + ($bits<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($b) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($bits))|0;
   $6 = HEAP32[$b>>2]|0;
   $7 = (($b) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -4)|0;
   $10 = ($6|0)<($9|0);
   if (!($10)) {
    $11 = (($5) + 7)|0;
    $12 = $11 >> 3;
    $13 = (($8) - ($12))|0;
    $14 = ($6|0)>($13|0);
    if ($14) {
     $$pre$phi4Z2D = $3;$$pre$phiZ2D = $b;$56 = $8;
     break;
    }
    $15 = ($5|0)==(0);
    if ($15) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $16 = (($b) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 >>> $4;
   $21 = ($5|0)>(8);
   if ($21) {
    $22 = (($17) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (8 - ($4))|0;
    $26 = $24 << $25;
    $27 = $26 | $20;
    $28 = ($5|0)>(16);
    if ($28) {
     $29 = (($17) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = (16 - ($4))|0;
     $33 = $31 << $32;
     $34 = $33 | $27;
     $35 = ($5|0)>(24);
     if ($35) {
      $36 = (($17) + 3|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = (24 - ($4))|0;
      $40 = $38 << $39;
      $41 = $40 | $34;
      $42 = ($5|0)<(33);
      $43 = ($4|0)==(0);
      $or$cond = $42 | $43;
      if ($or$cond) {
       $ret$0 = $41;
      } else {
       $44 = (($17) + 4|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (32 - ($4))|0;
       $48 = $46 << $47;
       $49 = $48 | $41;
       $ret$0 = $49;
      }
     } else {
      $ret$0 = $34;
     }
    } else {
     $ret$0 = $27;
    }
   } else {
    $ret$0 = $20;
   }
   $50 = $ret$0 & $2;
   $51 = (($5|0) / 8)&-1;
   $52 = (($17) + ($51)|0);
   HEAP32[$16>>2] = $52;
   $53 = (($6) + ($51))|0;
   HEAP32[$b>>2] = $53;
   $54 = $5 & 7;
   HEAP32[$3>>2] = $54;
   $$0 = $50;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $55 = (($b) + 12|0);
 HEAP32[$55>>2] = 0;
 HEAP32[$$pre$phiZ2D>>2] = $56;
 HEAP32[$$pre$phi4Z2D>>2] = 1;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _lexy_encoder_start($sample_rate,$vbr_quality) {
 $sample_rate = $sample_rate|0;
 $vbr_quality = +$vbr_quality;
 var $$ = 0, $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i8 = 0, $$$i$i3$i = 0, $$$i13$i$i = 0, $$$i16$i$i = 0, $$$i19$i$i = 0, $$$i2$i$i = 0, $$$i6$i$i = 0, $$$i7$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i14 = 0, $$0$i$i3$i$i$i = 0, $$0$i11$i$i$i$i = 0, $$0$i16$1$i$i$i$i = 0, $$0$i16$2$i$i$i$i = 0, $$0$i16$3$i$i$i$i = 0;
 var $$0$i16$i$i$i$i = 0, $$0$i6$1$i$i$i$i = 0, $$0$i6$2$i$i$i$i = 0, $$0$i6$3$i$i$i$i = 0, $$0$i6$i$i$i$i = 0, $$01$i$i = 0.0, $$01$i$i$i = 0, $$01$i$i$i31 = 0, $$01$i$i6$i = 0, $$01$i2$i$i = 0, $$01$i3$i$i = 0, $$01$i4$i$i = 0, $$01$i9$i$i = 0, $$012$i2$i$i = 0, $$012$i6$i$i = 0, $$03$i1$i$i = 0, $$03$i5$i$i = 0, $$ch$2$i$i$i$i = 0, $$lcssa$i$i = 0, $$maxbook$0$i$i$i = 0;
 var $$maxbook$2$i$i$i = 0, $$maxclass$0$i$i$i = 0, $$mux = 0, $$not = 0, $$not54 = 0, $$not55 = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert$i$i$i$i = 0, $$phi$trans$insert$i$i22 = 0, $$phi$trans$insert9$i$i = 0, $$pre = 0.0, $$pre$i = 0, $$pre$i$i = 0.0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i10 = 0, $$pre$i$i19 = 0.0, $$pre$i1$i = 0.0, $$pre$i26 = 0, $$pre$i3$i = 0.0;
 var $$pre$i34$i$i = 0, $$pre$phi$i$iZ2D = 0.0, $$pre$phi12$iZ2D = 0, $$pre$phi3$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre$pre$i$i = 0, $$pre10$i$i = 0.0, $$pre10$i$i$i = 0, $$pre100$i$i = 0, $$pre2$i$i = 0, $$pre20$i$i = 0, $$pre21$i$i$i = 0, $$pre42$i$i = 0, $$pre44$i$i = 0, $$pre45$i$i = 0, $$pre46$i$i = 0, $$pre51 = 0, $$pre52 = 0, $$pre64$i$i$i$i = 0, $$pre65$i$i$i$i = 0;
 var $$pre66$i$i$i$i = 0, $$pre67$i$i$i$i = 0, $$pre68$i$i$i$i = 0, $$pre69$i$i$i$i = 0, $$pre70$i$i$i$i = 0, $$pre8$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0.0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0.0, $1018 = 0.0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0.0, $1197 = 0.0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0.0, $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0.0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0.0, $1209 = 0.0, $121 = 0.0, $1210 = 0.0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0.0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0.0, $1249 = 0.0, $125 = 0.0, $1250 = 0.0, $1251 = 0.0, $1252 = 0, $1253 = 0.0, $1254 = 0.0, $1255 = 0.0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0.0, $1264 = 0.0, $1265 = 0, $1266 = 0.0, $1267 = 0.0, $1268 = 0.0, $1269 = 0, $127 = 0.0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0.0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0.0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0;
 var $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0;
 var $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0.0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0;
 var $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0;
 var $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0;
 var $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0;
 var $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0.0, $1411 = 0, $1412 = 0.0, $1413 = 0.0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0.0, $142 = 0, $1420 = 0.0, $1421 = 0.0, $1422 = 0, $1423 = 0;
 var $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0.0, $1428 = 0.0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0.0, $1441 = 0.0;
 var $1442 = 0.0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0.0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0.0, $146 = 0;
 var $1460 = 0, $1461 = 0, $1462 = 0.0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0.0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0;
 var $1479 = 0, $148 = 0.0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0;
 var $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0;
 var $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0;
 var $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0;
 var $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0.0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0;
 var $1569 = 0, $157 = 0.0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0.0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0;
 var $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0;
 var $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0.0, $1620 = 0, $1621 = 0;
 var $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0.0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0;
 var $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0;
 var $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0.0, $1669 = 0.0, $167 = 0, $1670 = 0.0, $1671 = 0.0, $1672 = 0.0, $1673 = 0.0, $1674 = 0.0, $1675 = 0, $1676 = 0;
 var $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0.0, $1689 = 0, $169 = 0.0, $1690 = 0, $1691 = 0, $1692 = 0.0, $1693 = 0, $1694 = 0;
 var $1695 = 0.0, $1696 = 0, $1697 = 0, $1698 = 0.0, $1699 = 0, $17 = 0, $170 = 0.0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0.0, $1704 = 0.0, $1705 = 0.0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0.0;
 var $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0.0, $1716 = 0, $1717 = 0, $1718 = 0.0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0.0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0.0, $1727 = 0.0, $1728 = 0.0, $1729 = 0, $173 = 0.0;
 var $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0.0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0;
 var $1749 = 0, $175 = 0.0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0.0, $1766 = 0.0;
 var $1767 = 0.0, $1768 = 0.0, $1769 = 0.0, $177 = 0, $1770 = 0.0, $1771 = 0.0, $1772 = 0, $1773 = 0, $1774 = 0.0, $1775 = 0.0, $1776 = 0.0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0, $1780 = 0.0, $1781 = 0.0, $1782 = 0.0, $1783 = 0, $1784 = 0;
 var $1785 = 0.0, $1786 = 0.0, $1787 = 0.0, $1788 = 0.0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0.0, $1792 = 0.0, $1793 = 0.0, $1794 = 0.0, $1795 = 0.0, $1796 = 0.0, $1797 = 0.0, $1798 = 0.0, $1799 = 0.0, $18 = 0, $180 = 0, $1800 = 0.0, $1801 = 0.0;
 var $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0.0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0.0, $182 = 0.0;
 var $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0.0, $1824 = 0.0, $1825 = 0.0, $1826 = 0.0, $1827 = 0.0, $1828 = 0.0, $1829 = 0.0, $183 = 0, $1830 = 0.0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0.0, $1835 = 0, $1836 = 0.0, $1837 = 0.0, $1838 = 0;
 var $1839 = 0.0, $184 = 0, $1840 = 0.0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0.0, $1846 = 0, $1847 = 0.0, $1848 = 0, $1849 = 0, $185 = 0.0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0;
 var $1857 = 0, $1858 = 0, $1859 = 0.0, $186 = 0.0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0.0, $1864 = 0.0, $1865 = 0.0, $1866 = 0.0, $1867 = 0.0, $1868 = 0, $1869 = 0.0, $187 = 0.0, $1870 = 0.0, $1871 = 0.0, $1872 = 0.0, $1873 = 0.0, $1874 = 0.0;
 var $1875 = 0.0, $1876 = 0.0, $1877 = 0.0, $1878 = 0.0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0.0, $1882 = 0.0, $1883 = 0.0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0.0, $1889 = 0.0, $189 = 0, $1890 = 0.0, $1891 = 0.0, $1892 = 0.0;
 var $1893 = 0, $1894 = 0.0, $1895 = 0.0, $1896 = 0.0, $1897 = 0.0, $1898 = 0.0, $1899 = 0.0, $19 = 0, $190 = 0, $1900 = 0.0, $1901 = 0.0, $1902 = 0.0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0.0, $191 = 0;
 var $1910 = 0.0, $1911 = 0.0, $1912 = 0.0, $1913 = 0.0, $1914 = 0, $1915 = 0.0, $1916 = 0.0, $1917 = 0.0, $1918 = 0.0, $1919 = 0.0, $192 = 0, $1920 = 0.0, $1921 = 0.0, $1922 = 0.0, $1923 = 0.0, $1924 = 0.0, $1925 = 0.0, $1926 = 0.0, $1927 = 0, $1928 = 0;
 var $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0.0, $1937 = 0.0, $1938 = 0.0, $1939 = 0.0, $194 = 0, $1940 = 0.0, $1941 = 0.0, $1942 = 0.0, $1943 = 0.0, $1944 = 0.0, $1945 = 0.0, $1946 = 0.0;
 var $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0.0, $1952 = 0.0, $1953 = 0.0, $1954 = 0, $1955 = 0.0, $1956 = 0, $1957 = 0.0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0;
 var $1965 = 0, $1966 = 0, $1967 = 0.0, $1968 = 0, $1969 = 0.0, $197 = 0, $1970 = 0.0, $1971 = 0.0, $1972 = 0.0, $1973 = 0.0, $1974 = 0.0, $1975 = 0.0, $1976 = 0.0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0.0, $1981 = 0.0, $1982 = 0.0;
 var $1983 = 0.0, $1984 = 0, $1985 = 0, $1986 = 0.0, $1987 = 0.0, $1988 = 0.0, $1989 = 0, $199 = 0, $1990 = 0.0, $1991 = 0.0, $1992 = 0.0, $1993 = 0.0, $1994 = 0.0, $1995 = 0, $1996 = 0, $1997 = 0.0, $1998 = 0.0, $1999 = 0.0, $2 = 0, $20 = 0;
 var $200 = 0, $2000 = 0, $2001 = 0.0, $2002 = 0.0, $2003 = 0.0, $2004 = 0.0, $2005 = 0.0, $2006 = 0, $2007 = 0, $2008 = 0.0, $2009 = 0.0, $201 = 0, $2010 = 0.0, $2011 = 0, $2012 = 0.0, $2013 = 0.0, $2014 = 0.0, $2015 = 0.0, $2016 = 0.0, $2017 = 0;
 var $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0;
 var $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0;
 var $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0;
 var $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0;
 var $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0;
 var $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0;
 var $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0.0, $2142 = 0, $2143 = 0;
 var $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0.0, $2158 = 0.0, $2159 = 0.0, $216 = 0, $2160 = 0.0, $2161 = 0;
 var $2162 = 0.0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0;
 var $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0.0, $2184 = 0, $2185 = 0.0, $2186 = 0.0, $2187 = 0.0, $2188 = 0.0, $2189 = 0.0, $219 = 0, $2190 = 0.0, $2191 = 0, $2192 = 0.0, $2193 = 0.0, $2194 = 0, $2195 = 0, $2196 = 0.0, $2197 = 0.0, $2198 = 0;
 var $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0;
 var $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0;
 var $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0.0, $2241 = 0.0, $2242 = 0.0, $2243 = 0.0, $2244 = 0.0, $2245 = 0.0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0.0, $2251 = 0.0;
 var $2252 = 0.0, $2253 = 0.0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0.0, $2259 = 0.0, $226 = 0, $2260 = 0.0, $2261 = 0.0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0.0, $2267 = 0, $2268 = 0.0, $2269 = 0.0, $227 = 0;
 var $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0;
 var $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0;
 var $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0;
 var $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0.0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0;
 var $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0;
 var $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0;
 var $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0;
 var $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0;
 var $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0;
 var $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0;
 var $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0;
 var $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0;
 var $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0;
 var $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0;
 var $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0;
 var $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0;
 var $2559 = 0, $256 = 0, $2560 = 0.0, $2561 = 0.0, $2562 = 0.0, $2563 = 0.0, $2564 = 0.0, $2565 = 0.0, $2566 = 0.0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0;
 var $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0;
 var $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0;
 var $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0;
 var $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0;
 var $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0;
 var $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0;
 var $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0;
 var $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0;
 var $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0;
 var $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0;
 var $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0.0;
 var $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0.0;
 var $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0;
 var $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0;
 var $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0;
 var $492 = 0.0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0;
 var $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0.0;
 var $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0.0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0;
 var $582 = 0.0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0.0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0.0;
 var $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0;
 var $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0, $786 = 0.0, $787 = 0.0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0.0, $798 = 0.0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0.0, $802 = 0, $803 = 0, $804 = 0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0;
 var $816 = 0.0, $817 = 0, $818 = 0, $819 = 0.0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0.0, $824 = 0.0, $825 = 0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0.0;
 var $834 = 0.0, $835 = 0.0, $836 = 0, $837 = 0.0, $838 = 0.0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0, $850 = 0.0, $851 = 0.0;
 var $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0, $858 = 0.0, $859 = 0.0, $86 = 0.0, $860 = 0, $861 = 0, $862 = 0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0.0, $87 = 0;
 var $870 = 0.0, $871 = 0, $872 = 0.0, $873 = 0.0, $874 = 0, $875 = 0, $876 = 0, $877 = 0.0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0.0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0.0, $893 = 0, $894 = 0, $895 = 0, $896 = 0.0, $897 = 0.0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0.0, $907 = 0.0, $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0, $911 = 0.0, $912 = 0, $913 = 0.0, $914 = 0.0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0.0;
 var $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0, $928 = 0.0, $929 = 0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0.0, $946 = 0, $947 = 0.0, $948 = 0, $949 = 0.0, $95 = 0, $950 = 0.0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0.0, $962 = 0.0, $963 = 0.0, $964 = 0.0, $965 = 0, $966 = 0, $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0.0, $976 = 0.0, $977 = 0.0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0.0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0.0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0.0, $996 = 0.0;
 var $997 = 0, $998 = 0, $999 = 0.0, $acc$01$us$i$i$i = 0, $acc$01$us$i$i$i$i = 0, $acc1$02$us$i$i$i = 0, $acc1$02$us$i$i$i$i = 0, $base$026$i$i$i = 0.0, $booklist$050$i$i$i$i = 0, $booklist$2$1$i$i$i$i = 0, $booklist$2$2$i$i$i$i = 0, $booklist$2$3$i$i$i$i = 0, $booklist$2$i$i$i$i = 0, $booklist$336$i$i$i$i = 0, $booklist$5$1$i$i$i$i = 0, $booklist$5$2$i$i$i$i = 0, $booklist$5$3$i$i$i$i = 0, $booklist$5$i$i$i$i = 0, $brmerge = 0, $brmerge56 = 0;
 var $ch$0$lcssa$i$i$i$i = 0, $ch$1$lcssa$i$i$i$i = 0, $ch$219$i$i$i$i = 0, $ch$4$i$i$i$i = 0, $count$0$lcssa$i$i = 0, $count$022$i$i$i$i = 0, $count$06$i$i = 0, $count$1$i$i$i$i = 0, $count$14$i$i = 0, $count$2$i$i = 0, $count$25$i$i$i$i = 0, $ds$0$i$i$i = 0.0, $ds$0$i43$i$i = 0.0, $ds$0$i47$i$i = 0.0, $ds$0$i53$i$i = 0.0, $ds$0$i59$i$i = 0.0, $eh$lpad$body$i$index68Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $endptr$i = 0, $endptr2$i = 0;
 var $entry$019$i$i$i$i = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i13 = 0, $exitcond$i$i37 = 0, $exitcond$i12$i$i = 0, $exitcond$i31$i$i = 0, $exitcond$i3179$i$i = 0, $exitcond$i35$i$i = 0, $exitcond$i45$i$i = 0, $exitcond$i50$i$i = 0, $exitcond$i56$i$i = 0, $exitcond$i62$i$i = 0, $exitcond18$i$i$i = 0, $exitcond19$i$i$i = 0, $exitcond34$i$i = 0, $exitcond34$i$i$i = 0, $exitcond38$i$i$i = 0;
 var $exitcond4$i$i = 0, $exitcond44$i$i$i = 0, $exitcond5$i$i = 0, $exitcond8$i$i$i = 0, $exitcond9$i$i$i = 0, $freq$0$i$i$i$i = 0.0, $freq$1$i$i$i$i = 0.0, $freq$1$in$i$i$i$i = 0.0, $freq$1$in$in$i$i$i$i = 0, $freq$1$in$in$in$in$i$i$i$i = 0, $freq$2$i$i$i$i = 0.0, $halfoc$0$i$i$i = 0.0, $halfoc$1$i$i$i = 0.0, $hi$018$i$i$i = 0, $hi$1$lcssa$i$i$i = 0, $hi$114$i$i$i = 0, $i$0$be$i$i = 0, $i$0$i$i$i = 0, $i$0$lcssa$i$i = 0, $i$0$ph$i$i$i$ph = 0;
 var $i$01$i = 0, $i$01$i$i$i = 0, $i$01$i49$i$i = 0, $i$01$i55$i$i = 0, $i$01$i61$i$i = 0, $i$013$i$i$i = 0, $i$014$i$i$i = 0, $i$015$i$i = 0, $i$023$i$i$i$i = 0, $i$028$i$i = 0, $i$03$i$i = 0, $i$03$us$i$i$i = 0, $i$03$us$i$i$i$i = 0, $i$033$i$i = 0, $i$05$i$i$i$i$i = 0, $i$05$i13$1$i$i$i$i = 0, $i$05$i13$2$i$i$i$i = 0, $i$05$i13$3$i$i$i$i = 0, $i$05$i13$i$i$i$i = 0, $i$05$i3$1$i$i$i$i = 0;
 var $i$05$i3$2$i$i$i$i = 0, $i$05$i3$3$i$i$i$i = 0, $i$05$i3$i$i$i$i = 0, $i$05$i8$i$i$i$i = 0, $i$057$i$i$i$i = 0, $i$07$i$i = 0, $i$07$i$i$i = 0, $i$081$i$i = 0, $i$09$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $i$110$i$i = 0, $i$120$i$i$i = 0, $i$128$i$i = 0, $i$14$i$i$i = 0, $i$151$i$i$i$i = 0, $i$17$i$i = 0, $i$18$i$i$i = 0, $i$18$i$i$i$i = 0, $i$2$lcssa$i$i = 0;
 var $i$21$i80$i$i = 0, $i$222$i$i = 0, $i$23$i$i$i = 0, $i$242$i$i$i$i = 0, $i$26$i$i = 0, $i$26$i$i$i$i = 0, $i$28$i$i$i = 0, $i$315$i$i = 0, $i$317$i$i = 0, $i$32$i$i = 0, $i$337$i$i$i$i = 0, $i$41$i$i = 0, $i$415$i$i = 0, $i$419$i$i = 0, $i$427$i$i$i$i = 0, $i$45$i$i$i = 0, $i$51$i$i = 0, $i1$020$i$i = 0, $is$0$i$i$i = 0, $is$0$i44$i$i = 0;
 var $is$0$i48$i$i = 0, $is$0$i54$i$i = 0, $is$0$i60$i$i = 0, $ispos$i$i = 0, $j$0$lcssa$i$i = 0, $j$0$ph$i$i$i$ph = 0, $j$012$i$i$i$i = 0, $j$013$i$i$i = 0, $j$02$i$i = 0, $j$02$i$i18 = 0, $j$021$i$i$i$i = 0, $j$03$i$i = 0, $j$1$i$i$i$i = 0, $j$1$in18$i$i$i$i = 0, $j$1$in18$i$i$i$i$phi = 0, $j$117$i$i$i$i = 0, $j$120$i$i$i$i = 0, $j$127$i$i$i = 0, $j$21$i$i$i$i = 0, $j$323$i$i$i = 0;
 var $k$02$i$i$i = 0, $k2$018$i$i$i$i = 0, $lo$019$i$i$i = 0, $lo$1$lcssa$i$i$i = 0, $lo$111$i$i$i = 0, $lpad$phi$i$i$index = 0, $lpad$phi$i$i$index63 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index58 = 0, $mant$0$i$i$i$i = 0.0, $mant$0$i2$i$i$i = 0.0, $marker$i$i$i$i = 0, $maxbook$010$i$i$i = 0, $maxbook$2$lcssa$i$i$i = 0, $maxbook$23$i$i$i = 0, $maxclass$014$i$i$i = 0, $neg$i$i = 0, $og = 0, $opb$i = 0, $or$cond$i = 0;
 var $or$cond$i$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i42$i$i = 0, $or$cond$i46$i$i = 0, $or$cond$i52$i$i = 0, $or$cond$i58$i$i = 0, $or$cond$us$i$i$i = 0, $or$cond$us$i$i$i$i = 0, $or$cond2$i$i$i$i = 0, $p$0$i$i$i = 0, $p$0$i36$i$i = 0, $p$0$i38$i$i = 0, $p$0$i40$i$i = 0, $phitmp$i$i = 0, $phitmp$i$i7 = 0, $phitmp39$i$i = 0, $quantvals$0$i$i = 0, $req$0$i$i$i = 0, $req$0$i$i4$i = 0, $req$0$i14$i$i = 0;
 var $req$0$i17$i$i = 0, $req$0$i20$i$i = 0, $req$0$i3$i$i = 0, $req$0$i8$i$i = 0, $ret$0$lcssa$i$i$i = 0, $ret$0$lcssa$i$i$i32 = 0, $ret$0$lcssa$i$i8$i = 0, $ret$0$lcssa$i11$i$i = 0, $ret$0$lcssa$i4$i$i = 0, $ret$0$lcssa$i5$i$i = 0, $ret$0$lcssa$i6$i$i = 0, $ret$02$i$i$i = 0, $ret$02$i$i$i30 = 0, $ret$02$i$i5$i = 0, $ret$02$i1$i$i = 0, $ret$02$i2$i$i = 0, $ret$02$i3$i$i = 0, $ret$02$i8$i$i = 0, $rintf$i$i$i = 0.0, $rintf1$i$i$i = 0.0;
 var $storemerge$i$i = 0.0, $strlen$i = 0, $strlen1$i = 0, $temp$0$lcssa$i$i$i$i = 0, $temp$02$i$i$i$i = 0, $umax$i$i$i = 0, $v$$i$i$i = 0, $v$$i$i$i28 = 0, $v$$i1$i$i = 0, $v$$i2$i$i = 0, $v$$i7$i$i = 0, $vals$0$us$i$i$i = 0, $vals$0$us$i$i$i$i = 0, $vararg_buffer = 0, $vararg_ptr72 = 0, $vi$idx10$val$i$i = 0, $vi$idx14$val$i$i = 0, $vi$idx19$val$i$i = 0, $vi$idx2$val$i$i = 0, $vi$idx2$val$pre$i$i = 0;
 var $vi$idx20$val$i$i = 0, $vi$idx21$val$i$i = 0, $vi$idx24$val$i$i = 0, $vi$idx28$val$i$i = 0, $vi$idx3$val$i$i = 0, $vi$idx4$val$i$i = 0, $vi$idx5$val$i$i = 0, $vi$idx6$val$i$i = 0, $vi$idx7$val$i$i = 0, $vi$idx8$val$i$i = 0, $vi$idx9$val$i$i = 0, $vorbis_header = 0, $vorbis_header_code = 0, $vorbis_header_comment = 0, $y$0$i$i$i$i$i = 0.0, $y$0$i$i4$i$i$i = 0.0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $vararg_buffer = sp + 120|0;
 $opb$i = sp + 284|0;
 $marker$i$i$i$i = sp + 152|0;
 $0 = sp + 96|0;
 $vorbis_header = sp + 64|0;
 $vorbis_header_comment = sp + 32|0;
 $vorbis_header_code = sp;
 $og = sp + 136|0;
 while(1) {
  $1 = (_malloc(696)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 12;
   break;
  }
  $3 = HEAP32[555096>>2]|0;HEAP32[555096>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 9;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,555160|0)|0;
   $9 = tempRet0;
   $lpad$phi$i$index = $8;$lpad$phi$i$index58 = $9;
  }
  else if ((label|0) == 9) {
   $13 = (___cxa_allocate_exception(4)|0);
   HEAP32[$13>>2] = ((555104 + 8|0));
   __THREW__ = 0;
   invoke_viii(77,($13|0),(555160|0),(70|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $10 = ___cxa_find_matching_catch(-1,-1,555160|0)|0;
    $11 = tempRet0;
    $lpad$phi$i$index = $10;$lpad$phi$i$index58 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 12) {
   _memset(($1|0),0,696)|0;
   HEAP32[553040>>2] = $1;
   $16 = (($1) + 664|0);
   HEAP32[$16>>2] = 0;
   $17 = (($1) + 680|0);
   HEAP32[$17>>2] = 0;
   $18 = (_time((0|0))|0);
   _srand(($18|0));
   $19 = HEAP32[553040>>2]|0;
   $20 = (_rand()|0);
   $21 = ($19|0)==(0|0);
   L11: do {
    if (!($21)) {
     _memset(($19|0),0,360)|0;
     $22 = (($19) + 4|0);
     HEAP32[$22>>2] = 16384;
     $23 = (($19) + 24|0);
     HEAP32[$23>>2] = 1024;
     $24 = (_malloc(16384)|0);
     HEAP32[$19>>2] = $24;
     $25 = (_malloc(4096)|0);
     $26 = (($19) + 16|0);
     HEAP32[$26>>2] = $25;
     $27 = (_malloc(8192)|0);
     $28 = (($19) + 20|0);
     HEAP32[$28>>2] = $27;
     $29 = ($24|0)==(0|0);
     do {
      if ($29) {
       $32 = $25;
      } else {
       $30 = ($25|0)==(0|0);
       $31 = ($27|0)==(0|0);
       $or$cond$i = $30 | $31;
       if ($or$cond$i) {
        _free($24);
        $$pre$i = HEAP32[$26>>2]|0;
        $32 = $$pre$i;
        break;
       } else {
        $36 = (($19) + 336|0);
        HEAP32[$36>>2] = $20;
        break L11;
       }
      }
     } while(0);
     $33 = ($32|0)==(0|0);
     if (!($33)) {
      _free($32);
     }
     $34 = HEAP32[$28>>2]|0;
     $35 = ($34|0)==(0|0);
     if (!($35)) {
      _free($34);
     }
     _memset(($19|0),0,360)|0;
    }
   } while(0);
   $37 = HEAP32[553040>>2]|0;
   $38 = (($37) + 672|0);
   HEAP32[$38>>2] = 2;
   $39 = (($37) + 676|0);
   HEAP32[$39>>2] = $sample_rate;
   while(1) {
    $40 = (_malloc(3145728)|0);
    $41 = ($40|0)==(0|0);
    if (!($41)) {
     label = 37;
     break;
    }
    $42 = HEAP32[555096>>2]|0;HEAP32[555096>>2] = (($42+0)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     label = 31;
     break;
    }
    $44 = $42;
    __THREW__ = 0;
    invoke_v($44|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     label = 26;
     break;
    }
   }
   do {
    if ((label|0) == 26) {
     $47 = ___cxa_find_matching_catch(-1,-1,555160|0)|0;
     $48 = tempRet0;
     $lpad$phi$i$i$index = $47;$lpad$phi$i$i$index63 = $48;
    }
    else if ((label|0) == 31) {
     $54 = (___cxa_allocate_exception(4)|0);
     HEAP32[$54>>2] = ((555104 + 8|0));
     __THREW__ = 0;
     invoke_viii(77,($54|0),(555160|0),(70|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $49 = ___cxa_find_matching_catch(-1,-1,555160|0)|0;
      $50 = tempRet0;
      $lpad$phi$i$i$index = $49;$lpad$phi$i$i$index63 = $50;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 37) {
     $60 = HEAP32[553040>>2]|0;
     $61 = (($60) + 692|0);
     HEAP32[$61>>2] = $40;
     $62 = (($60) + 676|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $vbr_quality;
     HEAP32[$vararg_buffer>>2] = $63;
     $vararg_ptr72 = (($vararg_buffer) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$64;HEAP32[$vararg_ptr72>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr72+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_printf((553048|0),($vararg_buffer|0))|0);
     $65 = HEAP32[553040>>2]|0;
     $66 = (($65) + 684|0);
     HEAP32[$66>>2] = 0;
     $67 = (($65) + 688|0);
     HEAP32[$67>>2] = 0;
     $68 = (($65) + 360|0);
     ;HEAP32[$68+0>>2]=0|0;HEAP32[$68+4>>2]=0|0;HEAP32[$68+8>>2]=0|0;HEAP32[$68+12>>2]=0|0;HEAP32[$68+16>>2]=0|0;HEAP32[$68+20>>2]=0|0;HEAP32[$68+24>>2]=0|0;
     $69 = (_malloc(3664)|0);
     $70 = ($69|0)==(0|0);
     if (!($70)) {
      $71 = (($69) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $72 & 3;
      $74 = ($73|0)==(0);
      if (!($74)) {
       _memset(($69|0),0,3664)|0;
      }
     }
     $75 = (($65) + 388|0);
     HEAP32[$75>>2] = $69;
     $76 = HEAP32[553040>>2]|0;
     $77 = (($76) + 360|0);
     $78 = (($76) + 676|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($76) + 388|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $64 + 9.99999999999999954748E-8;
     $83 = $82;
     $84 = !($83 >= 1.0);
     $$01$i$i = $84 ? $83 : 0.999899983406066894531;
     $85 = (($81) + 3416|0);
     HEAPF32[$85>>2] = $$01$i$i;
     $86 = $$01$i$i;
     $87 = (($81) + 3400|0);
     $89 = 57328;$i$07$i$i = 0;
     while(1) {
      $88 = HEAP32[$89>>2]|0;
      $90 = (($88) + 12|0);
      $91 = HEAP32[$90>>2]|0;
      if ((($91|0) == 2) | (($91|0) == -1)) {
       $92 = (($88) + 16|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)>($79|0);
       if (!($94)) {
        $95 = (($88) + 20|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)<($79|0);
        if (!($97)) {
         $98 = HEAP32[$88>>2]|0;
         $99 = (($88) + 8|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = +HEAPF64[$100>>3];
         $102 = $101 > $86;
         if (!($102)) {
          $106 = (($100) + ($98<<3)|0);
          $107 = +HEAPF64[$106>>3];
          $108 = $107 < $86;
          if (!($108)) {
           label = 48;
           break;
          }
         }
        }
       }
      }
      $i$0$be$i$i = (($i$07$i$i) + 1)|0;
      $103 = (57328 + ($i$0$be$i$i<<2)|0);
      $104 = ($i$0$be$i$i|0)==(17);
      if ($104) {
       label = 46;
       break;
      } else {
       $89 = $103;$i$07$i$i = $i$0$be$i$i;
      }
     }
     if ((label|0) == 46) {
      $105 = (($81) + 3396|0);
      HEAP32[$105>>2] = 0;
      label = 57;
     }
     else if ((label|0) == 48) {
      $109 = ($98|0)>(0);
      L47: do {
       if ($109) {
        $111 = $101;$j$02$i$i = 0;
        while(1) {
         $110 = !($111 <= $86);
         $$pre20$i$i = (($j$02$i$i) + 1)|0;
         if (!($110)) {
          $112 = (($100) + ($$pre20$i$i<<3)|0);
          $113 = +HEAPF64[$112>>3];
          $114 = $113 > $86;
          if ($114) {
           $j$0$lcssa$i$i = $j$02$i$i;
           break L47;
          }
         }
         $115 = ($$pre20$i$i|0)<($98|0);
         if (!($115)) {
          $j$0$lcssa$i$i = $$pre20$i$i;
          break L47;
         }
         $$phi$trans$insert$i$i = (($100) + ($$pre20$i$i<<3)|0);
         $$pre$i$i = +HEAPF64[$$phi$trans$insert$i$i>>3];
         $111 = $$pre$i$i;$j$02$i$i = $$pre20$i$i;
        }
       } else {
        $j$0$lcssa$i$i = 0;
       }
      } while(0);
      $116 = ($j$0$lcssa$i$i|0)==($98|0);
      if ($116) {
       $117 = (+($98|0));
       $118 = $117 + -0.00100000000000000002082;
       $storemerge$i$i = $118;
      } else {
       $119 = (($100) + ($j$0$lcssa$i$i<<3)|0);
       $120 = +HEAPF64[$119>>3];
       $121 = $120;
       $122 = (($j$0$lcssa$i$i) + 1)|0;
       $123 = (($100) + ($122<<3)|0);
       $124 = +HEAPF64[$123>>3];
       $125 = $124;
       $126 = $121;
       $127 = $86 - $126;
       $128 = $125 - $121;
       $129 = $128;
       $130 = $127 / $129;
       $131 = $130;
       $132 = (+($j$0$lcssa$i$i|0));
       $133 = $132 + $131;
       $134 = $133;
       $storemerge$i$i = $134;
      }
      HEAPF64[$87>>3] = $storemerge$i$i;
      $135 = (($81) + 3396|0);
      HEAP32[$135>>2] = $88;
      $136 = ($88|0)==(0|0);
      if ($136) {
       label = 57;
      } else {
       $137 = HEAP32[$80>>2]|0;
       $138 = (($137) + 3396|0);
       $139 = HEAP32[$138>>2]|0;
       HEAP32[$77>>2] = 0;
       $140 = (($76) + 364|0);
       HEAP32[$140>>2] = 2;
       $141 = (($76) + 368|0);
       HEAP32[$141>>2] = $79;
       $142 = (($137) + 3456|0);
       HEAP32[$142>>2] = 1;
       $143 = (($137) + 3460|0);
       HEAP32[$143>>2] = 1;
       $144 = (($137) + 3400|0);
       $145 = +HEAPF64[$144>>3];
       $146 = (~~(($145)));
       $147 = (+($146|0));
       $148 = $145 - $147;
       $149 = (($137) + 3472|0);
       HEAPF64[$149>>3] = $145;
       $150 = (($137) + 3488|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)==(0);
       if ($152) {
        $153 = (($139) + 120|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = (($154) + ($146<<3)|0);
        $156 = +HEAPF64[$155>>3];
        $157 = 1.0 - $148;
        $158 = $157 * $156;
        $159 = (($146) + 1)|0;
        $160 = (($154) + ($159<<3)|0);
        $161 = +HEAPF64[$160>>3];
        $162 = $148 * $161;
        $163 = $158 + $162;
        $164 = (($137) + 3480|0);
        HEAPF64[$164>>3] = $163;
        $$pre$phi$i$iZ2D = $157;$$pre$phi3$i$iZ2D = $159;
       } else {
        $$pre$i1$i = 1.0 - $148;
        $$pre2$i$i = (($146) + 1)|0;
        $$pre$phi$i$iZ2D = $$pre$i1$i;$$pre$phi3$i$iZ2D = $$pre2$i$i;
       }
       $165 = (($139) + 112|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (($166) + ($146<<2)|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (+($168|0));
       $170 = $$pre$phi$i$iZ2D * $169;
       $171 = (($166) + ($$pre$phi3$i$iZ2D<<2)|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (+($172|0));
       $174 = $148 * $173;
       $175 = $170 + $174;
       $176 = (($137) + 3496|0);
       HEAPF64[$176>>3] = $175;
       $177 = (($139) + 116|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = (($178) + ($146<<2)|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (+($180|0));
       $182 = $$pre$phi$i$iZ2D * $181;
       $183 = (($178) + ($$pre$phi3$i$iZ2D<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (+($184|0));
       $186 = $148 * $185;
       $187 = $182 + $186;
       $188 = (($137) + 3504|0);
       HEAPF64[$188>>3] = $187;
       $189 = (($137) + 3512|0);
       HEAPF64[$189>>3] = -6.0;
       $190 = (($137) + 3520|0);
       HEAPF64[$190>>3] = $145;
       $191 = (($137) + 3528|0);
       HEAPF64[$191>>3] = $145;
       $192 = (($137) + 3536|0);
       HEAPF64[$192>>3] = $145;
       $193 = (($137) + 3544|0);
       HEAPF64[$193>>3] = $145;
       $194 = (($137) + 3552|0);
       HEAPF64[$194>>3] = $145;
       $195 = (($137) + 3560|0);
       HEAPF64[$195>>3] = $145;
       $196 = (($137) + 3568|0);
       HEAPF64[$196>>3] = $145;
       $197 = (($137) + 3576|0);
       HEAPF64[$197>>3] = $145;
       $198 = (($137) + 3584|0);
       HEAPF64[$198>>3] = $145;
       $199 = (($137) + 3592|0);
       HEAPF64[$199>>3] = $145;
       $200 = (($137) + 3600|0);
       HEAPF64[$200>>3] = $145;
       $201 = (($137) + 3608|0);
       HEAPF64[$201>>3] = $145;
       $202 = (($137) + 3616|0);
       HEAPF64[$202>>3] = $145;
       $203 = (($137) + 3624|0);
       HEAPF64[$203>>3] = $145;
       $204 = (($137) + 3632|0);
       HEAPF64[$204>>3] = $145;
       $205 = (($137) + 3640|0);
       HEAPF64[$205>>3] = $145;
       $206 = (($137) + 3648|0);
       HEAPF64[$206>>3] = $145;
       $207 = (($81) + 3420|0);
       HEAP32[$207>>2] = 0;
       $208 = (($81) + 3464|0);
       HEAP32[$208>>2] = 1;
       $209 = (($137) + 3392|0);
       $210 = ($137|0)==(0|0);
       if (!($210)) {
        $211 = HEAP32[$142>>2]|0;
        $212 = ($211|0)==(0);
        $$$i$i = $212&1;
        $213 = $175 > -80.0;
        if ($213) {
         HEAPF64[$176>>3] = -80.0;
        } else {
         $214 = $175 < -200.0;
         if ($214) {
          HEAPF64[$176>>3] = -200.0;
         }
        }
        $215 = ($139|0)==(0|0);
        if (!($215)) {
         HEAP32[$209>>2] = 1;
         $216 = (($139) + 24|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = (($139) + 28|0);
         $219 = HEAP32[$218>>2]|0;
         $220 = (($217) + ($146<<2)|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = (($219) + ($146<<2)|0);
         $223 = HEAP32[$222>>2]|0;
         HEAP32[$137>>2] = $221;
         $224 = (($137) + 4|0);
         HEAP32[$224>>2] = $223;
         $225 = ($221|0)==($223|0);
         $226 = (($139) + 144|0);
         $227 = HEAP32[$226>>2]|0;
         $228 = ($227|0)>(0);
         if ($228) {
          $229 = (($139) + 136|0);
          $230 = (($139) + 140|0);
          $231 = (($139) + 148|0);
          $233 = $145;$254 = $137;$i$081$i$i = 0;
          while(1) {
           $232 = (~~(($233)));
           $234 = HEAP32[$229>>2]|0;
           $235 = HEAP32[$230>>2]|0;
           $236 = HEAP32[$231>>2]|0;
           $237 = (($236) + ($i$081$i$i<<2)|0);
           $238 = HEAP32[$237>>2]|0;
           $239 = (_malloc(1120)|0);
           $240 = ($239|0)==(0|0);
           if (!($240)) {
            $241 = (($239) + -4|0);
            $242 = HEAP32[$241>>2]|0;
            $243 = $242 & 3;
            $244 = ($243|0)==(0);
            if (!($244)) {
             _memset(($239|0),0,1120)|0;
            }
           }
           $245 = (($238) + ($232<<2)|0);
           $246 = HEAP32[$245>>2]|0;
           $247 = (($235) + (($246*1120)|0)|0);
           _memcpy(($239|0),($247|0),1120)|0;
           $248 = HEAP32[$239>>2]|0;
           $249 = ($248|0)>(0);
           do {
            if ($249) {
             $250 = (($239) + 4|0);
             $i$013$i$i$i = 0;$maxclass$014$i$i$i = -1;
             while(1) {
              $257 = (($250) + ($i$013$i$i$i<<2)|0);
              $258 = HEAP32[$257>>2]|0;
              $259 = ($258|0)>($maxclass$014$i$i$i|0);
              $$maxclass$0$i$i$i = $259 ? $258 : $maxclass$014$i$i$i;
              $260 = (($i$013$i$i$i) + 1)|0;
              $exitcond19$i$i$i = ($260|0)==($248|0);
              if ($exitcond19$i$i$i) {
               break;
              } else {
               $i$013$i$i$i = $260;$maxclass$014$i$i$i = $$maxclass$0$i$i$i;
              }
             }
             $251 = ($$maxclass$0$i$i$i|0)<(0);
             if (!($251)) {
              $252 = (($239) + 256|0);
              $253 = (($254) + 24|0);
              $255 = (($239) + 192|0);
              $256 = (($239) + 320|0);
              $i$18$i$i$i = 0;$maxbook$010$i$i$i = -1;
              while(1) {
               $269 = (($252) + ($i$18$i$i$i<<2)|0);
               $270 = HEAP32[$269>>2]|0;
               $271 = ($270|0)>($maxbook$010$i$i$i|0);
               $$maxbook$0$i$i$i = $271 ? $270 : $maxbook$010$i$i$i;
               $272 = HEAP32[$253>>2]|0;
               $273 = (($272) + ($270))|0;
               HEAP32[$269>>2] = $273;
               $274 = (($255) + ($i$18$i$i$i<<2)|0);
               $275 = HEAP32[$274>>2]|0;
               $276 = 1 << $275;
               $277 = ($276|0)>(0);
               if ($277) {
                $2733 = $275;$k$02$i$i$i = 0;$maxbook$23$i$i$i = $$maxbook$0$i$i$i;
                while(1) {
                 $278 = ((($256) + ($i$18$i$i$i<<5)|0) + ($k$02$i$i$i<<2)|0);
                 $279 = HEAP32[$278>>2]|0;
                 $280 = ($279|0)>($maxbook$23$i$i$i|0);
                 $$maxbook$2$i$i$i = $280 ? $279 : $maxbook$23$i$i$i;
                 $281 = ($279|0)>(-1);
                 if ($281) {
                  $282 = HEAP32[$253>>2]|0;
                  $283 = (($282) + ($279))|0;
                  HEAP32[$278>>2] = $283;
                  $$pre$i$i$i = HEAP32[$274>>2]|0;
                  $286 = $$pre$i$i$i;
                 } else {
                  $286 = $2733;
                 }
                 $284 = (($k$02$i$i$i) + 1)|0;
                 $285 = 1 << $286;
                 $287 = ($284|0)<($285|0);
                 if ($287) {
                  $2733 = $286;$k$02$i$i$i = $284;$maxbook$23$i$i$i = $$maxbook$2$i$i$i;
                 } else {
                  $maxbook$2$lcssa$i$i$i = $$maxbook$2$i$i$i;
                  break;
                 }
                }
               } else {
                $maxbook$2$lcssa$i$i$i = $$maxbook$0$i$i$i;
               }
               $288 = (($i$18$i$i$i) + 1)|0;
               $exitcond18$i$i$i = ($i$18$i$i$i|0)==($$maxclass$0$i$i$i|0);
               if ($exitcond18$i$i$i) {
                break;
               } else {
                $i$18$i$i$i = $288;$maxbook$010$i$i$i = $maxbook$2$lcssa$i$i$i;
               }
              }
              $261 = ($maxbook$2$lcssa$i$i$i|0)<(0);
              if ($261) {
               break;
              }
              $262 = (($254) + 1824|0);
              $263 = (($234) + ($246<<2)|0);
              $264 = HEAP32[$263>>2]|0;
              $265 = HEAP32[$264>>2]|0;
              $266 = HEAP32[$253>>2]|0;
              $267 = (($266) + 1)|0;
              HEAP32[$253>>2] = $267;
              $268 = (($262) + ($266<<2)|0);
              HEAP32[$268>>2] = $265;
              $exitcond$i3179$i$i = ($maxbook$2$lcssa$i$i$i|0)==(0);
              if ($exitcond$i3179$i$i) {
               break;
              } else {
               $i$21$i80$i$i = 0;
              }
              while(1) {
               $289 = (($i$21$i80$i$i) + 1)|0;
               $$pre21$i$i$i = HEAP32[$245>>2]|0;
               $290 = (($234) + ($$pre21$i$i$i<<2)|0);
               $291 = HEAP32[$290>>2]|0;
               $292 = (($291) + ($289<<2)|0);
               $293 = HEAP32[$292>>2]|0;
               $294 = HEAP32[$253>>2]|0;
               $295 = (($294) + 1)|0;
               HEAP32[$253>>2] = $295;
               $296 = (($262) + ($294<<2)|0);
               HEAP32[$296>>2] = $293;
               $exitcond$i31$i$i = ($289|0)==($maxbook$2$lcssa$i$i$i|0);
               if ($exitcond$i31$i$i) {
                break;
               } else {
                $i$21$i80$i$i = $289;
               }
              }
             }
            }
           } while(0);
           $297 = (($254) + 16|0);
           $298 = HEAP32[$297>>2]|0;
           $299 = (($254) + 800|0);
           $300 = (($299) + ($298<<2)|0);
           HEAP32[$300>>2] = 1;
           $301 = HEAP32[$297>>2]|0;
           $302 = (($254) + 1056|0);
           $303 = (($302) + ($301<<2)|0);
           HEAP32[$303>>2] = $239;
           $304 = HEAP32[$297>>2]|0;
           $305 = (($304) + 1)|0;
           HEAP32[$297>>2] = $305;
           $306 = (($i$081$i$i) + 1)|0;
           $307 = HEAP32[$226>>2]|0;
           $308 = ($306|0)<($307|0);
           if (!($308)) {
            break;
           }
           $$pre$i3$i = +HEAPF64[$144>>3];
           $$pre100$i$i = HEAP32[$80>>2]|0;
           $233 = $$pre$i3$i;$254 = $$pre100$i$i;$i$081$i$i = $306;
          }
          $vi$idx2$val$pre$i$i = HEAP32[$80>>2]|0;
          $$pre = +HEAPF64[$190>>3];
          $314 = $$pre;$vi$idx2$val$i$i = $vi$idx2$val$pre$i$i;
         } else {
          $314 = $145;$vi$idx2$val$i$i = $137;
         }
         $309 = (($139) + 124|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = (($139) + 128|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = (~~(($314)));
         $315 = (+($313|0));
         $316 = $314 - $315;
         $317 = (($vi$idx2$val$i$i) + 2868|0);
         $318 = (($312) + ($313<<3)|0);
         $319 = +HEAPF64[$318>>3];
         $320 = (~~(($319)));
         $321 = (($310) + (($320*492)|0)|0);
         _memcpy(($317|0),($321|0),492)|0;
         $322 = +HEAPF64[$318>>3];
         $323 = 1.0 - $316;
         $324 = $323 * $322;
         $325 = (($313) + 1)|0;
         $326 = (($312) + ($325<<3)|0);
         $327 = +HEAPF64[$326>>3];
         $328 = $316 * $327;
         $329 = $324 + $328;
         $330 = (~~(($329)));
         $331 = (+($330|0));
         $332 = $329 - $331;
         $333 = $332 == 0.0;
         $334 = ($330|0)>(0);
         $or$cond$i$i$i = $333 & $334;
         $ds$0$i$i$i = $or$cond$i$i$i ? 1.0 : $332;
         $335 = $or$cond$i$i$i << 31 >> 31;
         $is$0$i$i$i = (($335) + ($330))|0;
         $336 = 1.0 - $ds$0$i$i$i;
         $337 = (($is$0$i$i$i) + 1)|0;
         $338 = (($vi$idx2$val$i$i) + 2872|0);
         $339 = (($vi$idx2$val$i$i) + 2900|0);
         $340 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 4|0);
         $341 = +HEAPF32[$340>>2];
         $342 = $341;
         $343 = $342 * $336;
         $344 = ((($310) + (($337*492)|0)|0) + 4|0);
         $345 = +HEAPF32[$344>>2];
         $346 = $345;
         $347 = $346 * $ds$0$i$i$i;
         $348 = $347 + $343;
         $349 = $348;
         HEAPF32[$338>>2] = $349;
         $350 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 32|0);
         $351 = +HEAPF32[$350>>2];
         $352 = $351;
         $353 = $352 * $336;
         $354 = ((($310) + (($337*492)|0)|0) + 32|0);
         $355 = +HEAPF32[$354>>2];
         $356 = $355;
         $357 = $356 * $ds$0$i$i$i;
         $358 = $357 + $353;
         $359 = $358;
         HEAPF32[$339>>2] = $359;
         $360 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 8|0);
         $361 = +HEAPF32[$360>>2];
         $362 = $361;
         $363 = $362 * $336;
         $364 = ((($310) + (($337*492)|0)|0) + 8|0);
         $365 = +HEAPF32[$364>>2];
         $366 = $365;
         $367 = $366 * $ds$0$i$i$i;
         $368 = $367 + $363;
         $369 = $368;
         $370 = (($vi$idx2$val$i$i) + 2876|0);
         HEAPF32[$370>>2] = $369;
         $371 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 36|0);
         $372 = +HEAPF32[$371>>2];
         $373 = $372;
         $374 = $373 * $336;
         $375 = ((($310) + (($337*492)|0)|0) + 36|0);
         $376 = +HEAPF32[$375>>2];
         $377 = $376;
         $378 = $ds$0$i$i$i * $377;
         $379 = $374 + $378;
         $380 = $379;
         $381 = (($vi$idx2$val$i$i) + 2904|0);
         HEAPF32[$381>>2] = $380;
         $382 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 12|0);
         $383 = +HEAPF32[$382>>2];
         $384 = $383;
         $385 = $336 * $384;
         $386 = ((($310) + (($337*492)|0)|0) + 12|0);
         $387 = +HEAPF32[$386>>2];
         $388 = $387;
         $389 = $ds$0$i$i$i * $388;
         $390 = $385 + $389;
         $391 = $390;
         $392 = (($vi$idx2$val$i$i) + 2880|0);
         HEAPF32[$392>>2] = $391;
         $393 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 40|0);
         $394 = +HEAPF32[$393>>2];
         $395 = $394;
         $396 = $336 * $395;
         $397 = ((($310) + (($337*492)|0)|0) + 40|0);
         $398 = +HEAPF32[$397>>2];
         $399 = $398;
         $400 = $ds$0$i$i$i * $399;
         $401 = $396 + $400;
         $402 = $401;
         $403 = (($vi$idx2$val$i$i) + 2908|0);
         HEAPF32[$403>>2] = $402;
         $404 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 16|0);
         $405 = +HEAPF32[$404>>2];
         $406 = $405;
         $407 = $336 * $406;
         $408 = ((($310) + (($337*492)|0)|0) + 16|0);
         $409 = +HEAPF32[$408>>2];
         $410 = $409;
         $411 = $ds$0$i$i$i * $410;
         $412 = $407 + $411;
         $413 = $412;
         $414 = (($vi$idx2$val$i$i) + 2884|0);
         HEAPF32[$414>>2] = $413;
         $415 = ((($310) + (($is$0$i$i$i*492)|0)|0) + 44|0);
         $416 = +HEAPF32[$415>>2];
         $417 = $416;
         $418 = $336 * $417;
         $419 = ((($310) + (($337*492)|0)|0) + 44|0);
         $420 = +HEAPF32[$419>>2];
         $421 = $420;
         $422 = $ds$0$i$i$i * $421;
         $423 = $418 + $422;
         $424 = $423;
         $425 = (($vi$idx2$val$i$i) + 2912|0);
         HEAPF32[$425>>2] = $424;
         $426 = (($vi$idx2$val$i$i) + 3512|0);
         $427 = +HEAPF64[$426>>3];
         $428 = $427;
         $429 = (($vi$idx2$val$i$i) + 2936|0);
         HEAPF32[$429>>2] = $428;
         $430 = (($139) + 132|0);
         $431 = HEAP32[$430>>2]|0;
         $432 = +HEAPF64[$149>>3];
         $433 = $432;
         $434 = (~~(($433)));
         $435 = (+($434|0));
         $436 = $433 - $435;
         $437 = $436;
         $438 = HEAP32[$80>>2]|0;
         $439 = ($431|0)==(0|0);
         L103: do {
          if ($439) {
           $440 = (($438) + 3240|0);
           $441 = (($438) + 4|0);
           $442 = (($438) + 3300|0);
           $443 = HEAP32[$438>>2]|0;
           HEAP32[$440>>2] = $443;
           $444 = HEAP32[$441>>2]|0;
           HEAP32[$442>>2] = $444;
           $445 = (($438) + 3244|0);
           HEAP32[$445>>2] = $443;
           $446 = (($438) + 3304|0);
           HEAP32[$446>>2] = $444;
           $447 = (($438) + 3248|0);
           HEAP32[$447>>2] = $443;
           $448 = (($438) + 3308|0);
           HEAP32[$448>>2] = $444;
           $449 = (($438) + 3252|0);
           HEAP32[$449>>2] = $443;
           $450 = (($438) + 3312|0);
           HEAP32[$450>>2] = $444;
           $451 = (($438) + 3256|0);
           HEAP32[$451>>2] = $443;
           $452 = (($438) + 3316|0);
           HEAP32[$452>>2] = $444;
           $453 = (($438) + 3260|0);
           HEAP32[$453>>2] = $443;
           $454 = (($438) + 3320|0);
           HEAP32[$454>>2] = $444;
           $455 = (($438) + 3264|0);
           HEAP32[$455>>2] = $443;
           $456 = (($438) + 3324|0);
           HEAP32[$456>>2] = $444;
           $457 = (($438) + 3268|0);
           HEAP32[$457>>2] = $443;
           $458 = (($438) + 3328|0);
           HEAP32[$458>>2] = $444;
           $459 = (($438) + 3272|0);
           HEAP32[$459>>2] = $443;
           $460 = (($438) + 3332|0);
           HEAP32[$460>>2] = $444;
           $461 = (($438) + 3276|0);
           HEAP32[$461>>2] = $443;
           $462 = (($438) + 3336|0);
           HEAP32[$462>>2] = $444;
           $463 = (($438) + 3280|0);
           HEAP32[$463>>2] = $443;
           $464 = (($438) + 3340|0);
           HEAP32[$464>>2] = $444;
           $465 = (($438) + 3284|0);
           HEAP32[$465>>2] = $443;
           $466 = (($438) + 3344|0);
           HEAP32[$466>>2] = $444;
           $467 = (($438) + 3288|0);
           HEAP32[$467>>2] = $443;
           $468 = (($438) + 3348|0);
           HEAP32[$468>>2] = $444;
           $469 = (($438) + 3292|0);
           HEAP32[$469>>2] = $443;
           $470 = (($438) + 3352|0);
           HEAP32[$470>>2] = $444;
           $471 = (($438) + 3296|0);
           HEAP32[$471>>2] = $443;
           $472 = (($438) + 3356|0);
           HEAP32[$472>>2] = $444;
          } else {
           $473 = (($438) + 3120|0);
           $474 = (($431) + (($434*240)|0)|0);
           dest=$473+0|0; src=$474+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $475 = (($438) + 3180|0);
           $476 = ((($431) + (($434*240)|0)|0) + 60|0);
           dest=$475+0|0; src=$476+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $477 = (($137) + 3420|0);
           $478 = HEAP32[$477>>2]|0;
           $479 = ($478|0)==(0);
           if (!($479)) {
            $480 = 1.0 - $437;
            $481 = (($434) + 1)|0;
            $482 = (($438) + 3000|0);
            $483 = (($438) + 4|0);
            $484 = (($438) + 3060|0);
            $485 = (($438) + 2940|0);
            $486 = (($438) + 3240|0);
            $487 = (($438) + 3300|0);
            $$pre10$i$i$i = HEAP32[$141>>2]|0;
            $488 = (+($$pre10$i$i$i|0));
            $i$07$i$i$i = 0;
            while(1) {
             $489 = (((($431) + (($434*240)|0)|0) + ($i$07$i$i$i<<2)|0) + 120|0);
             $490 = +HEAPF32[$489>>2];
             $491 = $490;
             $492 = $480 * $491;
             $493 = (((($431) + (($481*240)|0)|0) + ($i$07$i$i$i<<2)|0) + 120|0);
             $494 = +HEAPF32[$493>>2];
             $495 = $494;
             $496 = $437 * $495;
             $497 = $492 + $496;
             $498 = $497;
             $499 = $498;
             $500 = $499 * 1000.0;
             $501 = $500 / $488;
             $502 = HEAP32[$438>>2]|0;
             $503 = (+($502|0));
             $504 = $501 * $503;
             $505 = (~~(($504)));
             $506 = (($482) + ($i$07$i$i$i<<2)|0);
             HEAP32[$506>>2] = $505;
             $507 = HEAP32[$483>>2]|0;
             $508 = (+($507|0));
             $509 = $501 * $508;
             $510 = (~~(($509)));
             $511 = (($484) + ($i$07$i$i$i<<2)|0);
             HEAP32[$511>>2] = $510;
             $512 = (~~(($498)));
             $513 = (($485) + ($i$07$i$i$i<<2)|0);
             HEAP32[$513>>2] = $512;
             $514 = (((($431) + (($434*240)|0)|0) + ($i$07$i$i$i<<2)|0) + 180|0);
             $515 = +HEAPF32[$514>>2];
             $516 = $515;
             $517 = $480 * $516;
             $518 = (((($431) + (($481*240)|0)|0) + ($i$07$i$i$i<<2)|0) + 180|0);
             $519 = +HEAPF32[$518>>2];
             $520 = $519;
             $521 = $437 * $520;
             $522 = $517 + $521;
             $523 = $522;
             $524 = $523;
             $525 = $524 * 1000.0;
             $526 = $525 / $488;
             $527 = HEAP32[$438>>2]|0;
             $528 = (+($527|0));
             $529 = $526 * $528;
             $530 = (~~(($529)));
             $531 = (($486) + ($i$07$i$i$i<<2)|0);
             HEAP32[$531>>2] = $530;
             $532 = HEAP32[$483>>2]|0;
             $533 = (+($532|0));
             $534 = $526 * $533;
             $535 = (~~(($534)));
             $536 = (($487) + ($i$07$i$i$i<<2)|0);
             HEAP32[$536>>2] = $535;
             $537 = (($i$07$i$i$i) + 1)|0;
             $exitcond9$i$i$i = ($537|0)==(15);
             if ($exitcond9$i$i$i) {
              break L103;
             } else {
              $i$07$i$i$i = $537;
             }
            }
           }
           $538 = ((($431) + (($434*240)|0)|0) + 148|0);
           $539 = +HEAPF32[$538>>2];
           $540 = $539;
           $541 = 1.0 - $437;
           $542 = $541 * $540;
           $543 = (($434) + 1)|0;
           $544 = ((($431) + (($543*240)|0)|0) + 148|0);
           $545 = +HEAPF32[$544>>2];
           $546 = $545;
           $547 = $437 * $546;
           $548 = $542 + $547;
           $549 = $548;
           $550 = $549;
           $551 = $550 * 1000.0;
           $552 = (($438) + 3000|0);
           $553 = (($438) + 4|0);
           $554 = (($438) + 3060|0);
           $555 = (~~(($549)));
           $556 = (($438) + 2940|0);
           $$pre$i34$i$i = HEAP32[$141>>2]|0;
           $557 = (+($$pre$i34$i$i|0));
           $558 = $551 / $557;
           $i$14$i$i$i = 0;
           while(1) {
            $559 = HEAP32[$438>>2]|0;
            $560 = (+($559|0));
            $561 = $558 * $560;
            $562 = (~~(($561)));
            $563 = (($552) + ($i$14$i$i$i<<2)|0);
            HEAP32[$563>>2] = $562;
            $564 = HEAP32[$553>>2]|0;
            $565 = (+($564|0));
            $566 = $558 * $565;
            $567 = (~~(($566)));
            $568 = (($554) + ($i$14$i$i$i<<2)|0);
            HEAP32[$568>>2] = $567;
            $569 = (($556) + ($i$14$i$i$i<<2)|0);
            HEAP32[$569>>2] = $555;
            $570 = (($i$14$i$i$i) + 1)|0;
            $exitcond8$i$i$i = ($570|0)==(15);
            if ($exitcond8$i$i$i) {
             break;
            } else {
             $i$14$i$i$i = $570;
            }
           }
           $571 = ((($431) + (($434*240)|0)|0) + 208|0);
           $572 = +HEAPF32[$571>>2];
           $573 = $572;
           $574 = $541 * $573;
           $575 = ((($431) + (($543*240)|0)|0) + 208|0);
           $576 = +HEAPF32[$575>>2];
           $577 = $576;
           $578 = $437 * $577;
           $579 = $574 + $578;
           $580 = $579;
           $581 = $580;
           $582 = $581 * 1000.0;
           $583 = (($438) + 3240|0);
           $584 = (($438) + 3300|0);
           $585 = $582 / $557;
           $i$23$i$i$i = 0;
           while(1) {
            $586 = HEAP32[$438>>2]|0;
            $587 = (+($586|0));
            $588 = $585 * $587;
            $589 = (~~(($588)));
            $590 = (($583) + ($i$23$i$i$i<<2)|0);
            HEAP32[$590>>2] = $589;
            $591 = HEAP32[$553>>2]|0;
            $592 = (+($591|0));
            $593 = $585 * $592;
            $594 = (~~(($593)));
            $595 = (($584) + ($i$23$i$i$i<<2)|0);
            HEAP32[$595>>2] = $594;
            $596 = (($i$23$i$i$i) + 1)|0;
            $exitcond$i35$i$i = ($596|0)==(15);
            if ($exitcond$i35$i$i) {
             break;
            } else {
             $i$23$i$i$i = $596;
            }
           }
          }
         } while(0);
         $597 = +HEAPF64[$144>>3];
         $598 = (($139) + 92|0);
         $599 = HEAP32[$598>>2]|0;
         $600 = (($139) + 100|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = (($139) + 108|0);
         $603 = HEAP32[$602>>2]|0;
         $vi$idx6$val$i$i = HEAP32[$80>>2]|0;
         $604 = (($vi$idx6$val$i$i) + 2852|0);
         $605 = HEAP32[$604>>2]|0;
         $606 = (~~(($597)));
         $607 = (($vi$idx6$val$i$i) + 28|0);
         $608 = HEAP32[$607>>2]|0;
         $609 = ($608|0)>(0);
         if (!($609)) {
          HEAP32[$607>>2] = 1;
         }
         $610 = ($605|0)==(0|0);
         if ($610) {
          $611 = (_malloc(520)|0);
          $612 = ($611|0)==(0|0);
          do {
           if (!($612)) {
            $613 = (($611) + -4|0);
            $614 = HEAP32[$613>>2]|0;
            $615 = $614 & 3;
            $616 = ($615|0)==(0);
            if ($616) {
             break;
            }
            _memset(($611|0),0,520)|0;
           }
          } while(0);
          HEAP32[$604>>2] = $611;
          $p$0$i$i$i = $611;
         } else {
          $p$0$i$i$i = $605;
         }
         _memcpy(($p$0$i$i$i|0),(551360|0),520)|0;
         HEAP32[$p$0$i$i$i>>2] = 0;
         $617 = (($vi$idx6$val$i$i) + 3460|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = ($618|0)==(0);
         if (!($619)) {
          $620 = (($p$0$i$i$i) + 500|0);
          HEAP32[$620>>2] = 1;
          $621 = (($599) + ($606<<2)|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = (($p$0$i$i$i) + 504|0);
          HEAP32[$623>>2] = $622;
          $624 = (($601) + ($606<<2)|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = (($p$0$i$i$i) + 508|0);
          HEAP32[$626>>2] = $625;
          $627 = (($603) + ($606<<3)|0);
          $628 = +HEAPF64[$627>>3];
          $629 = (($p$0$i$i$i) + 512|0);
          HEAPF64[$629>>3] = $628;
         }
         $630 = +HEAPF64[$144>>3];
         $631 = HEAP32[$598>>2]|0;
         $632 = HEAP32[$600>>2]|0;
         $633 = HEAP32[$602>>2]|0;
         $vi$idx5$val$i$i = HEAP32[$80>>2]|0;
         $634 = (($vi$idx5$val$i$i) + 2856|0);
         $635 = HEAP32[$634>>2]|0;
         $636 = (~~(($630)));
         $637 = (($vi$idx5$val$i$i) + 28|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = ($638|0)>(1);
         if (!($639)) {
          HEAP32[$637>>2] = 2;
         }
         $640 = ($635|0)==(0|0);
         if ($640) {
          $641 = (_malloc(520)|0);
          $642 = ($641|0)==(0|0);
          do {
           if (!($642)) {
            $643 = (($641) + -4|0);
            $644 = HEAP32[$643>>2]|0;
            $645 = $644 & 3;
            $646 = ($645|0)==(0);
            if ($646) {
             break;
            }
            _memset(($641|0),0,520)|0;
           }
          } while(0);
          HEAP32[$634>>2] = $641;
          $p$0$i36$i$i = $641;
         } else {
          $p$0$i36$i$i = $635;
         }
         _memcpy(($p$0$i36$i$i|0),(551360|0),520)|0;
         HEAP32[$p$0$i36$i$i>>2] = 0;
         $647 = (($vi$idx5$val$i$i) + 3460|0);
         $648 = HEAP32[$647>>2]|0;
         $649 = ($648|0)==(0);
         if (!($649)) {
          $650 = (($p$0$i36$i$i) + 500|0);
          HEAP32[$650>>2] = 1;
          $651 = (($631) + ($636<<2)|0);
          $652 = HEAP32[$651>>2]|0;
          $653 = (($p$0$i36$i$i) + 504|0);
          HEAP32[$653>>2] = $652;
          $654 = (($632) + ($636<<2)|0);
          $655 = HEAP32[$654>>2]|0;
          $656 = (($p$0$i36$i$i) + 508|0);
          HEAP32[$656>>2] = $655;
          $657 = (($633) + ($636<<3)|0);
          $658 = +HEAPF64[$657>>3];
          $659 = (($p$0$i36$i$i) + 512|0);
          HEAPF64[$659>>3] = $658;
         }
         do {
          if (!($225)) {
           $660 = +HEAPF64[$144>>3];
           $661 = (($139) + 96|0);
           $662 = HEAP32[$661>>2]|0;
           $663 = (($139) + 104|0);
           $664 = HEAP32[$663>>2]|0;
           $665 = HEAP32[$602>>2]|0;
           $vi$idx4$val$i$i = HEAP32[$80>>2]|0;
           $666 = (($vi$idx4$val$i$i) + 2860|0);
           $667 = HEAP32[$666>>2]|0;
           $668 = (~~(($660)));
           $669 = (($vi$idx4$val$i$i) + 28|0);
           $670 = HEAP32[$669>>2]|0;
           $671 = ($670|0)>(2);
           if (!($671)) {
            HEAP32[$669>>2] = 3;
           }
           $672 = ($667|0)==(0|0);
           if ($672) {
            $673 = (_malloc(520)|0);
            $674 = ($673|0)==(0|0);
            do {
             if (!($674)) {
              $675 = (($673) + -4|0);
              $676 = HEAP32[$675>>2]|0;
              $677 = $676 & 3;
              $678 = ($677|0)==(0);
              if ($678) {
               break;
              }
              _memset(($673|0),0,520)|0;
             }
            } while(0);
            HEAP32[$666>>2] = $673;
            $p$0$i38$i$i = $673;
           } else {
            $p$0$i38$i$i = $667;
           }
           _memcpy(($p$0$i38$i$i|0),(551360|0),520)|0;
           HEAP32[$p$0$i38$i$i>>2] = 1;
           $679 = (($vi$idx4$val$i$i) + 3460|0);
           $680 = HEAP32[$679>>2]|0;
           $681 = ($680|0)==(0);
           if (!($681)) {
            $682 = (($p$0$i38$i$i) + 500|0);
            HEAP32[$682>>2] = 1;
            $683 = (($662) + ($668<<2)|0);
            $684 = HEAP32[$683>>2]|0;
            $685 = (($p$0$i38$i$i) + 504|0);
            HEAP32[$685>>2] = $684;
            $686 = (($664) + ($668<<2)|0);
            $687 = HEAP32[$686>>2]|0;
            $688 = (($p$0$i38$i$i) + 508|0);
            HEAP32[$688>>2] = $687;
            $689 = (($665) + ($668<<3)|0);
            $690 = +HEAPF64[$689>>3];
            $691 = (($p$0$i38$i$i) + 512|0);
            HEAPF64[$691>>3] = $690;
           }
           $692 = +HEAPF64[$144>>3];
           $693 = HEAP32[$661>>2]|0;
           $694 = HEAP32[$663>>2]|0;
           $695 = HEAP32[$602>>2]|0;
           $vi$idx3$val$i$i = HEAP32[$80>>2]|0;
           $696 = (($vi$idx3$val$i$i) + 2864|0);
           $697 = HEAP32[$696>>2]|0;
           $698 = (~~(($692)));
           $699 = (($vi$idx3$val$i$i) + 28|0);
           $700 = HEAP32[$699>>2]|0;
           $701 = ($700|0)>(3);
           if (!($701)) {
            HEAP32[$699>>2] = 4;
           }
           $702 = ($697|0)==(0|0);
           if ($702) {
            $703 = (_malloc(520)|0);
            $704 = ($703|0)==(0|0);
            do {
             if (!($704)) {
              $705 = (($703) + -4|0);
              $706 = HEAP32[$705>>2]|0;
              $707 = $706 & 3;
              $708 = ($707|0)==(0);
              if ($708) {
               break;
              }
              _memset(($703|0),0,520)|0;
             }
            } while(0);
            HEAP32[$696>>2] = $703;
            $p$0$i40$i$i = $703;
           } else {
            $p$0$i40$i$i = $697;
           }
           _memcpy(($p$0$i40$i$i|0),(551360|0),520)|0;
           HEAP32[$p$0$i40$i$i>>2] = 1;
           $709 = (($vi$idx3$val$i$i) + 3460|0);
           $710 = HEAP32[$709>>2]|0;
           $711 = ($710|0)==(0);
           if ($711) {
            break;
           }
           $712 = (($p$0$i40$i$i) + 500|0);
           HEAP32[$712>>2] = 1;
           $713 = (($693) + ($698<<2)|0);
           $714 = HEAP32[$713>>2]|0;
           $715 = (($p$0$i40$i$i) + 504|0);
           HEAP32[$715>>2] = $714;
           $716 = (($694) + ($698<<2)|0);
           $717 = HEAP32[$716>>2]|0;
           $718 = (($p$0$i40$i$i) + 508|0);
           HEAP32[$718>>2] = $717;
           $719 = (($695) + ($698<<3)|0);
           $720 = +HEAPF64[$719>>3];
           $721 = (($p$0$i40$i$i) + 512|0);
           HEAPF64[$721>>3] = $720;
          }
         } while(0);
         $722 = (($191) + ($$$i$i<<5)|0);
         $723 = +HEAPF64[$722>>3];
         $724 = (($139) + 32|0);
         $725 = HEAP32[$724>>2]|0;
         $726 = (($139) + 36|0);
         $727 = HEAP32[$726>>2]|0;
         $728 = (($139) + 44|0);
         $729 = HEAP32[$728>>2]|0;
         $vi$idx10$val$i$i = HEAP32[$80>>2]|0;
         _vorbis_encode_tonemask_setup($vi$idx10$val$i$i,$723,0,$725,$727,$729);
         $730 = +HEAPF64[$195>>3];
         $731 = HEAP32[$724>>2]|0;
         $732 = HEAP32[$726>>2]|0;
         $733 = (($139) + 52|0);
         $734 = HEAP32[$733>>2]|0;
         $vi$idx9$val$i$i = HEAP32[$80>>2]|0;
         _vorbis_encode_tonemask_setup($vi$idx9$val$i$i,$730,1,$731,$732,$734);
         if (!($225)) {
          $735 = +HEAPF64[$199>>3];
          $736 = HEAP32[$724>>2]|0;
          $737 = HEAP32[$726>>2]|0;
          $738 = HEAP32[$733>>2]|0;
          $vi$idx8$val$i$i = HEAP32[$80>>2]|0;
          _vorbis_encode_tonemask_setup($vi$idx8$val$i$i,$735,2,$736,$737,$738);
          $739 = +HEAPF64[$203>>3];
          $740 = HEAP32[$724>>2]|0;
          $741 = HEAP32[$726>>2]|0;
          $742 = (($139) + 48|0);
          $743 = HEAP32[$742>>2]|0;
          $vi$idx7$val$i$i = HEAP32[$80>>2]|0;
          _vorbis_encode_tonemask_setup($vi$idx7$val$i$i,$739,3,$740,$741,$743);
         }
         $744 = ((($191) + ($$$i$i<<5)|0) + 24|0);
         $745 = +HEAPF64[$744>>3];
         $746 = (($139) + 80|0);
         $747 = HEAP32[$746>>2]|0;
         $748 = (($139) + 84|0);
         $749 = HEAP32[$748>>2]|0;
         $vi$idx14$val$i$i = HEAP32[$80>>2]|0;
         $750 = (~~(($745)));
         $751 = (+($750|0));
         $752 = $745 - $751;
         $753 = (($vi$idx14$val$i$i) + 2852|0);
         $754 = HEAP32[$753>>2]|0;
         $755 = (($749) + ($750<<3)|0);
         $756 = +HEAPF64[$755>>3];
         $757 = 1.0 - $752;
         $758 = $757 * $756;
         $759 = (($750) + 1)|0;
         $760 = (($749) + ($759<<3)|0);
         $761 = +HEAPF64[$760>>3];
         $762 = $752 * $761;
         $763 = $758 + $762;
         $764 = (~~(($763)));
         $765 = (+($764|0));
         $766 = $763 - $765;
         $767 = $766 == 0.0;
         $768 = ($764|0)>(0);
         $or$cond$i42$i$i = $767 & $768;
         $ds$0$i43$i$i = $or$cond$i42$i$i ? 1.0 : $766;
         $769 = $or$cond$i42$i$i << 31 >> 31;
         $is$0$i44$i$i = (($769) + ($764))|0;
         $770 = 1.0 - $ds$0$i43$i$i;
         $771 = (($is$0$i44$i$i) + 1)|0;
         $i$01$i$i$i = 0;
         while(1) {
          $772 = ((($747) + (($is$0$i44$i$i*160)|0)|0) + ($i$01$i$i$i<<2)|0);
          $773 = HEAP32[$772>>2]|0;
          $774 = (+($773|0));
          $775 = $770 * $774;
          $776 = ((($747) + (($771*160)|0)|0) + ($i$01$i$i$i<<2)|0);
          $777 = HEAP32[$776>>2]|0;
          $778 = (+($777|0));
          $779 = $ds$0$i43$i$i * $778;
          $780 = $775 + $779;
          $781 = $780;
          $782 = ((($754) + ($i$01$i$i$i<<2)|0) + 336|0);
          HEAPF32[$782>>2] = $781;
          $783 = (($i$01$i$i$i) + 1)|0;
          $exitcond$i45$i$i = ($783|0)==(40);
          if ($exitcond$i45$i$i) {
           break;
          } else {
           $i$01$i$i$i = $783;
          }
         }
         $784 = +HEAPF64[$198>>3];
         $785 = (~~(($784)));
         $786 = (+($785|0));
         $787 = $784 - $786;
         $788 = (($vi$idx14$val$i$i) + 2856|0);
         $789 = HEAP32[$788>>2]|0;
         $790 = (($749) + ($785<<3)|0);
         $791 = +HEAPF64[$790>>3];
         $792 = 1.0 - $787;
         $793 = $792 * $791;
         $794 = (($785) + 1)|0;
         $795 = (($749) + ($794<<3)|0);
         $796 = +HEAPF64[$795>>3];
         $797 = $787 * $796;
         $798 = $793 + $797;
         $799 = (~~(($798)));
         $800 = (+($799|0));
         $801 = $798 - $800;
         $802 = $801 == 0.0;
         $803 = ($799|0)>(0);
         $or$cond$i46$i$i = $802 & $803;
         $ds$0$i47$i$i = $or$cond$i46$i$i ? 1.0 : $801;
         $804 = $or$cond$i46$i$i << 31 >> 31;
         $is$0$i48$i$i = (($804) + ($799))|0;
         $805 = 1.0 - $ds$0$i47$i$i;
         $806 = (($is$0$i48$i$i) + 1)|0;
         $i$01$i49$i$i = 0;
         while(1) {
          $807 = ((($747) + (($is$0$i48$i$i*160)|0)|0) + ($i$01$i49$i$i<<2)|0);
          $808 = HEAP32[$807>>2]|0;
          $809 = (+($808|0));
          $810 = $805 * $809;
          $811 = ((($747) + (($806*160)|0)|0) + ($i$01$i49$i$i<<2)|0);
          $812 = HEAP32[$811>>2]|0;
          $813 = (+($812|0));
          $814 = $ds$0$i47$i$i * $813;
          $815 = $810 + $814;
          $816 = $815;
          $817 = ((($789) + ($i$01$i49$i$i<<2)|0) + 336|0);
          HEAPF32[$817>>2] = $816;
          $818 = (($i$01$i49$i$i) + 1)|0;
          $exitcond$i50$i$i = ($818|0)==(40);
          if ($exitcond$i50$i$i) {
           break;
          } else {
           $i$01$i49$i$i = $818;
          }
         }
         if (!($225)) {
          $819 = +HEAPF64[$202>>3];
          $820 = (($139) + 88|0);
          $821 = HEAP32[$820>>2]|0;
          $822 = (~~(($819)));
          $823 = (+($822|0));
          $824 = $819 - $823;
          $825 = (($vi$idx14$val$i$i) + 2860|0);
          $826 = HEAP32[$825>>2]|0;
          $827 = (($821) + ($822<<3)|0);
          $828 = +HEAPF64[$827>>3];
          $829 = 1.0 - $824;
          $830 = $829 * $828;
          $831 = (($822) + 1)|0;
          $832 = (($821) + ($831<<3)|0);
          $833 = +HEAPF64[$832>>3];
          $834 = $824 * $833;
          $835 = $830 + $834;
          $836 = (~~(($835)));
          $837 = (+($836|0));
          $838 = $835 - $837;
          $839 = $838 == 0.0;
          $840 = ($836|0)>(0);
          $or$cond$i52$i$i = $839 & $840;
          $ds$0$i53$i$i = $or$cond$i52$i$i ? 1.0 : $838;
          $841 = $or$cond$i52$i$i << 31 >> 31;
          $is$0$i54$i$i = (($841) + ($836))|0;
          $842 = 1.0 - $ds$0$i53$i$i;
          $843 = (($is$0$i54$i$i) + 1)|0;
          $i$01$i55$i$i = 0;
          while(1) {
           $844 = ((($747) + (($is$0$i54$i$i*160)|0)|0) + ($i$01$i55$i$i<<2)|0);
           $845 = HEAP32[$844>>2]|0;
           $846 = (+($845|0));
           $847 = $842 * $846;
           $848 = ((($747) + (($843*160)|0)|0) + ($i$01$i55$i$i<<2)|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = (+($849|0));
           $851 = $ds$0$i53$i$i * $850;
           $852 = $847 + $851;
           $853 = $852;
           $854 = ((($826) + ($i$01$i55$i$i<<2)|0) + 336|0);
           HEAPF32[$854>>2] = $853;
           $855 = (($i$01$i55$i$i) + 1)|0;
           $exitcond$i56$i$i = ($855|0)==(40);
           if ($exitcond$i56$i$i) {
            break;
           } else {
            $i$01$i55$i$i = $855;
           }
          }
          $856 = +HEAPF64[$206>>3];
          $857 = (~~(($856)));
          $858 = (+($857|0));
          $859 = $856 - $858;
          $860 = (($vi$idx14$val$i$i) + 2864|0);
          $861 = HEAP32[$860>>2]|0;
          $862 = (($821) + ($857<<3)|0);
          $863 = +HEAPF64[$862>>3];
          $864 = 1.0 - $859;
          $865 = $864 * $863;
          $866 = (($857) + 1)|0;
          $867 = (($821) + ($866<<3)|0);
          $868 = +HEAPF64[$867>>3];
          $869 = $859 * $868;
          $870 = $865 + $869;
          $871 = (~~(($870)));
          $872 = (+($871|0));
          $873 = $870 - $872;
          $874 = $873 == 0.0;
          $875 = ($871|0)>(0);
          $or$cond$i58$i$i = $874 & $875;
          $ds$0$i59$i$i = $or$cond$i58$i$i ? 1.0 : $873;
          $876 = $or$cond$i58$i$i << 31 >> 31;
          $is$0$i60$i$i = (($876) + ($871))|0;
          $877 = 1.0 - $ds$0$i59$i$i;
          $878 = (($is$0$i60$i$i) + 1)|0;
          $i$01$i61$i$i = 0;
          while(1) {
           $879 = ((($747) + (($is$0$i60$i$i*160)|0)|0) + ($i$01$i61$i$i<<2)|0);
           $880 = HEAP32[$879>>2]|0;
           $881 = (+($880|0));
           $882 = $877 * $881;
           $883 = ((($747) + (($878*160)|0)|0) + ($i$01$i61$i$i<<2)|0);
           $884 = HEAP32[$883>>2]|0;
           $885 = (+($884|0));
           $886 = $ds$0$i59$i$i * $885;
           $887 = $882 + $886;
           $888 = $887;
           $889 = ((($861) + ($i$01$i61$i$i<<2)|0) + 336|0);
           HEAPF32[$889>>2] = $888;
           $890 = (($i$01$i61$i$i) + 1)|0;
           $exitcond$i62$i$i = ($890|0)==(40);
           if ($exitcond$i62$i$i) {
            break;
           } else {
            $i$01$i61$i$i = $890;
           }
          }
         }
         $891 = ((($191) + ($$$i$i<<5)|0) + 8|0);
         $892 = +HEAPF64[$891>>3];
         $893 = (($139) + 40|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = (~~(($892)));
         $896 = (+($895|0));
         $897 = $892 - $896;
         $898 = (($894) + ($895<<2)|0);
         $899 = HEAP32[$898>>2]|0;
         $900 = (+($899|0));
         $901 = 1.0 - $897;
         $902 = $901 * $900;
         $903 = (($895) + 1)|0;
         $904 = (($894) + ($903<<2)|0);
         $905 = HEAP32[$904>>2]|0;
         $906 = (+($905|0));
         $907 = $897 * $906;
         $908 = $902 + $907;
         $909 = $908;
         $910 = (($754) + 32|0);
         HEAPF32[$910>>2] = $909;
         $911 = +HEAPF64[$196>>3];
         $912 = (~~(($911)));
         $913 = (+($912|0));
         $914 = $911 - $913;
         $915 = (($894) + ($912<<2)|0);
         $916 = HEAP32[$915>>2]|0;
         $917 = (+($916|0));
         $918 = 1.0 - $914;
         $919 = $918 * $917;
         $920 = (($912) + 1)|0;
         $921 = (($894) + ($920<<2)|0);
         $922 = HEAP32[$921>>2]|0;
         $923 = (+($922|0));
         $924 = $914 * $923;
         $925 = $919 + $924;
         $926 = $925;
         $927 = (($789) + 32|0);
         HEAPF32[$927>>2] = $926;
         if (!($225)) {
          $928 = +HEAPF64[$200>>3];
          $929 = (~~(($928)));
          $930 = (+($929|0));
          $931 = $928 - $930;
          $932 = (($vi$idx14$val$i$i) + 2860|0);
          $933 = HEAP32[$932>>2]|0;
          $934 = (($894) + ($929<<2)|0);
          $935 = HEAP32[$934>>2]|0;
          $936 = (+($935|0));
          $937 = 1.0 - $931;
          $938 = $937 * $936;
          $939 = (($929) + 1)|0;
          $940 = (($894) + ($939<<2)|0);
          $941 = HEAP32[$940>>2]|0;
          $942 = (+($941|0));
          $943 = $931 * $942;
          $944 = $938 + $943;
          $945 = $944;
          $946 = (($933) + 32|0);
          HEAPF32[$946>>2] = $945;
          $947 = +HEAPF64[$204>>3];
          $948 = (~~(($947)));
          $949 = (+($948|0));
          $950 = $947 - $949;
          $951 = (($vi$idx14$val$i$i) + 2864|0);
          $952 = HEAP32[$951>>2]|0;
          $953 = (($894) + ($948<<2)|0);
          $954 = HEAP32[$953>>2]|0;
          $955 = (+($954|0));
          $956 = 1.0 - $950;
          $957 = $956 * $955;
          $958 = (($948) + 1)|0;
          $959 = (($894) + ($958<<2)|0);
          $960 = HEAP32[$959>>2]|0;
          $961 = (+($960|0));
          $962 = $950 * $961;
          $963 = $957 + $962;
          $964 = $963;
          $965 = (($952) + 32|0);
          HEAPF32[$965>>2] = $964;
         }
         $966 = ((($191) + ($$$i$i<<5)|0) + 16|0);
         $967 = +HEAPF64[$966>>3];
         $968 = (($139) + 76|0);
         $969 = HEAP32[$968>>2]|0;
         $970 = (($139) + 60|0);
         $971 = HEAP32[$970>>2]|0;
         $972 = (($139) + 56|0);
         $973 = HEAP32[$972>>2]|0;
         if ($212) {
          $976 = 0.0;
         } else {
          $974 = (($137) + 3408|0);
          $975 = +HEAPF64[$974>>3];
          $976 = $975;
         }
         _vorbis_encode_noisebias_setup($vi$idx14$val$i$i,$967,0,$969,$971,$973,$976);
         $977 = +HEAPF64[$197>>3];
         $978 = HEAP32[$968>>2]|0;
         $979 = (($139) + 64|0);
         $980 = HEAP32[$979>>2]|0;
         $981 = HEAP32[$972>>2]|0;
         $vi$idx21$val$i$i = HEAP32[$80>>2]|0;
         _vorbis_encode_noisebias_setup($vi$idx21$val$i$i,$977,1,$978,$980,$981,0.0);
         if ($225) {
          $vi$idx24$val$i$i = HEAP32[$80>>2]|0;
          $1014 = (($vi$idx24$val$i$i) + 2852|0);
          $1015 = HEAP32[$1014>>2]|0;
          $1016 = (($vi$idx24$val$i$i) + 3496|0);
          $1017 = +HEAPF64[$1016>>3];
          $1018 = $1017;
          $1019 = (($1015) + 4|0);
          HEAPF32[$1019>>2] = $1018;
          $1020 = (($vi$idx24$val$i$i) + 3504|0);
          $1021 = +HEAPF64[$1020>>3];
          $1022 = $1021;
          $1023 = (($1015) + 8|0);
          HEAPF32[$1023>>2] = $1022;
          $1024 = (($vi$idx24$val$i$i) + 2856|0);
          $1025 = HEAP32[$1024>>2]|0;
          $1026 = (($1025) + 4|0);
          HEAPF32[$1026>>2] = $1018;
          $1027 = (($1025) + 8|0);
          HEAPF32[$1027>>2] = $1022;
          $1037 = $vi$idx24$val$i$i;
         } else {
          $982 = +HEAPF64[$201>>3];
          $983 = HEAP32[$968>>2]|0;
          $984 = (($139) + 68|0);
          $985 = HEAP32[$984>>2]|0;
          $986 = HEAP32[$972>>2]|0;
          $vi$idx20$val$i$i = HEAP32[$80>>2]|0;
          _vorbis_encode_noisebias_setup($vi$idx20$val$i$i,$982,2,$983,$985,$986,0.0);
          $987 = +HEAPF64[$205>>3];
          $988 = HEAP32[$968>>2]|0;
          $989 = (($139) + 72|0);
          $990 = HEAP32[$989>>2]|0;
          $991 = HEAP32[$972>>2]|0;
          $vi$idx19$val$i$i = HEAP32[$80>>2]|0;
          _vorbis_encode_noisebias_setup($vi$idx19$val$i$i,$987,3,$988,$990,$991,0.0);
          $vi$idx28$val$i$i = HEAP32[$80>>2]|0;
          $992 = (($vi$idx28$val$i$i) + 2852|0);
          $993 = HEAP32[$992>>2]|0;
          $994 = (($vi$idx28$val$i$i) + 3496|0);
          $995 = +HEAPF64[$994>>3];
          $996 = $995;
          $997 = (($993) + 4|0);
          HEAPF32[$997>>2] = $996;
          $998 = (($vi$idx28$val$i$i) + 3504|0);
          $999 = +HEAPF64[$998>>3];
          $1000 = $999;
          $1001 = (($993) + 8|0);
          HEAPF32[$1001>>2] = $1000;
          $1002 = (($vi$idx28$val$i$i) + 2856|0);
          $1003 = HEAP32[$1002>>2]|0;
          $1004 = (($1003) + 4|0);
          HEAPF32[$1004>>2] = $996;
          $1005 = (($1003) + 8|0);
          HEAPF32[$1005>>2] = $1000;
          $1006 = (($vi$idx28$val$i$i) + 2860|0);
          $1007 = HEAP32[$1006>>2]|0;
          $1008 = (($1007) + 4|0);
          HEAPF32[$1008>>2] = $996;
          $1009 = (($1007) + 8|0);
          HEAPF32[$1009>>2] = $1000;
          $1010 = (($vi$idx28$val$i$i) + 2864|0);
          $1011 = HEAP32[$1010>>2]|0;
          $1012 = (($1011) + 4|0);
          HEAPF32[$1012>>2] = $996;
          $1013 = (($1011) + 8|0);
          HEAPF32[$1013>>2] = $1000;
          $1037 = $vi$idx28$val$i$i;
         }
         $1028 = +HEAPF64[$144>>3];
         $1029 = (($139) + 152|0);
         $1030 = HEAP32[$1029>>2]|0;
         $1031 = (~~(($1028)));
         $1032 = (($1030) + ($1031<<3)|0);
         $1033 = HEAP32[$1032>>2]|0;
         $1034 = ((($1030) + ($1031<<3)|0) + 4|0);
         $1035 = HEAP32[$1034>>2]|0;
         $1036 = HEAP32[$1037>>2]|0;
         $1038 = (($1037) + 4|0);
         $1039 = HEAP32[$1038>>2]|0;
         $1040 = ($1036|0)==($1039|0);
         $$$i$i$i = $1040 ? 1 : 2;
         $1041 = (($1037) + 544|0);
         $1042 = (($1037) + 32|0);
         $1043 = (($1037) + 8|0);
         $1044 = (($1037) + 288|0);
         $1045 = (($1037) + 12|0);
         $i$014$i$i$i = 0;
         while(1) {
          $1046 = (_malloc(3208)|0);
          $1047 = ($1046|0)==(0|0);
          do {
           if (!($1047)) {
            $1048 = (($1046) + -4|0);
            $1049 = HEAP32[$1048>>2]|0;
            $1050 = $1049 & 3;
            $1051 = ($1050|0)==(0);
            if ($1051) {
             break;
            }
            _memset(($1046|0),0,3208)|0;
           }
          } while(0);
          $1052 = (($1041) + ($i$014$i$i$i<<2)|0);
          HEAP32[$1052>>2] = $1046;
          $1053 = (_malloc(16)|0);
          $1054 = ($1053|0)==(0|0);
          do {
           if (!($1054)) {
            $1055 = (($1053) + -4|0);
            $1056 = HEAP32[$1055>>2]|0;
            $1057 = $1056 & 3;
            $1058 = ($1057|0)==(0);
            if ($1058) {
             break;
            }
            dest=$1053+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           }
          } while(0);
          $1059 = (($1042) + ($i$014$i$i$i<<2)|0);
          HEAP32[$1059>>2] = $1053;
          $1060 = (551328 + ($i$014$i$i$i<<4)|0);
          ;HEAP32[$1053+0>>2]=HEAP32[$1060+0>>2]|0;HEAP32[$1053+4>>2]=HEAP32[$1060+4>>2]|0;HEAP32[$1053+8>>2]=HEAP32[$1060+8>>2]|0;HEAP32[$1053+12>>2]=HEAP32[$1060+12>>2]|0;
          $1061 = HEAP32[$1043>>2]|0;
          $1062 = ($i$014$i$i$i|0)<($1061|0);
          if (!($1062)) {
           $1063 = (($i$014$i$i$i) + 1)|0;
           HEAP32[$1043>>2] = $1063;
          }
          $1064 = (($1044) + ($i$014$i$i$i<<2)|0);
          HEAP32[$1064>>2] = 0;
          $1065 = HEAP32[$1052>>2]|0;
          $1066 = (($1033) + (($i$014$i$i$i*3208)|0)|0);
          _memcpy(($1065|0),($1066|0),3208)|0;
          $1067 = HEAP32[$1045>>2]|0;
          $1068 = ($i$014$i$i$i|0)<($1067|0);
          if (!($1068)) {
           $1069 = (($i$014$i$i$i) + 1)|0;
           HEAP32[$1045>>2] = $1069;
          }
          $1070 = HEAP32[$1066>>2]|0;
          $1071 = ($1070|0)>(0);
          if ($1071) {
           $j$013$i$i$i = 0;
           while(1) {
            $1072 = (((($1033) + (($i$014$i$i$i*3208)|0)|0) + ($j$013$i$i$i<<2)|0) + 1092|0);
            $1073 = HEAP32[$1072>>2]|0;
            $1074 = HEAP32[$80>>2]|0;
            $1075 = (_malloc(2840)|0);
            $1076 = (($1074) + 1568|0);
            $1077 = (($1076) + ($1073<<2)|0);
            HEAP32[$1077>>2] = $1075;
            $1078 = ((($1035) + ($1073<<5)|0) + 12|0);
            $1079 = HEAP32[$1078>>2]|0;
            _memcpy(($1075|0),($1079|0),2840)|0;
            $1080 = (($1074) + 20|0);
            $1081 = HEAP32[$1080>>2]|0;
            $1082 = ($1081|0)>($1073|0);
            if (!($1082)) {
             $1083 = (($1073) + 1)|0;
             HEAP32[$1080>>2] = $1083;
            }
            $1084 = ((($1035) + ($1073<<5)|0) + 8|0);
            $1085 = HEAP32[$1084>>2]|0;
            $1086 = (($1075) + 8|0);
            HEAP32[$1086>>2] = $1085;
            $1087 = (($1035) + ($1073<<5)|0);
            $1088 = HEAP32[$1087>>2]|0;
            $1089 = (($1074) + 1312|0);
            $1090 = (($1089) + ($1073<<2)|0);
            HEAP32[$1090>>2] = $1088;
            $1091 = (($1074) + 3420|0);
            $1092 = HEAP32[$1091>>2]|0;
            $1093 = ($1092|0)==(0);
            $1094 = (($1075) + 12|0);
            $1095 = HEAP32[$1094>>2]|0;
            $1096 = ($1095|0)>(0);
            do {
             if ($1093) {
              if ($1096) {
               $1100 = ((($1035) + ($1073<<5)|0) + 24|0);
               $1101 = HEAP32[$1100>>2]|0;
               $1102 = (($1075) + 24|0);
               $i$242$i$i$i$i = 0;
               while(1) {
                $1149 = (($1102) + ($i$242$i$i$i$i<<2)|0);
                $1150 = (($1101) + ($i$242$i$i$i$i<<4)|0);
                $1151 = HEAP32[$1150>>2]|0;
                $1152 = ($1151|0)==(0|0);
                if (!($1152)) {
                 $1153 = HEAP32[$1149>>2]|0;
                 $1154 = $1153 | 1;
                 HEAP32[$1149>>2] = $1154;
                }
                $1155 = ((($1101) + ($i$242$i$i$i$i<<4)|0) + 4|0);
                $1156 = HEAP32[$1155>>2]|0;
                $1157 = ($1156|0)==(0|0);
                if (!($1157)) {
                 $1323 = HEAP32[$1149>>2]|0;
                 $1324 = $1323 | 2;
                 HEAP32[$1149>>2] = $1324;
                }
                $1325 = ((($1101) + ($i$242$i$i$i$i<<4)|0) + 8|0);
                $1326 = HEAP32[$1325>>2]|0;
                $1327 = ($1326|0)==(0|0);
                if (!($1327)) {
                 $1328 = HEAP32[$1149>>2]|0;
                 $1329 = $1328 | 4;
                 HEAP32[$1149>>2] = $1329;
                }
                $1330 = ((($1101) + ($i$242$i$i$i$i<<4)|0) + 12|0);
                $1331 = HEAP32[$1330>>2]|0;
                $1332 = ($1331|0)==(0|0);
                if (!($1332)) {
                 $1333 = HEAP32[$1149>>2]|0;
                 $1334 = $1333 | 8;
                 HEAP32[$1149>>2] = $1334;
                }
                $1335 = (($i$242$i$i$i$i) + 1)|0;
                $1336 = HEAP32[$1094>>2]|0;
                $1337 = ($1335|0)<($1336|0);
                if ($1337) {
                 $i$242$i$i$i$i = $1335;
                } else {
                 $2735 = $1336;
                 break;
                }
               }
              } else {
               $2735 = $1095;
              }
              $1158 = ((($1035) + ($1073<<5)|0) + 16|0);
              $1159 = HEAP32[$1158>>2]|0;
              $1160 = (($1074) + 24|0);
              $1161 = HEAP32[$1160>>2]|0;
              $1162 = ($1161|0)>(0);
              L306: do {
               if ($1162) {
                $i$05$i8$i$i$i$i = 0;
                while(1) {
                 $1165 = ((($1074) + ($i$05$i8$i$i$i$i<<2)|0) + 1824|0);
                 $1166 = HEAP32[$1165>>2]|0;
                 $1167 = ($1166|0)==($1159|0);
                 $1163 = (($i$05$i8$i$i$i$i) + 1)|0;
                 if ($1167) {
                  $$0$i11$i$i$i$i = $i$05$i8$i$i$i$i;$1172 = $2735;
                  break L306;
                 }
                 $1164 = ($1163|0)<($1161|0);
                 if ($1164) {
                  $i$05$i8$i$i$i$i = $1163;
                 } else {
                  label = 193;
                  break;
                 }
                }
               } else {
                label = 193;
               }
              } while(0);
              if ((label|0) == 193) {
               label = 0;
               $1168 = (($1161) + 1)|0;
               HEAP32[$1160>>2] = $1168;
               $$pre$i$i$i$i = HEAP32[$1094>>2]|0;
               $$0$i11$i$i$i$i = $1161;$1172 = $$pre$i$i$i$i;
              }
              $1169 = (($1075) + 20|0);
              HEAP32[$1169>>2] = $$0$i11$i$i$i$i;
              $1170 = (($1074) + 1824|0);
              $1171 = (($1170) + ($$0$i11$i$i$i$i<<2)|0);
              HEAP32[$1171>>2] = $1159;
              $1173 = ($1172|0)>(0);
              if (!($1173)) {
               break;
              }
              $1174 = ((($1035) + ($1073<<5)|0) + 24|0);
              $1175 = (($1075) + 280|0);
              $booklist$336$i$i$i$i = 0;$i$337$i$i$i$i = 0;
              while(1) {
               $1176 = HEAP32[$1174>>2]|0;
               $1177 = (($1176) + ($i$337$i$i$i$i<<4)|0);
               $1178 = HEAP32[$1177>>2]|0;
               $1179 = ($1178|0)==(0|0);
               if ($1179) {
                $1192 = $1176;$booklist$5$i$i$i$i = $booklist$336$i$i$i$i;
               } else {
                $1180 = HEAP32[$1160>>2]|0;
                $1181 = ($1180|0)>(0);
                L318: do {
                 if ($1181) {
                  $i$05$i3$i$i$i$i = 0;
                  while(1) {
                   $1184 = ((($1074) + ($i$05$i3$i$i$i$i<<2)|0) + 1824|0);
                   $1185 = HEAP32[$1184>>2]|0;
                   $1186 = ($1185|0)==($1178|0);
                   $1182 = (($i$05$i3$i$i$i$i) + 1)|0;
                   if ($1186) {
                    $$0$i6$i$i$i$i = $i$05$i3$i$i$i$i;
                    break L318;
                   }
                   $1183 = ($1182|0)<($1180|0);
                   if ($1183) {
                    $i$05$i3$i$i$i$i = $1182;
                   } else {
                    label = 200;
                    break;
                   }
                  }
                 } else {
                  label = 200;
                 }
                } while(0);
                if ((label|0) == 200) {
                 label = 0;
                 $1187 = (($1180) + 1)|0;
                 HEAP32[$1160>>2] = $1187;
                 $$0$i6$i$i$i$i = $1180;
                }
                $1188 = (($booklist$336$i$i$i$i) + 1)|0;
                $1189 = (($1175) + ($booklist$336$i$i$i$i<<2)|0);
                HEAP32[$1189>>2] = $$0$i6$i$i$i$i;
                $1190 = (($1170) + ($$0$i6$i$i$i$i<<2)|0);
                HEAP32[$1190>>2] = $1178;
                $$pre64$i$i$i$i = HEAP32[$1174>>2]|0;
                $1192 = $$pre64$i$i$i$i;$booklist$5$i$i$i$i = $1188;
               }
               $1191 = ((($1192) + ($i$337$i$i$i$i<<4)|0) + 4|0);
               $1193 = HEAP32[$1191>>2]|0;
               $1194 = ($1193|0)==(0|0);
               if ($1194) {
                $1291 = $1192;$booklist$5$1$i$i$i$i = $booklist$5$i$i$i$i;
               } else {
                $1279 = HEAP32[$1160>>2]|0;
                $1280 = ($1279|0)>(0);
                L328: do {
                 if ($1280) {
                  $i$05$i3$1$i$i$i$i = 0;
                  while(1) {
                   $1281 = ((($1074) + ($i$05$i3$1$i$i$i$i<<2)|0) + 1824|0);
                   $1282 = HEAP32[$1281>>2]|0;
                   $1283 = ($1282|0)==($1193|0);
                   $1284 = (($i$05$i3$1$i$i$i$i) + 1)|0;
                   if ($1283) {
                    $$0$i6$1$i$i$i$i = $i$05$i3$1$i$i$i$i;
                    break L328;
                   }
                   $1285 = ($1284|0)<($1279|0);
                   if ($1285) {
                    $i$05$i3$1$i$i$i$i = $1284;
                   } else {
                    label = 226;
                    break;
                   }
                  }
                 } else {
                  label = 226;
                 }
                } while(0);
                if ((label|0) == 226) {
                 label = 0;
                 $1286 = (($1279) + 1)|0;
                 HEAP32[$1160>>2] = $1286;
                 $$0$i6$1$i$i$i$i = $1279;
                }
                $1287 = (($booklist$5$i$i$i$i) + 1)|0;
                $1288 = (($1175) + ($booklist$5$i$i$i$i<<2)|0);
                HEAP32[$1288>>2] = $$0$i6$1$i$i$i$i;
                $1289 = (($1170) + ($$0$i6$1$i$i$i$i<<2)|0);
                HEAP32[$1289>>2] = $1193;
                $$pre65$i$i$i$i = HEAP32[$1174>>2]|0;
                $1291 = $$pre65$i$i$i$i;$booklist$5$1$i$i$i$i = $1287;
               }
               $1290 = ((($1291) + ($i$337$i$i$i$i<<4)|0) + 8|0);
               $1292 = HEAP32[$1290>>2]|0;
               $1293 = ($1292|0)==(0|0);
               if ($1293) {
                $1306 = $1291;$booklist$5$2$i$i$i$i = $booklist$5$1$i$i$i$i;
               } else {
                $1294 = HEAP32[$1160>>2]|0;
                $1295 = ($1294|0)>(0);
                L338: do {
                 if ($1295) {
                  $i$05$i3$2$i$i$i$i = 0;
                  while(1) {
                   $1296 = ((($1074) + ($i$05$i3$2$i$i$i$i<<2)|0) + 1824|0);
                   $1297 = HEAP32[$1296>>2]|0;
                   $1298 = ($1297|0)==($1292|0);
                   $1299 = (($i$05$i3$2$i$i$i$i) + 1)|0;
                   if ($1298) {
                    $$0$i6$2$i$i$i$i = $i$05$i3$2$i$i$i$i;
                    break L338;
                   }
                   $1300 = ($1299|0)<($1294|0);
                   if ($1300) {
                    $i$05$i3$2$i$i$i$i = $1299;
                   } else {
                    label = 232;
                    break;
                   }
                  }
                 } else {
                  label = 232;
                 }
                } while(0);
                if ((label|0) == 232) {
                 label = 0;
                 $1301 = (($1294) + 1)|0;
                 HEAP32[$1160>>2] = $1301;
                 $$0$i6$2$i$i$i$i = $1294;
                }
                $1302 = (($booklist$5$1$i$i$i$i) + 1)|0;
                $1303 = (($1175) + ($booklist$5$1$i$i$i$i<<2)|0);
                HEAP32[$1303>>2] = $$0$i6$2$i$i$i$i;
                $1304 = (($1170) + ($$0$i6$2$i$i$i$i<<2)|0);
                HEAP32[$1304>>2] = $1292;
                $$pre66$i$i$i$i = HEAP32[$1174>>2]|0;
                $1306 = $$pre66$i$i$i$i;$booklist$5$2$i$i$i$i = $1302;
               }
               $1305 = ((($1306) + ($i$337$i$i$i$i<<4)|0) + 12|0);
               $1307 = HEAP32[$1305>>2]|0;
               $1308 = ($1307|0)==(0|0);
               if ($1308) {
                $booklist$5$3$i$i$i$i = $booklist$5$2$i$i$i$i;
               } else {
                $1309 = HEAP32[$1160>>2]|0;
                $1310 = ($1309|0)>(0);
                L348: do {
                 if ($1310) {
                  $i$05$i3$3$i$i$i$i = 0;
                  while(1) {
                   $1311 = ((($1074) + ($i$05$i3$3$i$i$i$i<<2)|0) + 1824|0);
                   $1312 = HEAP32[$1311>>2]|0;
                   $1313 = ($1312|0)==($1307|0);
                   $1314 = (($i$05$i3$3$i$i$i$i) + 1)|0;
                   if ($1313) {
                    $$0$i6$3$i$i$i$i = $i$05$i3$3$i$i$i$i;
                    break L348;
                   }
                   $1315 = ($1314|0)<($1309|0);
                   if ($1315) {
                    $i$05$i3$3$i$i$i$i = $1314;
                   } else {
                    label = 238;
                    break;
                   }
                  }
                 } else {
                  label = 238;
                 }
                } while(0);
                if ((label|0) == 238) {
                 label = 0;
                 $1316 = (($1309) + 1)|0;
                 HEAP32[$1160>>2] = $1316;
                 $$0$i6$3$i$i$i$i = $1309;
                }
                $1317 = (($booklist$5$2$i$i$i$i) + 1)|0;
                $1318 = (($1175) + ($booklist$5$2$i$i$i$i<<2)|0);
                HEAP32[$1318>>2] = $$0$i6$3$i$i$i$i;
                $1319 = (($1170) + ($$0$i6$3$i$i$i$i<<2)|0);
                HEAP32[$1319>>2] = $1307;
                $booklist$5$3$i$i$i$i = $1317;
               }
               $1320 = (($i$337$i$i$i$i) + 1)|0;
               $1321 = HEAP32[$1094>>2]|0;
               $1322 = ($1320|0)<($1321|0);
               if ($1322) {
                $booklist$336$i$i$i$i = $booklist$5$3$i$i$i$i;$i$337$i$i$i$i = $1320;
               } else {
                break;
               }
              }
             } else {
              if ($1096) {
               $1097 = ((($1035) + ($1073<<5)|0) + 28|0);
               $1098 = HEAP32[$1097>>2]|0;
               $1099 = (($1075) + 24|0);
               $i$057$i$i$i$i = 0;
               while(1) {
                $1103 = (($1099) + ($i$057$i$i$i$i<<2)|0);
                $1104 = (($1098) + ($i$057$i$i$i$i<<4)|0);
                $1105 = HEAP32[$1104>>2]|0;
                $1106 = ($1105|0)==(0|0);
                if (!($1106)) {
                 $1107 = HEAP32[$1103>>2]|0;
                 $1108 = $1107 | 1;
                 HEAP32[$1103>>2] = $1108;
                }
                $1109 = ((($1098) + ($i$057$i$i$i$i<<4)|0) + 4|0);
                $1110 = HEAP32[$1109>>2]|0;
                $1111 = ($1110|0)==(0|0);
                if (!($1111)) {
                 $1382 = HEAP32[$1103>>2]|0;
                 $1383 = $1382 | 2;
                 HEAP32[$1103>>2] = $1383;
                }
                $1384 = ((($1098) + ($i$057$i$i$i$i<<4)|0) + 8|0);
                $1385 = HEAP32[$1384>>2]|0;
                $1386 = ($1385|0)==(0|0);
                if (!($1386)) {
                 $1387 = HEAP32[$1103>>2]|0;
                 $1388 = $1387 | 4;
                 HEAP32[$1103>>2] = $1388;
                }
                $1389 = ((($1098) + ($i$057$i$i$i$i<<4)|0) + 12|0);
                $1390 = HEAP32[$1389>>2]|0;
                $1391 = ($1390|0)==(0|0);
                if (!($1391)) {
                 $1392 = HEAP32[$1103>>2]|0;
                 $1393 = $1392 | 8;
                 HEAP32[$1103>>2] = $1393;
                }
                $1394 = (($i$057$i$i$i$i) + 1)|0;
                $1395 = HEAP32[$1094>>2]|0;
                $1396 = ($1394|0)<($1395|0);
                if ($1396) {
                 $i$057$i$i$i$i = $1394;
                } else {
                 $2734 = $1395;
                 break;
                }
               }
              } else {
               $2734 = $1095;
              }
              $1112 = ((($1035) + ($1073<<5)|0) + 20|0);
              $1113 = HEAP32[$1112>>2]|0;
              $1114 = (($1074) + 24|0);
              $1115 = HEAP32[$1114>>2]|0;
              $1116 = ($1115|0)>(0);
              L238: do {
               if ($1116) {
                $i$05$i$i$i$i$i = 0;
                while(1) {
                 $1119 = ((($1074) + ($i$05$i$i$i$i$i<<2)|0) + 1824|0);
                 $1120 = HEAP32[$1119>>2]|0;
                 $1121 = ($1120|0)==($1113|0);
                 $1117 = (($i$05$i$i$i$i$i) + 1)|0;
                 if ($1121) {
                  $$0$i$i$i$i$i = $i$05$i$i$i$i$i;$1126 = $2734;
                  break L238;
                 }
                 $1118 = ($1117|0)<($1115|0);
                 if ($1118) {
                  $i$05$i$i$i$i$i = $1117;
                 } else {
                  label = 177;
                  break;
                 }
                }
               } else {
                label = 177;
               }
              } while(0);
              if ((label|0) == 177) {
               label = 0;
               $1122 = (($1115) + 1)|0;
               HEAP32[$1114>>2] = $1122;
               $$pre67$i$i$i$i = HEAP32[$1094>>2]|0;
               $$0$i$i$i$i$i = $1115;$1126 = $$pre67$i$i$i$i;
              }
              $1123 = (($1075) + 20|0);
              HEAP32[$1123>>2] = $$0$i$i$i$i$i;
              $1124 = (($1074) + 1824|0);
              $1125 = (($1124) + ($$0$i$i$i$i$i<<2)|0);
              HEAP32[$1125>>2] = $1113;
              $1127 = ($1126|0)>(0);
              if (!($1127)) {
               break;
              }
              $1128 = ((($1035) + ($1073<<5)|0) + 28|0);
              $1129 = (($1075) + 280|0);
              $booklist$050$i$i$i$i = 0;$i$151$i$i$i$i = 0;
              while(1) {
               $1130 = HEAP32[$1128>>2]|0;
               $1131 = (($1130) + ($i$151$i$i$i$i<<4)|0);
               $1132 = HEAP32[$1131>>2]|0;
               $1133 = ($1132|0)==(0|0);
               if ($1133) {
                $1146 = $1130;$booklist$2$i$i$i$i = $booklist$050$i$i$i$i;
               } else {
                $1134 = HEAP32[$1114>>2]|0;
                $1135 = ($1134|0)>(0);
                L250: do {
                 if ($1135) {
                  $i$05$i13$i$i$i$i = 0;
                  while(1) {
                   $1138 = ((($1074) + ($i$05$i13$i$i$i$i<<2)|0) + 1824|0);
                   $1139 = HEAP32[$1138>>2]|0;
                   $1140 = ($1139|0)==($1132|0);
                   $1136 = (($i$05$i13$i$i$i$i) + 1)|0;
                   if ($1140) {
                    $$0$i16$i$i$i$i = $i$05$i13$i$i$i$i;
                    break L250;
                   }
                   $1137 = ($1136|0)<($1134|0);
                   if ($1137) {
                    $i$05$i13$i$i$i$i = $1136;
                   } else {
                    label = 184;
                    break;
                   }
                  }
                 } else {
                  label = 184;
                 }
                } while(0);
                if ((label|0) == 184) {
                 label = 0;
                 $1141 = (($1134) + 1)|0;
                 HEAP32[$1114>>2] = $1141;
                 $$0$i16$i$i$i$i = $1134;
                }
                $1142 = (($booklist$050$i$i$i$i) + 1)|0;
                $1143 = (($1129) + ($booklist$050$i$i$i$i<<2)|0);
                HEAP32[$1143>>2] = $$0$i16$i$i$i$i;
                $1144 = (($1124) + ($$0$i16$i$i$i$i<<2)|0);
                HEAP32[$1144>>2] = $1132;
                $$pre68$i$i$i$i = HEAP32[$1128>>2]|0;
                $1146 = $$pre68$i$i$i$i;$booklist$2$i$i$i$i = $1142;
               }
               $1145 = ((($1146) + ($i$151$i$i$i$i<<4)|0) + 4|0);
               $1147 = HEAP32[$1145>>2]|0;
               $1148 = ($1147|0)==(0|0);
               if ($1148) {
                $1350 = $1146;$booklist$2$1$i$i$i$i = $booklist$2$i$i$i$i;
               } else {
                $1338 = HEAP32[$1114>>2]|0;
                $1339 = ($1338|0)>(0);
                L260: do {
                 if ($1339) {
                  $i$05$i13$1$i$i$i$i = 0;
                  while(1) {
                   $1340 = ((($1074) + ($i$05$i13$1$i$i$i$i<<2)|0) + 1824|0);
                   $1341 = HEAP32[$1340>>2]|0;
                   $1342 = ($1341|0)==($1147|0);
                   $1343 = (($i$05$i13$1$i$i$i$i) + 1)|0;
                   if ($1342) {
                    $$0$i16$1$i$i$i$i = $i$05$i13$1$i$i$i$i;
                    break L260;
                   }
                   $1344 = ($1343|0)<($1338|0);
                   if ($1344) {
                    $i$05$i13$1$i$i$i$i = $1343;
                   } else {
                    label = 250;
                    break;
                   }
                  }
                 } else {
                  label = 250;
                 }
                } while(0);
                if ((label|0) == 250) {
                 label = 0;
                 $1345 = (($1338) + 1)|0;
                 HEAP32[$1114>>2] = $1345;
                 $$0$i16$1$i$i$i$i = $1338;
                }
                $1346 = (($booklist$2$i$i$i$i) + 1)|0;
                $1347 = (($1129) + ($booklist$2$i$i$i$i<<2)|0);
                HEAP32[$1347>>2] = $$0$i16$1$i$i$i$i;
                $1348 = (($1124) + ($$0$i16$1$i$i$i$i<<2)|0);
                HEAP32[$1348>>2] = $1147;
                $$pre69$i$i$i$i = HEAP32[$1128>>2]|0;
                $1350 = $$pre69$i$i$i$i;$booklist$2$1$i$i$i$i = $1346;
               }
               $1349 = ((($1350) + ($i$151$i$i$i$i<<4)|0) + 8|0);
               $1351 = HEAP32[$1349>>2]|0;
               $1352 = ($1351|0)==(0|0);
               if ($1352) {
                $1365 = $1350;$booklist$2$2$i$i$i$i = $booklist$2$1$i$i$i$i;
               } else {
                $1353 = HEAP32[$1114>>2]|0;
                $1354 = ($1353|0)>(0);
                L270: do {
                 if ($1354) {
                  $i$05$i13$2$i$i$i$i = 0;
                  while(1) {
                   $1355 = ((($1074) + ($i$05$i13$2$i$i$i$i<<2)|0) + 1824|0);
                   $1356 = HEAP32[$1355>>2]|0;
                   $1357 = ($1356|0)==($1351|0);
                   $1358 = (($i$05$i13$2$i$i$i$i) + 1)|0;
                   if ($1357) {
                    $$0$i16$2$i$i$i$i = $i$05$i13$2$i$i$i$i;
                    break L270;
                   }
                   $1359 = ($1358|0)<($1353|0);
                   if ($1359) {
                    $i$05$i13$2$i$i$i$i = $1358;
                   } else {
                    label = 256;
                    break;
                   }
                  }
                 } else {
                  label = 256;
                 }
                } while(0);
                if ((label|0) == 256) {
                 label = 0;
                 $1360 = (($1353) + 1)|0;
                 HEAP32[$1114>>2] = $1360;
                 $$0$i16$2$i$i$i$i = $1353;
                }
                $1361 = (($booklist$2$1$i$i$i$i) + 1)|0;
                $1362 = (($1129) + ($booklist$2$1$i$i$i$i<<2)|0);
                HEAP32[$1362>>2] = $$0$i16$2$i$i$i$i;
                $1363 = (($1124) + ($$0$i16$2$i$i$i$i<<2)|0);
                HEAP32[$1363>>2] = $1351;
                $$pre70$i$i$i$i = HEAP32[$1128>>2]|0;
                $1365 = $$pre70$i$i$i$i;$booklist$2$2$i$i$i$i = $1361;
               }
               $1364 = ((($1365) + ($i$151$i$i$i$i<<4)|0) + 12|0);
               $1366 = HEAP32[$1364>>2]|0;
               $1367 = ($1366|0)==(0|0);
               if ($1367) {
                $booklist$2$3$i$i$i$i = $booklist$2$2$i$i$i$i;
               } else {
                $1368 = HEAP32[$1114>>2]|0;
                $1369 = ($1368|0)>(0);
                L280: do {
                 if ($1369) {
                  $i$05$i13$3$i$i$i$i = 0;
                  while(1) {
                   $1370 = ((($1074) + ($i$05$i13$3$i$i$i$i<<2)|0) + 1824|0);
                   $1371 = HEAP32[$1370>>2]|0;
                   $1372 = ($1371|0)==($1366|0);
                   $1373 = (($i$05$i13$3$i$i$i$i) + 1)|0;
                   if ($1372) {
                    $$0$i16$3$i$i$i$i = $i$05$i13$3$i$i$i$i;
                    break L280;
                   }
                   $1374 = ($1373|0)<($1368|0);
                   if ($1374) {
                    $i$05$i13$3$i$i$i$i = $1373;
                   } else {
                    label = 262;
                    break;
                   }
                  }
                 } else {
                  label = 262;
                 }
                } while(0);
                if ((label|0) == 262) {
                 label = 0;
                 $1375 = (($1368) + 1)|0;
                 HEAP32[$1114>>2] = $1375;
                 $$0$i16$3$i$i$i$i = $1368;
                }
                $1376 = (($booklist$2$2$i$i$i$i) + 1)|0;
                $1377 = (($1129) + ($booklist$2$2$i$i$i$i<<2)|0);
                HEAP32[$1377>>2] = $$0$i16$3$i$i$i$i;
                $1378 = (($1124) + ($$0$i16$3$i$i$i$i<<2)|0);
                HEAP32[$1378>>2] = $1366;
                $booklist$2$3$i$i$i$i = $1376;
               }
               $1379 = (($i$151$i$i$i$i) + 1)|0;
               $1380 = HEAP32[$1094>>2]|0;
               $1381 = ($1379|0)<($1380|0);
               if ($1381) {
                $booklist$050$i$i$i$i = $booklist$2$3$i$i$i$i;$i$151$i$i$i$i = $1379;
               } else {
                break;
               }
              }
             }
            } while(0);
            $1195 = (($1074) + 3480|0);
            $1196 = +HEAPF64[$1195>>3];
            $1197 = $1196 * 1000.0;
            $1198 = (($1074) + 1056|0);
            $1199 = (($1198) + ($i$014$i$i$i<<2)|0);
            $1200 = HEAP32[$1199>>2]|0;
            $1201 = HEAP32[$141>>2]|0;
            $1202 = (+($1201|0));
            $1203 = $1202 * 0.5;
            $1204 = (($1074) + ($i$014$i$i$i<<2)|0);
            $1205 = HEAP32[$1204>>2]|0;
            $1206 = $1205 >> 1;
            $1207 = $1197 > $1203;
            $freq$0$i$i$i$i = $1207 ? $1203 : $1197;
            $1208 = $freq$0$i$i$i$i / $1203;
            $1209 = (+($1206|0));
            $1210 = $1208 * $1209;
            $1211 = (~~(($1210)));
            $1212 = (($1200) + 1116|0);
            HEAP32[$1212>>2] = $1211;
            $1213 = ((($1035) + ($1073<<5)|0) + 4|0);
            $1214 = HEAP32[$1213>>2]|0;
            do {
             if ((($1214|0) == 2)) {
              $freq$2$i$i$i$i = 250.0;
             } else if ((($1214|0) == 1)) {
              $1215 = HEAP32[$1091>>2]|0;
              $1216 = ($1215|0)==(0);
              $1217 = (($1074) + 2996|0);
              $1218 = (($1074) + 2968|0);
              $freq$1$in$in$in$in$i$i$i$i = $1216 ? $1218 : $1217;
              $freq$1$in$in$i$i$i$i = HEAP32[$freq$1$in$in$in$in$i$i$i$i>>2]|0;
              $freq$1$in$i$i$i$i = (+($freq$1$in$in$i$i$i$i|0));
              $freq$1$i$i$i$i = $freq$1$in$i$i$i$i * 1000.0;
              $1219 = $freq$1$i$i$i$i > $1203;
              if (!($1219)) {
               $freq$2$i$i$i$i = $freq$1$i$i$i$i;
               break;
              }
              $freq$2$i$i$i$i = $1203;
             } else {
              $freq$2$i$i$i$i = $freq$0$i$i$i$i;
             }
            } while(0);
            $1220 = HEAP32[$1090>>2]|0;
            $1221 = ($1220|0)==(2);
            do {
             if ($1221) {
              $1222 = (($1074) + 12|0);
              $1223 = HEAP32[$1222>>2]|0;
              $1224 = ($1223|0)>(0);
              if ($1224) {
               $1225 = (($1074) + 544|0);
               $i$427$i$i$i$i = 0;
               while(1) {
                $1226 = (($1225) + ($i$427$i$i$i$i<<2)|0);
                $1227 = HEAP32[$1226>>2]|0;
                $1228 = HEAP32[$1227>>2]|0;
                $1229 = ($1228|0)>(0);
                if ($1229) {
                 $1230 = (($1227) + 1092|0);
                 $1231 = (($1227) + 4|0);
                 $j$021$i$i$i$i = 0;
                 while(1) {
                  $1232 = (($1230) + ($j$021$i$i$i$i<<2)|0);
                  $1233 = HEAP32[$1232>>2]|0;
                  $1234 = ($1233|0)==($1073|0);
                  do {
                   if ($1234) {
                    $1235 = HEAP32[$140>>2]|0;
                    $1236 = ($1235|0)>(0);
                    if ($1236) {
                     $ch$219$i$i$i$i = 0;$k2$018$i$i$i$i = 0;
                    } else {
                     $ch$4$i$i$i$i = 0;
                     break;
                    }
                    while(1) {
                     $1237 = (($1231) + ($k2$018$i$i$i$i<<2)|0);
                     $1238 = HEAP32[$1237>>2]|0;
                     $1239 = ($1238|0)==($j$021$i$i$i$i|0);
                     $1240 = $1239&1;
                     $$ch$2$i$i$i$i = (($1240) + ($ch$219$i$i$i$i))|0;
                     $1241 = (($k2$018$i$i$i$i) + 1)|0;
                     $exitcond$i$i$i = ($1241|0)==($1235|0);
                     if ($exitcond$i$i$i) {
                      $ch$4$i$i$i$i = $$ch$2$i$i$i$i;
                      break;
                     } else {
                      $ch$219$i$i$i$i = $$ch$2$i$i$i$i;$k2$018$i$i$i$i = $1241;
                     }
                    }
                   } else {
                    $ch$4$i$i$i$i = 0;
                   }
                  } while(0);
                  $1242 = (($j$021$i$i$i$i) + 1)|0;
                  $1243 = ($1242|0)<($1228|0);
                  $1244 = ($ch$4$i$i$i$i|0)==(0);
                  $or$cond2$i$i$i$i = $1243 & $1244;
                  if ($or$cond2$i$i$i$i) {
                   $j$021$i$i$i$i = $1242;
                  } else {
                   $ch$1$lcssa$i$i$i$i = $ch$4$i$i$i$i;
                   break;
                  }
                 }
                } else {
                 $ch$1$lcssa$i$i$i$i = 0;
                }
                $1245 = (($i$427$i$i$i$i) + 1)|0;
                $1246 = ($1245|0)<($1223|0);
                $1247 = ($ch$1$lcssa$i$i$i$i|0)==(0);
                $or$cond$i$i$i$i = $1246 & $1247;
                if ($or$cond$i$i$i$i) {
                 $i$427$i$i$i$i = $1245;
                } else {
                 $ch$0$lcssa$i$i$i$i = $ch$1$lcssa$i$i$i$i;
                 break;
                }
               }
              } else {
               $ch$0$lcssa$i$i$i$i = 0;
              }
              $1248 = $freq$2$i$i$i$i / $1203;
              $1249 = $1209 * $1248;
              $1250 = (+($ch$0$lcssa$i$i$i$i|0));
              $1251 = $1250 * $1249;
              $1252 = HEAP32[$1086>>2]|0;
              $1253 = (+($1252|0));
              $1254 = $1251 / $1253;
              $1255 = $1254 + 0.900000000000000022204;
              $1256 = (~~(($1255)));
              $1257 = Math_imul($1256, $1252)|0;
              $1258 = (($1075) + 4|0);
              HEAP32[$1258>>2] = $1257;
              $1259 = Math_imul($ch$0$lcssa$i$i$i$i, $1206)|0;
              $1260 = ($1257|0)>($1259|0);
              if (!($1260)) {
               $1275 = $1257;$1278 = $1252;
               break;
              }
              $1261 = (($1259|0) % ($1252|0))&-1;
              $1262 = (($1259) - ($1261))|0;
              HEAP32[$1258>>2] = $1262;
              $1275 = $1262;$1278 = $1252;
             } else {
              $1263 = $freq$2$i$i$i$i / $1203;
              $1264 = $1209 * $1263;
              $1265 = HEAP32[$1086>>2]|0;
              $1266 = (+($1265|0));
              $1267 = $1264 / $1266;
              $1268 = $1267 + 0.900000000000000022204;
              $1269 = (~~(($1268)));
              $1270 = Math_imul($1269, $1265)|0;
              $1271 = (($1075) + 4|0);
              HEAP32[$1271>>2] = $1270;
              $1272 = ($1270|0)>($1206|0);
              if (!($1272)) {
               $1275 = $1270;$1278 = $1265;
               break;
              }
              $1273 = (($1206|0) % ($1265|0))&-1;
              $1274 = (($1206) - ($1273))|0;
              HEAP32[$1271>>2] = $1274;
              $1275 = $1274;$1278 = $1265;
             }
            } while(0);
            $1276 = ($1275|0)==(0);
            if ($1276) {
             $1277 = (($1075) + 4|0);
             HEAP32[$1277>>2] = $1278;
            }
            $1397 = (($j$013$i$i$i) + 1)|0;
            $1398 = HEAP32[$1066>>2]|0;
            $1399 = ($1397|0)<($1398|0);
            if ($1399) {
             $j$013$i$i$i = $1397;
            } else {
             break;
            }
           }
          }
          $1400 = (($i$014$i$i$i) + 1)|0;
          $1401 = ($1400|0)<($$$i$i$i|0);
          if ($1401) {
           $i$014$i$i$i = $1400;
          } else {
           break;
          }
         }
         $1402 = (($137) + 3428|0);
         $1403 = HEAP32[$1402>>2]|0;
         $1404 = ($1403|0)>(0);
         if ($1404) {
          $1405 = (($76) + 376|0);
          HEAP32[$1405>>2] = $1403;
         } else {
          $1406 = HEAP32[$80>>2]|0;
          $1407 = (($1406) + 3396|0);
          $1408 = HEAP32[$1407>>2]|0;
          $1409 = (($1406) + 3400|0);
          $1410 = +HEAPF64[$1409>>3];
          $1411 = (~~(($1410)));
          $1412 = (+($1411|0));
          $1413 = $1410 - $1412;
          $1414 = (($1408) + 4|0);
          $1415 = HEAP32[$1414>>2]|0;
          $1416 = ($1415|0)==(0|0);
          if ($1416) {
           $$0$i$i$i = -1;
          } else {
           $1417 = HEAP32[$140>>2]|0;
           $1418 = (($1415) + ($1411<<3)|0);
           $1419 = +HEAPF64[$1418>>3];
           $1420 = 1.0 - $1413;
           $1421 = $1420 * $1419;
           $1422 = (($1411) + 1)|0;
           $1423 = (($1415) + ($1422<<3)|0);
           $1424 = +HEAPF64[$1423>>3];
           $1425 = $1413 * $1424;
           $1426 = $1421 + $1425;
           $1427 = (+($1417|0));
           $1428 = $1427 * $1426;
           $phitmp$i$i = (~~(($1428)));
           $$0$i$i$i = $phitmp$i$i;
          }
          $1429 = (($76) + 376|0);
          HEAP32[$1429>>2] = $$0$i$i$i;
         }
         $1430 = (($137) + 3424|0);
         $1431 = HEAP32[$1430>>2]|0;
         $1432 = (($76) + 380|0);
         HEAP32[$1432>>2] = $1431;
         $1433 = (($137) + 3440|0);
         $1434 = HEAP32[$1433>>2]|0;
         $1435 = (($76) + 372|0);
         HEAP32[$1435>>2] = $1434;
         $1436 = HEAP32[$1402>>2]|0;
         $1437 = ($1436|0)==(0);
         if ($1437) {
          $1445 = (($76) + 384|0);
          HEAP32[$1445>>2] = 0;
         } else {
          $1438 = (($137) + 3444|0);
          $1439 = HEAP32[$1438>>2]|0;
          $1440 = (+($1439|0));
          $1441 = (+($1436|0));
          $1442 = $1440 / $1441;
          $1443 = (~~(($1442)));
          $1444 = (($76) + 384|0);
          HEAP32[$1444>>2] = $1443;
         }
         $1446 = (($137) + 3420|0);
         $1447 = HEAP32[$1446>>2]|0;
         $1448 = ($1447|0)==(0);
         if (!($1448)) {
          $1449 = HEAP32[$1402>>2]|0;
          $1450 = (($137) + 3360|0);
          HEAP32[$1450>>2] = $1449;
          $1451 = HEAP32[$1430>>2]|0;
          $1452 = (($137) + 3364|0);
          HEAP32[$1452>>2] = $1451;
          $1453 = HEAP32[$1433>>2]|0;
          $1454 = (($137) + 3368|0);
          HEAP32[$1454>>2] = $1453;
          $1455 = (($137) + 3444|0);
          $1456 = HEAP32[$1455>>2]|0;
          $1457 = (($137) + 3372|0);
          HEAP32[$1457>>2] = $1456;
          $1458 = (($137) + 3448|0);
          $1459 = +HEAPF64[$1458>>3];
          $1460 = (($137) + 3376|0);
          HEAPF64[$1460>>3] = $1459;
          $1461 = (($137) + 3432|0);
          $1462 = +HEAPF64[$1461>>3];
          $1463 = (($137) + 3384|0);
          HEAPF64[$1463>>3] = $1462;
         }
         $1464 = HEAP32[553040>>2]|0;
         $1465 = (($1464) + 392|0);
         ;HEAP32[$1465+0>>2]=0|0;HEAP32[$1465+4>>2]=0|0;HEAP32[$1465+8>>2]=0|0;HEAP32[$1465+12>>2]=0|0;
         $1466 = $0;
         $1467 = $1466;
         HEAP32[$1467>>2] = 1329811013;
         $1468 = (($1466) + 4)|0;
         $1469 = $1468;
         HEAP32[$1469>>2] = 5391684;
         $strlen$i = (_strlen(($0|0))|0);
         $endptr$i = (($0) + ($strlen$i)|0);
         HEAP8[$endptr$i>>0]=61&255;HEAP8[$endptr$i+1>>0]=61>>8;
         $strlen1$i = (_strlen(($0|0))|0);
         $endptr2$i = (($0) + ($strlen1$i)|0);
         dest=$endptr2$i+0|0; src=553152+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
         $1470 = (($1464) + 392|0);
         $1471 = (($1464) + 400|0);
         $1472 = (_realloc(0,8)|0);
         HEAP32[$1470>>2] = $1472;
         $1473 = (($1464) + 396|0);
         $1474 = HEAP32[$1473>>2]|0;
         $1475 = HEAP32[$1471>>2]|0;
         $1476 = $1475 << 2;
         $1477 = (($1476) + 8)|0;
         $1478 = (_realloc($1474,$1477)|0);
         HEAP32[$1473>>2] = $1478;
         $1479 = (_strlen(($0|0))|0);
         $1480 = HEAP32[$1471>>2]|0;
         $1481 = (($1478) + ($1480<<2)|0);
         HEAP32[$1481>>2] = $1479;
         $1482 = (($1479) + 1)|0;
         $1483 = (_malloc($1482)|0);
         $1484 = HEAP32[$1470>>2]|0;
         $1485 = (($1484) + ($1480<<2)|0);
         HEAP32[$1485>>2] = $1483;
         $1486 = HEAP32[$1470>>2]|0;
         $1487 = (($1486) + ($1480<<2)|0);
         $1488 = HEAP32[$1487>>2]|0;
         (_strcpy(($1488|0),($0|0))|0);
         $1489 = HEAP32[$1471>>2]|0;
         $1490 = (($1489) + 1)|0;
         HEAP32[$1471>>2] = $1490;
         $1491 = HEAP32[$1470>>2]|0;
         $1492 = (($1491) + ($1490<<2)|0);
         HEAP32[$1492>>2] = 0;
         $1493 = HEAP32[553040>>2]|0;
         $1494 = (($1493) + 408|0);
         $1495 = (($1493) + 360|0);
         $1496 = (($1493) + 388|0);
         $1497 = HEAP32[$1496>>2]|0;
         $1498 = ($1497|0)==(0|0);
         if ($1498) {
          $2279 = $1493;
         } else {
          $1499 = (($1497) + 3656|0);
          $1500 = HEAP32[$1499>>2]|0;
          dest=$1494+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          $1501 = (_malloc(136)|0);
          $1502 = ($1501|0)==(0|0);
          do {
           if (!($1502)) {
            $1503 = (($1501) + -4|0);
            $1504 = HEAP32[$1503>>2]|0;
            $1505 = $1504 & 3;
            $1506 = ($1505|0)==(0);
            if ($1506) {
             break;
            }
            _memset(($1501|0),0,136)|0;
           }
          } while(0);
          $1507 = (($1493) + 512|0);
          HEAP32[$1507>>2] = $1501;
          $1508 = (($1493) + 412|0);
          HEAP32[$1508>>2] = $1495;
          $1509 = (($1497) + 8|0);
          $1510 = HEAP32[$1509>>2]|0;
          $1511 = ($1510|0)==(0);
          $1512 = (($1510) + -1)|0;
          $v$$i$i$i = $1511 ? 0 : $1512;
          $1513 = ($v$$i$i$i|0)==(0);
          if ($1513) {
           $ret$0$lcssa$i$i$i = 0;
          } else {
           $$01$i$i$i = $v$$i$i$i;$ret$02$i$i$i = 0;
           while(1) {
            $1514 = (($ret$02$i$i$i) + 1)|0;
            $1515 = $$01$i$i$i >>> 1;
            $1516 = ($1515|0)==(0);
            if ($1516) {
             $ret$0$lcssa$i$i$i = $1514;
             break;
            } else {
             $$01$i$i$i = $1515;$ret$02$i$i$i = $1514;
            }
           }
          }
          $1517 = (($1501) + 44|0);
          HEAP32[$1517>>2] = $ret$0$lcssa$i$i$i;
          $1518 = (_malloc(4)|0);
          $1519 = ($1518|0)==(0|0);
          do {
           if (!($1519)) {
            $1520 = (($1518) + -4|0);
            $1521 = HEAP32[$1520>>2]|0;
            $1522 = $1521 & 3;
            $1523 = ($1522|0)==(0);
            if ($1523) {
             break;
            }
            HEAP8[$1518>>0]=0&255;HEAP8[$1518+1>>0]=(0>>8)&255;HEAP8[$1518+2>>0]=(0>>16)&255;HEAP8[$1518+3>>0]=0>>24;
           }
          } while(0);
          $1524 = (($1501) + 12|0);
          HEAP32[$1524>>2] = $1518;
          $1525 = (_malloc(4)|0);
          $1526 = ($1525|0)==(0|0);
          do {
           if (!($1526)) {
            $1527 = (($1525) + -4|0);
            $1528 = HEAP32[$1527>>2]|0;
            $1529 = $1528 & 3;
            $1530 = ($1529|0)==(0);
            if ($1530) {
             break;
            }
            HEAP8[$1525>>0]=0&255;HEAP8[$1525+1>>0]=(0>>8)&255;HEAP8[$1525+2>>0]=(0>>16)&255;HEAP8[$1525+3>>0]=0>>24;
           }
          } while(0);
          $1531 = (($1501) + 16|0);
          HEAP32[$1531>>2] = $1525;
          $1532 = (_malloc(20)|0);
          $1533 = ($1532|0)==(0|0);
          do {
           if (!($1533)) {
            $1534 = (($1532) + -4|0);
            $1535 = HEAP32[$1534>>2]|0;
            $1536 = $1535 & 3;
            $1537 = ($1536|0)==(0);
            if ($1537) {
             break;
            }
            dest=$1532+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           }
          } while(0);
          HEAP32[$1518>>2] = $1532;
          $1538 = (_malloc(20)|0);
          $1539 = ($1538|0)==(0|0);
          do {
           if (!($1539)) {
            $1540 = (($1538) + -4|0);
            $1541 = HEAP32[$1540>>2]|0;
            $1542 = $1541 & 3;
            $1543 = ($1542|0)==(0);
            if ($1543) {
             break;
            }
            dest=$1538+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           }
          } while(0);
          HEAP32[$1525>>2] = $1538;
          $1544 = HEAP32[$1497>>2]|0;
          $1545 = $1544 >> $1500;
          _mdct_init($1532,$1545);
          $1546 = HEAP32[$1531>>2]|0;
          $1547 = HEAP32[$1546>>2]|0;
          $1548 = (($1497) + 4|0);
          $1549 = HEAP32[$1548>>2]|0;
          $1550 = $1549 >> $1500;
          _mdct_init($1547,$1550);
          $1551 = HEAP32[$1497>>2]|0;
          $1552 = ($1551|0)==(0);
          $1553 = (($1551) + -1)|0;
          $v$$i1$i$i = $1552 ? 0 : $1553;
          $1554 = ($v$$i1$i$i|0)==(0);
          if ($1554) {
           $ret$0$lcssa$i5$i$i = -6;
          } else {
           $$01$i3$i$i = $v$$i1$i$i;$ret$02$i2$i$i = 0;
           while(1) {
            $1555 = (($ret$02$i2$i$i) + 1)|0;
            $1556 = $$01$i3$i$i >>> 1;
            $1557 = ($1556|0)==(0);
            if ($1557) {
             break;
            } else {
             $$01$i3$i$i = $1556;$ret$02$i2$i$i = $1555;
            }
           }
           $phitmp$i$i7 = (($ret$02$i2$i$i) + -5)|0;
           $ret$0$lcssa$i5$i$i = $phitmp$i$i7;
          }
          $1558 = (($1501) + 4|0);
          HEAP32[$1558>>2] = $ret$0$lcssa$i5$i$i;
          $1559 = HEAP32[$1548>>2]|0;
          $1560 = ($1559|0)==(0);
          $1561 = (($1559) + -1)|0;
          $v$$i7$i$i = $1560 ? 0 : $1561;
          $1562 = ($v$$i7$i$i|0)==(0);
          if ($1562) {
           $ret$0$lcssa$i11$i$i = -6;
          } else {
           $$01$i9$i$i = $v$$i7$i$i;$ret$02$i8$i$i = 0;
           while(1) {
            $1563 = (($ret$02$i8$i$i) + 1)|0;
            $1564 = $$01$i9$i$i >>> 1;
            $1565 = ($1564|0)==(0);
            if ($1565) {
             break;
            } else {
             $$01$i9$i$i = $1564;$ret$02$i8$i$i = $1563;
            }
           }
           $phitmp39$i$i = (($ret$02$i8$i$i) + -5)|0;
           $ret$0$lcssa$i11$i$i = $phitmp39$i$i;
          }
          $1566 = (($1501) + 8|0);
          HEAP32[$1566>>2] = $ret$0$lcssa$i11$i$i;
          $1567 = (($1501) + 20|0);
          _drft_init($1567,$1551);
          $1568 = (($1501) + 32|0);
          $1569 = HEAP32[$1548>>2]|0;
          _drft_init($1568,$1569);
          $1570 = (($1497) + 2848|0);
          $1571 = HEAP32[$1570>>2]|0;
          $1572 = ($1571|0)==(0|0);
          L438: do {
           if ($1572) {
            $1573 = (($1497) + 24|0);
            $1574 = HEAP32[$1573>>2]|0;
            $1575 = ($1574|0)==(0);
            do {
             if ($1575) {
              $req$0$i$i$i = 0;
             } else {
              $1576 = ($1574*56)|0;
              $1577 = ($1574>>>0)>(65535);
              if (!($1577)) {
               $req$0$i$i$i = $1576;
               break;
              }
              $1578 = (($1576>>>0) / ($1574>>>0))&-1;
              $1579 = ($1578|0)==(56);
              $$$i$i$i8 = $1579 ? $1576 : -1;
              $req$0$i$i$i = $$$i$i$i8;
             }
            } while(0);
            $1580 = (_malloc($req$0$i$i$i)|0);
            $1581 = ($1580|0)==(0|0);
            do {
             if (!($1581)) {
              $1582 = (($1580) + -4|0);
              $1583 = HEAP32[$1582>>2]|0;
              $1584 = $1583 & 3;
              $1585 = ($1584|0)==(0);
              if ($1585) {
               break;
              }
              _memset(($1580|0),0,($req$0$i$i$i|0))|0;
             }
            } while(0);
            HEAP32[$1570>>2] = $1580;
            $1586 = HEAP32[$1573>>2]|0;
            $1587 = ($1586|0)>(0);
            if (!($1587)) {
             break;
            }
            $1588 = (($1497) + 1824|0);
            $1589 = (($marker$i$i$i$i) + 4|0);
            $1591 = $1580;$i$033$i$i = 0;
            while(1) {
             $1590 = (($1591) + (($i$033$i$i*56)|0)|0);
             $1592 = (($1588) + ($i$033$i$i<<2)|0);
             $1593 = HEAP32[$1592>>2]|0;
             dest=$1590+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             $1594 = ((($1591) + (($i$033$i$i*56)|0)|0) + 12|0);
             HEAP32[$1594>>2] = $1593;
             $1595 = (($1593) + 4|0);
             $1596 = HEAP32[$1595>>2]|0;
             $1597 = ((($1591) + (($i$033$i$i*56)|0)|0) + 4|0);
             HEAP32[$1597>>2] = $1596;
             $1598 = HEAP32[$1595>>2]|0;
             $1599 = ((($1591) + (($i$033$i$i*56)|0)|0) + 8|0);
             HEAP32[$1599>>2] = $1598;
             $1600 = HEAP32[$1593>>2]|0;
             HEAP32[$1590>>2] = $1600;
             $1601 = (($1593) + 8|0);
             $1602 = HEAP32[$1601>>2]|0;
             $1603 = HEAP32[$1595>>2]|0;
             $1604 = $1603 << 2;
             $1605 = (_malloc($1604)|0);
             _memset(($marker$i$i$i$i|0),0,132)|0;
             $1606 = ($1603|0)>(0);
             L451: do {
              if ($1606) {
               $count$022$i$i$i$i = 0;$i$023$i$i$i$i = 0;
               L452: while(1) {
                $1607 = (($1602) + ($i$023$i$i$i$i)|0);
                $1608 = HEAP8[$1607>>0]|0;
                $1609 = $1608 << 24 >> 24;
                $1610 = ($1608<<24>>24)>(0);
                L454: do {
                 if ($1610) {
                  $1611 = (($marker$i$i$i$i) + ($1609<<2)|0);
                  $1612 = HEAP32[$1611>>2]|0;
                  $1613 = ($1608<<24>>24)<(32);
                  if ($1613) {
                   $1614 = $1612 >>> $1609;
                   $1615 = ($1614|0)==(0);
                   if (!($1615)) {
                    break L452;
                   }
                  }
                  $1616 = (($1605) + ($count$022$i$i$i$i<<2)|0);
                  HEAP32[$1616>>2] = $1612;
                  $1619 = $1612;$j$012$i$i$i$i = $1609;
                  while(1) {
                   $1617 = (($marker$i$i$i$i) + ($j$012$i$i$i$i<<2)|0);
                   $1618 = $1619 & 1;
                   $1620 = ($1618|0)==(0);
                   if (!($1620)) {
                    label = 325;
                    break;
                   }
                   $1628 = (($1619) + 1)|0;
                   HEAP32[$1617>>2] = $1628;
                   $1629 = (($j$012$i$i$i$i) + -1)|0;
                   $1630 = ($1629|0)>(0);
                   if (!($1630)) {
                    break;
                   }
                   $$phi$trans$insert$i$i$i$i = (($marker$i$i$i$i) + ($1629<<2)|0);
                   $$pre$i$i$i$i10 = HEAP32[$$phi$trans$insert$i$i$i$i>>2]|0;
                   $1619 = $$pre$i$i$i$i10;$j$012$i$i$i$i = $1629;
                  }
                  do {
                   if ((label|0) == 325) {
                    label = 0;
                    $1621 = ($j$012$i$i$i$i|0)==(1);
                    if ($1621) {
                     $1622 = HEAP32[$1589>>2]|0;
                     $1623 = (($1622) + 1)|0;
                     HEAP32[$1589>>2] = $1623;
                     break;
                    } else {
                     $1624 = (($j$012$i$i$i$i) + -1)|0;
                     $1625 = (($marker$i$i$i$i) + ($1624<<2)|0);
                     $1626 = HEAP32[$1625>>2]|0;
                     $1627 = $1626 << 1;
                     HEAP32[$1617>>2] = $1627;
                     break;
                    }
                   }
                  } while(0);
                  $j$117$i$i$i$i = (($1609) + 1)|0;
                  $1631 = ($j$117$i$i$i$i|0)<(33);
                  if ($1631) {
                   $entry$019$i$i$i$i = $1612;$j$1$in18$i$i$i$i = $1609;$j$120$i$i$i$i = $j$117$i$i$i$i;
                  } else {
                   break;
                  }
                  while(1) {
                   $1632 = (($marker$i$i$i$i) + ($j$120$i$i$i$i<<2)|0);
                   $1633 = HEAP32[$1632>>2]|0;
                   $1634 = $1633 >>> 1;
                   $1635 = ($1634|0)==($entry$019$i$i$i$i|0);
                   if (!($1635)) {
                    break L454;
                   }
                   $1636 = (($marker$i$i$i$i) + ($j$1$in18$i$i$i$i<<2)|0);
                   $1637 = HEAP32[$1636>>2]|0;
                   $1638 = $1637 << 1;
                   HEAP32[$1632>>2] = $1638;
                   $j$1$i$i$i$i = (($j$120$i$i$i$i) + 1)|0;
                   $1639 = ($j$1$i$i$i$i|0)<(33);
                   if ($1639) {
                    $j$1$in18$i$i$i$i$phi = $j$120$i$i$i$i;$entry$019$i$i$i$i = $1633;$j$120$i$i$i$i = $j$1$i$i$i$i;$j$1$in18$i$i$i$i = $j$1$in18$i$i$i$i$phi;
                   } else {
                    break;
                   }
                  }
                 }
                } while(0);
                $count$1$i$i$i$i = (($count$022$i$i$i$i) + 1)|0;
                $1640 = (($i$023$i$i$i$i) + 1)|0;
                $1641 = ($1640|0)<($1603|0);
                if ($1641) {
                 $count$022$i$i$i$i = $count$1$i$i$i$i;$i$023$i$i$i$i = $1640;
                } else {
                 $i$18$i$i$i$i = 1;
                 label = 336;
                 break L451;
                }
               }
               _free($1605);
               $$0$i$i$i$i = 0;
              } else {
               $i$18$i$i$i$i = 1;
               label = 336;
              }
             } while(0);
             do {
              if ((label|0) == 336) {
               while(1) {
                label = 0;
                $1644 = (($marker$i$i$i$i) + ($i$18$i$i$i$i<<2)|0);
                $1645 = HEAP32[$1644>>2]|0;
                $1646 = (32 - ($i$18$i$i$i$i))|0;
                $1647 = -1 >>> $1646;
                $1648 = $1645 & $1647;
                $1649 = ($1648|0)==(0);
                $1642 = (($i$18$i$i$i$i) + 1)|0;
                if (!($1649)) {
                 label = 337;
                 break;
                }
                $1643 = ($1642|0)<(33);
                if ($1643) {
                 $i$18$i$i$i$i = $1642;
                 label = 336;
                } else {
                 break;
                }
               }
               if ((label|0) == 337) {
                label = 0;
                _free($1605);
                $$0$i$i$i$i = 0;
                break;
               }
               if ($1606) {
                $count$25$i$i$i$i = 0;$i$26$i$i$i$i = 0;
               } else {
                $$0$i$i$i$i = $1605;
                break;
               }
               while(1) {
                $1650 = (($1602) + ($i$26$i$i$i$i)|0);
                $1651 = HEAP8[$1650>>0]|0;
                $1652 = ($1651<<24>>24)>(0);
                $1653 = (($1605) + ($count$25$i$i$i$i<<2)|0);
                if ($1652) {
                 $1654 = HEAP32[$1653>>2]|0;
                 $1655 = $1651 << 24 >> 24;
                 $j$21$i$i$i$i = 0;$temp$02$i$i$i$i = 0;
                 while(1) {
                  $1656 = $temp$02$i$i$i$i << 1;
                  $1657 = $1654 >>> $j$21$i$i$i$i;
                  $1658 = $1657 & 1;
                  $1659 = $1658 | $1656;
                  $1660 = (($j$21$i$i$i$i) + 1)|0;
                  $1661 = ($1660|0)<($1655|0);
                  if ($1661) {
                   $j$21$i$i$i$i = $1660;$temp$02$i$i$i$i = $1659;
                  } else {
                   $$pre$phiZ2D = $1653;$temp$0$lcssa$i$i$i$i = $1659;
                   break;
                  }
                 }
                } else {
                 $$pre$phiZ2D = $1653;$temp$0$lcssa$i$i$i$i = 0;
                }
                $1662 = (($count$25$i$i$i$i) + 1)|0;
                HEAP32[$$pre$phiZ2D>>2] = $temp$0$lcssa$i$i$i$i;
                $1663 = (($i$26$i$i$i$i) + 1)|0;
                $exitcond$i$i$i$i = ($1663|0)==($1603|0);
                if ($exitcond$i$i$i$i) {
                 $$0$i$i$i$i = $1605;
                 break;
                } else {
                 $count$25$i$i$i$i = $1662;$i$26$i$i$i$i = $1663;
                }
               }
              }
             } while(0);
             $1664 = ((($1591) + (($i$033$i$i*56)|0)|0) + 20|0);
             HEAP32[$1664>>2] = $$0$i$i$i$i;
             $1665 = HEAP32[$1595>>2]|0;
             $1666 = HEAP32[$1593>>2]|0;
             $1667 = ($1666|0)>(0);
             if (!($1667)) {
              break;
             }
             $1668 = (+($1666|0));
             $1669 = 1.0 / $1668;
             $1670 = (+($1665|0));
             $1671 = $1669;
             $1672 = $1670;
             $1673 = (+Math_pow((+$1672),(+$1671)));
             $1674 = (+Math_floor((+$1673)));
             $1675 = (~~(($1674)));
             $vals$0$us$i$i$i$i = $1675;
             while(1) {
              $1682 = (($vals$0$us$i$i$i$i) + 1)|0;
              $acc$01$us$i$i$i$i = 1;$acc1$02$us$i$i$i$i = 1;$i$03$us$i$i$i$i = 0;
              while(1) {
               $1676 = Math_imul($acc$01$us$i$i$i$i, $vals$0$us$i$i$i$i)|0;
               $1678 = Math_imul($acc1$02$us$i$i$i$i, $1682)|0;
               $1683 = (($i$03$us$i$i$i$i) + 1)|0;
               $exitcond$i$i$i13 = ($1683|0)==($1666|0);
               if ($exitcond$i$i$i13) {
                break;
               } else {
                $acc$01$us$i$i$i$i = $1676;$acc1$02$us$i$i$i$i = $1678;$i$03$us$i$i$i$i = $1683;
               }
              }
              $1677 = ($1676|0)<=($1665|0);
              $1679 = ($1678|0)>($1665|0);
              $or$cond$us$i$i$i$i = $1677 & $1679;
              if ($or$cond$us$i$i$i$i) {
               break;
              }
              $1680 = ($1676|0)>($1665|0);
              $1681 = (($vals$0$us$i$i$i$i) + -1)|0;
              $$$i6$i$i = $1680 ? $1681 : $1682;
              $vals$0$us$i$i$i$i = $$$i6$i$i;
             }
             $1684 = ((($1591) + (($i$033$i$i*56)|0)|0) + 44|0);
             HEAP32[$1684>>2] = $vals$0$us$i$i$i$i;
             $1685 = (($1593) + 16|0);
             $1686 = HEAP32[$1685>>2]|0;
             $1687 = $1686 & 2097151;
             $1688 = (+($1687|0));
             $1689 = $1686 >>> 21;
             $1690 = $1689 & 1023;
             $1691 = ($1686|0)<(0);
             if ($1691) {
              $1692 = -$1688;
              $mant$0$i$i$i$i = $1692;
             } else {
              $mant$0$i$i$i$i = $1688;
             }
             $1693 = (($1690) + -788)|0;
             $1694 = ($1693|0)>(1023);
             do {
              if ($1694) {
               $1695 = $mant$0$i$i$i$i * 8.98846567431157953864E+307;
               $1696 = (($1690) + -1811)|0;
               $$0$i$i$i$i$i14 = $1696;$y$0$i$i$i$i$i = $1695;
              } else {
               $1697 = ($1693|0)<(-1022);
               if (!($1697)) {
                $$0$i$i$i$i$i14 = $1693;$y$0$i$i$i$i$i = $mant$0$i$i$i$i;
                break;
               }
               $1698 = $mant$0$i$i$i$i * 2.22507385850720138309E-308;
               $1699 = (($1690) + 234)|0;
               $$0$i$i$i$i$i14 = $1699;$y$0$i$i$i$i$i = $1698;
              }
             } while(0);
             $1700 = (($$0$i$i$i$i$i14) + 1023)|0;
             $1701 = (_bitshift64Shl(($1700|0),0,52)|0);
             $1702 = tempRet0;
             HEAP32[tempDoublePtr>>2] = $1701;HEAP32[tempDoublePtr+4>>2] = $1702;$1703 = +HEAPF64[tempDoublePtr>>3];
             $1704 = $y$0$i$i$i$i$i * $1703;
             $1705 = $1704;
             $rintf$i$i$i = (+_rint((+$1705)));
             $1706 = (~~(($rintf$i$i$i)));
             $1707 = ((($1591) + (($i$033$i$i*56)|0)|0) + 48|0);
             HEAP32[$1707>>2] = $1706;
             $1708 = (($1593) + 20|0);
             $1709 = HEAP32[$1708>>2]|0;
             $1710 = $1709 & 2097151;
             $1711 = (+($1710|0));
             $1712 = $1709 >>> 21;
             $1713 = $1712 & 1023;
             $1714 = ($1709|0)<(0);
             if ($1714) {
              $1715 = -$1711;
              $mant$0$i2$i$i$i = $1715;
             } else {
              $mant$0$i2$i$i$i = $1711;
             }
             $1716 = (($1713) + -788)|0;
             $1717 = ($1716|0)>(1023);
             do {
              if ($1717) {
               $1718 = $mant$0$i2$i$i$i * 8.98846567431157953864E+307;
               $1719 = (($1713) + -1811)|0;
               $$0$i$i3$i$i$i = $1719;$y$0$i$i4$i$i$i = $1718;
              } else {
               $1720 = ($1716|0)<(-1022);
               if (!($1720)) {
                $$0$i$i3$i$i$i = $1716;$y$0$i$i4$i$i$i = $mant$0$i2$i$i$i;
                break;
               }
               $1721 = $mant$0$i2$i$i$i * 2.22507385850720138309E-308;
               $1722 = (($1713) + 234)|0;
               $$0$i$i3$i$i$i = $1722;$y$0$i$i4$i$i$i = $1721;
              }
             } while(0);
             $1723 = (($$0$i$i3$i$i$i) + 1023)|0;
             $1724 = (_bitshift64Shl(($1723|0),0,52)|0);
             $1725 = tempRet0;
             HEAP32[tempDoublePtr>>2] = $1724;HEAP32[tempDoublePtr+4>>2] = $1725;$1726 = +HEAPF64[tempDoublePtr>>3];
             $1727 = $y$0$i$i4$i$i$i * $1726;
             $1728 = $1727;
             $rintf1$i$i$i = (+_rint((+$1728)));
             $1729 = (~~(($rintf1$i$i$i)));
             $1730 = ((($1591) + (($i$033$i$i*56)|0)|0) + 52|0);
             HEAP32[$1730>>2] = $1729;
             $1731 = (($i$033$i$i) + 1)|0;
             $1732 = HEAP32[$1573>>2]|0;
             $1733 = ($1731|0)<($1732|0);
             if (!($1733)) {
              break L438;
             }
             $$pre45$i$i = HEAP32[$1570>>2]|0;
             $1591 = $$pre45$i$i;$i$033$i$i = $1731;
            }
            while(1) {
            }
           }
          } while(0);
          $1734 = (($1497) + 28|0);
          $1735 = HEAP32[$1734>>2]|0;
          $1736 = ($1735|0)==(0);
          do {
           if ($1736) {
            $req$0$i8$i$i = 0;
           } else {
            $1737 = ($1735*52)|0;
            $1738 = ($1735>>>0)>(65535);
            if (!($1738)) {
             $req$0$i8$i$i = $1737;
             break;
            }
            $1739 = (($1737>>>0) / ($1735>>>0))&-1;
            $1740 = ($1739|0)==(52);
            $$$i7$i$i = $1740 ? $1737 : -1;
            $req$0$i8$i$i = $$$i7$i$i;
           }
          } while(0);
          $1741 = (_malloc($req$0$i8$i$i)|0);
          $1742 = ($1741|0)==(0|0);
          do {
           if (!($1742)) {
            $1743 = (($1741) + -4|0);
            $1744 = HEAP32[$1743>>2]|0;
            $1745 = $1744 & 3;
            $1746 = ($1745|0)==(0);
            if ($1746) {
             break;
            }
            _memset(($1741|0),0,($req$0$i8$i$i|0))|0;
           }
          } while(0);
          $1747 = (($1501) + 56|0);
          HEAP32[$1747>>2] = $1741;
          $1748 = HEAP32[$1734>>2]|0;
          $1749 = ($1748|0)>(0);
          L525: do {
           if ($1749) {
            $1750 = (($1497) + 2852|0);
            $1751 = (($1497) + 2868|0);
            $1752 = (($1493) + 368|0);
            $1754 = $1741;$i$128$i$i = 0;
            while(1) {
             $1753 = (($1754) + (($i$128$i$i*52)|0)|0);
             $1755 = (($1750) + ($i$128$i$i<<2)|0);
             $1756 = HEAP32[$1755>>2]|0;
             $1757 = HEAP32[$1756>>2]|0;
             $1758 = (($1497) + ($1757<<2)|0);
             $1759 = HEAP32[$1758>>2]|0;
             $1760 = (($1759|0) / 2)&-1;
             $1761 = HEAP32[$1752>>2]|0;
             dest=$1753+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             $1762 = HEAP32[$1751>>2]|0;
             $1763 = ((($1754) + (($i$128$i$i*52)|0)|0) + 36|0);
             HEAP32[$1763>>2] = $1762;
             $1764 = HEAP32[$1751>>2]|0;
             $1765 = (+($1764|0));
             $1766 = $1765 * 8.0;
             $1767 = $1766;
             $1768 = (+Math_log((+$1767)));
             $1769 = $1768 * 1.442695040888963387;
             $1770 = (+_rint((+$1769)));
             $1771 = $1770 + -1.0;
             $1772 = (~~(($1771)));
             $1773 = ((($1754) + (($i$128$i$i*52)|0)|0) + 32|0);
             HEAP32[$1773>>2] = $1772;
             $1774 = (+($1761|0));
             $1775 = $1774 * 0.25;
             $1776 = $1775;
             $1777 = $1776 * 0.5;
             $1778 = (+($1760|0));
             $1779 = $1777 / $1778;
             $1780 = (+Math_log((+$1779)));
             $1781 = $1780 * 1.44269502162933349609;
             $1782 = $1781 + -5.9657840728759765625;
             $1783 = (($1772) + 1)|0;
             $1784 = 1 << $1783;
             $1785 = (+($1784|0));
             $1786 = $1782 * $1785;
             $1787 = (+($1764|0));
             $1788 = $1786 - $1787;
             $1789 = (~~(($1788)));
             $1790 = ((($1754) + (($i$128$i$i*52)|0)|0) + 28|0);
             HEAP32[$1790>>2] = $1789;
             $1791 = (+($1760|0));
             $1792 = $1791 + 0.25;
             $1793 = $1792 * $1774;
             $1794 = $1793;
             $1795 = $1794 * 0.5;
             $1796 = $1795 / $1778;
             $1797 = (+Math_log((+$1796)));
             $1798 = $1797 * 1.44269502162933349609;
             $1799 = $1798 + -5.9657840728759765625;
             $1800 = $1799 * $1785;
             $1801 = $1800 + 0.5;
             $1802 = (~~(($1801)));
             $1803 = (1 - ($1789))|0;
             $1804 = (($1803) + ($1802))|0;
             $1805 = ((($1754) + (($i$128$i$i*52)|0)|0) + 40|0);
             HEAP32[$1805>>2] = $1804;
             $1806 = $1760 << 2;
             $1807 = (_malloc($1806)|0);
             $1808 = ((($1754) + (($i$128$i$i*52)|0)|0) + 16|0);
             HEAP32[$1808>>2] = $1807;
             $1809 = (_malloc($1806)|0);
             $1810 = ((($1754) + (($i$128$i$i*52)|0)|0) + 20|0);
             HEAP32[$1810>>2] = $1809;
             $1811 = (_malloc($1806)|0);
             $1812 = ((($1754) + (($i$128$i$i*52)|0)|0) + 24|0);
             HEAP32[$1812>>2] = $1811;
             $1813 = ((($1754) + (($i$128$i$i*52)|0)|0) + 4|0);
             HEAP32[$1813>>2] = $1756;
             HEAP32[$1753>>2] = $1760;
             $1814 = ((($1754) + (($i$128$i$i*52)|0)|0) + 44|0);
             HEAP32[$1814>>2] = $1761;
             $1815 = ((($1754) + (($i$128$i$i*52)|0)|0) + 48|0);
             HEAPF32[$1815>>2] = 1.0;
             $1816 = ($1761|0)<(26000);
             do {
              if ($1816) {
               HEAPF32[$1815>>2] = 0.0;
              } else {
               $1817 = ($1761|0)<(38000);
               if ($1817) {
                HEAPF32[$1815>>2] = 0.939999997615814208984;
                break;
               }
               $1818 = ($1761|0)>(46000);
               if (!($1818)) {
                break;
               }
               HEAPF32[$1815>>2] = 1.27499997615814208984;
              }
             } while(0);
             $1819 = (+($1761|0));
             $i$0$ph$i$i$i$ph = 0;$j$0$ph$i$i$i$ph = 0;
             L537: while(1) {
              $1820 = ($j$0$ph$i$i$i$ph|0)<($1760|0);
              $i$0$i$i$i = $i$0$ph$i$i$i$ph;
              while(1) {
               $1821 = ($i$0$i$i$i|0)<(87);
               if (!($1821)) {
                break L537;
               }
               $1822 = (($i$0$i$i$i) + 1)|0;
               $1823 = (+($1822|0));
               $1824 = $1823 * 0.0866433754563331604003;
               $1825 = $1824 + 2.7488713472395147619;
               $1826 = (+Math_exp((+$1825)));
               $1827 = $1826 * 2.0;
               $1828 = $1778 * $1827;
               $1829 = $1828 / $1819;
               $1830 = (+_rint((+$1829)));
               $1831 = (~~(($1830)));
               $1832 = ($j$0$ph$i$i$i$ph|0)<($1831|0);
               $$not = $1832 ^ 1;
               $$not54 = $1820 ^ 1;
               $brmerge = $$not | $$not54;
               if ($brmerge) {
                $i$0$i$i$i = $1822;
               } else {
                break;
               }
              }
              $1833 = (32696 + ($i$0$i$i$i<<2)|0);
              $1834 = +HEAPF32[$1833>>2];
              $1835 = (32696 + ($1822<<2)|0);
              $1836 = +HEAPF32[$1835>>2];
              $1837 = $1836 - $1834;
              $1838 = (($1831) - ($j$0$ph$i$i$i$ph))|0;
              $1839 = (+($1838|0));
              $1840 = $1837 / $1839;
              $1841 = (($j$0$ph$i$i$i$ph) - ($1831))|0;
              $1842 = (($j$0$ph$i$i$i$ph) - ($1760))|0;
              $1843 = ($1841>>>0)>($1842>>>0);
              $umax$i$i$i = $1843 ? $1841 : $1842;
              $1844 = (($j$0$ph$i$i$i$ph) - ($umax$i$i$i))|0;
              $base$026$i$i$i = $1834;$j$127$i$i$i = $j$0$ph$i$i$i$ph;
              while(1) {
               $1845 = $base$026$i$i$i + 100.0;
               $1846 = (($1807) + ($j$127$i$i$i<<2)|0);
               HEAPF32[$1846>>2] = $1845;
               $1847 = $1840 + $base$026$i$i$i;
               $1848 = (($j$127$i$i$i) + 1)|0;
               $exitcond44$i$i$i = ($1848|0)==($1844|0);
               if ($exitcond44$i$i$i) {
                $i$0$ph$i$i$i$ph = $1822;$j$0$ph$i$i$i$ph = $1844;
                continue L537;
               } else {
                $base$026$i$i$i = $1847;$j$127$i$i$i = $1848;
               }
              }
             }
             if ($1820) {
              $j$323$i$i$i = $j$0$ph$i$i$i$ph;
              while(1) {
               $1857 = (($j$323$i$i$i) + -1)|0;
               $1858 = (($1807) + ($1857<<2)|0);
               $1859 = +HEAPF32[$1858>>2];
               $1860 = (($1807) + ($j$323$i$i$i<<2)|0);
               HEAPF32[$1860>>2] = $1859;
               $1861 = (($j$323$i$i$i) + 1)|0;
               $exitcond38$i$i$i = ($1861|0)==($1760|0);
               if ($exitcond38$i$i$i) {
                break;
               } else {
                $j$323$i$i$i = $1861;
               }
              }
             }
             $1849 = ($1759|0)>(1);
             if ($1849) {
              $1850 = $1760 << 1;
              $1851 = (($1761|0) / ($1850|0))&-1;
              $1852 = (($1756) + 120|0);
              $1853 = HEAP32[$1852>>2]|0;
              $1854 = (($1756) + 124|0);
              $1855 = (($1756) + 116|0);
              $1856 = (($1756) + 112|0);
              $hi$018$i$i$i = 1;$i$120$i$i$i = 0;$lo$019$i$i$i = -99;
              while(1) {
               $1862 = Math_imul($1851, $i$120$i$i$i)|0;
               $1863 = (+($1862|0));
               $1864 = $1863 * 7.39999988581985235214E-4;
               $1865 = $1864;
               $1866 = (+Math_atan((+$1865)));
               $1867 = $1866 * 13.1000003814697265625;
               $1868 = Math_imul($1862, $1862)|0;
               $1869 = (+($1868|0));
               $1870 = $1869 * 1.84999997543400240829E-8;
               $1871 = $1870;
               $1872 = (+Math_atan((+$1871)));
               $1873 = $1872 * 2.24000000953674316406;
               $1874 = $1867 + $1873;
               $1875 = $1863 * 9.99999974737875163555E-5;
               $1876 = $1875;
               $1877 = $1874 + $1876;
               $1878 = $1877;
               $1879 = (($1853) + ($lo$019$i$i$i))|0;
               $1880 = ($1879|0)<($i$120$i$i$i|0);
               L554: do {
                if ($1880) {
                 $1881 = +HEAPF32[$1856>>2];
                 $1882 = $1878 - $1881;
                 $1883 = $1882;
                 $lo$111$i$i$i = $lo$019$i$i$i;
                 while(1) {
                  $1887 = Math_imul($lo$111$i$i$i, $1851)|0;
                  $1888 = (+($1887|0));
                  $1889 = $1888 * 7.39999988581985235214E-4;
                  $1890 = $1889;
                  $1891 = (+Math_atan((+$1890)));
                  $1892 = $1891 * 13.1000003814697265625;
                  $1893 = Math_imul($1887, $1887)|0;
                  $1894 = (+($1893|0));
                  $1895 = $1894 * 1.84999997543400240829E-8;
                  $1896 = $1895;
                  $1897 = (+Math_atan((+$1896)));
                  $1898 = $1897 * 2.24000000953674316406;
                  $1899 = $1892 + $1898;
                  $1900 = $1888 * 9.99999974737875163555E-5;
                  $1901 = $1900;
                  $1902 = $1901 + $1899;
                  $1903 = $1902 < $1883;
                  $1885 = (($lo$111$i$i$i) + 1)|0;
                  if (!($1903)) {
                   $lo$1$lcssa$i$i$i = $lo$111$i$i$i;
                   break L554;
                  }
                  $1884 = (($1853) + ($1885))|0;
                  $1886 = ($1884|0)<($i$120$i$i$i|0);
                  if ($1886) {
                   $lo$111$i$i$i = $1885;
                  } else {
                   $lo$1$lcssa$i$i$i = $1885;
                   break;
                  }
                 }
                } else {
                 $lo$1$lcssa$i$i$i = $lo$019$i$i$i;
                }
               } while(0);
               $1904 = ($hi$018$i$i$i|0)>($1760|0);
               L560: do {
                if ($1904) {
                 $hi$1$lcssa$i$i$i = $hi$018$i$i$i;
                } else {
                 $1905 = HEAP32[$1854>>2]|0;
                 $1906 = (($1905) + ($i$120$i$i$i))|0;
                 $hi$114$i$i$i = $hi$018$i$i$i;
                 while(1) {
                  $1907 = ($hi$114$i$i$i|0)<($1906|0);
                  if (!($1907)) {
                   $1908 = Math_imul($hi$114$i$i$i, $1851)|0;
                   $1909 = (+($1908|0));
                   $1910 = $1909 * 7.39999988581985235214E-4;
                   $1911 = $1910;
                   $1912 = (+Math_atan((+$1911)));
                   $1913 = $1912 * 13.1000003814697265625;
                   $1914 = Math_imul($1908, $1908)|0;
                   $1915 = (+($1914|0));
                   $1916 = $1915 * 1.84999997543400240829E-8;
                   $1917 = $1916;
                   $1918 = (+Math_atan((+$1917)));
                   $1919 = $1918 * 2.24000000953674316406;
                   $1920 = $1913 + $1919;
                   $1921 = $1909 * 9.99999974737875163555E-5;
                   $1922 = $1921;
                   $1923 = $1922 + $1920;
                   $1924 = +HEAPF32[$1855>>2];
                   $1925 = $1878 + $1924;
                   $1926 = $1925;
                   $1927 = $1923 < $1926;
                   if (!($1927)) {
                    $hi$1$lcssa$i$i$i = $hi$114$i$i$i;
                    break L560;
                   }
                  }
                  $1928 = (($hi$114$i$i$i) + 1)|0;
                  $1929 = ($hi$114$i$i$i|0)<($1760|0);
                  if ($1929) {
                   $hi$114$i$i$i = $1928;
                  } else {
                   $hi$1$lcssa$i$i$i = $1928;
                   break;
                  }
                 }
                }
               } while(0);
               $1930 = $lo$1$lcssa$i$i$i << 16;
               $1931 = (($1930) + -65537)|0;
               $1932 = (($1931) + ($hi$1$lcssa$i$i$i))|0;
               $1933 = (($1811) + ($i$120$i$i$i<<2)|0);
               HEAP32[$1933>>2] = $1932;
               $1934 = (($i$120$i$i$i) + 1)|0;
               $1935 = ($1934|0)<($1760|0);
               if ($1935) {
                $hi$018$i$i$i = $hi$1$lcssa$i$i$i;$i$120$i$i$i = $1934;$lo$019$i$i$i = $lo$1$lcssa$i$i$i;
               } else {
                $i$28$i$i$i = 0;
                break;
               }
              }
              while(1) {
               $1936 = (+($i$28$i$i$i|0));
               $1937 = $1936 + 0.25;
               $1938 = $1937;
               $1939 = $1938 * 0.5;
               $1940 = $1819 * $1939;
               $1941 = $1940 / $1778;
               $1942 = (+Math_log((+$1941)));
               $1943 = $1942 * 1.44269502162933349609;
               $1944 = $1943 + -5.9657840728759765625;
               $1945 = $1944 * $1785;
               $1946 = $1945 + 0.5;
               $1947 = (~~(($1946)));
               $1948 = (($1809) + ($i$28$i$i$i<<2)|0);
               HEAP32[$1948>>2] = $1947;
               $1949 = (($i$28$i$i$i) + 1)|0;
               $exitcond34$i$i$i = ($1949|0)==($1760|0);
               if ($exitcond34$i$i$i) {
                break;
               } else {
                $i$28$i$i$i = $1949;
               }
              }
             }
             $1950 = (($1756) + 36|0);
             $1951 = $1819 * 0.5;
             $1952 = $1951 / $1778;
             $1953 = $1952;
             $1954 = (($1756) + 24|0);
             $1955 = +HEAPF32[$1954>>2];
             $1956 = (($1756) + 28|0);
             $1957 = +HEAPF32[$1956>>2];
             $1958 = (_setup_tone_curves($1950,$1953,$1760,$1955,$1957)|0);
             $1959 = ((($1754) + (($i$128$i$i*52)|0)|0) + 8|0);
             HEAP32[$1959>>2] = $1958;
             $1960 = (_malloc(12)|0);
             $1961 = ((($1754) + (($i$128$i$i*52)|0)|0) + 12|0);
             HEAP32[$1961>>2] = $1960;
             $1962 = (_malloc($1806)|0);
             HEAP32[$1960>>2] = $1962;
             $1963 = (_malloc($1806)|0);
             $1964 = (($1960) + 4|0);
             HEAP32[$1964>>2] = $1963;
             $1965 = (_malloc($1806)|0);
             $1966 = (($1960) + 8|0);
             HEAP32[$1966>>2] = $1965;
             if ($1849) {
              $1967 = $1778 * 2.0;
              $1968 = HEAP32[$1813>>2]|0;
              $i$45$i$i$i = 0;
              while(1) {
               $1969 = (+($i$45$i$i$i|0));
               $1970 = $1969 + 0.5;
               $1971 = $1819 * $1970;
               $1972 = $1971 / $1967;
               $1973 = (+Math_log((+$1972)));
               $1974 = $1973 * 2.88539004325866699219;
               $1975 = $1974 + -11.931568145751953125;
               $1976 = $1975;
               $1977 = $1976 < 0.0;
               $halfoc$0$i$i$i = $1977 ? 0.0 : $1976;
               $1978 = !($halfoc$0$i$i$i >= 16.0);
               $halfoc$1$i$i$i = $1978 ? $halfoc$0$i$i$i : 16.0;
               $1979 = (~~(($halfoc$1$i$i$i)));
               $1980 = (+($1979|0));
               $1981 = $halfoc$1$i$i$i - $1980;
               $1982 = $1981;
               $1983 = 1.0 - $1982;
               $1984 = (($1979) + 1)|0;
               $1985 = ((($1968) + ($1979<<2)|0) + 132|0);
               $1986 = +HEAPF32[$1985>>2];
               $1987 = $1986;
               $1988 = $1983 * $1987;
               $1989 = ((($1968) + ($1984<<2)|0) + 132|0);
               $1990 = +HEAPF32[$1989>>2];
               $1991 = $1981 * $1990;
               $1992 = $1991;
               $1993 = $1988 + $1992;
               $1994 = $1993;
               $1995 = (($1962) + ($i$45$i$i$i<<2)|0);
               HEAPF32[$1995>>2] = $1994;
               $1996 = ((($1968) + ($1979<<2)|0) + 200|0);
               $1997 = +HEAPF32[$1996>>2];
               $1998 = $1997;
               $1999 = $1983 * $1998;
               $2000 = ((($1968) + ($1984<<2)|0) + 200|0);
               $2001 = +HEAPF32[$2000>>2];
               $2002 = $1981 * $2001;
               $2003 = $2002;
               $2004 = $1999 + $2003;
               $2005 = $2004;
               $2006 = (($1963) + ($i$45$i$i$i<<2)|0);
               HEAPF32[$2006>>2] = $2005;
               $2007 = ((($1968) + ($1979<<2)|0) + 268|0);
               $2008 = +HEAPF32[$2007>>2];
               $2009 = $2008;
               $2010 = $1983 * $2009;
               $2011 = ((($1968) + ($1984<<2)|0) + 268|0);
               $2012 = +HEAPF32[$2011>>2];
               $2013 = $1981 * $2012;
               $2014 = $2013;
               $2015 = $2010 + $2014;
               $2016 = $2015;
               $2017 = (($1965) + ($i$45$i$i$i<<2)|0);
               HEAPF32[$2017>>2] = $2016;
               $2018 = (($i$45$i$i$i) + 1)|0;
               $exitcond$i12$i$i = ($2018|0)==($1760|0);
               if ($exitcond$i12$i$i) {
                break;
               } else {
                $i$45$i$i$i = $2018;
               }
              }
             }
             $2019 = (($i$128$i$i) + 1)|0;
             $2020 = HEAP32[$1734>>2]|0;
             $2021 = ($2019|0)<($2020|0);
             if (!($2021)) {
              break L525;
             }
             $$pre46$i$i = HEAP32[$1747>>2]|0;
             $1754 = $$pre46$i$i;$i$128$i$i = $2019;
            }
           }
          } while(0);
          HEAP32[$1494>>2] = 1;
          $2022 = HEAP32[$1548>>2]|0;
          $2023 = (($1493) + 424|0);
          HEAP32[$2023>>2] = $2022;
          $2024 = (($1493) + 364|0);
          $2025 = HEAP32[$2024>>2]|0;
          $2026 = $2025 << 2;
          $2027 = (_malloc($2026)|0);
          $2028 = (($1493) + 416|0);
          HEAP32[$2028>>2] = $2027;
          $2029 = (_malloc($2026)|0);
          $2030 = (($1493) + 420|0);
          HEAP32[$2030>>2] = $2029;
          $2031 = ($2025|0)>(0);
          L578: do {
           if ($2031) {
            $2032 = ($2022|0)==(0);
            $2033 = $2022 << 2;
            $2034 = ($2022>>>0)>(65535);
            $2044 = $2027;$i1$020$i$i = 0;
            while(1) {
             $$not55 = $2034 ^ 1;
             $brmerge56 = $2032 | $$not55;
             $$mux = $2032 ? 0 : $2033;
             if ($brmerge56) {
              $req$0$i14$i$i = $$mux;
             } else {
              $2035 = (($2033>>>0) / ($2022>>>0))&-1;
              $2036 = ($2035|0)==(4);
              $$$i13$i$i = $2036 ? $2033 : -1;
              $req$0$i14$i$i = $$$i13$i$i;
             }
             $2037 = (_malloc($req$0$i14$i$i)|0);
             $2038 = ($2037|0)==(0|0);
             do {
              if (!($2038)) {
               $2039 = (($2037) + -4|0);
               $2040 = HEAP32[$2039>>2]|0;
               $2041 = $2040 & 3;
               $2042 = ($2041|0)==(0);
               if ($2042) {
                break;
               }
               _memset(($2037|0),0,($req$0$i14$i$i|0))|0;
              }
             } while(0);
             $2043 = (($2044) + ($i1$020$i$i<<2)|0);
             HEAP32[$2043>>2] = $2037;
             $2045 = (($i1$020$i$i) + 1)|0;
             $2046 = ($2045|0)<($2025|0);
             if (!($2046)) {
              break L578;
             }
             $$pre44$i$i = HEAP32[$2028>>2]|0;
             $2044 = $$pre44$i$i;$i1$020$i$i = $2045;
            }
           }
          } while(0);
          $2047 = (($1493) + 444|0);
          HEAP32[$2047>>2] = 0;
          $2048 = (($1493) + 448|0);
          HEAP32[$2048>>2] = 0;
          $2049 = HEAP32[$1548>>2]|0;
          $2050 = (($2049|0) / 2)&-1;
          $2051 = (($1493) + 456|0);
          HEAP32[$2051>>2] = $2050;
          $2052 = (($1493) + 428|0);
          HEAP32[$2052>>2] = $2050;
          $2053 = (($1497) + 16|0);
          $2054 = HEAP32[$2053>>2]|0;
          $2055 = ($2054|0)==(0);
          do {
           if ($2055) {
            $req$0$i17$i$i = 0;
           } else {
            $2056 = $2054 << 2;
            $2057 = ($2054>>>0)>(65535);
            if (!($2057)) {
             $req$0$i17$i$i = $2056;
             break;
            }
            $2058 = (($2056>>>0) / ($2054>>>0))&-1;
            $2059 = ($2058|0)==(4);
            $$$i16$i$i = $2059 ? $2056 : -1;
            $req$0$i17$i$i = $$$i16$i$i;
           }
          } while(0);
          $2060 = (_malloc($req$0$i17$i$i)|0);
          $2061 = ($2060|0)==(0|0);
          do {
           if (!($2061)) {
            $2062 = (($2060) + -4|0);
            $2063 = HEAP32[$2062>>2]|0;
            $2064 = $2063 & 3;
            $2065 = ($2064|0)==(0);
            if ($2065) {
             break;
            }
            _memset(($2060|0),0,($req$0$i17$i$i|0))|0;
           }
          } while(0);
          $2066 = (($1501) + 48|0);
          HEAP32[$2066>>2] = $2060;
          $2067 = (($1497) + 20|0);
          $2068 = HEAP32[$2067>>2]|0;
          $2069 = ($2068|0)==(0);
          do {
           if ($2069) {
            $req$0$i20$i$i = 0;
           } else {
            $2070 = $2068 << 2;
            $2071 = ($2068>>>0)>(65535);
            if (!($2071)) {
             $req$0$i20$i$i = $2070;
             break;
            }
            $2072 = (($2070>>>0) / ($2068>>>0))&-1;
            $2073 = ($2072|0)==(4);
            $$$i19$i$i = $2073 ? $2070 : -1;
            $req$0$i20$i$i = $$$i19$i$i;
           }
          } while(0);
          $2074 = (_malloc($req$0$i20$i$i)|0);
          $2075 = ($2074|0)==(0|0);
          do {
           if (!($2075)) {
            $2076 = (($2074) + -4|0);
            $2077 = HEAP32[$2076>>2]|0;
            $2078 = $2077 & 3;
            $2079 = ($2078|0)==(0);
            if ($2079) {
             break;
            }
            _memset(($2074|0),0,($req$0$i20$i$i|0))|0;
           }
          } while(0);
          $2080 = (($1501) + 52|0);
          HEAP32[$2080>>2] = $2074;
          $2081 = HEAP32[$2053>>2]|0;
          $2082 = ($2081|0)>(0);
          if ($2082) {
           $2083 = (($1497) + 800|0);
           $2084 = (($1497) + 1056|0);
           $i$317$i$i = 0;
           while(1) {
            $2089 = (($2083) + ($i$317$i$i<<2)|0);
            $2090 = HEAP32[$2089>>2]|0;
            $2091 = (57296 + ($2090<<2)|0);
            $2092 = HEAP32[$2091>>2]|0;
            $2093 = (($2092) + 8|0);
            $2094 = HEAP32[$2093>>2]|0;
            $2095 = (($2084) + ($i$317$i$i<<2)|0);
            $2096 = HEAP32[$2095>>2]|0;
            $2097 = (FUNCTION_TABLE_iii[$2094 & 127]($1494,$2096)|0);
            $2098 = HEAP32[$2066>>2]|0;
            $2099 = (($2098) + ($i$317$i$i<<2)|0);
            HEAP32[$2099>>2] = $2097;
            $2100 = (($i$317$i$i) + 1)|0;
            $2101 = HEAP32[$2053>>2]|0;
            $2102 = ($2100|0)<($2101|0);
            if ($2102) {
             $i$317$i$i = $2100;
            } else {
             break;
            }
           }
          }
          $2085 = HEAP32[$2067>>2]|0;
          $2086 = ($2085|0)>(0);
          if ($2086) {
           $2087 = (($1497) + 1312|0);
           $2088 = (($1497) + 1568|0);
           $i$415$i$i = 0;
           while(1) {
            $2103 = (($2087) + ($i$415$i$i<<2)|0);
            $2104 = HEAP32[$2103>>2]|0;
            $2105 = (57304 + ($2104<<2)|0);
            $2106 = HEAP32[$2105>>2]|0;
            $2107 = (($2106) + 8|0);
            $2108 = HEAP32[$2107>>2]|0;
            $2109 = (($2088) + ($i$415$i$i<<2)|0);
            $2110 = HEAP32[$2109>>2]|0;
            $2111 = (FUNCTION_TABLE_iii[$2108 & 127]($1494,$2110)|0);
            $2112 = HEAP32[$2080>>2]|0;
            $2113 = (($2112) + ($i$415$i$i<<2)|0);
            HEAP32[$2113>>2] = $2111;
            $2114 = (($i$415$i$i) + 1)|0;
            $2115 = HEAP32[$2067>>2]|0;
            $2116 = ($2114|0)<($2115|0);
            if ($2116) {
             $i$415$i$i = $2114;
            } else {
             break;
            }
           }
          }
          $2117 = HEAP32[$1507>>2]|0;
          $2118 = HEAP32[$1496>>2]|0;
          $2119 = (($2118) + 2868|0);
          $2120 = (_malloc(36)|0);
          $2121 = ($2120|0)==(0|0);
          do {
           if (!($2121)) {
            $2122 = (($2120) + -4|0);
            $2123 = HEAP32[$2122>>2]|0;
            $2124 = $2123 & 3;
            $2125 = ($2124|0)==(0);
            if ($2125) {
             break;
            }
            dest=$2120+0|0; stop=dest+36|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           }
          } while(0);
          $2126 = HEAP32[$2024>>2]|0;
          $2127 = (($2120) + 4|0);
          HEAP32[$2127>>2] = $2126;
          HEAPF32[$2120>>2] = -9999.0;
          $2128 = (($2120) + 8|0);
          HEAP32[$2128>>2] = $2119;
          $2129 = (($2117) + 60|0);
          HEAP32[$2129>>2] = $2120;
          $2130 = (_malloc(180)|0);
          $2131 = ($2130|0)==(0|0);
          do {
           if (!($2131)) {
            $2132 = (($2130) + -4|0);
            $2133 = HEAP32[$2132>>2]|0;
            $2134 = $2133 & 3;
            $2135 = ($2134|0)==(0);
            if ($2135) {
             break;
            }
            _memset(($2130|0),0,180)|0;
           }
          } while(0);
          HEAP32[$2117>>2] = $2130;
          $2136 = HEAP32[$1496>>2]|0;
          $2137 = HEAP32[$2024>>2]|0;
          $2138 = (($2130) + 4|0);
          HEAP32[$2138>>2] = 128;
          $2139 = (($2130) + 8|0);
          HEAP32[$2139>>2] = 64;
          $2140 = (($2136) + 2932|0);
          $2141 = +HEAPF32[$2140>>2];
          $2142 = (($2130) + 12|0);
          HEAPF32[$2142>>2] = $2141;
          HEAP32[$2130>>2] = $2137;
          $2143 = (($2130) + 164|0);
          HEAP32[$2143>>2] = 128;
          $2144 = (($2136) + 4|0);
          $2145 = HEAP32[$2144>>2]|0;
          $2146 = (($2145|0) / 2)&-1;
          $2147 = (($2130) + 176|0);
          HEAP32[$2147>>2] = $2146;
          $2148 = (_malloc(512)|0);
          $2149 = ($2148|0)==(0|0);
          do {
           if (!($2149)) {
            $2150 = (($2148) + -4|0);
            $2151 = HEAP32[$2150>>2]|0;
            $2152 = $2151 & 3;
            $2153 = ($2152|0)==(0);
            if ($2153) {
             break;
            }
            _memset(($2148|0),0,512)|0;
           }
          } while(0);
          $2154 = (($2130) + 36|0);
          HEAP32[$2154>>2] = $2148;
          $2155 = (($2130) + 16|0);
          _mdct_init($2155,128);
          $2156 = HEAP32[$2154>>2]|0;
          $i$03$i$i = 0;
          while(1) {
           $2157 = (+($i$03$i$i|0));
           $2158 = $2157 * 0.024736950028266087992;
           $2159 = (+Math_sin((+$2158)));
           $2160 = $2159;
           $2161 = (($2156) + ($i$03$i$i<<2)|0);
           $2162 = $2160 * $2160;
           HEAPF32[$2161>>2] = $2162;
           $2163 = (($i$03$i$i) + 1)|0;
           $exitcond5$i$i = ($2163|0)==(128);
           if ($exitcond5$i$i) {
            break;
           } else {
            $i$03$i$i = $2163;
           }
          }
          $2164 = (($2130) + 40|0);
          HEAP32[$2164>>2] = 2;
          $2165 = (($2130) + 44|0);
          HEAP32[$2165>>2] = 4;
          $2166 = (($2130) + 56|0);
          HEAP32[$2166>>2] = 4;
          $2167 = (($2130) + 60|0);
          HEAP32[$2167>>2] = 5;
          $2168 = (($2130) + 72|0);
          HEAP32[$2168>>2] = 6;
          $2169 = (($2130) + 76|0);
          HEAP32[$2169>>2] = 6;
          $2170 = (($2130) + 88|0);
          HEAP32[$2170>>2] = 9;
          $2171 = (($2130) + 92|0);
          HEAP32[$2171>>2] = 8;
          $2172 = (($2130) + 104|0);
          HEAP32[$2172>>2] = 13;
          $2173 = (($2130) + 108|0);
          HEAP32[$2173>>2] = 8;
          $2174 = (($2130) + 120|0);
          HEAP32[$2174>>2] = 17;
          $2175 = (($2130) + 124|0);
          HEAP32[$2175>>2] = 8;
          $2176 = (($2130) + 136|0);
          HEAP32[$2176>>2] = 22;
          $2177 = (($2130) + 140|0);
          HEAP32[$2177>>2] = 8;
          $2179 = 4;$j$02$i$i18 = 0;
          while(1) {
           $2178 = $2179 << 2;
           $2180 = (_malloc($2178)|0);
           $2181 = ((($2130) + ($j$02$i$i18<<4)|0) + 48|0);
           HEAP32[$2181>>2] = $2180;
           $2182 = ($2179|0)>(0);
           if ($2182) {
            $2183 = (+($2179|0));
            $2184 = ((($2130) + ($j$02$i$i18<<4)|0) + 52|0);
            $$pre$i$i19 = +HEAPF32[$2184>>2];
            $2193 = $$pre$i$i19;$i$11$i$i = 0;
            while(1) {
             $2185 = (+($i$11$i$i|0));
             $2186 = $2185 + 0.5;
             $2187 = $2186 / $2183;
             $2188 = $2187 * 3.141592653589793116;
             $2189 = (+Math_sin((+$2188)));
             $2190 = $2189;
             $2191 = (($2180) + ($i$11$i$i<<2)|0);
             HEAPF32[$2191>>2] = $2190;
             $2192 = $2190 + $2193;
             HEAPF32[$2184>>2] = $2192;
             $2194 = (($i$11$i$i) + 1)|0;
             $exitcond$i$i = ($2194|0)==($2179|0);
             if ($exitcond$i$i) {
              $2197 = $2192;
              break;
             } else {
              $2193 = $2192;$i$11$i$i = $2194;
             }
            }
           } else {
            $$phi$trans$insert9$i$i = ((($2130) + ($j$02$i$i18<<4)|0) + 52|0);
            $$pre10$i$i = +HEAPF32[$$phi$trans$insert9$i$i>>2];
            $2197 = $$pre10$i$i;
           }
           $2195 = ((($2130) + ($j$02$i$i18<<4)|0) + 52|0);
           $2196 = 1.0 / $2197;
           HEAPF32[$2195>>2] = $2196;
           $2198 = (($j$02$i$i18) + 1)|0;
           $exitcond4$i$i = ($2198|0)==(7);
           if ($exitcond4$i$i) {
            break;
           }
           $$phi$trans$insert$i$i22 = ((($2130) + ($2198<<4)|0) + 44|0);
           $$pre8$i$i = HEAP32[$$phi$trans$insert$i$i22>>2]|0;
           $2179 = $$pre8$i$i;$j$02$i$i18 = $2198;
          }
          $2199 = ($2137*7)|0;
          $2200 = ($2137|0)==(0);
          do {
           if ($2200) {
            $req$0$i$i4$i = 0;
           } else {
            $2201 = ($2137*1008)|0;
            $2202 = ($2199>>>0)>(65535);
            if (!($2202)) {
             $req$0$i$i4$i = $2201;
             break;
            }
            $2203 = (($2201>>>0) / ($2199>>>0))&-1;
            $2204 = ($2203|0)==(144);
            $$$i$i3$i = $2204 ? $2201 : -1;
            $req$0$i$i4$i = $$$i$i3$i;
           }
          } while(0);
          $2205 = (_malloc($req$0$i$i4$i)|0);
          $2206 = ($2205|0)==(0|0);
          do {
           if (!($2206)) {
            $2207 = (($2205) + -4|0);
            $2208 = HEAP32[$2207>>2]|0;
            $2209 = $2208 & 3;
            $2210 = ($2209|0)==(0);
            if ($2210) {
             break;
            }
            _memset(($2205|0),0,($req$0$i$i4$i|0))|0;
           }
          } while(0);
          $2211 = (($2130) + 152|0);
          HEAP32[$2211>>2] = $2205;
          $2212 = HEAP32[$2143>>2]|0;
          $2213 = ($2212|0)==(0);
          do {
           if ($2213) {
            $req$0$i3$i$i = 0;
           } else {
            $2214 = $2212 << 2;
            $2215 = ($2212>>>0)>(65535);
            if (!($2215)) {
             $req$0$i3$i$i = $2214;
             break;
            }
            $2216 = (($2214>>>0) / ($2212>>>0))&-1;
            $2217 = ($2216|0)==(4);
            $$$i2$i$i = $2217 ? $2214 : -1;
            $req$0$i3$i$i = $$$i2$i$i;
           }
          } while(0);
          $2218 = (_malloc($req$0$i3$i$i)|0);
          $2219 = ($2218|0)==(0|0);
          do {
           if (!($2219)) {
            $2220 = (($2218) + -4|0);
            $2221 = HEAP32[$2220>>2]|0;
            $2222 = $2221 & 3;
            $2223 = ($2222|0)==(0);
            if ($2223) {
             break;
            }
            _memset(($2218|0),0,($req$0$i3$i$i|0))|0;
           }
          } while(0);
          $2224 = (($2130) + 160|0);
          HEAP32[$2224>>2] = $2218;
          $2225 = (($2117) + 80|0);
          $2226 = HEAP32[$1496>>2]|0;
          dest=$2225+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          $2227 = (($2226) + 3372|0);
          $2228 = HEAP32[$2227>>2]|0;
          $2229 = ($2228|0)>(0);
          if ($2229) {
           $2230 = (($2226) + 3360|0);
           $2231 = (($1493) + 368|0);
           $2232 = HEAP32[$2231>>2]|0;
           $2233 = HEAP32[$2226>>2]|0;
           $2234 = $2233 >> 1;
           $2235 = (($2226) + 4|0);
           $2236 = HEAP32[$2235>>2]|0;
           $2237 = (($2236|0) / ($2233|0))&-1;
           $2238 = (($2117) + 104|0);
           HEAP32[$2238>>2] = $2237;
           HEAP32[$2225>>2] = 1;
           $2239 = HEAP32[$2230>>2]|0;
           $2240 = (+($2239|0));
           $2241 = (+($2234|0));
           $2242 = $2241 * $2240;
           $2243 = (+($2232|0));
           $2244 = $2242 / $2243;
           $2245 = (+_rint((+$2244)));
           $2246 = (~~(($2245)));
           $2247 = (($2117) + 92|0);
           HEAP32[$2247>>2] = $2246;
           $2248 = (($2226) + 3364|0);
           $2249 = HEAP32[$2248>>2]|0;
           $2250 = (+($2249|0));
           $2251 = $2241 * $2250;
           $2252 = $2251 / $2243;
           $2253 = (+_rint((+$2252)));
           $2254 = (~~(($2253)));
           $2255 = (($2117) + 96|0);
           HEAP32[$2255>>2] = $2254;
           $2256 = (($2226) + 3368|0);
           $2257 = HEAP32[$2256>>2]|0;
           $2258 = (+($2257|0));
           $2259 = $2241 * $2258;
           $2260 = $2259 / $2243;
           $2261 = (+_rint((+$2260)));
           $2262 = (~~(($2261)));
           $2263 = (($2117) + 100|0);
           HEAP32[$2263>>2] = $2262;
           $2264 = (($2117) + 112|0);
           HEAPF64[$2264>>3] = 7.0;
           $2265 = HEAP32[$2227>>2]|0;
           $2266 = (+($2265|0));
           $2267 = (($2226) + 3376|0);
           $2268 = +HEAPF64[$2267>>3];
           $2269 = $2266 * $2268;
           $2270 = (~~(($2269)));
           $2271 = (($2117) + 88|0);
           HEAP32[$2271>>2] = $2270;
           $2272 = (($2117) + 84|0);
           HEAP32[$2272>>2] = $2270;
          }
          $2273 = (($1493) + 472|0);
          $2274 = $2273;
          $2275 = $2274;
          HEAP32[$2275>>2] = 3;
          $2276 = (($2274) + 4)|0;
          $2277 = $2276;
          HEAP32[$2277>>2] = 0;
          $$pre51 = HEAP32[553040>>2]|0;
          $2279 = $$pre51;
         }
         $2278 = (($2279) + 408|0);
         $2280 = (($2279) + 520|0);
         dest=$2280+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         $2281 = (($2279) + 584|0);
         HEAP32[$2281>>2] = $2278;
         $2282 = (($2279) + 596|0);
         HEAP32[$2282>>2] = 0;
         $2283 = (($2279) + 588|0);
         HEAP32[$2283>>2] = 0;
         $2284 = HEAP32[$2278>>2]|0;
         $2285 = ($2284|0)==(0);
         if ($2285) {
          $2315 = $2279;
         } else {
          $2286 = (_malloc(72)|0);
          $2287 = ($2286|0)==(0|0);
          do {
           if (!($2287)) {
            $2288 = (($2286) + -4|0);
            $2289 = HEAP32[$2288>>2]|0;
            $2290 = $2289 & 3;
            $2291 = ($2290|0)==(0);
            if ($2291) {
             break;
            }
            dest=$2286+0|0; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           }
          } while(0);
          $2292 = (($2279) + 624|0);
          HEAP32[$2292>>2] = $2286;
          $2293 = (($2286) + 4|0);
          HEAPF32[$2293>>2] = -9999.0;
          $2294 = (($2279) + 524|0);
          $2295 = (($2286) + 12|0);
          $2296 = (($2286) + 40|0);
          $2297 = (($2279) + 532|0);
          $2298 = (($2279) + 536|0);
          $2299 = (($2279) + 540|0);
          $i$01$i = 0;
          while(1) {
           $2300 = ($i$01$i|0)==(7);
           if ($2300) {
            HEAP32[$2296>>2] = $2294;
            ;HEAP32[$2294+0>>2]=0|0;HEAP32[$2294+4>>2]=0|0;HEAP32[$2294+8>>2]=0|0;HEAP32[$2294+12>>2]=0|0;
            $2301 = (_malloc(256)|0);
            HEAP32[$2297>>2] = $2301;
            HEAP32[$2298>>2] = $2301;
            HEAP8[$2301>>0] = 0;
            HEAP32[$2299>>2] = 256;
            $i$01$i = 8;
            continue;
           }
           $2302 = (_malloc(20)|0);
           $2303 = ($2302|0)==(0|0);
           do {
            if (!($2303)) {
             $2304 = (($2302) + -4|0);
             $2305 = HEAP32[$2304>>2]|0;
             $2306 = $2305 & 3;
             $2307 = ($2306|0)==(0);
             if ($2307) {
              break;
             }
             dest=$2302+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
            }
           } while(0);
           $2308 = (($2295) + ($i$01$i<<2)|0);
           HEAP32[$2308>>2] = $2302;
           ;HEAP32[$2302+0>>2]=0|0;HEAP32[$2302+4>>2]=0|0;HEAP32[$2302+8>>2]=0|0;HEAP32[$2302+12>>2]=0|0;
           $2309 = (_malloc(256)|0);
           $2310 = (($2302) + 8|0);
           HEAP32[$2310>>2] = $2309;
           $2311 = (($2302) + 12|0);
           HEAP32[$2311>>2] = $2309;
           HEAP8[$2309>>0] = 0;
           $2312 = (($2302) + 16|0);
           HEAP32[$2312>>2] = 256;
           $2313 = (($i$01$i) + 1)|0;
           $exitcond$i = ($2313|0)==(15);
           if ($exitcond$i) {
            break;
           } else {
            $i$01$i = $2313;
           }
          }
          $$pre52 = HEAP32[553040>>2]|0;
          $2315 = $$pre52;
         }
         $2314 = (($2315) + 412|0);
         $2316 = HEAP32[$2314>>2]|0;
         $2317 = (($2315) + 512|0);
         $2318 = HEAP32[$2317>>2]|0;
         $2319 = ($2318|0)==(0|0);
         L679: do {
          if ($2319) {
           ;HEAP32[$vorbis_header+0>>2]=0|0;HEAP32[$vorbis_header+4>>2]=0|0;HEAP32[$vorbis_header+8>>2]=0|0;HEAP32[$vorbis_header+12>>2]=0|0;HEAP32[$vorbis_header+16>>2]=0|0;HEAP32[$vorbis_header+20>>2]=0|0;HEAP32[$vorbis_header+24>>2]=0|0;HEAP32[$vorbis_header+28>>2]=0|0;
           ;HEAP32[$vorbis_header_comment+0>>2]=0|0;HEAP32[$vorbis_header_comment+4>>2]=0|0;HEAP32[$vorbis_header_comment+8>>2]=0|0;HEAP32[$vorbis_header_comment+12>>2]=0|0;HEAP32[$vorbis_header_comment+16>>2]=0|0;HEAP32[$vorbis_header_comment+20>>2]=0|0;HEAP32[$vorbis_header_comment+24>>2]=0|0;HEAP32[$vorbis_header_comment+28>>2]=0|0;
           ;HEAP32[$vorbis_header_code+0>>2]=0|0;HEAP32[$vorbis_header_code+4>>2]=0|0;HEAP32[$vorbis_header_code+8>>2]=0|0;HEAP32[$vorbis_header_code+12>>2]=0|0;HEAP32[$vorbis_header_code+16>>2]=0|0;HEAP32[$vorbis_header_code+20>>2]=0|0;HEAP32[$vorbis_header_code+24>>2]=0|0;HEAP32[$vorbis_header_code+28>>2]=0|0;
          } else {
           ;HEAP32[$opb$i+0>>2]=0|0;HEAP32[$opb$i+4>>2]=0|0;HEAP32[$opb$i+8>>2]=0|0;HEAP32[$opb$i+12>>2]=0|0;
           $2320 = (_malloc(256)|0);
           $2321 = (($opb$i) + 8|0);
           HEAP32[$2321>>2] = $2320;
           $2322 = (($opb$i) + 12|0);
           HEAP32[$2322>>2] = $2320;
           HEAP8[$2320>>0] = 0;
           $2323 = (($opb$i) + 16|0);
           HEAP32[$2323>>2] = 256;
           $2324 = (($2316) + 28|0);
           $2325 = HEAP32[$2324>>2]|0;
           $2326 = ($2325|0)==(0|0);
           if ($2326) {
            ;HEAP32[$vorbis_header+0>>2]=0|0;HEAP32[$vorbis_header+4>>2]=0|0;HEAP32[$vorbis_header+8>>2]=0|0;HEAP32[$vorbis_header+12>>2]=0|0;HEAP32[$vorbis_header+16>>2]=0|0;HEAP32[$vorbis_header+20>>2]=0|0;HEAP32[$vorbis_header+24>>2]=0|0;HEAP32[$vorbis_header+28>>2]=0|0;
            ;HEAP32[$vorbis_header_comment+0>>2]=0|0;HEAP32[$vorbis_header_comment+4>>2]=0|0;HEAP32[$vorbis_header_comment+8>>2]=0|0;HEAP32[$vorbis_header_comment+12>>2]=0|0;HEAP32[$vorbis_header_comment+16>>2]=0|0;HEAP32[$vorbis_header_comment+20>>2]=0|0;HEAP32[$vorbis_header_comment+24>>2]=0|0;HEAP32[$vorbis_header_comment+28>>2]=0|0;
            ;HEAP32[$vorbis_header_code+0>>2]=0|0;HEAP32[$vorbis_header_code+4>>2]=0|0;HEAP32[$vorbis_header_code+8>>2]=0|0;HEAP32[$vorbis_header_code+12>>2]=0|0;HEAP32[$vorbis_header_code+16>>2]=0|0;HEAP32[$vorbis_header_code+20>>2]=0|0;HEAP32[$vorbis_header_code+24>>2]=0|0;HEAP32[$vorbis_header_code+28>>2]=0|0;
            $$pre$i26 = (($2318) + 64|0);
            $$pre$phi12$iZ2D = $$pre$i26;
           } else {
            _oggpack_write($opb$i,1,8);
            _oggpack_write($opb$i,118,8);
            _oggpack_write($opb$i,111,8);
            _oggpack_write($opb$i,114,8);
            _oggpack_write($opb$i,98,8);
            _oggpack_write($opb$i,105,8);
            _oggpack_write($opb$i,115,8);
            _oggpack_write($opb$i,0,32);
            $2327 = (($2316) + 4|0);
            $2328 = HEAP32[$2327>>2]|0;
            _oggpack_write($opb$i,$2328,8);
            $2329 = (($2316) + 8|0);
            $2330 = HEAP32[$2329>>2]|0;
            _oggpack_write($opb$i,$2330,32);
            $2331 = (($2316) + 12|0);
            $2332 = HEAP32[$2331>>2]|0;
            _oggpack_write($opb$i,$2332,32);
            $2333 = (($2316) + 16|0);
            $2334 = HEAP32[$2333>>2]|0;
            _oggpack_write($opb$i,$2334,32);
            $2335 = (($2316) + 20|0);
            $2336 = HEAP32[$2335>>2]|0;
            _oggpack_write($opb$i,$2336,32);
            $2337 = HEAP32[$2325>>2]|0;
            $2338 = ($2337|0)==(0);
            $2339 = (($2337) + -1)|0;
            $v$$i$i$i28 = $2338 ? 0 : $2339;
            $2340 = ($v$$i$i$i28|0)==(0);
            if ($2340) {
             $ret$0$lcssa$i$i$i32 = 0;
            } else {
             $$01$i$i$i31 = $v$$i$i$i28;$ret$02$i$i$i30 = 0;
             while(1) {
              $2341 = (($ret$02$i$i$i30) + 1)|0;
              $2342 = $$01$i$i$i31 >>> 1;
              $2343 = ($2342|0)==(0);
              if ($2343) {
               $ret$0$lcssa$i$i$i32 = $2341;
               break;
              } else {
               $$01$i$i$i31 = $2342;$ret$02$i$i$i30 = $2341;
              }
             }
            }
            _oggpack_write($opb$i,$ret$0$lcssa$i$i$i32,4);
            $2344 = (($2325) + 4|0);
            $2345 = HEAP32[$2344>>2]|0;
            $2346 = ($2345|0)==(0);
            $2347 = (($2345) + -1)|0;
            $v$$i2$i$i = $2346 ? 0 : $2347;
            $2348 = ($v$$i2$i$i|0)==(0);
            if ($2348) {
             $ret$0$lcssa$i6$i$i = 0;
            } else {
             $$01$i4$i$i = $v$$i2$i$i;$ret$02$i3$i$i = 0;
             while(1) {
              $2349 = (($ret$02$i3$i$i) + 1)|0;
              $2350 = $$01$i4$i$i >>> 1;
              $2351 = ($2350|0)==(0);
              if ($2351) {
               $ret$0$lcssa$i6$i$i = $2349;
               break;
              } else {
               $$01$i4$i$i = $2350;$ret$02$i3$i$i = $2349;
              }
             }
            }
            _oggpack_write($opb$i,$ret$0$lcssa$i6$i$i,4);
            _oggpack_write($opb$i,1,1);
            $2352 = (($2318) + 64|0);
            $2353 = HEAP32[$2352>>2]|0;
            $2354 = ($2353|0)==(0|0);
            if (!($2354)) {
             _free($2353);
            }
            $2355 = HEAP32[$opb$i>>2]|0;
            $2356 = (($opb$i) + 4|0);
            $2357 = HEAP32[$2356>>2]|0;
            $2358 = (($2357) + 7)|0;
            $2359 = (($2358|0) / 8)&-1;
            $2360 = (($2359) + ($2355))|0;
            $2361 = (_malloc($2360)|0);
            HEAP32[$2352>>2] = $2361;
            $2362 = HEAP32[$2321>>2]|0;
            $2363 = HEAP32[$opb$i>>2]|0;
            $2364 = HEAP32[$2356>>2]|0;
            $2365 = (($2364) + 7)|0;
            $2366 = (($2365|0) / 8)&-1;
            $2367 = (($2366) + ($2363))|0;
            _memcpy(($2361|0),($2362|0),($2367|0))|0;
            $2368 = HEAP32[$2352>>2]|0;
            HEAP32[$vorbis_header>>2] = $2368;
            $2369 = HEAP32[$opb$i>>2]|0;
            $2370 = HEAP32[$2356>>2]|0;
            $2371 = (($2370) + 7)|0;
            $2372 = (($2371|0) / 8)&-1;
            $2373 = (($2372) + ($2369))|0;
            $2374 = (($vorbis_header) + 4|0);
            HEAP32[$2374>>2] = $2373;
            $2375 = (($vorbis_header) + 8|0);
            HEAP32[$2375>>2] = 1;
            $2376 = (($vorbis_header) + 12|0);
            ;HEAP32[$2376+0>>2]=0|0;HEAP32[$2376+4>>2]=0|0;HEAP32[$2376+8>>2]=0|0;HEAP32[$2376+12>>2]=0|0;HEAP32[$2376+16>>2]=0|0;
            $2377 = HEAP32[$2322>>2]|0;
            $2378 = ($2377|0)==(0|0);
            if (!($2378)) {
             $2379 = HEAP32[$2321>>2]|0;
             HEAP32[$2322>>2] = $2379;
             HEAP8[$2379>>0] = 0;
             HEAP32[$opb$i>>2] = 0;
             HEAP32[$2356>>2] = 0;
            }
            _oggpack_write($opb$i,3,8);
            _oggpack_write($opb$i,118,8);
            _oggpack_write($opb$i,111,8);
            _oggpack_write($opb$i,114,8);
            _oggpack_write($opb$i,98,8);
            _oggpack_write($opb$i,105,8);
            _oggpack_write($opb$i,115,8);
            _oggpack_write($opb$i,47,32);
            $$012$i2$i$i = 56040;$$03$i1$i$i = 47;
            while(1) {
             $2380 = (($$03$i1$i$i) + -1)|0;
             $2381 = (($$012$i2$i$i) + 1|0);
             $2382 = HEAP8[$$012$i2$i$i>>0]|0;
             $2383 = $2382 << 24 >> 24;
             _oggpack_write($opb$i,$2383,8);
             $2384 = ($2380|0)==(0);
             if ($2384) {
              break;
             } else {
              $$012$i2$i$i = $2381;$$03$i1$i$i = $2380;
             }
            }
            $2385 = (($2315) + 400|0);
            $2386 = HEAP32[$2385>>2]|0;
            _oggpack_write($opb$i,$2386,32);
            $2387 = HEAP32[$2385>>2]|0;
            $2388 = ($2387|0)>(0);
            if ($2388) {
             $2389 = (($2315) + 392|0);
             $2390 = (($2315) + 396|0);
             $i$09$i$i = 0;
             while(1) {
              $2391 = HEAP32[$2389>>2]|0;
              $2392 = (($2391) + ($i$09$i$i<<2)|0);
              $2393 = HEAP32[$2392>>2]|0;
              $2394 = ($2393|0)==(0|0);
              do {
               if ($2394) {
                _oggpack_write($opb$i,0,32);
               } else {
                $2395 = HEAP32[$2390>>2]|0;
                $2396 = (($2395) + ($i$09$i$i<<2)|0);
                $2397 = HEAP32[$2396>>2]|0;
                _oggpack_write($opb$i,$2397,32);
                $2398 = HEAP32[$2390>>2]|0;
                $2399 = (($2398) + ($i$09$i$i<<2)|0);
                $2400 = HEAP32[$2399>>2]|0;
                $2401 = ($2400|0)==(0);
                if ($2401) {
                 break;
                }
                $2402 = HEAP32[$2389>>2]|0;
                $2403 = (($2402) + ($i$09$i$i<<2)|0);
                $2404 = HEAP32[$2403>>2]|0;
                $$012$i6$i$i = $2404;$$03$i5$i$i = $2400;
                while(1) {
                 $2405 = (($$03$i5$i$i) + -1)|0;
                 $2406 = (($$012$i6$i$i) + 1|0);
                 $2407 = HEAP8[$$012$i6$i$i>>0]|0;
                 $2408 = $2407 << 24 >> 24;
                 _oggpack_write($opb$i,$2408,8);
                 $2409 = ($2405|0)==(0);
                 if ($2409) {
                  break;
                 } else {
                  $$012$i6$i$i = $2406;$$03$i5$i$i = $2405;
                 }
                }
               }
              } while(0);
              $2410 = (($i$09$i$i) + 1)|0;
              $2411 = HEAP32[$2385>>2]|0;
              $2412 = ($2410|0)<($2411|0);
              if ($2412) {
               $i$09$i$i = $2410;
              } else {
               break;
              }
             }
            }
            _oggpack_write($opb$i,1,1);
            $2413 = (($2318) + 68|0);
            $2414 = HEAP32[$2413>>2]|0;
            $2415 = ($2414|0)==(0|0);
            if (!($2415)) {
             _free($2414);
            }
            $2416 = HEAP32[$opb$i>>2]|0;
            $2417 = HEAP32[$2356>>2]|0;
            $2418 = (($2417) + 7)|0;
            $2419 = (($2418|0) / 8)&-1;
            $2420 = (($2419) + ($2416))|0;
            $2421 = (_malloc($2420)|0);
            HEAP32[$2413>>2] = $2421;
            $2422 = HEAP32[$2321>>2]|0;
            $2423 = HEAP32[$opb$i>>2]|0;
            $2424 = HEAP32[$2356>>2]|0;
            $2425 = (($2424) + 7)|0;
            $2426 = (($2425|0) / 8)&-1;
            $2427 = (($2426) + ($2423))|0;
            _memcpy(($2421|0),($2422|0),($2427|0))|0;
            $2428 = HEAP32[$2413>>2]|0;
            HEAP32[$vorbis_header_comment>>2] = $2428;
            $2429 = HEAP32[$opb$i>>2]|0;
            $2430 = HEAP32[$2356>>2]|0;
            $2431 = (($2430) + 7)|0;
            $2432 = (($2431|0) / 8)&-1;
            $2433 = (($2432) + ($2429))|0;
            $2434 = (($vorbis_header_comment) + 4|0);
            HEAP32[$2434>>2] = $2433;
            $2435 = (($vorbis_header_comment) + 8|0);
            $2436 = (($vorbis_header_comment) + 24|0);
            ;HEAP32[$2435+0>>2]=0|0;HEAP32[$2435+4>>2]=0|0;HEAP32[$2435+8>>2]=0|0;HEAP32[$2435+12>>2]=0|0;
            $2437 = $2436;
            $2438 = $2437;
            HEAP32[$2438>>2] = 1;
            $2439 = (($2437) + 4)|0;
            $2440 = $2439;
            HEAP32[$2440>>2] = 0;
            $2441 = HEAP32[$2322>>2]|0;
            $2442 = ($2441|0)==(0|0);
            if (!($2442)) {
             $2443 = HEAP32[$2321>>2]|0;
             HEAP32[$2322>>2] = $2443;
             HEAP8[$2443>>0] = 0;
             HEAP32[$opb$i>>2] = 0;
             HEAP32[$2356>>2] = 0;
            }
            $2444 = HEAP32[$2324>>2]|0;
            $2445 = ($2444|0)==(0|0);
            L720: do {
             if (!($2445)) {
              _oggpack_write($opb$i,5,8);
              _oggpack_write($opb$i,118,8);
              _oggpack_write($opb$i,111,8);
              _oggpack_write($opb$i,114,8);
              _oggpack_write($opb$i,98,8);
              _oggpack_write($opb$i,105,8);
              _oggpack_write($opb$i,115,8);
              $2446 = (($2444) + 24|0);
              $2447 = HEAP32[$2446>>2]|0;
              $2448 = (($2447) + -1)|0;
              _oggpack_write($opb$i,$2448,8);
              $2449 = HEAP32[$2446>>2]|0;
              $2450 = ($2449|0)>(0);
              L722: do {
               if ($2450) {
                $2451 = (($2444) + 1824|0);
                $i$015$i$i = 0;
                L724: while(1) {
                 $2455 = (($2451) + ($i$015$i$i<<2)|0);
                 $2456 = HEAP32[$2455>>2]|0;
                 _oggpack_write($opb$i,5653314,24);
                 $2457 = HEAP32[$2456>>2]|0;
                 _oggpack_write($opb$i,$2457,16);
                 $2458 = (($2456) + 4|0);
                 $2459 = HEAP32[$2458>>2]|0;
                 _oggpack_write($opb$i,$2459,24);
                 $2460 = HEAP32[$2458>>2]|0;
                 $2461 = ($2460|0)>(1);
                 L726: do {
                  if ($2461) {
                   $2462 = (($2456) + 8|0);
                   $2463 = HEAP32[$2462>>2]|0;
                   $$pre42$i$i = HEAP8[$2463>>0]|0;
                   $2466 = $$pre42$i$i;$i$028$i$i = 1;
                   while(1) {
                    $2467 = ($2466<<24>>24)==(0);
                    if ($2467) {
                     $i$0$lcssa$i$i = $i$028$i$i;
                     break L726;
                    }
                    $2468 = (($2463) + ($i$028$i$i)|0);
                    $2469 = HEAP8[$2468>>0]|0;
                    $2470 = ($2469<<24>>24)<($2466<<24>>24);
                    $2464 = (($i$028$i$i) + 1)|0;
                    if ($2470) {
                     $i$0$lcssa$i$i = $i$028$i$i;
                     break L726;
                    }
                    $2465 = ($2464|0)<($2460|0);
                    if ($2465) {
                     $2466 = $2469;$i$028$i$i = $2464;
                    } else {
                     $i$0$lcssa$i$i = $2464;
                     break;
                    }
                   }
                  } else {
                   $i$0$lcssa$i$i = 1;
                  }
                 } while(0);
                 $2471 = ($i$0$lcssa$i$i|0)==($2460|0);
                 L733: do {
                  if ($2471) {
                   _oggpack_write($opb$i,1,1);
                   $2472 = (($2456) + 8|0);
                   $2473 = HEAP32[$2472>>2]|0;
                   $2474 = HEAP8[$2473>>0]|0;
                   $2475 = $2474 << 24 >> 24;
                   $2476 = (($2475) + -1)|0;
                   _oggpack_write($opb$i,$2476,5);
                   $2477 = HEAP32[$2458>>2]|0;
                   $2478 = ($2477|0)>(1);
                   if ($2478) {
                    $2736 = $2477;$count$06$i$i = 0;$i$17$i$i = 1;
                    while(1) {
                     $2479 = HEAP32[$2472>>2]|0;
                     $2480 = (($2479) + ($i$17$i$i)|0);
                     $2481 = HEAP8[$2480>>0]|0;
                     $2482 = (($i$17$i$i) + -1)|0;
                     $2483 = (($2479) + ($2482)|0);
                     $2484 = HEAP8[$2483>>0]|0;
                     $2485 = ($2481<<24>>24)>($2484<<24>>24);
                     if ($2485) {
                      $2486 = $2484 << 24 >> 24;
                      $2487 = $2481 << 24 >> 24;
                      $2489 = $2736;$count$14$i$i = $count$06$i$i;$j$03$i$i = $2486;
                      while(1) {
                       $2488 = (($i$17$i$i) - ($count$14$i$i))|0;
                       $2490 = ($2489|0)==($count$14$i$i|0);
                       if ($2490) {
                        $ret$0$lcssa$i$i8$i = 0;
                       } else {
                        $2491 = (($2489) - ($count$14$i$i))|0;
                        $$01$i$i6$i = $2491;$ret$02$i$i5$i = 0;
                        while(1) {
                         $2492 = (($ret$02$i$i5$i) + 1)|0;
                         $2493 = $$01$i$i6$i >>> 1;
                         $2494 = ($2493|0)==(0);
                         if ($2494) {
                          $ret$0$lcssa$i$i8$i = $2492;
                          break;
                         } else {
                          $$01$i$i6$i = $2493;$ret$02$i$i5$i = $2492;
                         }
                        }
                       }
                       _oggpack_write($opb$i,$2488,$ret$0$lcssa$i$i8$i);
                       $2495 = (($j$03$i$i) + 1)|0;
                       $exitcond34$i$i = ($2495|0)==($2487|0);
                       $$pre$pre$i$i = HEAP32[$2458>>2]|0;
                       if ($exitcond34$i$i) {
                        $2498 = $$pre$pre$i$i;$count$2$i$i = $i$17$i$i;
                        break;
                       } else {
                        $2489 = $$pre$pre$i$i;$count$14$i$i = $i$17$i$i;$j$03$i$i = $2495;
                       }
                      }
                     } else {
                      $2498 = $2736;$count$2$i$i = $count$06$i$i;
                     }
                     $2496 = (($i$17$i$i) + 1)|0;
                     $2497 = ($2496|0)<($2498|0);
                     if ($2497) {
                      $2736 = $2498;$count$06$i$i = $count$2$i$i;$i$17$i$i = $2496;
                     } else {
                      $$lcssa$i$i = $2498;$count$0$lcssa$i$i = $count$2$i$i;$i$1$lcssa$i$i = $2496;
                      break;
                     }
                    }
                   } else {
                    $$lcssa$i$i = $2477;$count$0$lcssa$i$i = 0;$i$1$lcssa$i$i = 1;
                   }
                   $2499 = (($i$1$lcssa$i$i) - ($count$0$lcssa$i$i))|0;
                   $2500 = ($$lcssa$i$i|0)==($count$0$lcssa$i$i|0);
                   if ($2500) {
                    $ret$0$lcssa$i4$i$i = 0;
                   } else {
                    $2501 = (($$lcssa$i$i) - ($count$0$lcssa$i$i))|0;
                    $$01$i2$i$i = $2501;$ret$02$i1$i$i = 0;
                    while(1) {
                     $2502 = (($ret$02$i1$i$i) + 1)|0;
                     $2503 = $$01$i2$i$i >>> 1;
                     $2504 = ($2503|0)==(0);
                     if ($2504) {
                      $ret$0$lcssa$i4$i$i = $2502;
                      break;
                     } else {
                      $$01$i2$i$i = $2503;$ret$02$i1$i$i = $2502;
                     }
                    }
                   }
                   _oggpack_write($opb$i,$2499,$ret$0$lcssa$i4$i$i);
                  } else {
                   _oggpack_write($opb$i,0,1);
                   $2505 = HEAP32[$2458>>2]|0;
                   $2506 = ($2505|0)>(0);
                   L755: do {
                    if ($2506) {
                     $2507 = (($2456) + 8|0);
                     $2508 = HEAP32[$2507>>2]|0;
                     $i$222$i$i = 0;
                     while(1) {
                      $2511 = (($2508) + ($i$222$i$i)|0);
                      $2512 = HEAP8[$2511>>0]|0;
                      $2513 = ($2512<<24>>24)==(0);
                      $2509 = (($i$222$i$i) + 1)|0;
                      if ($2513) {
                       $i$2$lcssa$i$i = $i$222$i$i;
                       break L755;
                      }
                      $2510 = ($2509|0)<($2505|0);
                      if ($2510) {
                       $i$222$i$i = $2509;
                      } else {
                       $i$2$lcssa$i$i = $2509;
                       break;
                      }
                     }
                    } else {
                     $i$2$lcssa$i$i = 0;
                    }
                   } while(0);
                   $2514 = ($i$2$lcssa$i$i|0)==($2505|0);
                   if ($2514) {
                    _oggpack_write($opb$i,0,1);
                    $2515 = HEAP32[$2458>>2]|0;
                    $2516 = ($2515|0)>(0);
                    if (!($2516)) {
                     break;
                    }
                    $2517 = (($2456) + 8|0);
                    $i$315$i$i = 0;
                    while(1) {
                     $2518 = HEAP32[$2517>>2]|0;
                     $2519 = (($2518) + ($i$315$i$i)|0);
                     $2520 = HEAP8[$2519>>0]|0;
                     $2521 = $2520 << 24 >> 24;
                     $2522 = (($2521) + -1)|0;
                     _oggpack_write($opb$i,$2522,5);
                     $2523 = (($i$315$i$i) + 1)|0;
                     $2524 = HEAP32[$2458>>2]|0;
                     $2525 = ($2523|0)<($2524|0);
                     if ($2525) {
                      $i$315$i$i = $2523;
                     } else {
                      break L733;
                     }
                    }
                   }
                   _oggpack_write($opb$i,1,1);
                   $2526 = HEAP32[$2458>>2]|0;
                   $2527 = ($2526|0)>(0);
                   if (!($2527)) {
                    break;
                   }
                   $2528 = (($2456) + 8|0);
                   $i$419$i$i = 0;
                   while(1) {
                    $2529 = HEAP32[$2528>>2]|0;
                    $2530 = (($2529) + ($i$419$i$i)|0);
                    $2531 = HEAP8[$2530>>0]|0;
                    $2532 = ($2531<<24>>24)==(0);
                    if ($2532) {
                     _oggpack_write($opb$i,0,1);
                    } else {
                     _oggpack_write($opb$i,1,1);
                     $2533 = HEAP32[$2528>>2]|0;
                     $2534 = (($2533) + ($i$419$i$i)|0);
                     $2535 = HEAP8[$2534>>0]|0;
                     $2536 = $2535 << 24 >> 24;
                     $2537 = (($2536) + -1)|0;
                     _oggpack_write($opb$i,$2537,5);
                    }
                    $2538 = (($i$419$i$i) + 1)|0;
                    $2539 = HEAP32[$2458>>2]|0;
                    $2540 = ($2538|0)<($2539|0);
                    if ($2540) {
                     $i$419$i$i = $2538;
                    } else {
                     break;
                    }
                   }
                  }
                 } while(0);
                 $2541 = (($2456) + 12|0);
                 $2542 = HEAP32[$2541>>2]|0;
                 _oggpack_write($opb$i,$2542,4);
                 $2543 = HEAP32[$2541>>2]|0;
                 L775: do {
                  if ((($2543|0) == 2) | (($2543|0) == 1)) {
                   $2544 = (($2456) + 32|0);
                   $2545 = HEAP32[$2544>>2]|0;
                   $2546 = ($2545|0)==(0|0);
                   if ($2546) {
                    break L720;
                   }
                   $2547 = (($2456) + 16|0);
                   $2548 = HEAP32[$2547>>2]|0;
                   _oggpack_write($opb$i,$2548,32);
                   $2549 = (($2456) + 20|0);
                   $2550 = HEAP32[$2549>>2]|0;
                   _oggpack_write($opb$i,$2550,32);
                   $2551 = (($2456) + 24|0);
                   $2552 = HEAP32[$2551>>2]|0;
                   $2553 = (($2552) + -1)|0;
                   _oggpack_write($opb$i,$2553,4);
                   $2554 = (($2456) + 28|0);
                   $2555 = HEAP32[$2554>>2]|0;
                   _oggpack_write($opb$i,$2555,1);
                   $2556 = HEAP32[$2541>>2]|0;
                   L778: do {
                    if ((($2556|0) == 1)) {
                     $2557 = HEAP32[$2458>>2]|0;
                     $2558 = HEAP32[$2456>>2]|0;
                     $2559 = ($2558|0)>(0);
                     if (!($2559)) {
                      break L724;
                     }
                     $2560 = (+($2558|0));
                     $2561 = 1.0 / $2560;
                     $2562 = (+($2557|0));
                     $2563 = $2561;
                     $2564 = $2562;
                     $2565 = (+Math_pow((+$2564),(+$2563)));
                     $2566 = (+Math_floor((+$2565)));
                     $2567 = (~~(($2566)));
                     $vals$0$us$i$i$i = $2567;
                     while(1) {
                      $2574 = (($vals$0$us$i$i$i) + 1)|0;
                      $acc$01$us$i$i$i = 1;$acc1$02$us$i$i$i = 1;$i$03$us$i$i$i = 0;
                      while(1) {
                       $2568 = Math_imul($acc$01$us$i$i$i, $vals$0$us$i$i$i)|0;
                       $2570 = Math_imul($acc1$02$us$i$i$i, $2574)|0;
                       $2575 = (($i$03$us$i$i$i) + 1)|0;
                       $2576 = ($2575|0)<($2558|0);
                       if ($2576) {
                        $acc$01$us$i$i$i = $2568;$acc1$02$us$i$i$i = $2570;$i$03$us$i$i$i = $2575;
                       } else {
                        break;
                       }
                      }
                      $2569 = ($2568|0)<=($2557|0);
                      $2571 = ($2570|0)>($2557|0);
                      $or$cond$us$i$i$i = $2569 & $2571;
                      if ($or$cond$us$i$i$i) {
                       $quantvals$0$i$i = $vals$0$us$i$i$i;
                       break L778;
                      }
                      $2572 = ($2568|0)>($2557|0);
                      $2573 = (($vals$0$us$i$i$i) + -1)|0;
                      $$ = $2572 ? $2573 : $2574;
                      $vals$0$us$i$i$i = $$;
                     }
                    } else if ((($2556|0) == 2)) {
                     $2577 = HEAP32[$2458>>2]|0;
                     $2578 = HEAP32[$2456>>2]|0;
                     $2579 = Math_imul($2578, $2577)|0;
                     $quantvals$0$i$i = $2579;
                    } else {
                     break L775;
                    }
                   } while(0);
                   $2580 = ($quantvals$0$i$i|0)>(0);
                   if ($2580) {
                    $i$51$i$i = 0;
                   } else {
                    break;
                   }
                   while(1) {
                    $2581 = HEAP32[$2544>>2]|0;
                    $2582 = (($2581) + ($i$51$i$i<<2)|0);
                    $2583 = HEAP32[$2582>>2]|0;
                    $ispos$i$i = ($2583|0)>(-1);
                    $neg$i$i = (0 - ($2583))|0;
                    $2584 = $ispos$i$i ? $2583 : $neg$i$i;
                    $2585 = HEAP32[$2551>>2]|0;
                    _oggpack_write($opb$i,$2584,$2585);
                    $2586 = (($i$51$i$i) + 1)|0;
                    $exitcond$i$i37 = ($2586|0)==($quantvals$0$i$i|0);
                    if ($exitcond$i$i37) {
                     break;
                    } else {
                     $i$51$i$i = $2586;
                    }
                   }
                  } else if (!((($2543|0) == 0))) {
                   break L720;
                  }
                 } while(0);
                 $2452 = (($i$015$i$i) + 1)|0;
                 $2453 = HEAP32[$2446>>2]|0;
                 $2454 = ($2452|0)<($2453|0);
                 if ($2454) {
                  $i$015$i$i = $2452;
                 } else {
                  break L722;
                 }
                }
                while(1) {
                }
               }
              } while(0);
              _oggpack_write($opb$i,0,6);
              _oggpack_write($opb$i,0,16);
              $2587 = (($2444) + 16|0);
              $2588 = HEAP32[$2587>>2]|0;
              $2589 = (($2588) + -1)|0;
              _oggpack_write($opb$i,$2589,6);
              $2590 = HEAP32[$2587>>2]|0;
              $2591 = ($2590|0)>(0);
              if ($2591) {
               $2592 = (($2444) + 800|0);
               $2593 = (($2444) + 1056|0);
               $i$110$i$i = 0;
               while(1) {
                $2594 = (($2592) + ($i$110$i$i<<2)|0);
                $2595 = HEAP32[$2594>>2]|0;
                _oggpack_write($opb$i,$2595,16);
                $2596 = HEAP32[$2594>>2]|0;
                $2597 = (57296 + ($2596<<2)|0);
                $2598 = HEAP32[$2597>>2]|0;
                $2599 = HEAP32[$2598>>2]|0;
                $2600 = ($2599|0)==(0|0);
                if ($2600) {
                 break L720;
                }
                $2601 = (($2593) + ($i$110$i$i<<2)|0);
                $2602 = HEAP32[$2601>>2]|0;
                FUNCTION_TABLE_vii[$2599 & 63]($2602,$opb$i);
                $2603 = (($i$110$i$i) + 1)|0;
                $2604 = HEAP32[$2587>>2]|0;
                $2605 = ($2603|0)<($2604|0);
                if ($2605) {
                 $i$110$i$i = $2603;
                } else {
                 break;
                }
               }
              }
              $2606 = (($2444) + 20|0);
              $2607 = HEAP32[$2606>>2]|0;
              $2608 = (($2607) + -1)|0;
              _oggpack_write($opb$i,$2608,6);
              $2609 = HEAP32[$2606>>2]|0;
              $2610 = ($2609|0)>(0);
              if ($2610) {
               $2611 = (($2444) + 1312|0);
               $2612 = (($2444) + 1568|0);
               $i$26$i$i = 0;
               while(1) {
                $2613 = (($2611) + ($i$26$i$i<<2)|0);
                $2614 = HEAP32[$2613>>2]|0;
                _oggpack_write($opb$i,$2614,16);
                $2615 = HEAP32[$2613>>2]|0;
                $2616 = (57304 + ($2615<<2)|0);
                $2617 = HEAP32[$2616>>2]|0;
                $2618 = HEAP32[$2617>>2]|0;
                $2619 = (($2612) + ($i$26$i$i<<2)|0);
                $2620 = HEAP32[$2619>>2]|0;
                FUNCTION_TABLE_vii[$2618 & 63]($2620,$opb$i);
                $2621 = (($i$26$i$i) + 1)|0;
                $2622 = HEAP32[$2606>>2]|0;
                $2623 = ($2621|0)<($2622|0);
                if ($2623) {
                 $i$26$i$i = $2621;
                } else {
                 break;
                }
               }
              }
              $2624 = (($2444) + 12|0);
              $2625 = HEAP32[$2624>>2]|0;
              $2626 = (($2625) + -1)|0;
              _oggpack_write($opb$i,$2626,6);
              $2627 = HEAP32[$2624>>2]|0;
              $2628 = ($2627|0)>(0);
              if ($2628) {
               $2629 = (($2444) + 288|0);
               $2630 = (($2444) + 544|0);
               $i$32$i$i = 0;
               while(1) {
                $2631 = (($2629) + ($i$32$i$i<<2)|0);
                $2632 = HEAP32[$2631>>2]|0;
                _oggpack_write($opb$i,$2632,16);
                $2633 = HEAP32[$2631>>2]|0;
                $2634 = (57320 + ($2633<<2)|0);
                $2635 = HEAP32[$2634>>2]|0;
                $2636 = HEAP32[$2635>>2]|0;
                $2637 = (($2630) + ($i$32$i$i<<2)|0);
                $2638 = HEAP32[$2637>>2]|0;
                FUNCTION_TABLE_viii[$2636 & 127]($2316,$2638,$opb$i);
                $2639 = (($i$32$i$i) + 1)|0;
                $2640 = HEAP32[$2624>>2]|0;
                $2641 = ($2639|0)<($2640|0);
                if ($2641) {
                 $i$32$i$i = $2639;
                } else {
                 break;
                }
               }
              }
              $2642 = (($2444) + 8|0);
              $2643 = HEAP32[$2642>>2]|0;
              $2644 = (($2643) + -1)|0;
              _oggpack_write($opb$i,$2644,6);
              $2645 = HEAP32[$2642>>2]|0;
              $2646 = ($2645|0)>(0);
              if ($2646) {
               $2647 = (($2444) + 32|0);
               $i$41$i$i = 0;
               while(1) {
                $2648 = (($2647) + ($i$41$i$i<<2)|0);
                $2649 = HEAP32[$2648>>2]|0;
                $2650 = HEAP32[$2649>>2]|0;
                _oggpack_write($opb$i,$2650,1);
                $2651 = HEAP32[$2648>>2]|0;
                $2652 = (($2651) + 4|0);
                $2653 = HEAP32[$2652>>2]|0;
                _oggpack_write($opb$i,$2653,16);
                $2654 = HEAP32[$2648>>2]|0;
                $2655 = (($2654) + 8|0);
                $2656 = HEAP32[$2655>>2]|0;
                _oggpack_write($opb$i,$2656,16);
                $2657 = HEAP32[$2648>>2]|0;
                $2658 = (($2657) + 12|0);
                $2659 = HEAP32[$2658>>2]|0;
                _oggpack_write($opb$i,$2659,8);
                $2660 = (($i$41$i$i) + 1)|0;
                $2661 = HEAP32[$2642>>2]|0;
                $2662 = ($2660|0)<($2661|0);
                if ($2662) {
                 $i$41$i$i = $2660;
                } else {
                 break;
                }
               }
              }
              _oggpack_write($opb$i,1,1);
              $2663 = (($2318) + 72|0);
              $2664 = HEAP32[$2663>>2]|0;
              $2665 = ($2664|0)==(0|0);
              if (!($2665)) {
               _free($2664);
              }
              $2666 = HEAP32[$opb$i>>2]|0;
              $2667 = HEAP32[$2356>>2]|0;
              $2668 = (($2667) + 7)|0;
              $2669 = (($2668|0) / 8)&-1;
              $2670 = (($2669) + ($2666))|0;
              $2671 = (_malloc($2670)|0);
              HEAP32[$2663>>2] = $2671;
              $2672 = HEAP32[$2321>>2]|0;
              $2673 = HEAP32[$opb$i>>2]|0;
              $2674 = HEAP32[$2356>>2]|0;
              $2675 = (($2674) + 7)|0;
              $2676 = (($2675|0) / 8)&-1;
              $2677 = (($2676) + ($2673))|0;
              _memcpy(($2671|0),($2672|0),($2677|0))|0;
              $2678 = HEAP32[$2663>>2]|0;
              HEAP32[$vorbis_header_code>>2] = $2678;
              $2679 = HEAP32[$opb$i>>2]|0;
              $2680 = HEAP32[$2356>>2]|0;
              $2681 = (($2680) + 7)|0;
              $2682 = (($2681|0) / 8)&-1;
              $2683 = (($2682) + ($2679))|0;
              $2684 = (($vorbis_header_code) + 4|0);
              HEAP32[$2684>>2] = $2683;
              $2685 = (($vorbis_header_code) + 8|0);
              $2686 = (($vorbis_header_code) + 24|0);
              ;HEAP32[$2685+0>>2]=0|0;HEAP32[$2685+4>>2]=0|0;HEAP32[$2685+8>>2]=0|0;HEAP32[$2685+12>>2]=0|0;
              $2687 = $2686;
              $2688 = $2687;
              HEAP32[$2688>>2] = 2;
              $2689 = (($2687) + 4)|0;
              $2690 = $2689;
              HEAP32[$2690>>2] = 0;
              $2691 = HEAP32[$2321>>2]|0;
              $2692 = ($2691|0)==(0|0);
              if (!($2692)) {
               _free($2691);
              }
              ;HEAP32[$opb$i+0>>2]=0|0;HEAP32[$opb$i+4>>2]=0|0;HEAP32[$opb$i+8>>2]=0|0;HEAP32[$opb$i+12>>2]=0|0;HEAP32[$opb$i+16>>2]=0|0;
              break L679;
             }
            } while(0);
            ;HEAP32[$vorbis_header+0>>2]=0|0;HEAP32[$vorbis_header+4>>2]=0|0;HEAP32[$vorbis_header+8>>2]=0|0;HEAP32[$vorbis_header+12>>2]=0|0;HEAP32[$vorbis_header+16>>2]=0|0;HEAP32[$vorbis_header+20>>2]=0|0;HEAP32[$vorbis_header+24>>2]=0|0;HEAP32[$vorbis_header+28>>2]=0|0;
            ;HEAP32[$vorbis_header_comment+0>>2]=0|0;HEAP32[$vorbis_header_comment+4>>2]=0|0;HEAP32[$vorbis_header_comment+8>>2]=0|0;HEAP32[$vorbis_header_comment+12>>2]=0|0;HEAP32[$vorbis_header_comment+16>>2]=0|0;HEAP32[$vorbis_header_comment+20>>2]=0|0;HEAP32[$vorbis_header_comment+24>>2]=0|0;HEAP32[$vorbis_header_comment+28>>2]=0|0;
            ;HEAP32[$vorbis_header_code+0>>2]=0|0;HEAP32[$vorbis_header_code+4>>2]=0|0;HEAP32[$vorbis_header_code+8>>2]=0|0;HEAP32[$vorbis_header_code+12>>2]=0|0;HEAP32[$vorbis_header_code+16>>2]=0|0;HEAP32[$vorbis_header_code+20>>2]=0|0;HEAP32[$vorbis_header_code+24>>2]=0|0;HEAP32[$vorbis_header_code+28>>2]=0|0;
            $$pre$phi12$iZ2D = $2352;
           }
           $2693 = HEAP32[$2321>>2]|0;
           $2694 = ($2693|0)==(0|0);
           if (!($2694)) {
            _free($2693);
           }
           ;HEAP32[$opb$i+0>>2]=0|0;HEAP32[$opb$i+4>>2]=0|0;HEAP32[$opb$i+8>>2]=0|0;HEAP32[$opb$i+12>>2]=0|0;HEAP32[$opb$i+16>>2]=0|0;
           $2695 = HEAP32[$$pre$phi12$iZ2D>>2]|0;
           $2696 = ($2695|0)==(0|0);
           if (!($2696)) {
            _free($2695);
           }
           $2697 = (($2318) + 68|0);
           $2698 = HEAP32[$2697>>2]|0;
           $2699 = ($2698|0)==(0|0);
           if (!($2699)) {
            _free($2698);
           }
           $2700 = (($2318) + 72|0);
           $2701 = HEAP32[$2700>>2]|0;
           $2702 = ($2701|0)==(0|0);
           if (!($2702)) {
            _free($2701);
           }
           HEAP32[$$pre$phi12$iZ2D>>2] = 0;
           HEAP32[$2697>>2] = 0;
           HEAP32[$2700>>2] = 0;
          }
         } while(0);
         $2703 = HEAP32[553040>>2]|0;
         _ogg_stream_packetin($2703,$vorbis_header);
         $2704 = HEAP32[553040>>2]|0;
         _ogg_stream_packetin($2704,$vorbis_header_comment);
         $2705 = HEAP32[553040>>2]|0;
         _ogg_stream_packetin($2705,$vorbis_header_code);
         $2706 = HEAP32[553040>>2]|0;
         $2707 = (($2706) + 692|0);
         $2708 = (($2706) + 688|0);
         $2709 = (($og) + 4|0);
         $2710 = (($og) + 8|0);
         $2711 = (($og) + 12|0);
         while(1) {
          $2712 = (_ogg_stream_flush_i($2706,$og,1)|0);
          $2713 = ($2712|0)==(0);
          $2714 = HEAP32[$2707>>2]|0;
          if ($2713) {
           break;
          }
          $2715 = HEAP32[$2708>>2]|0;
          $2716 = (($2714) + ($2715)|0);
          $2717 = HEAP32[$og>>2]|0;
          $2718 = HEAP32[$2709>>2]|0;
          _memcpy(($2716|0),($2717|0),($2718|0))|0;
          $2719 = HEAP32[$2709>>2]|0;
          $2720 = HEAP32[$2708>>2]|0;
          $2721 = (($2720) + ($2719))|0;
          HEAP32[$2708>>2] = $2721;
          $2722 = HEAP32[$2707>>2]|0;
          $2723 = (($2722) + ($2721)|0);
          $2724 = HEAP32[$2710>>2]|0;
          $2725 = HEAP32[$2711>>2]|0;
          _memcpy(($2723|0),($2724|0),($2725|0))|0;
          $2726 = HEAP32[$2711>>2]|0;
          $2727 = HEAP32[$2708>>2]|0;
          $2728 = (($2727) + ($2726))|0;
          HEAP32[$2708>>2] = $2728;
         }
         $2729 = $2714;
         $2730 = HEAP32[$2708>>2]|0;
         $2731 = (($2714) + ($2730)|0);
         $2732 = $2731;
         (_emscripten_asm_const_int((553168|0),($2729|0),($2732|0))|0);
         _emscripten_asm_const((553248|0));
         STACKTOP = sp;return;
        }
       }
       _vorbis_info_clear($77);
      }
     }
     if ((label|0) == 57) {
      _vorbis_info_clear($77);
     }
     (_puts((555176|0))|0);
     STACKTOP = sp;return;
    }
   } while(0);
   $51 = ($lpad$phi$i$i$index63|0)<(0);
   do {
    if ($51) {
     __THREW__ = 0;
     invoke_vi(78,($lpad$phi$i$i$index|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $57 = ___cxa_find_matching_catch(-1,-1,555160|0)|0;
      $58 = tempRet0;
      $eh$lpad$body$i$index68Z2D = $58;$eh$lpad$body$i$indexZ2D = $57;
      break;
     } else {
      // unreachable;
     }
    } else {
     $eh$lpad$body$i$index68Z2D = $lpad$phi$i$i$index63;$eh$lpad$body$i$indexZ2D = $lpad$phi$i$i$index;
    }
   } while(0);
   $59 = ($eh$lpad$body$i$index68Z2D|0)<(0);
   if ($59) {
    ___cxa_call_unexpected(($eh$lpad$body$i$indexZ2D|0));
    // unreachable;
   } else {
    ___resumeException($eh$lpad$body$i$indexZ2D|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = ($lpad$phi$i$index58|0)<(0);
 if ($12) {
  ___cxa_call_unexpected(($lpad$phi$i$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
}
function _lexy_encoder_write($input_buffer_left,$input_buffer_right,$num_samples) {
 $input_buffer_left = $input_buffer_left|0;
 $input_buffer_right = $input_buffer_right|0;
 $num_samples = $num_samples|0;
 var $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $choice$0$i = 0, $force$0$i = 0, $not$$i$i = 0, $num_packets$0 = 0;
 var $num_packets$1 = 0, $og = 0, $phitmp = 0, $phitmp$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $og = sp;
 $0 = HEAP32[553040>>2]|0;
 $1 = (($0) + 688|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 408|0);
 $4 = (_vorbis_analysis_buffer($3,$num_samples)|0);
 $5 = (($4) + 4|0);
 $storemerge = 0;
 while(1) {
  $6 = ($storemerge|0)<($num_samples|0);
  if (!($6)) {
   break;
  }
  $7 = (($input_buffer_left) + ($storemerge<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($storemerge<<2)|0);
  HEAPF32[$10>>2] = $8;
  $11 = (($input_buffer_right) + ($storemerge<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = HEAP32[$5>>2]|0;
  $14 = (($13) + ($storemerge<<2)|0);
  HEAPF32[$14>>2] = $12;
  $15 = (($storemerge) + 1)|0;
  $storemerge = $15;
 }
 $16 = HEAP32[553040>>2]|0;
 $17 = (($16) + 408|0);
 _vorbis_analysis_wrote($17,$num_samples);
 $18 = (($og) + 4|0);
 $19 = (($og) + 8|0);
 $20 = (($og) + 12|0);
 $$pre = HEAP32[553040>>2]|0;
 $22 = $$pre;$num_packets$0 = 0;
 L5: while(1) {
  $21 = (($22) + 408|0);
  $23 = (($22) + 520|0);
  $24 = (_vorbis_analysis_blockout($21,$23)|0);
  $25 = ($24|0)==(1);
  $26 = HEAP32[553040>>2]|0;
  if (!($25)) {
   break;
  }
  $27 = (($26) + 520|0);
  _vorbis_analysis($27);
  $28 = HEAP32[553040>>2]|0;
  $29 = (($28) + 520|0);
  _vorbis_bitrate_addblock($29);
  $$pre3 = HEAP32[553040>>2]|0;
  $31 = $$pre3;$num_packets$1 = $num_packets$0;
  L8: while(1) {
   $30 = (($31) + 512|0);
   $32 = HEAP32[$30>>2]|0;
   $33 = (($32) + 120|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $22 = $31;$num_packets$0 = $num_packets$1;
    continue L5;
   }
   $36 = (($34) + 104|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($34) + 64|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 104|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 80|0);
   $43 = HEAP32[$42>>2]|0;
   $not$$i$i = ($43|0)==(0);
   if ($not$$i$i) {
    $choice$0$i = 7;
   } else {
    $44 = (($32) + 124|0);
    $45 = HEAP32[$44>>2]|0;
    $choice$0$i = $45;
   }
   $46 = (($37) + 12|0);
   $47 = (($46) + ($choice$0$i<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($31) + 632|0);
   HEAP32[$51>>2] = $50;
   $52 = HEAP32[$47>>2]|0;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($52) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 7)|0;
   $57 = (($56|0) / 8)&-1;
   $58 = (($57) + ($53))|0;
   $59 = (($31) + 636|0);
   HEAP32[$59>>2] = $58;
   $60 = (($31) + 640|0);
   HEAP32[$60>>2] = 0;
   $61 = (($34) + 44|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($31) + 644|0);
   HEAP32[$63>>2] = $62;
   $64 = (($34) + 48|0);
   $65 = $64;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($65) + 4)|0;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($31) + 648|0);
   $72 = $71;
   $73 = $72;
   HEAP32[$73>>2] = $67;
   $74 = (($72) + 4)|0;
   $75 = $74;
   HEAP32[$75>>2] = $70;
   $76 = (($34) + 56|0);
   $77 = $76;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($31) + 656|0);
   $84 = $83;
   $85 = $84;
   HEAP32[$85>>2] = $79;
   $86 = (($84) + 4)|0;
   $87 = $86;
   HEAP32[$87>>2] = $82;
   HEAP32[$33>>2] = 0;
   $88 = (($31) + 632|0);
   _ogg_stream_packetin($31,$88);
   $89 = (($num_packets$1) + 1)|0;
   $90 = HEAP32[553040>>2]|0;
   $91 = ($90|0)==(0|0);
   $92 = (($90) + 644|0);
   $93 = (($90) + 692|0);
   $94 = (($90) + 688|0);
   $95 = (($90) + 328|0);
   $$phi$trans$insert$i = (($90) + 28|0);
   $96 = (($90) + 332|0);
   while(1) {
    if ($91) {
     label = 19;
    } else {
     $97 = HEAP32[$90>>2]|0;
     $98 = ($97|0)==(0|0);
     if ($98) {
      label = 19;
     } else {
      $99 = HEAP32[$95>>2]|0;
      $100 = ($99|0)==(0);
      $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $phitmp$i = ($$pre$i|0)==(0);
      if ($100) {
       if ($phitmp$i) {
        $force$0$i = 0;
       } else {
        $101 = HEAP32[$96>>2]|0;
        $102 = ($101|0)==(0);
        if ($102) {
         label = 17;
        } else {
         $force$0$i = 0;
        }
       }
      } else {
       if ($phitmp$i) {
        $force$0$i = 0;
       } else {
        label = 17;
       }
      }
      if ((label|0) == 17) {
       label = 0;
       $force$0$i = 1;
      }
      $103 = (_ogg_stream_flush_i($90,$og,$force$0$i)|0);
      $phitmp = ($103|0)==(0);
      if ($phitmp) {
       label = 19;
      }
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $104 = HEAP32[$92>>2]|0;
     $105 = ($104|0)==(0);
     if ($105) {
      $31 = $90;$num_packets$1 = $89;
      continue L8;
     }
     $106 = (_ogg_stream_flush_i($90,$og,1)|0);
     $107 = ($106|0)==(0);
     if ($107) {
      $31 = $90;$num_packets$1 = $89;
      continue L8;
     }
    }
    $108 = HEAP32[$93>>2]|0;
    $109 = HEAP32[$94>>2]|0;
    $110 = (($108) + ($109)|0);
    $111 = HEAP32[$og>>2]|0;
    $112 = HEAP32[$18>>2]|0;
    _memcpy(($110|0),($111|0),($112|0))|0;
    $113 = HEAP32[$18>>2]|0;
    $114 = HEAP32[$94>>2]|0;
    $115 = (($114) + ($113))|0;
    HEAP32[$94>>2] = $115;
    $116 = HEAP32[$93>>2]|0;
    $117 = (($116) + ($115)|0);
    $118 = HEAP32[$19>>2]|0;
    $119 = HEAP32[$20>>2]|0;
    _memcpy(($117|0),($118|0),($119|0))|0;
    $120 = HEAP32[$20>>2]|0;
    $121 = HEAP32[$94>>2]|0;
    $122 = (($121) + ($120))|0;
    HEAP32[$94>>2] = $122;
   }
  }
 }
 $123 = (($26) + 688|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)>($2|0);
 if (!($125)) {
  STACKTOP = sp;return;
 }
 $126 = (($26) + 692|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + ($2)|0);
 $129 = $128;
 $130 = (($127) + ($124)|0);
 $131 = $130;
 (_emscripten_asm_const_int((553168|0),($129|0),($131|0))|0);
 STACKTOP = sp;return;
}
function _lexy_encoder_finish() {
 var $$lcssa$i = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre10 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre21$i = 0, $$pre25$i = 0, $$pre25$i$pre = 0, $$pre26$i = 0, $$pre27$i = 0, $$pre28$i = 0, $$pre28$i$pre = 0, $$pre3$i = 0, $$pre8 = 0, $$pre9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $choice$0$i = 0, $exitcond$i = 0, $exitcond$i$i = 0, $i$01$i = 0, $i$01$i4 = 0;
 var $i$012$i = 0, $i$06$i$i = 0, $i$18$i = 0, $i$24$i = 0, $i$31$i = 0, $not$$i$i = 0, $og = 0, $reap$01$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $og = sp;
 (_puts((555232|0))|0);
 $0 = HEAP32[553040>>2]|0;
 $1 = (($0) + 408|0);
 _vorbis_analysis_wrote($1,0);
 $2 = (($og) + 4|0);
 $3 = (($og) + 8|0);
 $4 = (($og) + 12|0);
 $$pre = HEAP32[553040>>2]|0;
 $6 = $$pre;
 L1: while(1) {
  $5 = (($6) + 408|0);
  $7 = (($6) + 520|0);
  $8 = (_vorbis_analysis_blockout($5,$7)|0);
  $9 = ($8|0)==(1);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[553040>>2]|0;
  $11 = (($10) + 520|0);
  _vorbis_analysis($11);
  $12 = HEAP32[553040>>2]|0;
  $13 = (($12) + 520|0);
  _vorbis_bitrate_addblock($13);
  $$pre8 = HEAP32[553040>>2]|0;
  $15 = $$pre8;
  L4: while(1) {
   $14 = (($15) + 512|0);
   $16 = HEAP32[$14>>2]|0;
   $17 = (($16) + 120|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $6 = $15;
    continue L1;
   }
   $20 = (($18) + 104|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + 64|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 104|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 80|0);
   $27 = HEAP32[$26>>2]|0;
   $not$$i$i = ($27|0)==(0);
   if ($not$$i$i) {
    $choice$0$i = 7;
   } else {
    $28 = (($16) + 124|0);
    $29 = HEAP32[$28>>2]|0;
    $choice$0$i = $29;
   }
   $30 = (($21) + 12|0);
   $31 = (($30) + ($choice$0$i<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($15) + 632|0);
   HEAP32[$35>>2] = $34;
   $36 = HEAP32[$31>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $38 = (($36) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 7)|0;
   $41 = (($40|0) / 8)&-1;
   $42 = (($41) + ($37))|0;
   $43 = (($15) + 636|0);
   HEAP32[$43>>2] = $42;
   $44 = (($15) + 640|0);
   HEAP32[$44>>2] = 0;
   $45 = (($18) + 44|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($15) + 644|0);
   HEAP32[$47>>2] = $46;
   $48 = (($18) + 48|0);
   $49 = $48;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) + 4)|0;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($15) + 648|0);
   $56 = $55;
   $57 = $56;
   HEAP32[$57>>2] = $51;
   $58 = (($56) + 4)|0;
   $59 = $58;
   HEAP32[$59>>2] = $54;
   $60 = (($18) + 56|0);
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($15) + 656|0);
   $68 = $67;
   $69 = $68;
   HEAP32[$69>>2] = $63;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = $66;
   HEAP32[$17>>2] = 0;
   $72 = (($15) + 632|0);
   _ogg_stream_packetin($15,$72);
   $73 = HEAP32[553040>>2]|0;
   $74 = (($73) + 692|0);
   $75 = (($73) + 688|0);
   while(1) {
    $76 = (_ogg_stream_flush_i($73,$og,1)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     $15 = $73;
     continue L4;
    }
    $78 = HEAP32[$74>>2]|0;
    $79 = HEAP32[$75>>2]|0;
    $80 = (($78) + ($79)|0);
    $81 = HEAP32[$og>>2]|0;
    $82 = HEAP32[$2>>2]|0;
    _memcpy(($80|0),($81|0),($82|0))|0;
    $83 = HEAP32[$2>>2]|0;
    $84 = HEAP32[$75>>2]|0;
    $85 = (($84) + ($83))|0;
    HEAP32[$75>>2] = $85;
    $86 = HEAP32[$74>>2]|0;
    $87 = (($86) + ($85)|0);
    $88 = HEAP32[$3>>2]|0;
    $89 = HEAP32[$4>>2]|0;
    _memcpy(($87|0),($88|0),($89|0))|0;
    $90 = HEAP32[$4>>2]|0;
    $91 = HEAP32[$75>>2]|0;
    $92 = (($91) + ($90))|0;
    HEAP32[$75>>2] = $92;
   }
  }
 }
 (_puts((555272|0))|0);
 $93 = HEAP32[553040>>2]|0;
 $94 = ($93|0)==(0|0);
 if ($94) {
  $104 = 0;
 } else {
  $95 = HEAP32[$93>>2]|0;
  $96 = ($95|0)==(0|0);
  if (!($96)) {
   _free($95);
  }
  $97 = (($93) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0|0);
  if (!($99)) {
   _free($98);
  }
  $100 = (($93) + 20|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   _free($101);
  }
  _memset(($93|0),0,360)|0;
  $$pre9 = HEAP32[553040>>2]|0;
  $104 = $$pre9;
 }
 $103 = (($104) + 520|0);
 $105 = (($104) + 624|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 604|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(0|0);
 if (!($109)) {
  $reap$01$i$i = $108;
  while(1) {
   $110 = (($reap$01$i$i) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = HEAP32[$reap$01$i$i>>2]|0;
   _free($112);
   _free($reap$01$i$i);
   $113 = ($111|0)==(0|0);
   if ($113) {
    break;
   } else {
    $reap$01$i$i = $111;
   }
  }
 }
 $114 = (($104) + 600|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)==(0);
 $$phi$trans$insert$i = (($104) + 588|0);
 $$pre$i2 = HEAP32[$$phi$trans$insert$i>>2]|0;
 if ($116) {
  $125 = $$pre$i2;
 } else {
  $117 = (($104) + 596|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + ($115))|0;
  $120 = (_realloc($$pre$i2,$119)|0);
  HEAP32[$$phi$trans$insert$i>>2] = $120;
  $121 = HEAP32[$114>>2]|0;
  $122 = HEAP32[$117>>2]|0;
  $123 = (($122) + ($121))|0;
  HEAP32[$117>>2] = $123;
  HEAP32[$114>>2] = 0;
  $125 = $120;
 }
 $124 = (($104) + 592|0);
 HEAP32[$124>>2] = 0;
 HEAP32[$107>>2] = 0;
 $126 = ($125|0)==(0|0);
 if (!($126)) {
  _free($125);
 }
 $127 = ($106|0)==(0|0);
 if (!($127)) {
  $128 = (($106) + 12|0);
  $i$01$i4 = 0;
  while(1) {
   $129 = (($128) + ($i$01$i4<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)==(0|0);
   if (!($133)) {
    _free($132);
   }
   ;HEAP32[$130+0>>2]=0|0;HEAP32[$130+4>>2]=0|0;HEAP32[$130+8>>2]=0|0;HEAP32[$130+12>>2]=0|0;HEAP32[$130+16>>2]=0|0;
   $134 = ($i$01$i4|0)==(7);
   if ($134) {
    $i$01$i4 = 8;
    continue;
   }
   $135 = HEAP32[$129>>2]|0;
   _free($135);
   $136 = (($i$01$i4) + 1)|0;
   $exitcond$i = ($136|0)==(15);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i4 = $136;
   }
  }
  _free($106);
 }
 dest=$103+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $137 = HEAP32[553040>>2]|0;
 $138 = (($137) + 408|0);
 $139 = (($137) + 412|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = (($140) + 28|0);
  $143 = HEAP32[$142>>2]|0;
  $206 = $143;
 } else {
  $206 = 0;
 }
 $144 = (($137) + 512|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = HEAP32[$145>>2]|0;
  $148 = ($147|0)==(0|0);
  if (!($148)) {
   $149 = (($147) + 16|0);
   $150 = (($147) + 24|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ($151|0)==(0|0);
   if (!($152)) {
    _free($151);
   }
   $153 = (($147) + 28|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154|0)==(0|0);
   if (!($155)) {
    _free($154);
   }
   ;HEAP32[$149+0>>2]=0|0;HEAP32[$149+4>>2]=0|0;HEAP32[$149+8>>2]=0|0;HEAP32[$149+12>>2]=0|0;HEAP32[$149+16>>2]=0|0;
   $156 = (($147) + 48|0);
   $157 = HEAP32[$156>>2]|0;
   _free($157);
   $158 = (($147) + 64|0);
   $159 = HEAP32[$158>>2]|0;
   _free($159);
   $160 = (($147) + 80|0);
   $161 = HEAP32[$160>>2]|0;
   _free($161);
   $162 = (($147) + 96|0);
   $163 = HEAP32[$162>>2]|0;
   _free($163);
   $164 = (($147) + 112|0);
   $165 = HEAP32[$164>>2]|0;
   _free($165);
   $166 = (($147) + 128|0);
   $167 = HEAP32[$166>>2]|0;
   _free($167);
   $168 = (($147) + 144|0);
   $169 = HEAP32[$168>>2]|0;
   _free($169);
   $170 = (($147) + 36|0);
   $171 = HEAP32[$170>>2]|0;
   _free($171);
   $172 = (($147) + 152|0);
   $173 = HEAP32[$172>>2]|0;
   _free($173);
   $174 = (($147) + 160|0);
   $175 = HEAP32[$174>>2]|0;
   _free($175);
   _memset(($147|0),0,180)|0;
   $176 = HEAP32[$145>>2]|0;
   _free($176);
  }
  $177 = (($145) + 12|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($178|0)==(0|0);
  if (!($179)) {
   $180 = HEAP32[$178>>2]|0;
   $181 = ($180|0)==(0|0);
   if ($181) {
    $188 = 0;
   } else {
    $182 = (($180) + 8|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(0|0);
    if (!($184)) {
     _free($183);
    }
    $185 = (($180) + 12|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ($186|0)==(0|0);
    if (!($187)) {
     _free($186);
    }
    ;HEAP32[$180+0>>2]=0|0;HEAP32[$180+4>>2]=0|0;HEAP32[$180+8>>2]=0|0;HEAP32[$180+12>>2]=0|0;HEAP32[$180+16>>2]=0|0;
    $$pre14 = HEAP32[$177>>2]|0;
    $$pre15 = HEAP32[$$pre14>>2]|0;
    $188 = $$pre15;
   }
   _free($188);
   $189 = HEAP32[$177>>2]|0;
   _free($189);
  }
  $190 = (($145) + 16|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($191|0)==(0|0);
  if (!($192)) {
   $193 = HEAP32[$191>>2]|0;
   $194 = ($193|0)==(0|0);
   if ($194) {
    $201 = 0;
   } else {
    $195 = (($193) + 8|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(0|0);
    if (!($197)) {
     _free($196);
    }
    $198 = (($193) + 12|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($199|0)==(0|0);
    if (!($200)) {
     _free($199);
    }
    ;HEAP32[$193+0>>2]=0|0;HEAP32[$193+4>>2]=0|0;HEAP32[$193+8>>2]=0|0;HEAP32[$193+12>>2]=0|0;HEAP32[$193+16>>2]=0|0;
    $$pre12 = HEAP32[$190>>2]|0;
    $$pre13 = HEAP32[$$pre12>>2]|0;
    $201 = $$pre13;
   }
   _free($201);
   $202 = HEAP32[$190>>2]|0;
   _free($202);
  }
  $203 = (($145) + 48|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)==(0|0);
  if (!($205)) {
   $207 = ($206|0)==(0|0);
   if ($207) {
    $223 = $204;
   } else {
    $208 = (($206) + 16|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ($209|0)>(0);
    if ($210) {
     $218 = $204;$i$012$i = 0;
     while(1) {
      $211 = ((($206) + ($i$012$i<<2)|0) + 800|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = (57296 + ($212<<2)|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = (($214) + 16|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = (($218) + ($i$012$i<<2)|0);
      $219 = HEAP32[$217>>2]|0;
      FUNCTION_TABLE_vi[$216 & 127]($219);
      $220 = (($i$012$i) + 1)|0;
      $221 = HEAP32[$208>>2]|0;
      $222 = ($220|0)<($221|0);
      $$pre27$i = HEAP32[$203>>2]|0;
      if ($222) {
       $218 = $$pre27$i;$i$012$i = $220;
      } else {
       $223 = $$pre27$i;
       break;
      }
     }
    } else {
     $223 = $204;
    }
   }
   _free($223);
  }
  $224 = (($145) + 52|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225|0)==(0|0);
  if (!($226)) {
   $227 = ($206|0)==(0|0);
   if ($227) {
    $243 = $225;
   } else {
    $228 = (($206) + 20|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)>(0);
    if ($230) {
     $238 = $225;$i$18$i = 0;
     while(1) {
      $231 = ((($206) + ($i$18$i<<2)|0) + 1312|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (57304 + ($232<<2)|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = (($234) + 16|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($238) + ($i$18$i<<2)|0);
      $239 = HEAP32[$237>>2]|0;
      FUNCTION_TABLE_vi[$236 & 127]($239);
      $240 = (($i$18$i) + 1)|0;
      $241 = HEAP32[$228>>2]|0;
      $242 = ($240|0)<($241|0);
      $$pre26$i = HEAP32[$224>>2]|0;
      if ($242) {
       $238 = $$pre26$i;$i$18$i = $240;
      } else {
       $243 = $$pre26$i;
       break;
      }
     }
    } else {
     $243 = $225;
    }
   }
   _free($243);
  }
  $244 = (($145) + 56|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ($245|0)==(0|0);
  if (!($246)) {
   $247 = ($206|0)==(0|0);
   if ($247) {
    $324 = $245;
   } else {
    $248 = (($206) + 28|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($249|0)>(0);
    if ($250) {
     $252 = $245;$391 = $249;$i$24$i = 0;
     while(1) {
      $251 = (($252) + (($i$24$i*52)|0)|0);
      $253 = ($251|0)==(0|0);
      if ($253) {
       $$pre25$i = $252;$323 = $391;
      } else {
       $254 = ((($252) + (($i$24$i*52)|0)|0) + 16|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = ($255|0)==(0|0);
       if (!($256)) {
        _free($255);
       }
       $257 = ((($252) + (($i$24$i*52)|0)|0) + 20|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = ($258|0)==(0|0);
       if (!($259)) {
        _free($258);
       }
       $260 = ((($252) + (($i$24$i*52)|0)|0) + 24|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($261|0)==(0|0);
       if (!($262)) {
        _free($261);
       }
       $263 = ((($252) + (($i$24$i*52)|0)|0) + 8|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = ($264|0)==(0|0);
       if (!($265)) {
        $267 = $264;$i$06$i$i = 0;
        while(1) {
         $266 = (($267) + ($i$06$i$i<<2)|0);
         $268 = HEAP32[$266>>2]|0;
         $269 = HEAP32[$268>>2]|0;
         _free($269);
         $270 = HEAP32[$263>>2]|0;
         $271 = (($270) + ($i$06$i$i<<2)|0);
         $272 = HEAP32[$271>>2]|0;
         $273 = (($272) + 4|0);
         $274 = HEAP32[$273>>2]|0;
         _free($274);
         $275 = HEAP32[$263>>2]|0;
         $276 = (($275) + ($i$06$i$i<<2)|0);
         $277 = HEAP32[$276>>2]|0;
         $278 = (($277) + 8|0);
         $279 = HEAP32[$278>>2]|0;
         _free($279);
         $280 = HEAP32[$263>>2]|0;
         $281 = (($280) + ($i$06$i$i<<2)|0);
         $282 = HEAP32[$281>>2]|0;
         $283 = (($282) + 12|0);
         $284 = HEAP32[$283>>2]|0;
         _free($284);
         $285 = HEAP32[$263>>2]|0;
         $286 = (($285) + ($i$06$i$i<<2)|0);
         $287 = HEAP32[$286>>2]|0;
         $288 = (($287) + 16|0);
         $289 = HEAP32[$288>>2]|0;
         _free($289);
         $290 = HEAP32[$263>>2]|0;
         $291 = (($290) + ($i$06$i$i<<2)|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = (($292) + 20|0);
         $294 = HEAP32[$293>>2]|0;
         _free($294);
         $295 = HEAP32[$263>>2]|0;
         $296 = (($295) + ($i$06$i$i<<2)|0);
         $297 = HEAP32[$296>>2]|0;
         $298 = (($297) + 24|0);
         $299 = HEAP32[$298>>2]|0;
         _free($299);
         $300 = HEAP32[$263>>2]|0;
         $301 = (($300) + ($i$06$i$i<<2)|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = (($302) + 28|0);
         $304 = HEAP32[$303>>2]|0;
         _free($304);
         $305 = HEAP32[$263>>2]|0;
         $306 = (($305) + ($i$06$i$i<<2)|0);
         $307 = HEAP32[$306>>2]|0;
         _free($307);
         $308 = (($i$06$i$i) + 1)|0;
         $exitcond$i$i = ($308|0)==(17);
         $309 = HEAP32[$263>>2]|0;
         if ($exitcond$i$i) {
          break;
         } else {
          $267 = $309;$i$06$i$i = $308;
         }
        }
        _free($309);
       }
       $310 = ((($252) + (($i$24$i*52)|0)|0) + 12|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = ($311|0)==(0|0);
       if (!($312)) {
        $313 = HEAP32[$311>>2]|0;
        _free($313);
        $314 = HEAP32[$310>>2]|0;
        $315 = (($314) + 4|0);
        $316 = HEAP32[$315>>2]|0;
        _free($316);
        $317 = HEAP32[$310>>2]|0;
        $318 = (($317) + 8|0);
        $319 = HEAP32[$318>>2]|0;
        _free($319);
        $320 = HEAP32[$310>>2]|0;
        _free($320);
       }
       dest=$251+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
       $$pre10 = HEAP32[$248>>2]|0;
       $$pre25$i$pre = HEAP32[$244>>2]|0;
       $$pre25$i = $$pre25$i$pre;$323 = $$pre10;
      }
      $321 = (($i$24$i) + 1)|0;
      $322 = ($321|0)<($323|0);
      if ($322) {
       $252 = $$pre25$i;$391 = $323;$i$24$i = $321;
      } else {
       $324 = $$pre25$i;
       break;
      }
     }
    } else {
     $324 = $245;
    }
   }
   _free($324);
  }
  $325 = (($145) + 60|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)==(0|0);
  if (!($327)) {
   _free($326);
  }
  $328 = (($145) + 80|0);
  dest=$328+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $329 = (($145) + 20|0);
  $330 = (($145) + 24|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = ($331|0)==(0|0);
  if (!($332)) {
   _free($331);
  }
  $333 = (($145) + 28|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = ($334|0)==(0|0);
  if (!($335)) {
   _free($334);
  }
  ;HEAP32[$329+0>>2]=0|0;HEAP32[$329+4>>2]=0|0;HEAP32[$329+8>>2]=0|0;
  $336 = (($145) + 32|0);
  $337 = (($145) + 36|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ($338|0)==(0|0);
  if (!($339)) {
   _free($338);
  }
  $340 = (($145) + 40|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = ($341|0)==(0|0);
  if (!($342)) {
   _free($341);
  }
  ;HEAP32[$336+0>>2]=0|0;HEAP32[$336+4>>2]=0|0;HEAP32[$336+8>>2]=0|0;
 }
 $343 = (($137) + 416|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = ($344|0)==(0|0);
 if (!($345)) {
  if ($141) {
   $346 = (($140) + 4|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = ($347|0)>(0);
   if ($348) {
    $350 = $344;$392 = $347;$i$31$i = 0;
    while(1) {
     $349 = (($350) + ($i$31$i<<2)|0);
     $351 = HEAP32[$349>>2]|0;
     $352 = ($351|0)==(0|0);
     if ($352) {
      $$pre28$i = $350;$355 = $392;
     } else {
      _free($351);
      $$pre21$i = HEAP32[$346>>2]|0;
      $$pre28$i$pre = HEAP32[$343>>2]|0;
      $$pre28$i = $$pre28$i$pre;$355 = $$pre21$i;
     }
     $353 = (($i$31$i) + 1)|0;
     $354 = ($353|0)<($355|0);
     if ($354) {
      $350 = $$pre28$i;$392 = $355;$i$31$i = $353;
     } else {
      $356 = $$pre28$i;
      break;
     }
    }
   } else {
    $356 = $344;
   }
  } else {
   $356 = $344;
  }
  _free($356);
  $357 = (($137) + 420|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = ($358|0)==(0|0);
  if (!($359)) {
   _free($358);
  }
 }
 if ($146) {
  $360 = (($145) + 64|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ($361|0)==(0|0);
  if (!($362)) {
   _free($361);
  }
  $363 = (($145) + 68|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = ($364|0)==(0|0);
  if (!($365)) {
   _free($364);
  }
  $366 = (($145) + 72|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = ($367|0)==(0|0);
  if (!($368)) {
   _free($367);
  }
  _free($145);
 }
 dest=$138+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $369 = HEAP32[553040>>2]|0;
 $370 = (($369) + 392|0);
 $371 = HEAP32[$370>>2]|0;
 $372 = ($371|0)==(0|0);
 if (!($372)) {
  $373 = (($369) + 400|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = ($374|0)>(0);
  if ($375) {
   $377 = $371;$393 = $374;$i$01$i = 0;
   while(1) {
    $376 = (($377) + ($i$01$i<<2)|0);
    $378 = HEAP32[$376>>2]|0;
    $379 = ($378|0)==(0|0);
    if ($379) {
     $382 = $393;$394 = $377;
    } else {
     _free($378);
     $$pre$i = HEAP32[$373>>2]|0;
     $$pre3$i = HEAP32[$370>>2]|0;
     $382 = $$pre$i;$394 = $$pre3$i;
    }
    $380 = (($i$01$i) + 1)|0;
    $381 = ($380|0)<($382|0);
    if ($381) {
     $377 = $394;$393 = $382;$i$01$i = $380;
    } else {
     $$lcssa$i = $394;
     break;
    }
   }
  } else {
   $$lcssa$i = $371;
  }
  _free($$lcssa$i);
 }
 $383 = (($369) + 396|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = ($384|0)==(0|0);
 if (!($385)) {
  _free($384);
 }
 $386 = (($369) + 404|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = ($387|0)==(0|0);
 if ($388) {
  ;HEAP32[$370+0>>2]=0|0;HEAP32[$370+4>>2]=0|0;HEAP32[$370+8>>2]=0|0;HEAP32[$370+12>>2]=0|0;
  $389 = HEAP32[553040>>2]|0;
  $390 = (($389) + 360|0);
  _vorbis_info_clear($390);
  STACKTOP = sp;return;
 }
 _free($387);
 ;HEAP32[$370+0>>2]=0|0;HEAP32[$370+4>>2]=0|0;HEAP32[$370+8>>2]=0|0;HEAP32[$370+12>>2]=0|0;
 $389 = HEAP32[553040>>2]|0;
 $390 = (($389) + 360|0);
 _vorbis_info_clear($390);
 STACKTOP = sp;return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ti) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 _memcpy(($4|0),($1|0),($3|0))|0;
 $$0$i = $4;
 STACKTOP = sp;return ($$0$i|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((554208|0),(553296|0));
 __embind_register_bool((554224|0),(553304|0),1,1,0);
 __embind_register_integer((554240|0),(553312|0),1,-128,127);
 __embind_register_integer((554272|0),(553320|0),1,-128,127);
 __embind_register_integer((554256|0),(553336|0),1,0,255);
 __embind_register_integer((554288|0),(553352|0),2,-32768,32767);
 __embind_register_integer((554304|0),(553360|0),2,0,65535);
 __embind_register_integer((554320|0),(553376|0),4,-2147483648,2147483647);
 __embind_register_integer((554336|0),(553384|0),4,0,-1);
 __embind_register_integer((554352|0),(553400|0),4,-2147483648,2147483647);
 __embind_register_integer((554368|0),(553408|0),4,0,-1);
 __embind_register_float((554384|0),(553424|0),4);
 __embind_register_float((554400|0),(553432|0),8);
 __embind_register_std_string((553912|0),(553440|0));
 __embind_register_std_string((553824|0),(553456|0));
 __embind_register_std_wstring((553736|0),4,(553496|0));
 __embind_register_emval((553616|0),(553512|0));
 __embind_register_memory_view((553584|0),(553528|0));
 STACKTOP = sp;return;
}
function _qsort($base,$nel,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0;
 var $$pre$i22 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0, $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0;
 var $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $tmp$i = 0, $tmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = $nel << 2;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) + -4)|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = 4;
 HEAP32[$lp>>2] = 4;
 $4 = 4;$6 = 4;$i$0 = 2;
 while(1) {
  $3 = (($4) + 4)|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (($base) + ($$sum)|0);
 $11 = ($$sum|0)>(0);
 if ($11) {
  $12 = $10;
  $14 = 1;$46 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $13 = $14 & 3;
   $15 = ($13|0)==(3);
   do {
    if ($15) {
     HEAP32[$ar$i>>2] = $head$077;
     $16 = ($pshift$078|0)>(1);
     if ($16) {
      $$012$i = $pshift$078;$$03$i = $head$077;$22 = $head$077;$i$04$i = 1;
      while(1) {
       $17 = (($$03$i) + -4|0);
       $18 = (($$012$i) + -2)|0;
       $19 = (($lp) + ($18<<2)|0);
       $20 = HEAP32[$19>>2]|0;
       $$sum$i = (-4 - ($20))|0;
       $21 = (($$03$i) + ($$sum$i)|0);
       $23 = (FUNCTION_TABLE_iii[$cmp & 127]($22,$21)|0);
       $24 = ($23|0)>(-1);
       if ($24) {
        $25 = (FUNCTION_TABLE_iii[$cmp & 127]($22,$17)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $i$0$lcssa$i = $i$04$i;
         break;
        }
       }
       $27 = (FUNCTION_TABLE_iii[$cmp & 127]($21,$17)|0);
       $28 = ($27|0)>(-1);
       $29 = (($i$04$i) + 1)|0;
       $30 = (($ar$i) + ($i$04$i<<2)|0);
       if ($28) {
        HEAP32[$30>>2] = $21;
        $31 = (($$012$i) + -1)|0;
        $$0$be$i = $21;$$01$be$i = $31;
       } else {
        HEAP32[$30>>2] = $17;
        $$0$be$i = $17;$$01$be$i = $18;
       }
       $32 = ($$01$be$i|0)>(1);
       if (!($32)) {
        $i$0$lcssa$i = $29;
        break;
       }
       $$pre$i = HEAP32[$ar$i>>2]|0;
       $$012$i = $$01$be$i;$$03$i = $$0$be$i;$22 = $$pre$i;$i$04$i = $29;
      }
      $33 = ($i$0$lcssa$i|0)<(2);
      if (!($33)) {
       $41 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
       HEAP32[$41>>2] = $tmp$i;
       $42 = HEAP32[$ar$i>>2]|0;
       $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
       HEAP32[$tmp$i>>2] = $43;
       $39 = $42;$i$01$us$i = 0;
       while(1) {
        $34 = (($ar$i) + ($i$01$us$i<<2)|0);
        $35 = (($i$01$us$i) + 1)|0;
        $36 = (($ar$i) + ($35<<2)|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
        HEAP8[$39>>0]=$38&255;HEAP8[$39+1>>0]=($38>>8)&255;HEAP8[$39+2>>0]=($38>>16)&255;HEAP8[$39+3>>0]=$38>>24;
        $40 = (($39) + 4|0);
        HEAP32[$34>>2] = $40;
        $exitcond$i = ($35|0)==($i$0$lcssa$i|0);
        if ($exitcond$i) {
         break;
        } else {
         $39 = $37;$i$01$us$i = $35;
        }
       }
      }
     }
     $44 = $14 >>> 2;
     $45 = $46 << 30;
     $47 = $44 | $45;
     $48 = $46 >>> 2;
     $49 = (($pshift$078) + 2)|0;
     $157 = $48;$97 = $47;$pshift$1 = $49;
    } else {
     $50 = (($pshift$078) + -1)|0;
     $51 = (($lp) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $head$077;
     $54 = (($12) - ($53))|0;
     $55 = ($52>>>0)<($54>>>0);
     if ($55) {
      HEAP32[$ar$i>>2] = $head$077;
      $56 = ($pshift$078|0)>(1);
      if ($56) {
       $$012$i16 = $pshift$078;$$03$i15 = $head$077;$62 = $head$077;$i$04$i14 = 1;
       while(1) {
        $57 = (($$03$i15) + -4|0);
        $58 = (($$012$i16) + -2)|0;
        $59 = (($lp) + ($58<<2)|0);
        $60 = HEAP32[$59>>2]|0;
        $$sum$i18 = (-4 - ($60))|0;
        $61 = (($$03$i15) + ($$sum$i18)|0);
        $63 = (FUNCTION_TABLE_iii[$cmp & 127]($62,$61)|0);
        $64 = ($63|0)>(-1);
        if ($64) {
         $65 = (FUNCTION_TABLE_iii[$cmp & 127]($62,$57)|0);
         $66 = ($65|0)>(-1);
         if ($66) {
          $i$0$lcssa$i24 = $i$04$i14;
          break;
         }
        }
        $67 = (FUNCTION_TABLE_iii[$cmp & 127]($61,$57)|0);
        $68 = ($67|0)>(-1);
        $69 = (($i$04$i14) + 1)|0;
        $70 = (($ar$i) + ($i$04$i14<<2)|0);
        if ($68) {
         HEAP32[$70>>2] = $61;
         $71 = (($$012$i16) + -1)|0;
         $$0$be$i20 = $61;$$01$be$i19 = $71;
        } else {
         HEAP32[$70>>2] = $57;
         $$0$be$i20 = $57;$$01$be$i19 = $58;
        }
        $72 = ($$01$be$i19|0)>(1);
        if (!($72)) {
         $i$0$lcssa$i24 = $69;
         break;
        }
        $$pre$i22 = HEAP32[$ar$i>>2]|0;
        $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$62 = $$pre$i22;$i$04$i14 = $69;
       }
       $73 = ($i$0$lcssa$i24|0)<(2);
       if (!($73)) {
        $81 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
        HEAP32[$81>>2] = $tmp$i26;
        $82 = HEAP32[$ar$i>>2]|0;
        $83 = HEAPU8[$82>>0]|(HEAPU8[$82+1>>0]<<8)|(HEAPU8[$82+2>>0]<<16)|(HEAPU8[$82+3>>0]<<24);
        HEAP32[$tmp$i26>>2] = $83;
        $79 = $82;$i$01$us$i30 = 0;
        while(1) {
         $74 = (($ar$i) + ($i$01$us$i30<<2)|0);
         $75 = (($i$01$us$i30) + 1)|0;
         $76 = (($ar$i) + ($75<<2)|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = HEAPU8[$77>>0]|(HEAPU8[$77+1>>0]<<8)|(HEAPU8[$77+2>>0]<<16)|(HEAPU8[$77+3>>0]<<24);
         HEAP8[$79>>0]=$78&255;HEAP8[$79+1>>0]=($78>>8)&255;HEAP8[$79+2>>0]=($78>>16)&255;HEAP8[$79+3>>0]=$78>>24;
         $80 = (($79) + 4|0);
         HEAP32[$74>>2] = $80;
         $exitcond$i31 = ($75|0)==($i$0$lcssa$i24|0);
         if ($exitcond$i31) {
          break;
         } else {
          $79 = $77;$i$01$us$i30 = $75;
         }
        }
       }
      }
     } else {
      _trinkle($head$077,$cmp,$14,$46,$pshift$078,0,$lp);
     }
     $84 = ($pshift$078|0)==(1);
     if ($84) {
      $85 = $46 << 1;
      $86 = $14 >>> 31;
      $87 = $86 | $85;
      $88 = $14 << 1;
      $157 = $87;$97 = $88;$pshift$1 = 0;
      break;
     } else {
      $89 = ($50>>>0)>(31);
      $90 = (($pshift$078) + -33)|0;
      $$ = $89 ? 0 : $14;
      $$66 = $89 ? $14 : $46;
      $$67 = $89 ? $90 : $50;
      $91 = $$66 << $$67;
      $92 = (32 - ($$67))|0;
      $93 = $$ >>> $92;
      $94 = $93 | $91;
      $95 = $$ << $$67;
      $157 = $94;$97 = $95;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $96 = $97 | 1;
   $98 = (($head$077) + 4|0);
   $99 = ($98>>>0)<($10>>>0);
   if ($99) {
    $14 = $96;$46 = $157;$head$077 = $98;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $157;$$lcssa76 = $96;$head$0$lcssa = $98;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $101 = $$lcssa76;$103 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $100 = ($pshift$2|0)==(1);
  if ($100) {
   $102 = ($101|0)==(1);
   if ($102) {
    $104 = ($103|0)==(0);
    if ($104) {
     break;
    } else {
     label = 40;
    }
   }
  } else {
   label = 40;
  }
  if ((label|0) == 40) {
   label = 0;
   $105 = ($pshift$2|0)<(2);
   if (!($105)) {
    $137 = $103 << 2;
    $138 = $101 >>> 30;
    $139 = $138 | $137;
    $140 = (($pshift$2) + -2)|0;
    $141 = $101 << 1;
    $142 = $141 & 2147483646;
    $143 = $138 << 31;
    $144 = $142 | $143;
    $145 = $144 ^ 3;
    $146 = $139 >>> 1;
    $147 = (($lp) + ($140<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $$sum2 = (-4 - ($148))|0;
    $149 = (($head$1) + ($$sum2)|0);
    $150 = (($pshift$2) + -1)|0;
    _trinkle($149,$cmp,$145,$146,$150,1,$lp);
    $151 = $146 << 1;
    $152 = $138 & 1;
    $153 = $151 | $152;
    $154 = $145 << 1;
    $155 = $154 | 1;
    $156 = (($head$1) + -4|0);
    _trinkle($156,$cmp,$155,$153,$140,1,$lp);
    $101 = $155;$103 = $153;$head$1 = $156;$pshift$2 = $140;
    continue;
   }
  }
  $106 = (($101) + -1)|0;
  $107 = ($106|0)==(0);
  if ($107) {
   $127 = 32;
   label = 50;
  } else {
   $108 = $106 & 1;
   $109 = ($108|0)==(0);
   if ($109) {
    $$02$i$i = $106;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $110 = (($nTrailingZeros$03$i$i) + 1)|0;
     $111 = $$02$i$i >>> 1;
     $112 = $111 & 1;
     $113 = ($112|0)==(0);
     if ($113) {
      $$02$i$i = $111;$nTrailingZeros$03$i$i = $110;
     } else {
      break;
     }
    }
    $114 = ($110|0)==(0);
    if ($114) {
     label = 45;
    } else {
     $124 = $110;
    }
   } else {
    label = 45;
   }
   if ((label|0) == 45) {
    label = 0;
    $115 = ($103|0)==(0);
    if ($115) {
     $$01$i5$i = 32;
    } else {
     $116 = $103 & 1;
     $117 = ($116|0)==(0);
     if ($117) {
      $$02$i3$i = $103;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $118 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $119 = $$02$i3$i >>> 1;
       $120 = $119 & 1;
       $121 = ($120|0)==(0);
       if ($121) {
        $$02$i3$i = $119;$nTrailingZeros$03$i2$i = $118;
       } else {
        $$01$i5$i = $118;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $122 = (($$01$i5$i) + 32)|0;
    $123 = ($$01$i5$i|0)==(0);
    $$$i = $123 ? 0 : $122;
    $124 = $$$i;
   }
   $125 = ($124>>>0)>(31);
   if ($125) {
    $127 = $124;
    label = 50;
   } else {
    $$0$i50 = $124;$129 = $101;$132 = $103;$136 = $124;
   }
  }
  if ((label|0) == 50) {
   label = 0;
   $126 = (($127) + -32)|0;
   $$0$i50 = $126;$129 = $103;$132 = 0;$136 = $127;
  }
  $128 = $129 >>> $$0$i50;
  $130 = (32 - ($$0$i50))|0;
  $131 = $132 << $130;
  $133 = $131 | $128;
  $134 = $132 >>> $$0$i50;
  $135 = (($136) + ($pshift$2))|0;
  $$pre = (($head$1) + -4|0);
  $101 = $133;$103 = $134;$head$1 = $$pre;$pshift$2 = $135;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$029 = 0, $$03$i = 0, $$pre = 0, $$pre$i = 0, $$sum = 0;
 var $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ar = 0;
 var $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $tmp$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0;
 $tmp$i6 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pp$val|0)==(1);
 $1 = ($pp$1$val|0)==(0);
 $or$cond18 = $0 & $1;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$23 = $pp$val;$32 = $pp$1$val;$6 = $head;$i$011 = 1;
   while(1) {
    $2 = (($lp) + ($$0110<<2)|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (0 - ($3))|0;
    $5 = (($$012) + ($4)|0);
    $7 = (FUNCTION_TABLE_iii[$cmp & 127]($5,$6)|0);
    $8 = ($7|0)<(1);
    if ($8) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $9 = ($$029|0)==(0);
    $10 = ($$0110|0)>(1);
    $or$cond = $9 & $10;
    if ($or$cond) {
     $11 = (($$012) + -4|0);
     $12 = (($$0110) + -2)|0;
     $13 = (($lp) + ($12<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_iii[$cmp & 127]($11,$5)|0);
     $16 = ($15|0)>(-1);
     if ($16) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $$sum = (-4 - ($14))|0;
     $17 = (($$012) + ($$sum)|0);
     $18 = (FUNCTION_TABLE_iii[$cmp & 127]($17,$5)|0);
     $19 = ($18|0)>(-1);
     if ($19) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $20 = (($i$011) + 1)|0;
    $21 = (($ar) + ($i$011<<2)|0);
    HEAP32[$21>>2] = $5;
    $22 = (($23) + -1)|0;
    $24 = ($22|0)==(0);
    if ($24) {
     $45 = 32;
     label = 15;
    } else {
     $25 = $22 & 1;
     $26 = ($25|0)==(0);
     if ($26) {
      $$02$i$i = $22;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $27 = (($nTrailingZeros$03$i$i) + 1)|0;
       $28 = $$02$i$i >>> 1;
       $29 = $28 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
       } else {
        break;
       }
      }
      $31 = ($27|0)==(0);
      if ($31) {
       label = 10;
      } else {
       $42 = $27;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ($32|0)==(0);
      if ($33) {
       $$01$i5$i = 32;
      } else {
       $34 = $32 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        $$02$i3$i = $32;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $36 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $37 = $$02$i3$i >>> 1;
         $38 = $37 & 1;
         $39 = ($38|0)==(0);
         if ($39) {
          $$02$i3$i = $37;$nTrailingZeros$03$i2$i = $36;
         } else {
          $$01$i5$i = $36;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $40 = (($$01$i5$i) + 32)|0;
      $41 = ($$01$i5$i|0)==(0);
      $$$i = $41 ? 0 : $40;
      $42 = $$$i;
     }
     $43 = ($42>>>0)>(31);
     if ($43) {
      $45 = $42;
      label = 15;
     } else {
      $$0$i = $42;$47 = $23;$50 = $32;$54 = $42;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $44 = (($45) + -32)|0;
     $$0$i = $44;$47 = $32;$50 = 0;$54 = $45;
    }
    $46 = $47 >>> $$0$i;
    $48 = (32 - ($$0$i))|0;
    $49 = $50 << $48;
    $51 = $49 | $46;
    $52 = $50 >>> $$0$i;
    $53 = (($54) + ($$0110))|0;
    $55 = ($51|0)==(1);
    $56 = ($52|0)==(0);
    $or$cond1 = $55 & $56;
    if ($or$cond1) {
     $$0$lcssa26 = $5;$$01$lcssa28 = $53;$i$0$lcssa27 = $20;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $53;$$012 = $5;$$029 = 0;$23 = $51;$32 = $52;$6 = $$pre;$i$011 = $20;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $57 = ($$02$lcssa|0)==(0);
  if ($57) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $58 = ($i$0$lcssa27|0)<(2);
 if (!($58)) {
  $66 = (($ar) + ($i$0$lcssa27<<2)|0);
  HEAP32[$66>>2] = $tmp$i6;
  $67 = HEAP32[$ar>>2]|0;
  $68 = HEAPU8[$67>>0]|(HEAPU8[$67+1>>0]<<8)|(HEAPU8[$67+2>>0]<<16)|(HEAPU8[$67+3>>0]<<24);
  HEAP32[$tmp$i6>>2] = $68;
  $64 = $67;$i$01$us$i10 = 0;
  while(1) {
   $59 = (($ar) + ($i$01$us$i10<<2)|0);
   $60 = (($i$01$us$i10) + 1)|0;
   $61 = (($ar) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAPU8[$62>>0]|(HEAPU8[$62+1>>0]<<8)|(HEAPU8[$62+2>>0]<<16)|(HEAPU8[$62+3>>0]<<24);
   HEAP8[$64>>0]=$63&255;HEAP8[$64+1>>0]=($63>>8)&255;HEAP8[$64+2>>0]=($63>>16)&255;HEAP8[$64+3>>0]=$63>>24;
   $65 = (($64) + 4|0);
   HEAP32[$59>>2] = $65;
   $exitcond$i11 = ($60|0)==($i$0$lcssa27|0);
   if ($exitcond$i11) {
    break;
   } else {
    $64 = $62;$i$01$us$i10 = $60;
   }
  }
 }
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $69 = ($$01$lcssa28|0)>(1);
 if ($69) {
  $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$75 = $$0$lcssa26;$i$04$i = 1;
  while(1) {
   $70 = (($$03$i) + -4|0);
   $71 = (($$012$i) + -2)|0;
   $72 = (($lp) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $$sum$i = (-4 - ($73))|0;
   $74 = (($$03$i) + ($$sum$i)|0);
   $76 = (FUNCTION_TABLE_iii[$cmp & 127]($75,$74)|0);
   $77 = ($76|0)>(-1);
   if ($77) {
    $78 = (FUNCTION_TABLE_iii[$cmp & 127]($75,$70)|0);
    $79 = ($78|0)>(-1);
    if ($79) {
     $i$0$lcssa$i = $i$04$i;
     break;
    }
   }
   $80 = (FUNCTION_TABLE_iii[$cmp & 127]($74,$70)|0);
   $81 = ($80|0)>(-1);
   $82 = (($i$04$i) + 1)|0;
   $83 = (($ar$i) + ($i$04$i<<2)|0);
   if ($81) {
    HEAP32[$83>>2] = $74;
    $84 = (($$012$i) + -1)|0;
    $$0$be$i = $74;$$01$be$i = $84;
   } else {
    HEAP32[$83>>2] = $70;
    $$0$be$i = $70;$$01$be$i = $71;
   }
   $85 = ($$01$be$i|0)>(1);
   if (!($85)) {
    $i$0$lcssa$i = $82;
    break;
   }
   $$pre$i = HEAP32[$ar$i>>2]|0;
   $$012$i = $$01$be$i;$$03$i = $$0$be$i;$75 = $$pre$i;$i$04$i = $82;
  }
  $86 = ($i$0$lcssa$i|0)<(2);
  if ($86) {
   $97 = $tmp$i;
  } else {
   $94 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
   HEAP32[$94>>2] = $tmp$i;
   $95 = HEAP32[$ar$i>>2]|0;
   $96 = HEAPU8[$95>>0]|(HEAPU8[$95+1>>0]<<8)|(HEAPU8[$95+2>>0]<<16)|(HEAPU8[$95+3>>0]<<24);
   HEAP32[$tmp$i>>2] = $96;
   $92 = $95;$i$01$us$i = 0;
   while(1) {
    $87 = (($ar$i) + ($i$01$us$i<<2)|0);
    $88 = (($i$01$us$i) + 1)|0;
    $89 = (($ar$i) + ($88<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAPU8[$90>>0]|(HEAPU8[$90+1>>0]<<8)|(HEAPU8[$90+2>>0]<<16)|(HEAPU8[$90+3>>0]<<24);
    HEAP8[$92>>0]=$91&255;HEAP8[$92+1>>0]=($91>>8)&255;HEAP8[$92+2>>0]=($91>>16)&255;HEAP8[$92+3>>0]=$91>>24;
    $93 = (($92) + 4|0);
    HEAP32[$87>>2] = $93;
    $exitcond$i = ($88|0)==($i$0$lcssa$i|0);
    if ($exitcond$i) {
     $97 = $tmp$i;
     break;
    } else {
     $92 = $90;$i$01$us$i = $88;
    }
   }
  }
 } else {
  $97 = $tmp$i;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$1 = 0, $$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dst_ptr$0$i = 0, $info = 0, $info$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $info$i = sp + 56|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = HEAP32[$thrown_type>>2]|0;
 $3 = (($2) + -8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($thrown_type) + ($5)|0);
 $7 = (($2) + -4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$info$i>>2] = 554056;
 $9 = (($info$i) + 4|0);
 HEAP32[$9>>2] = $thrown_type;
 $10 = (($info$i) + 8|0);
 HEAP32[$10>>2] = 554000;
 $11 = (($info$i) + 12|0);
 $12 = (($info$i) + 16|0);
 $13 = (($info$i) + 20|0);
 $14 = (($info$i) + 24|0);
 $15 = (($info$i) + 28|0);
 $16 = (($info$i) + 32|0);
 $17 = (($info$i) + 40|0);
 $18 = ($8|0)==(554056|0);
 dest=$11+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$11+40>>1]=0|0;HEAP8[$11+42>>0]=0|0;
 do {
  if ($18) {
   $19 = (($info$i) + 48|0);
   HEAP32[$19>>2] = 1;
   $20 = HEAP32[554056>>2]|0;
   $21 = (($20) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_viiiiii[$22 & 127]($8,$info$i,$6,$6,1,0);
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $$$i = $24 ? $6 : 0;
   $dst_ptr$0$i = $$$i;
  } else {
   $25 = (($info$i) + 36|0);
   $26 = HEAP32[$8>>2]|0;
   $27 = (($26) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_viiiii[$28 & 127]($8,$info$i,$6,1,0);
   $29 = HEAP32[$25>>2]|0;
   if ((($29|0) == 1)) {
    $37 = HEAP32[$14>>2]|0;
    $38 = ($37|0)==(1);
    if (!($38)) {
     $39 = HEAP32[$17>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      $$1 = 0;
      STACKTOP = sp;return ($$1|0);
     }
     $41 = HEAP32[$15>>2]|0;
     $42 = ($41|0)==(1);
     if (!($42)) {
      $$1 = 0;
      STACKTOP = sp;return ($$1|0);
     }
     $43 = HEAP32[$16>>2]|0;
     $44 = ($43|0)==(1);
     if (!($44)) {
      $$1 = 0;
      STACKTOP = sp;return ($$1|0);
     }
    }
    $45 = HEAP32[$12>>2]|0;
    $dst_ptr$0$i = $45;
    break;
   } else if ((($29|0) == 0)) {
    $30 = HEAP32[$17>>2]|0;
    $31 = ($30|0)==(1);
    if (!($31)) {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    $32 = HEAP32[$15>>2]|0;
    $33 = ($32|0)==(1);
    if ($33) {
     $34 = HEAP32[$16>>2]|0;
     $35 = ($34|0)==(1);
     $36 = HEAP32[$13>>2]|0;
     $$1$i = $35 ? $36 : 0;
     $dst_ptr$0$i = $$1$i;
     break;
    } else {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
   } else {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $46 = ($dst_ptr$0$i|0)==(0|0);
 if ($46) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $dst_ptr$0$i;
 $47 = (($info) + 8|0);
 HEAP32[$47>>2] = $this;
 $48 = (($info) + 12|0);
 HEAP32[$48>>2] = -1;
 $49 = (($info) + 48|0);
 HEAP32[$49>>2] = 1;
 $50 = HEAP32[$dst_ptr$0$i>>2]|0;
 $51 = (($50) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$52 & 127]($dst_ptr$0$i,$info,$53,1);
 $54 = (($info) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(1);
 if (!($56)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $57 = (($info) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$adjustedPtr>>2] = $58;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 127]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16>>0] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 127]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 127]($48,$info,$52,$55);
  $56 = HEAP8[$39>>0]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28>>0] = 0;
       HEAP8[$29>>0] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 127]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30>>0]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29>>0]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28>>0]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74>>0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 127]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129>>0]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 127]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128>>0]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 127]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104>>0]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 127]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 127]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 127]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32>>0] = 0;
  HEAP8[$34>>0] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 127]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32>>0] = 0;
     HEAP8[$34>>0] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 127]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32>>0] = $33;
  HEAP8[$34>>0] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $25 = $path_below;
 } else {
  $25 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $26 = ($25|0)==(1);
 $or$cond1$i = $24 & $26;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 127]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $25 = $path_below;
 } else {
  $25 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $26 = ($25|0)==(1);
 $or$cond1$i = $24 & $26;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $25 = $path_below;
 } else {
  $25 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $26 = ($25|0)==(1);
 $or$cond1$i = $24 & $26;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[554600>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((554600 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((554600 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[554600>>2] = $22;
     } else {
      $23 = HEAP32[((554600 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((554600 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((554600 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((554600 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[554600>>2] = $74;
      } else {
       $75 = HEAP32[((554600 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((554600 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((554600 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((554600 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[554600>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[554600>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((554600 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((554600 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((554600 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((554600 + 8|0))>>2] = $81;
     HEAP32[((554600 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((554600 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((554600 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((554600 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((554600 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((554600 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((554600 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((554600 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((554600 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((554600 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((554600 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((554600 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((554600 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((554600 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[554600>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[554600>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((554600 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((554600 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((554600 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((554600 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((554600 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((554600 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((554600 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((554600 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((554600 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((554600 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((554600 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((554600 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((554600 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((554600 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((554600 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((554600 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((554600 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((554600 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[554600>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[554600>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((554600 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((554600 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((554600 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((554600 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((554600 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((554600 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((554600 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((554600 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((554600 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((554600 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((554600 + 20|0))>>2] = $516;
   HEAP32[((554600 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((554600 + 8|0))>>2] = 0;
   HEAP32[((554600 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((554600 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((554600 + 12|0))>>2] = $530;
  $531 = HEAP32[((554600 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((554600 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[555072>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((555072 + 8|0))>>2] = $540;
    HEAP32[((555072 + 4|0))>>2] = $540;
    HEAP32[((555072 + 12|0))>>2] = -1;
    HEAP32[((555072 + 16|0))>>2] = -1;
    HEAP32[((555072 + 20|0))>>2] = 0;
    HEAP32[((554600 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[555072>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((555072 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((554600 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((554600 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((554600 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((554600 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((554600 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((554600 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((555072 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((554600 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((554600 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((555072 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((554600 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((554600 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((554600 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((554600 + 432|0))>>2] = $633;
  $634 = HEAP32[((554600 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((554600 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((554600 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((554600 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((554600 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((554600 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((554600 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((554600 + 460|0))>>2] = 0;
    $641 = HEAP32[555072>>2]|0;
    HEAP32[((554600 + 36|0))>>2] = $641;
    HEAP32[((554600 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((554600 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((554600 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((554600 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((554600 + 24|0))>>2] = $654;
    HEAP32[((554600 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((555072 + 16|0))>>2]|0;
    HEAP32[((554600 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((554600 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((554600 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((554600 + 24|0))>>2] = $684;
       HEAP32[((554600 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((555072 + 16|0))>>2]|0;
       HEAP32[((554600 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((554600 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((554600 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((554600 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((554600 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((554600 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((554600 + 12|0))>>2] = $732;
        HEAP32[((554600 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((554600 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((554600 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((554600 + 8|0))>>2] = $738;
         HEAP32[((554600 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((554600 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((554600 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[554600>>2]|0;
            $765 = $764 & $763;
            HEAP32[554600>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((554600 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((554600 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((554600 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((554600 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((554600 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((554600 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((554600 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((554600 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((554600 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((554600 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((554600 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[554600>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[554600>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((554600 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((554600 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((554600 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((554600 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((554600 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((554600 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((554600 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((554600 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((554600 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((554600 + 24|0))>>2] = $958;
    HEAP32[((554600 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((555072 + 16|0))>>2]|0;
    HEAP32[((554600 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((554600 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((554600 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((554600 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((554600 + 448|0))+12>>2]|0;
    HEAP32[((554600 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((554600 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((554600 + 460|0))>>2] = 0;
    HEAP32[((554600 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((554600 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[554600>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[554600>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((554600 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((554600 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((554600 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((554600 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((554600 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((554600 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((554600 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((554600 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((554600 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((554600 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((554600 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((554600 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((554600 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((554600 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((554600 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((554600 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[554600>>2]|0;
     $36 = $35 & $34;
     HEAP32[554600>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((554600 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((554600 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((554600 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((554600 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((554600 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((554600 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((554600 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((554600 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((554600 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((554600 + 12|0))>>2] = $122;
   HEAP32[((554600 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((554600 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((554600 + 20|0))>>2] = 0;
   HEAP32[((554600 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((554600 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((554600 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((554600 + 8|0))>>2] = $130;
   HEAP32[((554600 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((554600 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((554600 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[554600>>2]|0;
     $154 = $153 & $152;
     HEAP32[554600>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((554600 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((554600 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((554600 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((554600 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((554600 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((554600 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((554600 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((554600 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((554600 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((554600 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((554600 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((554600 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((554600 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[554600>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[554600>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((554600 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((554600 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((554600 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((554600 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((554600 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((554600 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((554600 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((554600 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((554600 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((554600 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((554600 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((554600 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19$i25 = 0, $$sum2 = 0, $$sum22 = 0, $$sum22$i29 = 0, $$sum23 = 0, $$sum23$i3 = 0, $$sum24 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum2728$i = 0, $$sum28 = 0, $$sum30 = 0, $$sum4 = 0, $$sum5 = 0, $$sum5$i13 = 0, $$sum78$i = 0, $$sum9 = 0, $$sum910$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $cond$i = 0, $mem$0 = 0, $or$cond = 0, $or$cond$i = 0, $storemerge$i = 0, $storemerge21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  STACKTOP = sp;return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $22 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $22 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $8 = (($oldmem) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -8;
 $$sum = (($10) + -8)|0;
 $11 = (($oldmem) + ($$sum)|0);
 $12 = HEAP32[((554600 + 16|0))>>2]|0;
 $13 = ($7>>>0)<($12>>>0);
 if ($13) {
  _abort();
  // unreachable;
 }
 $14 = $9 & 3;
 $15 = ($14|0)!=(1);
 $16 = ($$sum|0)>(-8);
 $or$cond$i = $15 & $16;
 if (!($or$cond$i)) {
  _abort();
  // unreachable;
 }
 $$sum2728$i = $10 | 4;
 $$sum1 = (($$sum2728$i) + -8)|0;
 $17 = (($oldmem) + ($$sum1)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 1;
 $20 = ($19|0)==(0);
 if ($20) {
  _abort();
  // unreachable;
 }
 $21 = ($14|0)==(0);
 do {
  if ($21) {
   $23 = ($22>>>0)<(256);
   $24 = $22 | 4;
   $25 = ($10>>>0)<($24>>>0);
   $or$cond = $23 | $25;
   if (!($or$cond)) {
    $26 = (($10) - ($22))|0;
    $27 = HEAP32[((555072 + 8|0))>>2]|0;
    $28 = $27 << 1;
    $29 = ($26>>>0)>($28>>>0);
    if (!($29)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
   }
  } else {
   $30 = ($10>>>0)<($22>>>0);
   if (!($30)) {
    $31 = (($10) - ($22))|0;
    $32 = ($31>>>0)>(15);
    if (!($32)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
    $$sum2 = (($22) + -8)|0;
    $33 = (($oldmem) + ($$sum2)|0);
    $34 = $9 & 1;
    $35 = $34 | $22;
    $36 = $35 | 2;
    HEAP32[$8>>2] = $36;
    $$sum23$i3 = $22 | 4;
    $$sum4 = (($$sum23$i3) + -8)|0;
    $37 = (($oldmem) + ($$sum4)|0);
    $38 = $31 | 3;
    HEAP32[$37>>2] = $38;
    $39 = HEAP32[$17>>2]|0;
    $40 = $39 | 1;
    HEAP32[$17>>2] = $40;
    _dispose_chunk($33,$31);
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $41 = HEAP32[((554600 + 24|0))>>2]|0;
   $42 = ($11|0)==($41|0);
   if ($42) {
    $43 = HEAP32[((554600 + 12|0))>>2]|0;
    $44 = (($43) + ($10))|0;
    $45 = ($44>>>0)>($22>>>0);
    if (!($45)) {
     break;
    }
    $46 = (($44) - ($22))|0;
    $$sum28 = (($22) + -8)|0;
    $47 = (($oldmem) + ($$sum28)|0);
    $48 = $9 & 1;
    $49 = $48 | $22;
    $50 = $49 | 2;
    HEAP32[$8>>2] = $50;
    $$sum22$i29 = $22 | 4;
    $$sum30 = (($$sum22$i29) + -8)|0;
    $51 = (($oldmem) + ($$sum30)|0);
    $52 = $46 | 1;
    HEAP32[$51>>2] = $52;
    HEAP32[((554600 + 24|0))>>2] = $47;
    HEAP32[((554600 + 12|0))>>2] = $46;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $53 = HEAP32[((554600 + 20|0))>>2]|0;
   $54 = ($11|0)==($53|0);
   if ($54) {
    $55 = HEAP32[((554600 + 8|0))>>2]|0;
    $56 = (($55) + ($10))|0;
    $57 = ($56>>>0)<($22>>>0);
    if ($57) {
     break;
    }
    $58 = (($56) - ($22))|0;
    $59 = ($58>>>0)>(15);
    if ($59) {
     $$sum23 = (($22) + -8)|0;
     $60 = (($oldmem) + ($$sum23)|0);
     $$sum24 = (($56) + -8)|0;
     $61 = (($oldmem) + ($$sum24)|0);
     $62 = $9 & 1;
     $63 = $62 | $22;
     $64 = $63 | 2;
     HEAP32[$8>>2] = $64;
     $$sum19$i25 = $22 | 4;
     $$sum26 = (($$sum19$i25) + -8)|0;
     $65 = (($oldmem) + ($$sum26)|0);
     $66 = $58 | 1;
     HEAP32[$65>>2] = $66;
     HEAP32[$61>>2] = $58;
     $$sum27 = (($56) + -4)|0;
     $67 = (($oldmem) + ($$sum27)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68 & -2;
     HEAP32[$67>>2] = $69;
     $storemerge$i = $60;$storemerge21$i = $58;
    } else {
     $70 = $9 & 1;
     $71 = $70 | $56;
     $72 = $71 | 2;
     HEAP32[$8>>2] = $72;
     $$sum22 = (($56) + -4)|0;
     $73 = (($oldmem) + ($$sum22)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 | 1;
     HEAP32[$73>>2] = $75;
     $storemerge$i = 0;$storemerge21$i = 0;
    }
    HEAP32[((554600 + 8|0))>>2] = $storemerge21$i;
    HEAP32[((554600 + 20|0))>>2] = $storemerge$i;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $76 = $18 & 2;
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = $18 & -8;
    $79 = (($78) + ($10))|0;
    $80 = ($79>>>0)<($22>>>0);
    if (!($80)) {
     $81 = (($79) - ($22))|0;
     $82 = $18 >>> 3;
     $83 = ($18>>>0)<(256);
     do {
      if ($83) {
       $84 = (($oldmem) + ($10)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($oldmem) + ($$sum2728$i)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $82 << 1;
       $89 = ((554600 + ($88<<2)|0) + 40|0);
       $90 = ($85|0)==($89|0);
       if (!($90)) {
        $91 = ($85>>>0)<($12>>>0);
        if ($91) {
         _abort();
         // unreachable;
        }
        $92 = (($85) + 12|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==($11|0);
        if (!($94)) {
         _abort();
         // unreachable;
        }
       }
       $95 = ($87|0)==($85|0);
       if ($95) {
        $96 = 1 << $82;
        $97 = $96 ^ -1;
        $98 = HEAP32[554600>>2]|0;
        $99 = $98 & $97;
        HEAP32[554600>>2] = $99;
        break;
       }
       $100 = ($87|0)==($89|0);
       do {
        if ($100) {
         $$pre$i = (($87) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;
        } else {
         $101 = ($87>>>0)<($12>>>0);
         if ($101) {
          _abort();
          // unreachable;
         }
         $102 = (($87) + 8|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)==($11|0);
         if ($104) {
          $$pre$phi$iZ2D = $102;
          break;
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $105 = (($85) + 12|0);
       HEAP32[$105>>2] = $87;
       HEAP32[$$pre$phi$iZ2D>>2] = $85;
      } else {
       $$sum5 = (($10) + 16)|0;
       $106 = (($oldmem) + ($$sum5)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($oldmem) + ($$sum2728$i)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==($11|0);
       do {
        if ($110) {
         $$sum17 = (($10) + 12)|0;
         $120 = (($oldmem) + ($$sum17)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0|0);
         if ($122) {
          $$sum18 = (($10) + 8)|0;
          $123 = (($oldmem) + ($$sum18)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = ($124|0)==(0|0);
          if ($125) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $124;$RP$0$i = $123;
          }
         } else {
          $R$0$i = $121;$RP$0$i = $120;
         }
         while(1) {
          $126 = (($R$0$i) + 20|0);
          $127 = HEAP32[$126>>2]|0;
          $128 = ($127|0)==(0|0);
          if (!($128)) {
           $R$0$i = $127;$RP$0$i = $126;
           continue;
          }
          $129 = (($R$0$i) + 16|0);
          $130 = HEAP32[$129>>2]|0;
          $131 = ($130|0)==(0|0);
          if ($131) {
           break;
          } else {
           $R$0$i = $130;$RP$0$i = $129;
          }
         }
         $132 = ($RP$0$i>>>0)<($12>>>0);
         if ($132) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i>>2] = 0;
          $R$1$i = $R$0$i;
          break;
         }
        } else {
         $111 = (($oldmem) + ($10)|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($112>>>0)<($12>>>0);
         if ($113) {
          _abort();
          // unreachable;
         }
         $114 = (($112) + 12|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==($11|0);
         if (!($116)) {
          _abort();
          // unreachable;
         }
         $117 = (($109) + 8|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($118|0)==($11|0);
         if ($119) {
          HEAP32[$114>>2] = $109;
          HEAP32[$117>>2] = $112;
          $R$1$i = $109;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $133 = ($107|0)==(0|0);
       if (!($133)) {
        $$sum9 = (($10) + 20)|0;
        $134 = (($oldmem) + ($$sum9)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ((554600 + ($135<<2)|0) + 304|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($11|0)==($137|0);
        if ($138) {
         HEAP32[$136>>2] = $R$1$i;
         $cond$i = ($R$1$i|0)==(0|0);
         if ($cond$i) {
          $139 = 1 << $135;
          $140 = $139 ^ -1;
          $141 = HEAP32[((554600 + 4|0))>>2]|0;
          $142 = $141 & $140;
          HEAP32[((554600 + 4|0))>>2] = $142;
          break;
         }
        } else {
         $143 = HEAP32[((554600 + 16|0))>>2]|0;
         $144 = ($107>>>0)<($143>>>0);
         if ($144) {
          _abort();
          // unreachable;
         }
         $145 = (($107) + 16|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ($146|0)==($11|0);
         if ($147) {
          HEAP32[$145>>2] = $R$1$i;
         } else {
          $148 = (($107) + 20|0);
          HEAP32[$148>>2] = $R$1$i;
         }
         $149 = ($R$1$i|0)==(0|0);
         if ($149) {
          break;
         }
        }
        $150 = HEAP32[((554600 + 16|0))>>2]|0;
        $151 = ($R$1$i>>>0)<($150>>>0);
        if ($151) {
         _abort();
         // unreachable;
        }
        $152 = (($R$1$i) + 24|0);
        HEAP32[$152>>2] = $107;
        $$sum10 = (($10) + 8)|0;
        $153 = (($oldmem) + ($$sum10)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0|0);
        do {
         if (!($155)) {
          $156 = HEAP32[((554600 + 16|0))>>2]|0;
          $157 = ($154>>>0)<($156>>>0);
          if ($157) {
           _abort();
           // unreachable;
          } else {
           $158 = (($R$1$i) + 16|0);
           HEAP32[$158>>2] = $154;
           $159 = (($154) + 24|0);
           HEAP32[$159>>2] = $R$1$i;
           break;
          }
         }
        } while(0);
        $$sum11 = (($10) + 12)|0;
        $160 = (($oldmem) + ($$sum11)|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($161|0)==(0|0);
        if ($162) {
         break;
        }
        $163 = HEAP32[((554600 + 16|0))>>2]|0;
        $164 = ($161>>>0)<($163>>>0);
        if ($164) {
         _abort();
         // unreachable;
        } else {
         $165 = (($R$1$i) + 20|0);
         HEAP32[$165>>2] = $161;
         $166 = (($161) + 24|0);
         HEAP32[$166>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $167 = ($81>>>0)<(16);
     if ($167) {
      $168 = HEAP32[$8>>2]|0;
      $169 = $168 & 1;
      $170 = $79 | $169;
      $171 = $170 | 2;
      HEAP32[$8>>2] = $171;
      $$sum910$i = $79 | 4;
      $$sum16 = (($$sum910$i) + -8)|0;
      $172 = (($oldmem) + ($$sum16)|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 | 1;
      HEAP32[$172>>2] = $174;
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     } else {
      $$sum12 = (($22) + -8)|0;
      $175 = (($oldmem) + ($$sum12)|0);
      $176 = HEAP32[$8>>2]|0;
      $177 = $176 & 1;
      $178 = $177 | $22;
      $179 = $178 | 2;
      HEAP32[$8>>2] = $179;
      $$sum5$i13 = $22 | 4;
      $$sum14 = (($$sum5$i13) + -8)|0;
      $180 = (($oldmem) + ($$sum14)|0);
      $181 = $81 | 3;
      HEAP32[$180>>2] = $181;
      $$sum78$i = $79 | 4;
      $$sum15 = (($$sum78$i) + -8)|0;
      $182 = (($oldmem) + ($$sum15)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = $183 | 1;
      HEAP32[$182>>2] = $184;
      _dispose_chunk($175,$81);
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
   }
  }
 } while(0);
 $185 = (_malloc($bytes)|0);
 $186 = ($185|0)==(0|0);
 if ($186) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $187 = HEAP32[$8>>2]|0;
 $188 = $187 & -8;
 $189 = $187 & 3;
 $190 = ($189|0)==(0);
 $191 = $190 ? 8 : 4;
 $192 = (($188) - ($191))|0;
 $193 = ($192>>>0)<($bytes>>>0);
 $194 = $193 ? $192 : $bytes;
 _memcpy(($185|0),($oldmem|0),($194|0))|0;
 _free($oldmem);
 $mem$0 = $185;
 STACKTOP = sp;return ($mem$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((554600 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((554600 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((554600 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((554600 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[554600>>2]|0;
     $32 = $31 & $30;
     HEAP32[554600>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((554600 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((554600 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((554600 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((554600 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((554600 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((554600 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((554600 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((554600 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((554600 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((554600 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((554600 + 12|0))>>2] = $117;
   HEAP32[((554600 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((554600 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((554600 + 20|0))>>2] = 0;
   HEAP32[((554600 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((554600 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((554600 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((554600 + 8|0))>>2] = $125;
   HEAP32[((554600 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((554600 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[554600>>2]|0;
     $148 = $147 & $146;
     HEAP32[554600>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((554600 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((554600 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((554600 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((554600 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((554600 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((554600 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((554600 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((554600 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((554600 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((554600 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[554600>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[554600>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((554600 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((554600 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((554600 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((554600 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((554600 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((554600 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((554600 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((554600 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  _free($this);
 }
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (555128|0);
}
function runPostSets() {
 HEAP32[138792] = __ZTISt9exception;
}
function _rand_r(seedp) {
    seedp = seedp|0; 
    var val = 0;
    val = ((Math_imul(((HEAP32[((seedp)>>2)])|0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
    HEAP32[((seedp)>>2)]=val;
    return val|0;
}
function _rand() {
    return _rand_r(___rand_seed)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
    }
  

    function jsCall_iiii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(0,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(1,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(2,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(3,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(4,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(5,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(6,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(7,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(8,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(9,a1|0,a2|0,a3|0)|0;
    }

  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&127](a1|0);
    }
  

    function jsCall_vi_0(a1) {
      a1=a1|0;
      jsCall(0,a1|0);
    }

  

    function jsCall_vi_1(a1) {
      a1=a1|0;
      jsCall(1,a1|0);
    }

  

    function jsCall_vi_2(a1) {
      a1=a1|0;
      jsCall(2,a1|0);
    }

  

    function jsCall_vi_3(a1) {
      a1=a1|0;
      jsCall(3,a1|0);
    }

  

    function jsCall_vi_4(a1) {
      a1=a1|0;
      jsCall(4,a1|0);
    }

  

    function jsCall_vi_5(a1) {
      a1=a1|0;
      jsCall(5,a1|0);
    }

  

    function jsCall_vi_6(a1) {
      a1=a1|0;
      jsCall(6,a1|0);
    }

  

    function jsCall_vi_7(a1) {
      a1=a1|0;
      jsCall(7,a1|0);
    }

  

    function jsCall_vi_8(a1) {
      a1=a1|0;
      jsCall(8,a1|0);
    }

  

    function jsCall_vi_9(a1) {
      a1=a1|0;
      jsCall(9,a1|0);
    }

  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
    }
  

    function jsCall_vii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_vii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_vii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_vii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_vii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_vii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_vii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_vii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(7,a1|0,a2|0);
    }

  

    function jsCall_vii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(8,a1|0,a2|0);
    }

  

    function jsCall_vii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(9,a1|0,a2|0);
    }

  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&127](a1|0)|0;
    }
  

    function jsCall_ii_0(a1) {
      a1=a1|0;
      return jsCall(0,a1|0)|0;
    }

  

    function jsCall_ii_1(a1) {
      a1=a1|0;
      return jsCall(1,a1|0)|0;
    }

  

    function jsCall_ii_2(a1) {
      a1=a1|0;
      return jsCall(2,a1|0)|0;
    }

  

    function jsCall_ii_3(a1) {
      a1=a1|0;
      return jsCall(3,a1|0)|0;
    }

  

    function jsCall_ii_4(a1) {
      a1=a1|0;
      return jsCall(4,a1|0)|0;
    }

  

    function jsCall_ii_5(a1) {
      a1=a1|0;
      return jsCall(5,a1|0)|0;
    }

  

    function jsCall_ii_6(a1) {
      a1=a1|0;
      return jsCall(6,a1|0)|0;
    }

  

    function jsCall_ii_7(a1) {
      a1=a1|0;
      return jsCall(7,a1|0)|0;
    }

  

    function jsCall_ii_8(a1) {
      a1=a1|0;
      return jsCall(8,a1|0)|0;
    }

  

    function jsCall_ii_9(a1) {
      a1=a1|0;
      return jsCall(9,a1|0)|0;
    }

  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
    }
  

    function jsCall_viii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(2,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(3,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(4,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(5,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(6,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(7,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(8,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(9,a1|0,a2|0,a3|0);
    }

  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&31]();
    }
  

    function jsCall_v_0() {
      
      jsCall(0);
    }

  

    function jsCall_v_1() {
      
      jsCall(1);
    }

  

    function jsCall_v_2() {
      
      jsCall(2);
    }

  

    function jsCall_v_3() {
      
      jsCall(3);
    }

  

    function jsCall_v_4() {
      
      jsCall(4);
    }

  

    function jsCall_v_5() {
      
      jsCall(5);
    }

  

    function jsCall_v_6() {
      
      jsCall(6);
    }

  

    function jsCall_v_7() {
      
      jsCall(7);
    }

  

    function jsCall_v_8() {
      
      jsCall(8);
    }

  

    function jsCall_v_9() {
      
      jsCall(9);
    }

  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function jsCall_iiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function jsCall_iiiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
    }
  

    function jsCall_iii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(0,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(1,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(2,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(3,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(4,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(5,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(6,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(7,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(8,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(9,a1|0,a2|0)|0;
    }

  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
    }
  

    function jsCall_viiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0);
    }

  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function ___cxa_call_unexpected__wrapper(p0) { p0 = p0|0; ___cxa_call_unexpected(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b6() { ; nullFunc_v(6); }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(7);return 0; }
  function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0; }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9); }
  function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
  function b11(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0; }
  function b12(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,jsCall_iiii_2,b0,jsCall_iiii_3,b0,jsCall_iiii_4,b0,jsCall_iiii_5,b0,jsCall_iiii_6,b0,jsCall_iiii_7,b0,jsCall_iiii_8,b0,jsCall_iiii_9,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0
  ,b0,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,jsCall_viiiii_2,b1,jsCall_viiiii_3,b1,jsCall_viiiii_4,b1,jsCall_viiiii_5,b1,jsCall_viiiii_6,b1,jsCall_viiiii_7,b1,jsCall_viiiii_8,b1,jsCall_viiiii_9,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
  ,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,jsCall_vi_0,b2,jsCall_vi_1,b2,jsCall_vi_2,b2,jsCall_vi_3,b2,jsCall_vi_4,b2,jsCall_vi_5,b2,jsCall_vi_6,b2,jsCall_vi_7,b2,jsCall_vi_8,b2,jsCall_vi_9,b2,b2,b2,b2,_floor1_free_info,_floor1_free_look,b2,b2
  ,b2,b2,_floor0_free_info,_floor0_free_look,b2,b2,b2,b2,_res0_free_info,_res0_free_look,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_mapping0_free_info,b2,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2
  ,b2,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2,b2,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,b2,b2,b2,b2,b2,___cxa_call_unexpected__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,jsCall_vii_0,b3,jsCall_vii_1,b3,jsCall_vii_2,b3,jsCall_vii_3,b3,jsCall_vii_4,b3,jsCall_vii_5,b3,jsCall_vii_6,b3,jsCall_vii_7,b3,jsCall_vii_8,b3,jsCall_vii_9,b3,_floor1_pack,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_res0_pack,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,jsCall_ii_0,b4,jsCall_ii_1,b4,jsCall_ii_2,b4,jsCall_ii_3,b4,jsCall_ii_4,b4,jsCall_ii_5,b4,jsCall_ii_6,b4,jsCall_ii_7,b4,jsCall_ii_8,b4,jsCall_ii_9,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_mapping0_forward,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viii = [b5,b5,jsCall_viii_0,b5,jsCall_viii_1,b5,jsCall_viii_2,b5,jsCall_viii_3,b5,jsCall_viii_4,b5,jsCall_viii_5,b5,jsCall_viii_6,b5,jsCall_viii_7,b5,jsCall_viii_8,b5,jsCall_viii_9,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mapping0_pack,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___cxa_throw__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_v = [b6,b6,jsCall_v_0,b6,jsCall_v_1,b6,jsCall_v_2,b6,jsCall_v_3,b6,jsCall_v_4,b6,jsCall_v_5,b6,jsCall_v_6,b6,jsCall_v_7,b6,jsCall_v_8,b6,jsCall_v_9,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiii = [b7,b7,jsCall_iiiiiiiii_0,b7,jsCall_iiiiiiiii_1,b7,jsCall_iiiiiiiii_2,b7,jsCall_iiiiiiiii_3,b7,jsCall_iiiiiiiii_4,b7,jsCall_iiiiiiiii_5,b7,jsCall_iiiiiiiii_6,b7,jsCall_iiiiiiiii_7,b7,jsCall_iiiiiiiii_8,b7,jsCall_iiiiiiiii_9,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_res1_forward,b7,b7,_res2_forward,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_iiiii = [b8,b8,jsCall_iiiii_0,b8,jsCall_iiiii_1,b8,jsCall_iiiii_2,b8,jsCall_iiiii_3,b8,jsCall_iiiii_4,b8,jsCall_iiiii_5,b8,jsCall_iiiii_6,b8,jsCall_iiiii_7,b8,jsCall_iiiii_8,b8,jsCall_iiiii_9,b8,b8,b8,b8,b8,b8,b8,_floor1_inverse2
  ,b8,b8,b8,b8,b8,_floor0_inverse2,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_vorbis_book_decodevs_add,_vorbis_book_decodev_add,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiii = [b9,b9,jsCall_viiiiii_0,b9,jsCall_viiiiii_1,b9,jsCall_viiiiii_2,b9,jsCall_viiiiii_3,b9,jsCall_viiiiii_4,b9,jsCall_viiiiii_5,b9,jsCall_viiiiii_6,b9,jsCall_viiiiii_7,b9,jsCall_viiiiii_8,b9,jsCall_viiiiii_9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9
  ,b9,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_iii = [b10,b10,jsCall_iii_0,b10,jsCall_iii_1,b10,jsCall_iii_2,b10,jsCall_iii_3,b10,jsCall_iii_4,b10,jsCall_iii_5,b10,jsCall_iii_6,b10,jsCall_iii_7,b10,jsCall_iii_8,b10,jsCall_iii_9,b10,b10,_floor1_unpack,_floor1_look,b10,b10,_floor1_inverse1,b10
  ,_floor0_unpack,_floor0_look,b10,b10,_floor0_inverse1,b10,_res0_unpack,_res0_look,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_mapping0_unpack,b10,b10,_mapping0_inverse,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_apsort,_icomp,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_iiiiii = [b11,b11,jsCall_iiiiii_0,b11,jsCall_iiiiii_1,b11,jsCall_iiiiii_2,b11,jsCall_iiiiii_3,b11,jsCall_iiiiii_4,b11,jsCall_iiiiii_5,b11,jsCall_iiiiii_6,b11,jsCall_iiiiii_7,b11,jsCall_iiiiii_8,b11,jsCall_iiiiii_9,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_res0_inverse,b11,_res1_class,b11,_res1_inverse,_res2_class,b11,_res2_inverse,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiii = [b12,b12,jsCall_viiii_0,b12,jsCall_viiii_1,b12,jsCall_viiii_2,b12,jsCall_viiii_3,b12,jsCall_viiii_4,b12,jsCall_viiii_5,b12,jsCall_viiii_6,b12,jsCall_viiii_7,b12,jsCall_viiii_8,b12,jsCall_viiii_9,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12];

    return { _strlen: _strlen, _free: _free, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _lexy_encoder_finish: _lexy_encoder_finish, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _lexy_encoder_start: _lexy_encoder_start, _lexy_encoder_write: _lexy_encoder_write, _bitshift64Lshr: _bitshift64Lshr, ___getTypeName: ___getTypeName, _bitshift64Shl: _bitshift64Shl, _strcpy: _strcpy, _rand: _rand, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "__embind_register_memory_view": __embind_register_memory_view, "__reallyNegative": __reallyNegative, "___cxa_is_number_type": ___cxa_is_number_type, "___gxx_personality_v0": ___gxx_personality_v0, "__embind_register_integer": __embind_register_integer, "_emscripten_asm_const_int": _emscripten_asm_const_int, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_atan": _atan, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "___setErrNo": ___setErrNo, "_fabsf": _fabsf, "_sbrk": _sbrk, "_emscripten_asm_const": _emscripten_asm_const, "__embind_register_void": __embind_register_void, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_srand": _srand, "__embind_register_std_string": __embind_register_std_string, "___cxa_call_unexpected": ___cxa_call_unexpected, "___cxa_throw": ___cxa_throw, "__embind_register_emval": __embind_register_emval, "_cos": _cos, "_fputs": _fputs, "_puts": _puts, "_mkport": _mkport, "__embind_register_float": __embind_register_float, "_log": _log, "__embind_register_std_wstring": __embind_register_std_wstring, "_write": _write, "___errno_location": ___errno_location, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "_printf": _printf, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "_fputc": _fputc, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_ceil": _ceil, "__formatString": __formatString, "_rint": _rint, "_sqrt": _sqrt, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _lexy_encoder_finish = Module["_lexy_encoder_finish"] = asm["_lexy_encoder_finish"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lexy_encoder_start = Module["_lexy_encoder_start"] = asm["_lexy_encoder_start"];
var _lexy_encoder_write = Module["_lexy_encoder_write"] = asm["_lexy_encoder_write"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _rand = Module["_rand"] = asm["_rand"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}
/*global Module, asm*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*global requireHandle*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');
var PureVirtualError = Module['PureVirtualError'] = extendError(BindingError, 'PureVirtualError');

function throwInternalError(message) {
    throw new InternalError(message);
}

function throwBindingError(message) {
    throw new BindingError(message);
}

function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);

    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}

// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
}

/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.

   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }

        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}

// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
}


// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}

function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

// raw pointer -> instance
var registeredInstances = {};

function getBasestPointer(class_, ptr) {
    if (ptr === undefined) {
        throwBindingError('ptr should not be undefined');
    }
    while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
    }
    return ptr;
}

function registerInheritedInstance(class_, ptr, instance) {
    ptr = getBasestPointer(class_, ptr);
    if (registeredInstances.hasOwnProperty(ptr)) {
        throwBindingError('Tried to register registered instance: ' + ptr);
    } else {
        registeredInstances[ptr] = instance;
    }
}

function unregisterInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    if (registeredInstances.hasOwnProperty(ptr)) {
        delete registeredInstances[ptr];
    } else {
        throwBindingError('Tried to unregister unregistered instance: ' + ptr);
    }
}

function getInheritedInstance(class_, ptr) {
    ptr = getBasestPointer(class_, ptr);
    return registeredInstances[ptr];
}

function getInheritedInstanceCount() {
    return Object.keys(registeredInstances).length;
}
Module['getInheritedInstanceCount'] = getInheritedInstanceCount;

function getLiveInheritedInstances() {
    var rv = [];
    for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
            rv.push(registeredInstances[k]);
        }
    }
    return rv;
}
Module['getLiveInheritedInstances'] = getLiveInheritedInstances;

// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};

// typeID -> [callback]
var awaitingDependencies = {};

// typeID -> [dependentTypes]
var typeDependencies = {};

// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};

function registerType(rawType, registeredInstance) {
    if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
    }

    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}

var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();

function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}

function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'argPackAdvance': 0,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': function(pointer) {
            // TODO: if heap is fixed (like in asm.js) this could be executed outside
            var heap;
            if (size === 1) {
                heap = HEAP8;
            } else if (size === 2) {
                heap = HEAP16;
            } else if (size === 4) {
                heap = HEAP32;
            } else {
                throw new TypeError("Unknown boolean type size: " + name);
            }
            return this['fromWireType'](heap[pointer >> shift]);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function getShiftFromSize(size) {
    switch (size) {
        case 1: return 0;
        case 2: return 1;
        case 4: return 2;
        case 8: return 3;
        default:
            throw new TypeError('Unknown type size: ' + size);
    }
}

function integerReadValueFromPointer(name, shift, signed) {
    switch (shift) {
        case 0: return function(pointer) {
            var heap = signed ? HEAP8 : HEAPU8;
            return this['fromWireType'](heap[pointer]);
        };
        case 1: return function(pointer) {
            var heap = signed ? HEAP16 : HEAPU16;
            return this['fromWireType'](heap[pointer >> 1]);
        };
        case 2: return function(pointer) {
            var heap = signed ? HEAP32 : HEAPU32;
            return this['fromWireType'](heap[pointer >> 2]);
        };
        default:
            throw new TypeError("Unknown integer type: " + name);
    }
}

function floatReadValueFromPointer(name, shift) {
    switch (shift) {
        case 2: return function(pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2]);
        };
        case 3: return function(pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3]);
        };
        default:
            throw new TypeError("Unknown float type: " + name);
    }
}

// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }

    var shift = getShiftFromSize(size);

    registerType(primitiveType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
    });
}



function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
    });
}

// For types whose wire types are 32-bit pointers.
function simpleReadValueFromPointer(pointer) {
    return this['fromWireType'](HEAPU32[pointer >> 2]);
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }

            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor

        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
    });
}

function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
    ];

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
        'argPackAdvance': 16,
        'readValueFromPointer': function(ptr) {
            return this['fromWireType'](ptr);
        },
    });
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}

// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:

     function dummy() {};

     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }

    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount - 2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }

    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";

    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;

    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }

    for(var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    var returns = (argTypes[0].name !== "void");

    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";

    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }

    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function requireFunction(signature, rawFunction) {
    signature = readLatin1String(signature);
    var fp;
    // asm.js does not define FUNCTION_TABLE
    if (typeof FUNCTION_TABLE === "undefined") {
        // asm.js does not give direct access to the function tables,
        // and thus we must go through the dynCall interface which allows
        // calling into a signature's function table by pointer value.
        //
        // https://github.com/dherman/asm.js/issues/83
        //
        // This has three main penalties:
        // - dynCall is another function call in the path from JavaScript to C++.
        // - JITs may not predict through the function table indirection at runtime.
        // - Function.prototype.bind generally benchmarks poorly relative to
        //   function objects, but using 'arguments' would confound JITs and
        //   possibly allocate.
        var dc = asm['dynCall_' + signature];
        if (dc === undefined) {
            // We will always enter this branch if the signature
            // contains 'f' and PRECISE_F32 is not enabled.
            //
            // Try again, replacing 'f' with 'd'.
            dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
            if (dc === undefined) {
                throwBindingError("No dynCall invoker for signature: " + signature);
            }
        }
        fp = dc.bind(undefined, rawFunction);
    } else {
        fp = FUNCTION_TABLE[rawFunction];
    }

    if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
    }
    return fp;
}

function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    
    rawInvoker = requireFunction(signature, rawInvoker);

    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);

    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}

var tupleRegistrations = {};

function __embind_register_value_array(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: requireFunction(constructorSignature, rawConstructor),
        rawDestructor: requireFunction(destructorSignature, rawDestructor),
        elements: [],
    };
}

function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: requireFunction(setterSignature, setter),
        setterContext: setterContext,
    });
}

function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;

    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var structRegistrations = {};

function __embind_register_value_object(
    rawType,
    name,
    constructorSignature,
    rawConstructor,
    destructorSignature,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: requireFunction(constructorSignature, rawConstructor),
        rawDestructor: requireFunction(destructorSignature, rawDestructor),
        fields: [],
    };
}

function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: requireFunction(setterSignature, setter),
        setterContext: setterContext,
    });
}

function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }

        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;

            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;

            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;

            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};

// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
    }
}

RegisteredPointer.prototype.getPointee = function getPointee(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};

RegisteredPointer.prototype.destructor = function destructor(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};

RegisteredPointer.prototype['argPackAdvance'] = 8;
RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;

RegisteredPointer.prototype['deleteObject'] = function deleteObject(handle) {
    if (handle !== null) {
        handle['delete']();
    }
};

RegisteredPointer.prototype['fromWireType'] = function fromWireType(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
    if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
            registeredInstance.$$.ptr = rawPointer;
            registeredInstance.$$.smartPtr = ptr;
            return registeredInstance['clone']();
        } else {
            // else, just increment reference count on existing object
            // it already has a reference to the smart pointer
            var rv = registeredInstance['clone']();
            this.destructor(ptr);
            return rv;
        }
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}

// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}

function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}

ClassHandle.prototype['isAliasOf'] = function isAliasOf(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }

    return leftClass === rightClass && left === right;
};

function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

ClassHandle.prototype['clone'] = function clone() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
    } else {
        var clone = Object.create(Object.getPrototypeOf(this), {
            $$: {
                value: shallowCopy(this.$$),
            }
        });

        clone.$$.count.value += 1;
        return clone;
    }
};

function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}

ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }

    this.$$.count.value -= 1;
    var toDelete = 0 === this.$$.count.value;
    if (toDelete) {
        runDestructor(this);
    }
    if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
    }
};

var deletionQueue = [];

ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};

ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;

var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};

function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
    this.pureVirtualFunctions = [];
}

function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        if (Object.prototype.hasOwnProperty.call(o, k)) {
            rv[k] = o[k];
        }
    }
    return rv;
}

function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualTypeSignature,
    getActualType,
    upcastSignature,
    upcast,
    downcastSignature,
    downcast,
    name,
    destructorSignature,
    rawDestructor
) {
    name = readLatin1String(name);
    getActualType = requireFunction(getActualTypeSignature, getActualType);
    if (upcast) {
        upcast = requireFunction(upcastSignature, upcast);
    }
    if (downcast) {
        downcast = requireFunction(downcastSignature, downcast);
    }
    rawDestructor = requireFunction(destructorSignature, rawDestructor);
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);

            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = requireFunction(invokerSignature, invoker);

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }

                var ptr = invoker.apply(null, args);
                runDestructors(destructors);

                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }

    var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
    if (rv === null) {
        return null;
    }
    return desiredClass.downcast(rv);
}

function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}

function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }

    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    invokerSignature,
    rawInvoker,
    context,
    isPureVirtual
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = requireFunction(invokerSignature, rawInvoker);

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
        }

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {

            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount - 2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}

function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getterSignature,
    getter,
    getterContext,
    setterArgumentType,
    setterSignature,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = requireFunction(getterSignature, getter);

    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }

        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);

        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };

            if (setter) {
                setter = requireFunction(setterSignature, setter);
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }

            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });

        return [];
    });
}

function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    invokerSignature,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = requireFunction(invokerSignature, rawInvoker);
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        function unboundTypesHandler() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
    constructorName = readLatin1String(constructorName);
    wrapperType = requireRegisteredType(wrapperType, 'wrapper');
    properties = requireHandle(properties);

    var arraySlice = [].slice;

    var registeredClass = wrapperType.registeredClass;
    var wrapperPrototype = registeredClass.instancePrototype;
    var baseClass = registeredClass.baseClass;
    var baseClassPrototype = baseClass.instancePrototype;
    var baseConstructor = registeredClass.baseClass.constructor;
    var ctor = createNamedFunction(constructorName, function() {
        registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
            if (this[name] === baseClassPrototype[name]) {
                throw new PureVirtualError('Pure virtual function ' + name + ' must be implemented in JavaScript');
            }
        }.bind(this));

        Object.defineProperty(this, '__parent', {
            value: wrapperPrototype
        });
        this.__construct.apply(this, arraySlice.call(arguments));
    });

    // It's a little nasty that we're modifying the wrapper prototype here.

    wrapperPrototype.__construct = function __construct() {
        if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __construct");
        }

        var inner = baseConstructor.implement.apply(
            undefined,
            [this].concat(arraySlice.call(arguments)));
        var $$ = inner.$$;
        inner.notifyOnDestruction();
        $$.preservePointerOnDelete = true;
        Object.defineProperty(this, '$$', {
            value: $$
        });
        registerInheritedInstance(registeredClass, $$.ptr, this);
    };

    wrapperPrototype.__destruct = function __destruct() {
        if (this === wrapperPrototype) {
            throwBindingError("Pass correct 'this' to __destruct");
        }

        unregisterInheritedInstance(registeredClass, this.$$.ptr);
    };

    ctor.prototype = Object.create(wrapperPrototype);
    for (var p in properties) {
        ctor.prototype[p] = properties[p];
    }
    return __emval_register(ctor);
}

var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}

function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    getPointeeSignature,
    rawGetPointee,
    constructorSignature,
    rawConstructor,
    shareSignature,
    rawShare,
    destructorSignature,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = requireFunction(getPointeeSignature, rawGetPointee);
    rawConstructor = requireFunction(constructorSignature, rawConstructor);
    rawShare = requireFunction(shareSignature, rawShare);
    rawDestructor = requireFunction(destructorSignature, rawDestructor);

    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];

        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}

function __embind_register_enum(
    rawType,
    name,
    size,
    isSigned
) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);

    function constructor() {
    }
    constructor.values = {};

    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, isSigned),
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}

function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);

    var Enum = enumType.constructor;

    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}

function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError, runDestructors*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */

var Module = Module || {};

var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];

// Public JS API

/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};

/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};

// Private C++ API

var _emval_symbols = {}; // address -> string

function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}

function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}

function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
    return _emval_handle_array[handle].value;
}

function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;

    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}

function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}

function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}

function __emval_run_destructors(handle) {
    var destructors = _emval_handle_array[handle].value;
    runDestructors(destructors);
    __emval_decref(handle);
}

function __emval_new_array() {
    return __emval_register([]);
}

function __emval_new_object() {
    return __emval_register({});
}

function __emval_undefined() {
    return __emval_register(undefined);
}

function __emval_null() {
    return __emval_register(null);
}

function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}

function __emval_take_value(type, argv) {
    type = requireRegisteredType(type, '_emval_take_value');
    var v = type['readValueFromPointer'](argv);
    return __emval_register(v);
}

var __newers = {}; // arity -> function


function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(constructor, argTypes, args) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.readValueFromPointer(args);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.readValueFromPointer(args + 8);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.readValueFromPointer(args + 16);
        var obj = new constructor(arg0, arg1, arg2);
        return __emval_register(obj);
    } */

    var argsList = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
    }

    var functionBody =
        "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";

    for(var i = 0; i < argCount; ++i) {
        functionBody +=
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
            "args += argType"+i+".argPackAdvance;\n";
    }
    functionBody +=
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";

    /*jshint evil:true*/
    return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
        requireRegisteredType, HEAP32, __emval_register);
}

function __emval_new(handle, argCount, argTypes, args) {
    handle = requireHandle(handle);

    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }

    return newer(handle, argTypes, args);
}

// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();

function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}

function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}

function __emval_get_property(handle, key) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    return __emval_register(handle[key]);
}

function __emval_set_property(handle, key, value) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    value = requireHandle(value);
    handle[key] = value;
}

function __emval_as(handle, returnType, destructorsRef) {
    handle = requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    var rd = __emval_register(destructors);
    HEAP32[destructorsRef >> 2] = rd;
    return returnType['toWireType'](destructors, handle);
}

function __emval_call(handle, argCount, argTypes, argv) {
    handle = requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);

    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type['readValueFromPointer'](argv);
        argv += type.argPackAdvance;
    }

    var rv = handle.apply(undefined, args);
    return __emval_register(rv);
}

function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}

function allocateDestructors(destructorsRef) {
    var destructors = [];
    HEAP32[destructorsRef >> 2] = __emval_register(destructors);
    return destructors;
}

// Leave id 0 undefined.  It's not a big deal, but might be confusing
// to have null be a valid method caller.
var methodCallers = [undefined];

function addMethodCaller(caller) {
    var id = methodCallers.length;
    methodCallers.push(caller);
    return id;
}

function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);

    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";

    var params = ["retType"];
    var args = [retType];

    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
    }

    var functionBody =
        "return function (handle, name, destructors, args) {\n";

    for (var i = 0; i < argCount - 1; ++i) {
        functionBody +=
        "    var arg" + i + " = argType" + i + ".readValueFromPointer(args);\n" +
        "    args += argType" + i + ".argPackAdvance;\n";
    }
    functionBody +=
        "    var rv = handle[name](" + argsList + ");\n";
    for (var i = 0; i < argCount - 1; ++i) {
        if (types[i + 1]['deleteObject']) {
            functionBody +=
            "    argType" + i + ".deleteObject(arg" + i + ");\n";
        }
    }
    functionBody += 
        "    return retType.toWireType(destructors, rv);\n" +
        "};\n";

    params.push(functionBody);
    var invokerFunction = new_(Function, params).apply(null, args);
    return addMethodCaller(createNamedFunction(signatureName, invokerFunction));
}

function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
    caller = methodCallers[caller];
    handle = requireHandle(handle);
    methodName = getStringOrSymbol(methodName);
    return caller(handle, methodName, allocateDestructors(destructorsRef), args);
}

function __emval_has_function(handle, name, classType) {
    handle = requireHandle(handle);
    name = getStringOrSymbol(name);
    classType = requireRegisteredType(classType, 'class wrapper filter');

    var filter = classType.registeredClass.instancePrototype[name];
    return (handle[name] instanceof Function) && (filter === undefined || handle[name] !== filter);
}

function __emval_typeof(handle) {
    handle = requireHandle(handle);
    return __emval_register(typeof handle);
}


if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



onmessage = function(msg) {
	switch (msg.data['funcName']) {
		case "lexy_encoder_start":
			var func = Module['_' + msg.data['funcName']];
			if(!func) {
				throw 'invalid worker function to call: ' + msg.data['funcName'];
			};
			func.apply(this,msg.data['data']);
		break;
		case "lexy_encoder_write":
			var leftChannel  = msg.data['data'][0],
			    rightChannel = msg.data['data'][1],
			    length       = msg.data['data'][0].length,
			    bytesPerEl   = leftChannel.BYTES_PER_ELEMENT,
			    bufLeft      = Module._malloc(length*bytesPerEl*2),
			    bufRight     = bufLeft + (length*bytesPerEl);
			
			Module.HEAPF32.set(leftChannel,bufLeft);
			Module.HEAPF32.set(rightChannel,bufRight);
			Module.ccall('lexy_encoder_write','number',['number','number','number'],[bufLeft<<2,bufRight<<2,length]);
			Module._free(bufLeft);
		break;
	}
}